Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; 
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CreditCardPosting
    PROPERTIES
      Name                #CreditCardPosting
      Origin              #{4042E9C6-0422-4805-9BCC-9FC8A46D4B75}
    ENDPROPERTIES
    
    METHODS
      SOURCE #ApplyPayment
        #void ApplyPayment()
        #{
        #    SpecTrans                   specTrans;
        #    CustTrans                   custTrans;
        #    CustTransOpen               custTransOpen;
        #    custTrans                   payCustTrans;
        #    custTransOpen               payCustTransOpen;
        #    LedgerJournalTrans          ledgerJournalTrans;
        #    CreditCardTrans             ccTransLocal;
        #    CreditCardParameters        ccParams;
        #    SpecTransManager            specTransManager;
        #    CustVendOpenTransManager    transManager;
        #    CustTable                   custTable;
        #    CustInvoiceJour             custInvoiceJour = this.parmInvoiceJournalPost().parmJournalTable();
        #    ;
        #
        #    ttsbegin;
        #    while select ccTransLocal
        #        where ccTransLocal.SalesId == this.parmSalesTable().SalesId
        #              && ccTransLocal.Result  == '0'
        #              && (ccTransLocal.TransType == CreditCardTrxType::D
        #              || ccTransLocal.TransType == CreditCardTrxType::S
        #              || ccTransLocal.TransType == CreditCardTrxType::c)
        #
        #    {
        #        ccParams = CreditCardParameters::findParameterWithTerminal(ccTransLocal.TerminalId);
        #
        #        if (ccTransLocal && ccParams.ApplyPayment)
        #        {
        #
        #            select recId,Invoice,AmountCur,CurrencyCode,AccountNum from custTrans where custTrans.Invoice == CustInvoiceJour.InvoiceId
        #                && custTrans.AccountNum == custInvoiceJour.InvoiceAccount;
        #
        #            if (custTrans)
        #            {
        #                select forupdate custTransOpen where custTransOpen.RefRecId == custTrans.RecId;
        #
        #                if (custTransOpen && custTransOpen.AmountCur >= ccTransLocal.AmountCur
        #                    && !specTrans::existByRef(custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId))
        #                {
        #                    select count(recId) from ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #
        #                    //..if more than one record, we down shift to see if the exact amount is there
        #                    if (ledgerJournalTrans.RecId > 1)
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID
        #                            && ledgerJournalTrans.AmountCurCredit == specTrans.Balance01;
        #                    }
        #                    else
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #                    }
        #
        #                    specTrans = specTrans::findBySpec(ledgerJournalTrans.Company(),ledgerJournalTrans.TableId,ledgerJournalTrans.RecId);
        #
        #                    //--> Ledger voucher is already in use
        #                    if (specTrans)
        #                    {
        #                        continue;
        #                    }
        #
        #                    if (LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Posted == NoYes::No
        #                        && ledgerJournalTrans.RecId != 0)
        #                    {
        #                        ledgerJournalTrans.MarkedInvoice        = custTrans.Invoice;
        #                        ledgerJournalTrans.MarkedInvoiceCompany = custTrans.company();
        #                        ledgerJournalTrans.MarkedInvoiceRecId   = custTransOpen.RecId;
        #                        ledgerJournalTrans.SettleVoucher        = SettlementType::SelectedTransact;
        #
        #                        specTransManager = SpecTransManager::construct(ledgerJournalTrans);
        #
        #                        specTransManager.insert(
        #                            custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId,
        #                            custTransOpen.AmountCur,
        #                            custtrans.CurrencyCode);
        #
        #                        ledgerJournalTrans.update();
        #
        #
        #                    }
        #                    else
        #                    {
        #                        select AmountCur,CurrencyCode,Voucher,AccountNum,RecId from payCustTrans
        #                            where payCustTrans.Voucher == ledgerJournalTrans.Voucher;
        #
        #                        select payCustTransOpen
        #                            where payCustTransOpen.RefRecId == payCustTrans.RecId;
        #
        #                        if (payCustTransOpen && abs(payCustTransOpen.AmountCur) >= custTransOpen.AmountCur
        #                            && payCustTrans.CurrencyCode == custTrans.CurrencyCode)
        #                        {
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #
        #                            custTable = CustTable::find(custTrans.AccountNum);
        #
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #                            //--Update invoice's open trans
        #
        #                            if (custTransOpen && payCustTrans)
        #                            {
        #                                try
        #                                {
        #                                    transManager.updateTransMarked(custTransOpen,NoYes::Yes);
        #                                    transManager.updateTransMarked(payCustTransOpen,NoYes::Yes);
        #                                    transManager.settleMarkedTrans();
        #                                    break;
        #                                }
        #                                catch (Exception::Error)
        #                                {
        #                                    continue;
        #                                }
        #                            }
        #                        }
        #
        #                    }
        #                }
        #
        #            }
        #
        #
        #        }
        #    }
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #ApplyPaymentProject
        #void ApplyPaymentProject()
        #{
        #    SpecTrans                   specTrans;
        #    CustTrans                   custTrans;
        #    CustTransOpen               custTransOpen;
        #    custTrans                   payCustTrans;
        #    custTransOpen               payCustTransOpen;
        #    LedgerJournalTrans          ledgerJournalTrans;
        #    CreditCardTrans             ccTransLocal;
        #    CreditCardParameters        ccParams;
        #    SpecTransManager            specTransManager;
        #    CustVendOpenTransManager    transManager;
        #    CustTable                   custTable;
        #    ;
        #
        #    ttsbegin;
        #    while select ccTransLocal
        #        where ccTransLocal.ProjProposalId == this.parmProjProposalJour().ProposalId
        #              && ccTransLocal.Result  == '0'
        #              && (ccTransLocal.TransType == CreditCardTrxType::D
        #              || ccTransLocal.TransType == CreditCardTrxType::S
        #              || ccTransLocal.TransType == CreditCardTrxType::c)
        #
        #    {
        #        ccParams = CreditCardParameters::findParameterWithTerminal(ccTransLocal.TerminalId);
        #
        #        if (ccTransLocal && ccParams.ApplyPayment)
        #        {
        #
        #            select recId,Invoice,AmountCur,CurrencyCode,AccountNum from custTrans where custTrans.Invoice == this.parmProjProposalJour().ProjInvoiceId
        #                && custTrans.AccountNum == this.parmProjProposalJour().InvoiceAccount;
        #
        #            if (custTrans)
        #            {
        #                select forupdate custTransOpen where custTransOpen.RefRecId == custTrans.RecId;
        #
        #                if (custTransOpen && custTransOpen.AmountCur >= ccTransLocal.AmountCur
        #                    && !specTrans::existByRef(custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId))
        #                {
        #                    select count(recId) from ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #
        #                    //..if more than one record, we down shift to see if the exact amount is there
        #                    if (ledgerJournalTrans.RecId > 1)
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID
        #                            && ledgerJournalTrans.AmountCurCredit == specTrans.Balance01;
        #                    }
        #                    else
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #                    }
        #
        #                    specTrans = specTrans::findBySpec(ledgerJournalTrans.Company(),ledgerJournalTrans.TableId,ledgerJournalTrans.RecId);
        #
        #                    //--> Ledger voucher is already in use
        #                    if (specTrans)
        #                    {
        #                        continue;
        #                    }
        #
        #                    if (LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Posted == NoYes::No
        #                        && ledgerJournalTrans.RecId != 0)
        #                    {
        #                        ledgerJournalTrans.MarkedInvoice        = custTrans.Invoice;
        #                        ledgerJournalTrans.MarkedInvoiceCompany = custTrans.company();
        #                        ledgerJournalTrans.MarkedInvoiceRecId   = custTransOpen.RecId;
        #                        ledgerJournalTrans.SettleVoucher        = SettlementType::SelectedTransact;
        #
        #                        specTransManager = SpecTransManager::construct(ledgerJournalTrans);
        #
        #                        specTransManager.insert(
        #                            custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId,
        #                            custTransOpen.AmountCur,
        #                            custtrans.CurrencyCode);
        #
        #                        ledgerJournalTrans.update();
        #
        #
        #                    }
        #                    else
        #                    {
        #                        select AmountCur,CurrencyCode,Voucher,AccountNum,RecId from payCustTrans
        #                            where payCustTrans.Voucher == ledgerJournalTrans.Voucher;
        #
        #                        select payCustTransOpen
        #                            where payCustTransOpen.RefRecId == payCustTrans.RecId;
        #
        #                        if (abs(payCustTransOpen.AmountCur) >= custTransOpen.AmountCur
        #                            && payCustTrans.CurrencyCode == custTrans.CurrencyCode)
        #                        {
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #
        #                            custTable = CustTable::find(custTrans.AccountNum);
        #
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #                            //--Update invoice's open trans
        #
        #                            if (custTransOpen && payCustTrans)
        #                            {
        #                                try
        #                                {
        #                                    transManager.updateTransMarked(custTransOpen,NoYes::Yes);
        #                                    transManager.updateTransMarked(payCustTransOpen,NoYes::Yes);
        #                                    transManager.settleMarkedTrans();
        #                                    break;
        #                                }
        #                                catch (Exception::Error)
        #                                {
        #                                    continue;
        #                                }
        #                            }
        #                        }
        #
        #                    }
        #                }
        #
        #            }
        #
        #
        #        }
        #    }
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #captureCCRegisteredCredit
        #boolean captureCCRegisteredCredit()
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardParameters    ccParams;
        #    SalesTableCC            salesTableCC;
        #    NoYes                   ret = true;
        #    CustInvoiceJour         custInvoiceJour;
        #    ;
        #
        #    if (salesTable.salesId != '')
        #    {
        #        while select salesTableCC where salesTableCC.SalesId == salesTable.salesId
        #            && salesTableCC.Cancelled == NoYes::No
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::C
        #            && salesTableCC.Registered == NoYes::Yes
        #            && salesTableCC.Processed == NoYes::No
        #        {
        #            if (!salesTableCC)
        #                throw error(strFmt("@ACC162", salesTable.salesId));
        #
        #            ccParams = CreditCardParameters::findParameter();
        #
        #            try
        #            {
        #                ttsbegin;
        #                //<--Create new transaction record
        #                select forupdate ccTrans where ccTrans.SalesId == salesTable.SalesId
        #                    && ccTrans.Registered == NoYes::Yes
        #                    && ccTrans.TransID == salesTableCC.TransID;
        #
        #                if (!ccTrans)
        #                    throw error("@ACC1612");
        #                //<--Check for problems
        #                salesTableCC::checkForErrors(salesTableCC,salesTable);
        #
        #                custInvoiceJour = this.parmInvoiceJournalPost().parmJournalTable();
        #                ccTrans.InvoiceId = custInvoiceJour.InvoiceId;
        #                //<-- create Credit Card Transaction
        #                ccTrans.AmountCur = custInvoiceJour.InvoiceAmount;
        #                ccTrans.AmountMST = custInvoiceJour.InvoiceAmountMST;
        #                ccTrans = CreditCardAdv::construct(ccTrans);
        #
        #                select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #                SalesTableCC::updateTransForCredit(ccTransNew,salesTableCC);
        #
        #                if (ccTrans.result != '0')
        #                {
        #                    ret = checkFailed(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #                }
        #
        #                ccTrans.update();
        #                ttscommit;
        #            }
        #            catch (Exception::Error)
        #            {
        #                select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #                SalesTableCC::updateTransForCredit(ccTransNew,salesTableCC);
        #            }
        #
        #
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #captureCreditTrans
        #private container captureCreditTrans(CreditCardCaptureId     captureId,
        #                        SalesTableCC            salesTableCC,
        #                        AmountMST               processAmt,
        #                        AmountMST               amountMSTCC)
        #{
        #    CreditCardPosting       posting = new CreditCardPosting();
        #    CustInvoiceJour         custInvoiceJour;
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardTrans         ccTransParam;
        #    CreditCardParameters    ccParams;
        #    SalesTableCC            dupSalesTableCC;
        #    AmountMST               amountRemain;
        #    TransDate               expDate;
        #    NoYes                   reCap;
        #    NoYes                   status = true;
        #    ConfigValues            ret;
        #    NoYes                   postingTypeFlag;
        #    CreditCardOrderHoldTable    orderHoldTable;
        #    MCRHoldCodeTrans        holdCodeTrans;
        #    Total                   totalCur = Currency::curAmount2CurAmount(amountMSTCC,
        #                                    salesTotals.CurrencyCode(),
        #                                    CompanyInfo::standardCurrency());
        #
        #    ;
        #    //--> Save SalesTable
        #    posting.parmSalesTable(salesTable::find(salesTableCC.SalesId));
        #
        #    //--> Store total posting for capture total tracking
        #    amountRemain = processAmt;
        #
        #
        #    if (salesTableCC.Cancelled == NoYes::Yes
        #        && salesTableCC.Captured == NoYes::No)
        #    {
        #        //Truly cancelled.  Move on.  We return the processAmt so it can be used on the next
        #        //Transaction records, if it exists.
        #        return [processAmt,false];
        #    }
        #
        #    //--> Retrieve parameters for each transaction
        #    ccTransParam = CreditCardTrans::find(salesTableCC.TransID);
        #    ccParams = CreditCardParameters::findParameterWithTerminal(ccTransParam.TerminalId);
        #
        #    //--> Return if no auth/capture
        #    if (!ccParams.EnforceCapture)
        #        return [0,false,status];
        #
        #    //--> Are we supposed to be capturing this transaction?
        #    //--> if the parameter is invoice and it's packing slip, move on.
        #    if (ccParams.CaptureID != captureId )
        #    {
        #        return [0,false,status];
        #    }
        #
        #    //--> Check for issues in posting
        #    salesTableCC::checkForErrorsPriorCapture(salesTableCC,posting.parmSalesTable(), ccParams, salesParmTable);
        #
        #    //--> Posting type
        #    if ((ccParams.PostingType == CreditCardPostingType::Invoice
        #        && captureId == CreditCardCaptureId::Invoice) ||
        #        (ccParams.PostingType == CreditCardPostingType::Packing
        #        && captureId == CreditCardCaptureId::PackSlip) ||
        #        (ccParams.PostingType == CreditCardPostingType::Picking
        #        && captureId == CreditCardCaptureId::PickList))
        #    {
        #        //--> If this transaciton is up for posting type set flag
        #        //--> to be used in the UpdateCreditCard method
        #        postingTypeFlag = true;
        #    }
        #
        #    //--> If we have captured everything we need then we
        #    //--> eject
        #    if (amountRemain > 0 &&
        #        CreditCardCaptureSettlement::fullCaptured(salesTableCC,salesTotals,amountRemain) == false)
        #    {
        #
        #        //--> Has the authorization been captured in full already
        #        // FR 100 Capture Restriction begin
        #        // AI 03.21.2007
        #        if (salesTableCC.Captured == NoYes::Yes)
        #        {
        #            //--> Check to see if Captured
        #            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                && ccParams.ReAuthorizeRestricted == NoYes::Yes
        #                )
        #            {
        #                //--> Is there another authorization?  If so, we will move on
        #                select dupSalesTableCC
        #                    where dupSalesTableCC.SalesId == posting.parmSalesTable().SalesId
        #                    && dupSalesTableCC.Processed == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.RecId != salesTableCC.RecId;
        #
        #                if (dupSalesTableCC)
        #                {
        #                    return [processAmt,postingTypeFlag,status];
        #                }
        #
        #                //--> Check to see if capture restricted
        #                salesTableCC = posting.createReAuthorization(salesTableCC,salesTotals,captureId,processAmt);
        #                reCap = true;
        #                if (salesTableCC.PNRef == '')
        #                {
        #                    //--> An error occured.  Stop
        #                    status = checkFailed("@ACC1358");
        #                }
        #
        #            }
        #            else
        #            {
        #                if (ccParams.CaptureRestricted == NoYes::Yes)
        #                {
        #                    //--> An error occured.  Stop
        #                    return [0,postingTypeFlag,status];
        #                }
        #            }
        #
        #        }
        #        else
        #        {
        #        // FR 100 Capture Restriction end
        #
        #            if (ccParams.AuthExpire == NoYes::Yes)
        #            {
        #                //--> Check to see if the auth is expired
        #                select ccTrans where ccTrans.TransID == salesTableCC.TransID;
        #                //--> If the auth date (yesterday) + 1 day > today (no)
        #                expDate = ccTrans.TransDate + ccParams.perExpiration;
        #                if (expDate < today())
        #                {
        #                    //--> Do we stop or re-auth?
        #                    if (ccParams.ReAuthExpired == NoYes::Yes)
        #                    {
        #                        salesTableCC = posting.createReAuthorization(salesTableCC,salesTotals,captureId,processAmt);
        #                        reCap = true;
        #                        if (salesTableCC.PNRef == '')
        #                        {
        #                            //--> An error occured.  Stop
        #                            status = checkFailed("@ACC1358");
        #                        }
        #                    }
        #                    else
        #                    {
        #                        return [processAmt,postingTypeFlag,status];
        #                    }
        #                }
        #            }
        #        }
        #
        #
        #
        #        if (totalCur < 0)
        #        {
        #            //--> No negative postings
        #            return [processAmt,postingTypeFlag,status];
        #        }
        #
        #
        #        if (totalCur >= salesTableCC.AmountMST && reCap == false)
        #        {
        #            //--> Is this an overcapture?
        #            select count(recId) from dupSalesTableCC
        #                where dupSalesTableCC.SalesId == posting.parmSalesTable().SalesId
        #                && dupSalesTableCC.Cancelled == NoYes::No
        #                && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && dupSalesTableCC.Captured == NoYes::No;
        #
        #            if (dupSalesTableCC.RecId > 1)
        #            {
        #                //--> More than one record indicates split transaction
        #                if (salesTableCC.AmountMST <= amountRemain)
        #                {
        #                    if (amountRemain < salesTableCC.AmountMST)
        #                    {
        #                        processAmt = amountRemain;
        #                    }
        #                    else
        #                    {
        #                        processAmt = salesTableCC.AmountMST;
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #            else
        #            {
        #                if (!ccParams.AllowOverCapture)
        #                {
        #                    //<--Check to make sure we have enough auth for capture
        #                    if (totalCur > amountMSTCC)
        #                    {
        #                        //--> Are restricted captures and re-auth active?  If so,
        #                        //--> we will capture the authorization in full and re-auth
        #                        if (salesTableCC.Captured == NoYes::Yes)
        #                        {
        #                            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                                && ccParams.ReAuthorizeRestricted == NoYes::Yes)
        #                            {
        #                                processAmt = salesTableCC.AmountMST;
        #                                salesTableCC = posting.createQuickCapture(salesTableCC,salesTotals,processAmt,amountRemain);
        #                                processAmt = salesTableCC.AmountMST;
        #                            }
        #                            else
        #                            {
        #                                status = checkFailed(strFmt("@ACC161", posting.parmSalesTable().salesId));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #
        #                    }
        #                    else
        #                    {
        #                        if (amountRemain < salesTableCC.AmountMST)
        #                        {
        #                            processAmt = amountRemain;
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    //--> We process the full amount, since it is an overcapture.
        #                    processAmt = processAmt;
        #
        #                }
        #            }
        #
        #
        #        }
        #
        #        try
        #        {
        #
        #
        #
        #            //<--Create new transaction record
        #            ccTrans = CreditCardTrans::createTransforCapture(salesTableCC,
        #                                                             posting.parmSalesTable(),
        #                                                             processAmt);
        #
        #            //--> Is there a credit card order hold on this account?
        #            select orderHoldTable
        #                where orderHoldTable.TerminalId == ccTrans.TerminalId
        #                && orderHoldTable.EnforceCapture == NoYes::Yes;
        #
        #            if (orderHoldTable)
        #            {
        #                select holdCodeTrans
        #                    where holdCodeTrans.InventRefId == this.parmSalesTable().SalesId
        #                    && holdCodeTrans.MCRHoldCode == orderHoldTable.MCRHoldCode
        #                    && holdCodeTrans.MCRCleared == NoYes::No;
        #
        #                if (holdCodeTrans)
        #                {
        #                    throw error(strFmt("Order %1 cannot be processed due to credit card hold.",this.parmSalesTable().SalesId));
        #                }
        #            }
        #
        #            switch (this.parmDocumentSatus())
        #            {
        #                case DocumentStatus::PackingSlip    :
        #                    ccTrans.PackingSlipId =  CustPackingSlipJour::findRecId(this.parmSalesParmTable().CustPackingSlipJour).PackingSlipId;
        #                    break;
        #                case DocumentStatus::Invoice    :
        #                    select invoiceId from custInvoiceJour where custInvoiceJour.ParmId == this.parmSalesParmTable().ParmId;
        #                    ccTrans.InvoiceId = custInvoiceJour.InvoiceId;
        #                    break;
        #            }
        #
        #
        #            //--> Update id for Level II and III processing
        #            if (captureId == CreditCardCaptureId::Invoice
        #                || captureId == CreditCardCaptureId::PackSlip)
        #            {
        #                ccTrans = this.updateCreditCardTrans(ccTrans);
        #            }
        #
        #            //<-- create Credit Card Transaction
        #            ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #            ttsbegin;
        #
        #            SalesTableCC::createTrans(ccTrans);
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #
        #            if (ccTrans.result == '-999')
        #            {
        #                info(strFmt(ccTrans.RepMsg,2));
        #            }
        #            else if (ccTrans.result != '0')
        #            {
        #                status = checkFailed(strFmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            }
        #
        #            amountRemain -= processAmt;
        #
        #            //--> Update as captured
        #            select forupdate dupSalesTableCC where dupSalesTableCC.RecId == salesTableCC.RecId;
        #            if (ccParams.CaptureRestricted)
        #            {
        #                dupSalesTableCC.Captured = NoYes::Yes;
        #                dupSalesTableCC.update();
        #            }
        #
        #            errSalesTableCC.data(dupSalesTableCC);
        #            errSalesTableCC.insert();
        #
        #            ttscommit;
        #        }
        #        catch (Exception::Error)
        #        {
        #            select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #            SalesTableCC::createTrans(ccTransNew);
        #        }
        #
        #    }
        #
        #    ret = [processAmt,postingTypeFlag,status];
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #captureCreditTransNoSalesTotals
        #private container captureCreditTransNoSalesTotals(CreditCardCaptureId     captureId,
        #                        SalesTableCC            salesTableCC,
        #                        AmountMST               processAmt,
        #                        AmountMST               amountMSTCC)
        #{
        #    CreditCardPosting       posting = new CreditCardPosting();
        #    CustInvoiceJour         custInvoiceJour;
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardTrans         ccTransParam;
        #    CreditCardParameters    ccParams;
        #    SalesTableCC            dupSalesTableCC;
        #    AmountMST               amountRemain;
        #    TransDate               expDate;
        #    NoYes                   reCap;
        #    NoYes                   status = true;
        #    ConfigValues            ret;
        #    NoYes                   postingTypeFlag;
        #    Total                   totalCur = Currency::curAmount2CurAmount(amountMSTCC,
        #                                    this.parmSalesTable().CurrencyCode,
        #                                    CompanyInfo::standardCurrency());
        #
        #    ;
        #    //--> Save SalesTable
        #    posting.parmSalesTable(salesTable::find(salesTableCC.SalesId));
        #
        #    //--> Store total posting for capture total tracking
        #    amountRemain = processAmt;
        #
        #
        #    if (salesTableCC.Cancelled == NoYes::Yes
        #        && salesTableCC.Captured == NoYes::No)
        #    {
        #        //Truly cancelled.  Move on.  We return the processAmt so it can be used on the next
        #        //Transaction records, if it exists.
        #        return [processAmt,false];
        #    }
        #
        #    //--> Retrieve parameters for each transaction
        #    ccTransParam = CreditCardTrans::find(salesTableCC.TransID);
        #    ccParams = CreditCardParameters::findParameterWithTerminal(ccTransParam.TerminalId);
        #
        #    //--> Return if no auth/capture
        #    if (!ccParams.EnforceCapture)
        #        return [0,false,status];
        #
        #    //--> Are we supposed to be capturing this transaction?
        #    //--> if the parameter is invoice and it's packing slip, move on.
        #    if (ccParams.CaptureID != captureId )
        #    {
        #        return [0,false,status];
        #    }
        #
        #    //--> Check for issues in posting
        #    salesTableCC::checkForErrorsPriorCapture(salesTableCC,posting.parmSalesTable(), ccParams, salesParmTable);
        #
        #    //--> Posting type
        #    if ((ccParams.PostingType == CreditCardPostingType::Invoice
        #        && captureId == CreditCardCaptureId::Invoice) ||
        #        (ccParams.PostingType == CreditCardPostingType::Packing
        #        && captureId == CreditCardCaptureId::PackSlip) ||
        #        (ccParams.PostingType == CreditCardPostingType::Picking
        #        && captureId == CreditCardCaptureId::PickList))
        #    {
        #        //--> If this transaciton is up for posting type set flag
        #        //--> to be used in the UpdateCreditCard method
        #        postingTypeFlag = true;
        #    }
        #
        #    //--> If we have captured everything we need then we
        #    //--> eject
        #    if (amountRemain > 0 &&
        #        CreditCardCaptureSettlement::fullCaptured(salesTableCC,salesTotals,amountRemain) == false)
        #    {
        #
        #        //--> Has the authorization been captured in full already
        #        // FR 100 Capture Restriction begin
        #        // AI 03.21.2007
        #        if (salesTableCC.Captured == NoYes::Yes)
        #        {
        #            //--> Check to see if Captured
        #            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                && ccParams.ReAuthorizeRestricted == NoYes::Yes
        #                )
        #            {
        #                //--> Is there another authorization?  If so, we will move on
        #                select dupSalesTableCC
        #                    where dupSalesTableCC.SalesId == posting.parmSalesTable().SalesId
        #                    && dupSalesTableCC.Processed == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.RecId != salesTableCC.RecId;
        #
        #                if (dupSalesTableCC)
        #                {
        #                    return [processAmt,postingTypeFlag,status];
        #                }
        #
        #                //--> Check to see if capture restricted
        #                salesTableCC = posting.createReAuthorizationNoTotals(salesTableCC,processAmt,ccParams.TerminalId);
        #                reCap = true;
        #                if (salesTableCC.PNRef == '')
        #                {
        #                    //--> An error occured.  Stop
        #                    status = checkFailed("@ACC1358");
        #                }
        #
        #            }
        #            else
        #            {
        #                if (salesTableCC.CaptureRestricted == NoYes::Yes)
        #                {
        #                    //--> An error occured.  Stop
        #                    return [0,postingTypeFlag,status];
        #                }
        #            }
        #
        #        }
        #        else
        #        {
        #        // FR 100 Capture Restriction end
        #
        #            if (ccParams.AuthExpire == NoYes::Yes)
        #            {
        #                //--> Check to see if the auth is expired
        #                select ccTrans where ccTrans.TransID == salesTableCC.TransID;
        #                //--> If the auth date (yesterday) + 1 day > today (no)
        #                expDate = ccTrans.TransDate + ccParams.perExpiration;
        #                if (expDate < today())
        #                {
        #                    //--> Do we stop or re-auth?
        #                    if (ccParams.ReAuthExpired == NoYes::Yes)
        #                    {
        #                        salesTableCC = posting.createReAuthorizationNoTotals(salesTableCC,processAmt,ccParams.TerminalId);
        #                        reCap = true;
        #                        if (salesTableCC.PNRef == '')
        #                        {
        #                            //--> An error occured.  Stop
        #                            status = checkFailed("@ACC1358");
        #                        }
        #                    }
        #                    else
        #                    {
        #                        return [processAmt,postingTypeFlag,status];
        #                    }
        #                }
        #            }
        #        }
        #
        #
        #
        #        if (totalCur < 0)
        #        {
        #            //--> No negative postings
        #            return [processAmt,postingTypeFlag,status];
        #        }
        #
        #
        #        if (totalCur >= salesTableCC.AmountMST && reCap == false)
        #        {
        #            //--> Is this an overcapture?
        #            select count(recId) from dupSalesTableCC
        #                where dupSalesTableCC.SalesId == posting.parmSalesTable().SalesId
        #                && dupSalesTableCC.Cancelled == NoYes::No
        #                && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && dupSalesTableCC.Captured == NoYes::No;
        #
        #            if (dupSalesTableCC.RecId > 1)
        #            {
        #                //--> More than one record indicates split transaction
        #                if (salesTableCC.AmountMST <= amountRemain)
        #                {
        #                    if (amountRemain < salesTableCC.AmountMST)
        #                    {
        #                        processAmt = amountRemain;
        #                    }
        #                    else
        #                    {
        #                        processAmt = salesTableCC.AmountMST;
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #            else
        #            {
        #                if (!ccParams.AllowOverCapture)
        #                {
        #                    //<--Check to make sure we have enough auth for capture
        #                    if (totalCur > amountMSTCC)
        #                    {
        #                        //--> Are restricted captures and re-auth active?  If so,
        #                        //--> we will capture the authorization in full and re-auth
        #                        if (salesTableCC.Captured == NoYes::Yes)
        #                        {
        #                            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                                && ccParams.ReAuthorizeRestricted == NoYes::Yes)
        #                            {
        #                                processAmt = salesTableCC.AmountMST;
        #                                salesTableCC = posting.createQuickCapture(salesTableCC,salesTotals,processAmt,amountRemain);
        #                                processAmt = salesTableCC.AmountMST;
        #                            }
        #                            else
        #                            {
        #                                status = checkFailed(strFmt("@ACC161", posting.parmSalesTable().salesId));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #
        #                    }
        #                    else
        #                    {
        #                        if (amountRemain < salesTableCC.AmountMST)
        #                        {
        #                            processAmt = amountRemain;
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = salesTableCC.AmountMST;
        #
        #                }
        #            }
        #
        #
        #        }
        #
        #        try
        #        {
        #
        #
        #
        #            //<--Create new transaction record
        #            ccTrans = CreditCardTrans::createTransforCapture(salesTableCC,
        #                                                             posting.parmSalesTable(),
        #                                                             processAmt);
        #
        #            switch (this.parmDocumentSatus())
        #            {
        #                case DocumentStatus::PackingSlip    :
        #                    ccTrans.PackingSlipId =  CustPackingSlipJour::findRecId(this.parmSalesParmTable().CustPackingSlipJour).PackingSlipId;
        #                    break;
        #                case DocumentStatus::Invoice    :
        #                    select invoiceId from custInvoiceJour where custInvoiceJour.ParmId == this.parmSalesParmTable().ParmId;
        #                    ccTrans.InvoiceId = custInvoiceJour.InvoiceId;
        #                    break;
        #            }
        #
        #
        #            //--> Update id for Level II and III processing
        #            if (captureId == CreditCardCaptureId::Invoice
        #                || captureId == CreditCardCaptureId::PackSlip)
        #            {
        #                ccTrans = this.updateCreditCardTrans(ccTrans);
        #            }
        #
        #            //<-- create Credit Card Transaction
        #            ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #            ttsbegin;
        #
        #            SalesTableCC::createTrans(ccTrans);
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #
        #            if (ccTrans.result == '-999')
        #            {
        #                info(strFmt(ccTrans.RepMsg,2));
        #            }
        #            else if (ccTrans.result != '0')
        #            {
        #
        #                CreditCardPosting::createAuthTransError(ccTrans);
        #                status = checkFailed(strFmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            }
        #
        #            amountRemain -= processAmt;
        #
        #            //--> Update as captured
        #            select forupdate dupSalesTableCC where dupSalesTableCC.RecId == salesTableCC.RecId;
        #            if (ccParams.CaptureRestricted)
        #            {
        #                dupSalesTableCC.Captured = NoYes::Yes;
        #                dupSalesTableCC.update();
        #            }
        #
        #            errSalesTableCC.data(dupSalesTableCC);
        #            errSalesTableCC.insert();
        #
        #            ttscommit;
        #        }
        #        catch (Exception::Error)
        #        {
        #            select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #            SalesTableCC::createTrans(ccTransNew);
        #        }
        #
        #    }
        #
        #    ret = [processAmt,postingTypeFlag,status];
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #captureProjInvoiceCreditTrans
        #private container captureProjInvoiceCreditTrans(CreditCardServiceCaptureType     captureId,
        #                        SalesTableCC            salesTableCC,
        #                        AmountMST               processAmt,
        #                        AmountMST               amountMSTCC)
        #{
        #    CreditCardPosting       posting = new CreditCardPosting();
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardTrans         ccTransParam;
        #    CreditCardParameters    ccParams;
        #    SalesTableCC            dupSalesTableCC;
        #    AmountMST               amountRemain;
        #    TransDate               expDate;
        #    NoYes                   reCap;
        #    NoYes                   status = true;
        #    ConfigValues            ret;
        #    NoYes                   postingTypeFlag;
        #    Total                   totalCur = Currency::curAmount2CurAmount(amountMSTCC,
        #                                    ProjTable::find(this.parmProjProposalJour().ProjInvoiceProjId).currencyId(),
        #                                    CompanyInfo::standardCurrency());
        #
        #    ;
        #    //--> Save SalesTable
        #    posting.parmSalesTable(salesTable::find(salesTableCC.SalesId));
        #
        #    //--> Store total posting for capture total tracking
        #    amountRemain = processAmt;
        #
        #
        #    if (salesTableCC.Cancelled == NoYes::Yes
        #        && salesTableCC.Captured == NoYes::No)
        #    {
        #        //Truly cancelled.  Move on.  We return the processAmt so it can be used on the next
        #        //Transaction records, if it exists.
        #        return [processAmt,false];
        #    }
        #
        #    //--> Retrieve parameters for each transaction
        #    ccTransParam = CreditCardTrans::find(salesTableCC.TransID);
        #    ccParams = CreditCardParameters::findParameterWithTerminal(ccTransParam.TerminalId);
        #
        #    //--> Return if no auth/capture
        #    if (!ccParams.EnforceCapture)
        #        return [0,false,status];
        #
        #    //--> Are we supposed to be capturing this transaction?
        #    //--> if the parameter is invoice and it's packing slip, move on.
        #    if (ccParams.ServiceCaptureType != captureId )
        #    {
        #        return [0,false,status];
        #    }
        #
        #
        #    //--> If we have captured everything we need then we
        #    //--> eject
        #    if (amountRemain > 0)
        #    {
        #
        #        //--> Has the authorization been captured in full already
        #        // FR 100 Capture Restriction begin
        #        // AI 03.21.2007
        #        if (salesTableCC.Captured == NoYes::Yes)
        #        {
        #            //--> Check to see if Captured
        #            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                && ccParams.ReAuthorizeRestricted == NoYes::Yes
        #                )
        #            {
        #                //--> Is there another authorization?  If so, we will move on
        #                select dupSalesTableCC
        #                    where dupSalesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #                    && dupSalesTableCC.Processed == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.RecId != salesTableCC.RecId;
        #
        #                if (dupSalesTableCC)
        #                {
        #                    return [processAmt,postingTypeFlag,status];
        #                }
        #
        #                //--> Check to see if capture restricted
        #                salesTableCC = posting.createServiceOrderReAuthorization(salesTableCC,this.parmServiceTotals());
        #                reCap = true;
        #                if (salesTableCC.PNRef == '')
        #                {
        #                    //--> An error occured.  Stop
        #                    status = checkFailed("@ACC1358");
        #                }
        #
        #            }
        #            else
        #            {
        #                if (salesTableCC.CaptureRestricted == NoYes::Yes)
        #                {
        #                    //--> An error occured.  Stop
        #                    return [0,postingTypeFlag,status];
        #                }
        #            }
        #
        #        }
        #        else
        #        {
        #        // FR 100 Capture Restriction end
        #
        #            if (ccParams.AuthExpire == NoYes::Yes)
        #            {
        #                //--> Check to see if the auth is expired
        #                select ccTrans where ccTrans.TransID == salesTableCC.TransID;
        #                //--> If the auth date (yesterday) + 1 day > today (no)
        #                expDate = ccTrans.TransDate + ccParams.perExpiration;
        #                if (expDate < today())
        #                {
        #                    //--> Do we stop or re-auth?
        #                    if (ccParams.ReAuthExpired == NoYes::Yes)
        #                    {
        #                        salesTableCC = posting.createServiceOrderReAuthorization(salesTableCC,this.parmServiceTotals());
        #                        reCap = true;
        #                        if (salesTableCC.PNRef == '')
        #                        {
        #                            //--> An error occured.  Stop
        #                            status = checkFailed("@ACC1358");
        #                        }
        #                    }
        #                    else
        #                    {
        #                        return [processAmt,postingTypeFlag,status];
        #                    }
        #                }
        #            }
        #        }
        #
        #
        #
        #        if (totalCur < 0)
        #        {
        #            //--> No negative postings
        #            return [processAmt,postingTypeFlag,status];
        #        }
        #
        #
        #        if (totalCur >= salesTableCC.AmountMST && reCap == false)
        #        {
        #            //--> Is this an overcapture?
        #            select count(recId) from dupSalesTableCC
        #                where dupSalesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #                && dupSalesTableCC.Cancelled == NoYes::No
        #                && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && dupSalesTableCC.Captured == NoYes::No;
        #
        #            if (dupSalesTableCC.RecId > 1)
        #            {
        #                //--> More than one record indicates split transaction
        #                if (salesTableCC.AmountMST <= amountRemain)
        #                {
        #                    if (amountRemain < salesTableCC.AmountMST)
        #                    {
        #                        processAmt = amountRemain;
        #                    }
        #                    else
        #                    {
        #                        processAmt = salesTableCC.AmountMST;
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #            else
        #            {
        #                if (!ccParams.AllowOverCapture)
        #                {
        #                    //<--Check to make sure we have enough auth for capture
        #                    if (totalCur > amountMSTCC)
        #                    {
        #                        //--> Are restricted captures and re-auth active?  If so,
        #                        //--> we will capture the authorization in full and re-auth
        #                        if (salesTableCC.Captured == NoYes::Yes)
        #                        {
        #                            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                                && ccParams.ReAuthorizeRestricted == NoYes::Yes)
        #                            {
        #                                processAmt = salesTableCC.AmountMST;
        #                                salesTableCC = posting.createQuickCapture(salesTableCC,null,processAmt,amountRemain);
        #                                processAmt = salesTableCC.AmountMST;
        #                            }
        #                            else
        #                            {
        #                                status = checkFailed(strFmt("@ACC161", posting.parmSalesTable().salesId));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #
        #                    }
        #                    else
        #                    {
        #                        if (amountRemain < salesTableCC.AmountMST)
        #                        {
        #                            processAmt = amountRemain;
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #
        #
        #        }
        #
        #        try
        #        {
        #
        #
        #
        #            //<--Create new transaction record
        #            ccTrans = CreditCardTrans::createTransforCaptureProjProposal(salesTableCC,
        #                                                             this.parmProjProposalJour(),
        #                                                             processAmt);
        #
        #            //<-- create Credit Card Transaction
        #            ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #            ttsbegin;
        #
        #            SalesTableCC::createTrans(ccTrans);
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #
        #            if (ccTrans.result == '-999')
        #            {
        #                info(strFmt(ccTrans.RepMsg,2));
        #            }
        #            else if (ccTrans.result != '0')
        #            {
        #                status = checkFailed(strFmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            }
        #
        #            amountRemain -= processAmt;
        #
        #            //--> Update as captured
        #            select forupdate dupSalesTableCC where dupSalesTableCC.RecId == salesTableCC.RecId;
        #            if (ccParams.CaptureRestricted)
        #            {
        #                dupSalesTableCC.Captured = NoYes::Yes;
        #                dupSalesTableCC.update();
        #            }
        #
        #            errSalesTableCC.data(dupSalesTableCC);
        #            errSalesTableCC.insert();
        #
        #            ttscommit;
        #        }
        #        catch (Exception::Error)
        #        {
        #            select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #            SalesTableCC::createTrans(ccTransNew);
        #        }
        #
        #    }
        #
        #    ret = [processAmt,postingTypeFlag,status];
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #captureServiceOrderCreditTrans
        #private container captureServiceOrderCreditTrans(CreditCardServiceCaptureType     captureId,
        #                        SalesTableCC            salesTableCC,
        #                        AmountMST               processAmt,
        #                        AmountMST               amountMSTCC)
        #{
        #    CreditCardPosting       posting = new CreditCardPosting();
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardTrans         ccTransParam;
        #    CreditCardParameters    ccParams;
        #    SalesTableCC            dupSalesTableCC;
        #    AmountMST               amountRemain;
        #    TransDate               expDate;
        #    NoYes                   reCap;
        #    NoYes                   status = true;
        #    ConfigValues            ret;
        #    NoYes                   postingTypeFlag;
        #    Total                   totalCur = Currency::curAmount2CurAmount(amountMSTCC,
        #                                    ProjTable::find(this.parmServiceOrderTable().ProjId).currencyId(),
        #                                    CompanyInfo::standardCurrency());
        #
        #    ;
        #    //--> Save SalesTable
        #    posting.parmSalesTable(salesTable::find(salesTableCC.SalesId));
        #
        #    //--> Store total posting for capture total tracking
        #    amountRemain = processAmt;
        #
        #
        #    if (salesTableCC.Cancelled == NoYes::Yes
        #        && salesTableCC.Captured == NoYes::No)
        #    {
        #        //Truly cancelled.  Move on.  We return the processAmt so it can be used on the next
        #        //Transaction records, if it exists.
        #        return [processAmt,false];
        #    }
        #
        #    //--> Retrieve parameters for each transaction
        #    ccTransParam = CreditCardTrans::find(salesTableCC.TransID);
        #    ccParams = CreditCardParameters::findParameterWithTerminal(ccTransParam.TerminalId);
        #
        #    //--> Return if no auth/capture
        #    if (!ccParams.EnforceCapture)
        #        return [0,false,status];
        #
        #    //--> Are we supposed to be capturing this transaction?
        #    //--> if the parameter is invoice and it's packing slip, move on.
        #    if (ccParams.ServiceCaptureType != captureId )
        #    {
        #        return [0,false,status];
        #    }
        #
        #
        #
        #    //--> If we have captured everything we need then we
        #    //--> eject
        #    if (amountRemain > 0)
        #    {
        #
        #        //--> Has the authorization been captured in full already
        #        // FR 100 Capture Restriction begin
        #        // AI 03.21.2007
        #        if (salesTableCC.Captured == NoYes::Yes)
        #        {
        #            //--> Check to see if Captured
        #            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                && ccParams.ReAuthorizeRestricted == NoYes::Yes
        #                )
        #            {
        #                //--> Is there another authorization?  If so, we will move on
        #                select dupSalesTableCC
        #                    where dupSalesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #                    && dupSalesTableCC.Processed == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.RecId != salesTableCC.RecId;
        #
        #                if (dupSalesTableCC)
        #                {
        #                    return [processAmt,postingTypeFlag,status];
        #                }
        #
        #                //--> Check to see if capture restricted
        #                salesTableCC = posting.createServiceOrderReAuthorization(salesTableCC,this.parmServiceTotals());
        #                reCap = true;
        #                if (salesTableCC.PNRef == '')
        #                {
        #                    //--> An error occured.  Stop
        #                    status = checkFailed("@ACC1358");
        #                }
        #
        #            }
        #            else
        #            {
        #                if (salesTableCC.CaptureRestricted == NoYes::Yes)
        #                {
        #                    //--> An error occured.  Stop
        #                    return [0,postingTypeFlag,status];
        #                }
        #            }
        #
        #        }
        #        else
        #        {
        #        // FR 100 Capture Restriction end
        #
        #            if (ccParams.AuthExpire == NoYes::Yes)
        #            {
        #                //--> Check to see if the auth is expired
        #                select ccTrans where ccTrans.TransID == salesTableCC.TransID;
        #                //--> If the auth date (yesterday) + 1 day > today (no)
        #                expDate = ccTrans.TransDate + ccParams.perExpiration;
        #                if (expDate < today())
        #                {
        #                    //--> Do we stop or re-auth?
        #                    if (ccParams.ReAuthExpired == NoYes::Yes)
        #                    {
        #                        salesTableCC = posting.createServiceOrderReAuthorization(salesTableCC,this.parmServiceTotals());
        #                        reCap = true;
        #                        if (salesTableCC.PNRef == '')
        #                        {
        #                            //--> An error occured.  Stop
        #                            status = checkFailed("@ACC1358");
        #                        }
        #                    }
        #                    else
        #                    {
        #                        return [processAmt,postingTypeFlag,status];
        #                    }
        #                }
        #            }
        #        }
        #
        #
        #
        #        if (totalCur < 0)
        #        {
        #            //--> No negative postings
        #            return [processAmt,postingTypeFlag,status];
        #        }
        #
        #
        #        if (totalCur >= salesTableCC.AmountMST && reCap == false)
        #        {
        #            //--> Is this an overcapture?
        #            select count(recId) from dupSalesTableCC
        #                where dupSalesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #                && dupSalesTableCC.Cancelled == NoYes::No
        #                && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && dupSalesTableCC.Captured == NoYes::No;
        #
        #            if (dupSalesTableCC.RecId > 1)
        #            {
        #                //--> More than one record indicates split transaction
        #                if (salesTableCC.AmountMST <= amountRemain)
        #                {
        #                    if (amountRemain < salesTableCC.AmountMST)
        #                    {
        #                        processAmt = amountRemain;
        #                    }
        #                    else
        #                    {
        #                        processAmt = salesTableCC.AmountMST;
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #            else
        #            {
        #                if (!ccParams.AllowOverCapture)
        #                {
        #                    //<--Check to make sure we have enough auth for capture
        #                    if (totalCur > amountMSTCC)
        #                    {
        #                        //--> Are restricted captures and re-auth active?  If so,
        #                        //--> we will capture the authorization in full and re-auth
        #                        if (salesTableCC.Captured == NoYes::Yes)
        #                        {
        #                            if (salesTableCC.CaptureRestricted == NoYes::Yes
        #                                && ccParams.ReAuthorizeRestricted == NoYes::Yes)
        #                            {
        #                                processAmt = salesTableCC.AmountMST;
        #                                salesTableCC = posting.createQuickCapture(salesTableCC,null,processAmt,amountRemain);
        #                                processAmt = salesTableCC.AmountMST;
        #                            }
        #                            else
        #                            {
        #                                status = checkFailed(strFmt("@ACC161", posting.parmSalesTable().salesId));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #
        #                    }
        #                    else
        #                    {
        #                        if (amountRemain < salesTableCC.AmountMST)
        #                        {
        #                            processAmt = amountRemain;
        #                        }
        #                        else
        #                        {
        #                            processAmt = salesTableCC.AmountMST;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    processAmt = amountRemain;
        #                }
        #            }
        #
        #
        #        }
        #
        #        try
        #        {
        #
        #
        #
        #            //<--Create new transaction record
        #            ccTrans = CreditCardTrans::createTransforCaptureServiceOrder(salesTableCC,
        #                                                             this.parmServiceOrderTable(),
        #                                                             processAmt);
        #
        #            //<-- create Credit Card Transaction
        #            ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #            ttsbegin;
        #
        #            SalesTableCC::createTrans(ccTrans);
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #
        #            if (ccTrans.result == '-999')
        #            {
        #                info(strFmt(ccTrans.RepMsg,2));
        #            }
        #            else if (ccTrans.result != '0')
        #            {
        #                status = checkFailed(strFmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            }
        #
        #            amountRemain -= processAmt;
        #
        #            //--> Update as captured
        #            select forupdate dupSalesTableCC where dupSalesTableCC.RecId == salesTableCC.RecId;
        #            if (ccParams.CaptureRestricted)
        #            {
        #                dupSalesTableCC.Captured = NoYes::Yes;
        #                dupSalesTableCC.update();
        #            }
        #
        #            errSalesTableCC.data(dupSalesTableCC);
        #            errSalesTableCC.insert();
        #
        #            ttscommit;
        #        }
        #        catch (Exception::Error)
        #        {
        #            select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #            SalesTableCC::createTrans(ccTransNew);
        #        }
        #
        #    }
        #
        #    ret = [processAmt,postingTypeFlag,status];
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #class CreditCardPosting
        #{
        #    SalesTable                  salesTable;
        #    SalesTotals                 salesTotals;
        #    FormLetter                  formLetter;
        #    SalesParmTable              salesParmTable;
        #    DocumentStatus              documentStatus;
        #    SalesInvoiceJournalPost     invoiceJournalPost;
        #    SalesPackingSlipJournalPost packingSlipJournalPost;
        #    SalesPickingListJournalPost pickingListJournalPost;
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                errSalesTableCC;
        #    Total                       serviceTotals;
        #    SMAServiceOrderTable        serviceOrderTable;
        #    ProjTotalSalesAmount        projTotals;
        #    ProjInvoiceJour             projInvoiceJour;
        #    ProjProposalJour            projProposalJour;
        #    CurrencyCode                currencyCode;
        #    ParmId                      parmId;
        #
        #}
      ENDSOURCE
      SOURCE #createAuthorization
        #//--> <20131123> Void of auth on overcapture <20131123>
        #private boolean createAuthorization(salesTableCC                salesTableCC,
        #                                Amount                      processAmt,
        #                                CreditCardTerminalId        terminalId,
        #                                CreditCardCaptureId         captureId)
        #{
        #    CreditCardTrans         ccTrans;
        #    salesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    NoYes                   ret;
        #    NoYes                   postingTypeFlag;
        #    ;
        #
        #    try
        #    {
        #
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createAuthorization(CreditCardAuthTable::calculateAuthAmount(this.parmSalesTable(),
        #            processAmt,
        #            CreditCardPosting::convertCaptureId2Context(captureId)),
        #            this.parmSalesTable().CurrencyCode,
        #            this.parmSalesTable(),
        #            terminalId,
        #            salesTableCC);
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #            ret = checkFailed(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            return ret;
        #        }
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.TransID == ccTrans.TransID;
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.initValue();
        #        newSalesTableCC.AmountCur   = processAmt;
        #        newSalesTableCC.AmountMST   = Currency::amountCur2MST(newSalesTableCC.AmountCur,salesTable.CurrencyCode);
        #        newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = CreditCardTrxType::A;
        #        newSalesTableCC.CurrencyCode= SalesTable.CurrencyCode;
        #        newSalesTableCC.Processed   = NoYes::No;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = ccTrans.TransID;
        #        newSalesTableCC.NameOnCard  = ccTrans.NameOnCard;
        #        newSalesTableCC.PNRef       = ccTrans.PNRef;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CaptureRestricted;
        #        newSalesTableCC.insert();
        #
        #        if (CreditCardParameters::findParameterWithTerminal(terminalId).CallCenter)
        #        {
        #            salesTableCC::createMCRCustPaymTable(newSalesTableCC);
        #        }
        #
        #        [processAmt,postingTypeFlag,ret] = this.captureCreditTrans(captureId,newSalesTableCC,processAmt,processAmt);
        #
        #    }
        #    catch (Exception::Error)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
        #//--> </20131123> Void of auth on overcapture <20131123>
        #
      ENDSOURCE
      SOURCE #createAuthorizationProj
        #private boolean createAuthorizationProj(salesTableCC                salesTableCC,
        #                                Amount                              processAmt,
        #                                CreditCardTerminalId                terminalId,
        #                                CreditCardServiceCaptureType        captureId)
        #{
        #    CreditCardTrans         ccTrans;
        #    salesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    NoYes                   ret;
        #    NoYes                   postingTypeFlag;
        #    ;
        #
        #    try
        #    {
        #
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createAuthorizationProj(processAmt,
        #            this.parmProjProposalJour().CurrencyId,
        #            this.parmProjProposalJour(),
        #            terminalId,
        #            salesTableCC);
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #            ret = checkFailed(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            return ret;
        #        }
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.TransID == ccTrans.TransID;
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.initValue();
        #        newSalesTableCC.AmountCur   = processAmt;
        #        newSalesTableCC.AmountMST   = Currency::amountCur2MST(newSalesTableCC.AmountCur,this.parmProjProposalJour().CurrencyId);
        #        newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = CreditCardTrxType::A;
        #        newSalesTableCC.CurrencyCode= SalesTable.CurrencyCode;
        #        newSalesTableCC.Processed   = NoYes::No;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = ccTrans.TransID;
        #        newSalesTableCC.NameOnCard  = ccTrans.NameOnCard;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CaptureRestricted;
        #        newSalesTableCC.insert();
        #
        #        [processAmt,postingTypeFlag,ret] = this.captureProjInvoiceCreditTrans(captureId,newSalesTableCC,processAmt,processAmt);
        #
        #    }
        #    catch (Exception::Error)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #createDeltaAuthorization
        #private boolean createDeltaAuthorization(SalesTableCC       salesTableCC,
        #                                Amount                      processAmt,
        #                                CreditCardTerminalId        terminalId,
        #                                CreditCardCaptureId         captureId)
        #{
        #    CreditCardTrans         ccTrans = CreditCardTrans::find(salesTableCC.TransID);
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    NoYes                   ret;
        #    NoYes                   postingTypeFlag;
        #    ;
        #
        #    try
        #    {
        #
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createTransForDeltaAuth(ccTrans,this.parmSalesTable(),processAmt);
        #
        #        ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #            ret = checkFailed(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            return ret;
        #        }
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.TransID == ccTrans.TransID;
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.initValue();
        #        newSalesTableCC.AmountCur   = processAmt;
        #        newSalesTableCC.AmountMST   = Currency::amountCur2MST(newSalesTableCC.AmountCur,salesTable.CurrencyCode);
        #        newSalesTableCC.CreditCardId= ccTrans.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = CreditCardTrxType::A;
        #        newSalesTableCC.CurrencyCode= SalesTable.CurrencyCode;
        #        newSalesTableCC.Processed   = NoYes::No;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = ccTrans.TransID;
        #        newSalesTableCC.NameOnCard  = ccTrans.NameOnCard;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CaptureRestricted;
        #        newSalesTableCC.insert();
        #
        #        [processAmt,postingTypeFlag,ret] = this.captureCreditTrans(captureId,newSalesTableCC,processAmt,processAmt);
        #
        #    }
        #    catch (Exception::Error)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #createDeltaAuthorizationProj
        #private boolean createDeltaAuthorizationProj(SalesTableCC       salesTableCC,
        #                                Amount                          processAmt,
        #                                CreditCardTerminalId            terminalId,
        #                                CreditCardServiceCaptureType    captureId)
        #{
        #    CreditCardTrans         ccTrans = CreditCardTrans::find(salesTableCC.TransID);
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    NoYes                   ret;
        #    NoYes                   postingTypeFlag;
        #    CurrencyCode            currency = this.parmProjProposalJour().CurrencyId ? this.parmProjProposalJour().CurrencyId : this.parmCurrencyCode();
        #    ;
        #
        #    try
        #    {
        #
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createTransForDeltaAuthProj(ccTrans,this.parmProjProposalJour(),processAmt);
        #
        #        ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            errCCTrans.data(ccTrans);
        #            errCCTrans.insert();
        #            ret = checkFailed(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            return ret;
        #        }
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.TransID == ccTrans.TransID;
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.initValue();
        #        newSalesTableCC.AmountCur   = processAmt;
        #        newSalesTableCC.AmountMST   = Currency::amountCur2MST(newSalesTableCC.AmountCur,this.parmProjProposalJour().CurrencyId);
        #        newSalesTableCC.CreditCardId= ccTrans.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = CreditCardTrxType::A;
        #        newSalesTableCC.CurrencyCode= this.parmProjProposalJour().CurrencyId;
        #        newSalesTableCC.Processed   = NoYes::No;
        #        newSalesTableCC.ProjProposalId = this.parmProjProposalJour().ProposalId;
        #        newSalesTableCC.TransID     = ccTrans.TransID;
        #        newSalesTableCC.NameOnCard  = ccTrans.NameOnCard;
        #        newSalesTableCC.PNRef       = ccTrans.PNRef;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CaptureRestricted;
        #        newSalesTableCC.insert();
        #
        #        [processAmt,postingTypeFlag,ret] = this.captureProjInvoiceCreditTrans(captureId,newSalesTableCC,processAmt,processAmt);
        #
        #    }
        #    catch (Exception::Error)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #createQuickCapture
        #private SalesTableCC createQuickCapture(salesTableCC        salesTableCC,
        #                                SalesTotals         _salesTotals,
        #                                AmountMST           processAmt,
        #                                AmountMST           amountRemain)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            dupSalesTableCC;
        #    ;
        #
        #    try
        #    {
        #        //--> Capture what we have
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createTransforCapture(salesTableCC,
        #                                                         salesTable,
        #                                                         processAmt);
        #        //<--Check for problems
        #        salesTableCC::checkForErrors(salesTableCC,this.parmSalesTable());
        #
        #        //<-- create Credit Card Transaction
        #        ccTrans = CreditCardADV::processCreditCard(ccTrans);
        #
        #        ttsbegin;
        #
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #        }
        #
        #        //--> Update as captured
        #        SalesTableCC::createTrans(ccTrans);
        #        select forupdate dupSalesTableCC where dupSalesTableCC.RecId == salesTableCC.RecId;
        #        dupSalesTableCC.Captured = NoYes::Yes;
        #        dupSalesTableCC.update();
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.initValue();
        #        newSalesTableCC.AmountCur   = amountRemain-processAmt;
        #        newSalesTableCC.AmountMST   = Currency::amountCur2MST(newSalesTableCC.AmountCur,salesTable.CurrencyCode);
        #        newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = CreditCardTrxType::A;
        #        newSalesTableCC.CurrencyCode= SalesTable.CurrencyCode;
        #        newSalesTableCC.Processed   = NoYes::Yes;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        newSalesTableCC.NameOnCard  = ccTrans.NameOnCard;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CaptureRestricted;
        #        newSalesTableCC.insert();
        #
        #        //<--Create new transaction record
        #        if (salesTableCC.CreditCardId)
        #        {
        #            ccTrans = CreditCardTrans::createTransfromSalesCC(newSalesTableCC,salesTable);
        #        }
        #        else
        #        {
        #            ccTrans = CreditCardTrans::createTransfromSalesCCwoNum(newSalesTAbleCC,salesTable,ccTrans);
        #        }
        #
        #        //<--Check for problems
        #        salesTableCC::checkForErrors(salesTableCC,salesTable);
        #
        #        //<-- create Credit Card Transaction
        #        ccTrans = CreditCardADV::processCreditCard(ccTrans);
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #        }
        #
        #        newSalesTableCC.PNRef     = ccTrans.pNRef;
        #        newSalesTableCC.Processed = NoYes::Yes;
        #        newSalesTableCC.TransID   = ccTrans.TransID;
        #        newSalesTableCC.Captured  = NoYes::Yes;
        #        newSalesTableCC.update();
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Error)
        #    {
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        SalesTableCC::createTrans(ccTransNew);
        #    }
        #
        #    return newSalesTableCC;
        #
        #}
      ENDSOURCE
      SOURCE #createReAuthorization
        #private SalesTableCC createReAuthorization(salesTableCC     salesTableCC,
        #                                   SalesTotals              _salesTotals,
        #                                   CreditCardCaptureId      captureID,
        #                                   Amount                   optAmount = 0)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    CreditCardTrans         ccTransVoid;
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    Total                   totalAmount = _salesTotals.totalAmount();
        #    ;
        #
        #    try
        #    {
        #        //--> If the total of the cc trans is different, we assume that is correct for purposs of reauth
        #        if (optAmount != 0)
        #        {
        #            totalAmount = optAmount;
        #        }
        #
        #        ttsBegin;
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createTransfromSalesCCforReauth(salesTableCC,this.parmSalesTable(),_salesTotals);
        #
        #        switch (captureID)
        #        {
        #            case CreditCardCaptureID::PickList  :
        #                ccTrans.AmountCur   =   CreditCardAuthTable::calculateAuthAmount(this.parmSalesTable(),
        #                    totalAmount,
        #                    CreditCardAuthContextType::Picking);
        #                break;
        #
        #            case CreditCardCaptureID::PackSlip  :
        #                ccTrans.AmountCur   =   CreditCardAuthTable::calculateAuthAmount(this.parmSalesTable(),
        #                    totalAmount,
        #                    CreditCardAuthContextType::Packing);
        #                break;
        #
        #            case CreditCardCaptureID::ShipConfirm  :
        #                ccTrans.AmountCur   =   CreditCardAuthTable::calculateAuthAmount(this.parmSalesTable(),
        #                    totalAmount,
        #                    CreditCardAuthContextType::ShipConfirm);
        #                break;
        #            case CreditCardCaptureID::Invoice  :
        #                ccTrans.AmountCur   =   totalAmount;
        #                break;
        #        }
        #
        #        ccTrans.ParmId = this.parmParmId();
        #        ccTrans.AmountMST = Currency::amountCur2MST(ccTrans.AmountCur,ccTrans.CurrencyCode);
        #        ccTrans.write();
        #        ttsCommit;
        #
        #        //<--Check for problems.  We look for status on re-auth, but if we have gotten this far
        #        //--> we trust that we can run an authorization on invoice (if that's the status)
        #        salesTableCC::checkForErrorsOnInvoice(salesTableCC,this.parmSalesTable());
        #
        #        ttsBegin;
        #        //<-- create Credit Card Transaction
        #        ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #        ttsCommit;
        #
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            ttsBegin;
        #            CreditCardOrderHoldTable::createAuthHold(this.parmSalesTable(),ccTrans.TerminalId);
        #            ttsCommit;
        #
        #            throw error(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #
        #        }
        #
        #        ttsBegin;
        #        select ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #        if (ccTrans.Result == '0')
        #        {
        #            //--> Create new Sales Table CC
        #            newSalesTableCC.clear();
        #            newSalesTableCC.AmountCur   = ccTransNew.AmountCur;
        #            newSalesTableCC.AmountMST   = ccTransNew.AmountMST;
        #            newSalesTableCC.CitiPlan    = salesTableCC.CitiPlan;
        #            newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #            newSalesTableCC.CreditCardTrxType = salesTableCC.CreditCardTrxType;
        #            newSalesTableCC.PNRef       = ccTransNew.PNRef;
        #            newSalesTableCC.Processed   = NoYes::Yes;
        #            newSalesTableCC.SalesId     = salesTable.SalesId;
        #            newSalesTableCC.TransID     = ccTransNew.TransID;
        #            newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTransnew.TerminalId).CaptureRestricted;
        #            newSalesTableCC.CurrencyCode= salesTableCC.CurrencyCode;
        #            newSalesTableCC.insert();
        #        }
        #
        #        ttsCommit;
        #
        #        if (ccTrans.Result == '0' && origSalesTableCC.Cancelled == NoYes::No)
        #        {
        #            ttsbegin;
        #
        #            select forupdate origSalesTableCC
        #                where origSalesTableCC.RecId == salesTableCC.RecId;
        #            select ccTransVoid where ccTransVoid.TransID == origSalesTableCC.TransID;
        #            //<-- Create the Transaction record
        #            ccTransVoid = CreditCardTrans::createTransforVoid(origSalesTableCC,salesTable,ccTransVoid,origSalesTableCC.AmountCur);
        #
        #            //<-- create Credit Card Transaction
        #            ccTransVoid = CreditCardAdv::processCreditCard(ccTransVoid);
        #
        #            ccTransVoid.selectForUpdate(true);
        #            if (CreditCardAdv::checkReturn(ccTransVoid,ccTransVoid.result) == False)
        #            {
        #                origSalesTableCC.Cancelled = NoYes::Yes;
        #                origSalesTableCC.write();
        #                //info(strfmt("@ACC143",ccTransVoid.result,ccTransVoid.RepMsg));
        #            }
        #            else
        #            {
        #
        #                origSalesTableCC.PNRef     = ccTrans.pNRef;
        #                origSalesTableCC.Processed = NoYes::Yes;
        #                origSalesTableCC.TransID   = ccTrans.TransID;
        #                origSalesTableCC.Cancelled = NoYes::Yes;
        #                origSalesTableCC.update();
        #
        #                info(strFmt("@ACC144",ccTrans.pnRef));
        #            }
        #
        #
        #            ttscommit;
        #        }
        #
        #
        #    }
        #    catch (Exception::Error)
        #    {
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        if (ccTransNew.Result == '0')
        #        {
        #            SalesTableCC::createTrans(ccTransNew);
        #        }
        #    }
        #
        #    return newSalesTableCC;
        #
        #}
      ENDSOURCE
      SOURCE #createReAuthorizationNoTotals
        #private SalesTableCC createReAuthorizationNoTotals(salesTableCC     salesTableCC,
        #                                   AmountCur                        _amountCur,
        #                                   CreditCardTerminalId             ccTerminalId)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    ;
        #    select origSalesTableCC
        #        where origSalesTableCC.SalesId == salesTableCC.SalesId
        #        && origSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #        && origSalesTableCC.PrimaryCard == NoYes::Yes
        #        && origSalesTableCC.Processed == NoYes::Yes;
        #
        #    try
        #    {
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createAuthorization(_amountCur,this.parmSalesTable().CurrencyCode,this.parmSalesTable(),ccTerminalId);
        #
        #        //<--Check for problems.  We look for status on re-auth, but if we have gotten this far
        #        //--> we trust that we can run an authorization on invoice (if that's the status)
        #        salesTableCC::checkForErrorsOnInvoice(salesTableCC,this.parmSalesTable());
        #
        #        //<-- create Credit Card Transaction
        #        ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #        ttsbegin;
        #
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #        }
        #
        #        ccTrans.update();
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.AmountCur   = ccTransNew.AmountCur;
        #        newSalesTableCC.AmountMST   = ccTransNew.AmountMST;
        #        newSalesTableCC.CitiPlan    = salesTableCC.CitiPlan;
        #        newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = salesTableCC.CreditCardTrxType;
        #        newSalesTableCC.PNRef       = ccTransNew.PNRef;
        #        newSalesTableCC.Processed   = NoYes::Yes;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = ccTransNew.TransID;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTransnew.TerminalId).CaptureRestricted;
        #        newSalesTableCC.CurrencyCode= salesTableCC.CurrencyCode;
        #        newSalesTableCC.insert();
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.RecId == salesTableCC.RecId;
        #
        #        origSalesTableCC.Cancelled = NoYes::Yes;
        #        origSalesTableCC.update();
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Error)
        #    {
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        SalesTableCC::createTrans(ccTransNew);
        #    }
        #
        #    return newSalesTableCC;
        #
        #}
      ENDSOURCE
      SOURCE #createServiceOrderReAuthorization
        #private SalesTableCC createServiceOrderReAuthorization(salesTableCC     salesTableCC,
        #                                   Total      total)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         ccTransNew;
        #    SalesTableCC            newSalesTableCC;
        #    SalesTableCC            origSalesTableCC;
        #    ;
        #
        #    try
        #    {
        #
        #        //<--Create new transaction record
        #        ccTrans = CreditCardTrans::createTransfromServOrderCCforReauth(salesTableCC,this.parmServiceOrderTable(),total);
        #
        #        //<--Check for problems.  We look for status on re-auth, but if we have gotten this far
        #        //--> we trust that we can run an authorization on invoice (if that's the status)
        #        salesTableCC::checkForErrorsOnInvoice(salesTableCC,this.parmSalesTable());
        #
        #        //<-- create Credit Card Transaction
        #        ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #        ttsbegin;
        #
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        if (ccTrans.result == '-999')
        #        {
        #            info(ccTrans.RepMsg);
        #        }
        #        else if (ccTrans.result != '0')
        #        {
        #            info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #        }
        #
        #        ccTrans.update();
        #
        #        //--> Create new Sales Table CC
        #        newSalesTableCC.clear();
        #        newSalesTableCC.AmountCur   = ccTransNew.AmountCur;
        #        newSalesTableCC.AmountMST   = ccTransNew.AmountMST;
        #        newSalesTableCC.CitiPlan    = salesTableCC.CitiPlan;
        #        newSalesTableCC.CreditCardId= salesTableCC.CreditCardId;
        #        newSalesTableCC.CreditCardTrxType = salesTableCC.CreditCardTrxType;
        #        newSalesTableCC.PNRef       = ccTransNew.PNRef;
        #        newSalesTableCC.Processed   = NoYes::Yes;
        #        newSalesTableCC.SalesId     = salesTable.SalesId;
        #        newSalesTableCC.TransID     = ccTransNew.TransID;
        #        newSalesTableCC.CaptureRestricted = CreditCardParameters::findParameterWithTerminal(ccTransnew.TerminalId).CaptureRestricted;
        #        newSalesTableCC.CurrencyCode= salesTableCC.CurrencyCode;
        #        newSalesTableCC.insert();
        #
        #        select forupdate origSalesTableCC
        #            where origSalesTableCC.RecId == salesTableCC.RecId;
        #
        #        origSalesTableCC.Cancelled = NoYes::Yes;
        #        origSalesTableCC.update();
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Error)
        #    {
        #        select firstonly ccTransNew where ccTransNew.RecId == ccTrans.RecId;
        #
        #        SalesTableCC::createTrans(ccTransNew);
        #    }
        #
        #    return newSalesTableCC;
        #
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    //BP Deviation documented
        #    errCCTrans.setTmp();
        #    //BP Deviation documented
        #    errSalesTableCC.setTmp();
        #}
      ENDSOURCE
      SOURCE #parmCreditCardTrans
        #CreditCardTrans parmCreditCardTrans(CreditCardTrans _ccTrans = errCCTrans)
        #{
        #    ;
        #    errCCTrans = _ccTrans;
        #    return errCCTrans;
        #}
      ENDSOURCE
      SOURCE #parmCurrencyCode
        #private CurrencyCode parmCurrencyCode(currencyCode _currencyCode = currencyCode)
        #{
        #    ;
        #    currencyCode = _currencyCode;
        #    return currencyCode;
        #}
      ENDSOURCE
      SOURCE #parmDocumentSatus
        #private DocumentStatus parmDocumentSatus(DocumentStatus _documentSatus = documentStatus)
        #{
        #    ;
        #    documentStatus = _documentSatus;
        #    return documentStatus;
        #}
      ENDSOURCE
      SOURCE #parmFormLetter
        #private FormLetter parmFormLetter(FormLetter _salesFormLetter = formLetter)
        #{
        #    ;
        #    formLetter = _salesFormLetter;
        #    return formLetter;
        #}
      ENDSOURCE
      SOURCE #parmInvoiceJournalPost
        #private SalesInvoiceJournalPost parmInvoiceJournalPost(SalesInvoiceJournalPost _invoiceJournalPost = invoiceJournalPost)
        #{
        #    ;
        #    invoiceJournalPost = _invoiceJournalPost;
        #    return invoiceJournalPost;
        #}
      ENDSOURCE
      SOURCE #parmPackingSlipJournalPost
        #private SalesPackingSlipJournalPost parmPackingSlipJournalPost(SalesPackingSlipJournalPost _packingSlipJournalPost = packingSlipJournalPost)
        #{
        #    ;
        #    packingSlipJournalPost = _packingSlipJournalPost;
        #    return packingSlipJournalPost;
        #}
      ENDSOURCE
      SOURCE #parmParmId
        #private ParmId parmParmId(ParmId _parmId = parmId)
        #{
        #    ;
        #    parmId = _parmId;
        #    return parmId;
        #}
      ENDSOURCE
      SOURCE #parmPickingListJournalPost
        #private SalesPickingListJournalPost parmPickingListJournalPost(SalesPickingListJournalPost _pickingListJournalPost = pickingListJournalPost)
        #{
        #    ;
        #    pickingListJournalPost = _pickingListJournalPost;
        #    return pickingListJournalPost;
        #}
      ENDSOURCE
      SOURCE #parmProjProposalJour
        #private ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = projProposalJour)
        #{
        #    ;
        #    projProposalJour = _projProposalJour;
        #    return projProposalJour;
        #}
      ENDSOURCE
      SOURCE #parmProjTotals
        #private Total parmProjTotals(Total _totals = projTotals)
        #{
        #    ;
        #    projTotals = _totals;
        #    return projTotals;
        #}
      ENDSOURCE
      SOURCE #parmSalesParmTable
        #private SalesParmTable parmSalesParmTable(salesParmTable _salesParmTable = salesParmTable)
        #{
        #    ;
        #    salesParmTable = _salesParmTable;
        #    return salesParmTable;
        #}
      ENDSOURCE
      SOURCE #parmSalesTable
        #public SalesTable parmSalesTable(salesTable _salesTable = salesTable)
        #{
        #    ;
        #    salesTable = _salesTable;
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #parmSalesTableCC
        #SalesTableCC parmSalesTableCC(SalesTableCC _ccTrans = errSalesTableCC)
        #{
        #    ;
        #    errSalesTableCC = _ccTrans;
        #    return errSalesTableCC;
        #}
      ENDSOURCE
      SOURCE #parmSalesTotals
        #private SalesTotals parmSalesTotals(salesTotals _salesTotals = salesTotals)
        #{
        #    ;
        #    salesTotals = _salesTotals;
        #    return salesTotals;
        #}
      ENDSOURCE
      SOURCE #parmServiceOrderTable
        #public SMAServiceOrderTable parmServiceOrderTable(SMAServiceOrderTable _serviceOrderTable = serviceOrderTable)
        #{
        #    ;
        #    serviceOrderTable = _serviceOrderTable;
        #    return serviceOrderTable;
        #}
      ENDSOURCE
      SOURCE #parmServiceTotals
        #private Total parmServiceTotals(Total _totals = serviceTotals)
        #{
        #    ;
        #    serviceTotals = _totals;
        #    return serviceTotals;
        #}
      ENDSOURCE
      SOURCE #updateConfirmShipment
        #boolean updateConfirmShipment(AmountCur        amountCur,
        #                              CurrencyCode     _currencyCode)
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    AmountMST               amountMSTCC;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    CreditCardParameters    ccParams;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    Counter                 numTrans;
        #    CreditCardTrans         ccTrans;
        #    ;
        #    currencyCode = _currencyCode;
        #
        #    processAmt = Currency::amountCur2MST(amountCur,currencyCode);
        #
        #    //Get total of SalesTableCC Transactions
        #    select sum(amountMST) from sumSalesTableCC where sumSalesTableCC.SalesId == salesTable.salesId
        #            && sumSalesTableCC.Cancelled == NoYes::No
        #            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && sumSalesTableCC.Captured == NoYes::No
        #            && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #    amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #    if (amountMSTCC >= processAmt)
        #    {
        #        while select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.Cancelled == NoYes::No
        #            && salesTableCC.Captured == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #        {
        #            if (processAmt > 0)
        #            {
        #                [transAmt,postingTypeFlag,ret] = this.captureCreditTransNoSalesTotals(CreditCardCaptureId::ShipConfirm,salesTableCC,processAmt,amountMSTCC);
        #                processAmt -= transAmt;
        #            }
        #
        #            if (transAmt != 0)
        #            {
        #                numTrans++;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        select count(RecId) from sumSalesTableCC
        #            join ccTrans
        #            group by terminalId
        #            where sumSalesTableCC.SalesId == salesTable.salesId
        #            && sumSalesTableCC.Cancelled == NoYes::No
        #            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && sumSalesTableCC.Captured == NoYes::No
        #            && sumSalesTableCC.Processed == NoYes::Yes
        #            && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #        if (sumSalesTableCC.RecId > 1)
        #        {
        #            while select sumSalesTableCC
        #                join ccTrans
        #                where sumSalesTableCC.SalesId == salesTable.salesId
        #                && sumSalesTableCC.Cancelled == NoYes::No
        #                && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && sumSalesTableCC.Captured == NoYes::No
        #                && sumSalesTableCC.Processed == NoYes::Yes
        #                && ccTrans.TransID == sumSalesTableCC.TransID
        #            {
        #                select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                if (ccParams.CaptureID == CreditCardCaptureId::ShipConfirm
        #                    && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                {
        #                    break;
        #                }
        #            }
        #        }
        #        else
        #        {
        #            select sumSalesTableCC
        #                join transId,TerminalId From ccTrans
        #                where sumSalesTableCC.SalesId == salesTable.salesId
        #                && sumSalesTableCC.Cancelled == NoYes::No
        #                && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && sumSalesTableCC.Captured == NoYes::No
        #                && sumSalesTableCC.Processed == NoYes::Yes
        #                && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #            select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #        }
        #
        #        if (!ccParams)
        #        {
        #            select ccParams where ccParams.PrimaryParam == NoYes::Yes
        #                || ccParams.PaymMode == salesTable.PaymMode;
        #        }
        #
        #        //--> Are we supposed to be capturing this transaction?
        #        //--> if the parameter is invoice and we are posting a shipment confirmation, move on.
        #        if (ccParams.CaptureID == CreditCardCaptureId::ShipConfirm
        #            && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #        {
        #            if (ccParams.AuthDelta)
        #            {
        #                //--> If amount to capture is more than what we have, we must assume that
        #                //--> we can capture what is available, then re-authorize the rest.
        #                while select salesTableCC
        #                    where salesTableCC.SalesId == SalesTable.SalesId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.Captured == NoYes::No
        #                    && salesTableCC.Processed == NoYes::Yes
        #                    && salesTableCC.Cancelled == NoYes::No
        #                {
        #                    if (processAmt > 0)
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureCreditTransNoSalesTotals(CreditCardCaptureId::ShipConfirm,salesTableCC,processAmt,amountMSTCC);
        #                        processAmt -= transAmt;
        #                    }
        #
        #                    if (transAmt != 0)
        #                    {
        #                        numTrans++;
        #                        //--> store last transaction
        #                        sumSalesTableCC.data(salesTableCC);
        #                    }
        #                }
        #
        #                if (processAmt > 0 && ret==true)
        #                {
        #                    select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.PrimaryCard == NoYes::Yes
        #                        && salesTableCC.Processed == NoYes::Yes;
        #
        #                    if (!salesTableCC)
        #                    {
        #                        ret = this.createAuthorization(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::ShipConfirm);
        #                    }
        #                    else
        #                    {
        #                        ret = this.createDeltaAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::ShipConfirm);
        #
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #            }
        #        }
        #    }
        #
        #    //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user
        #    if (numTrans==0 && amountMSTCC > 0 && ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #        && (ccParams.PaymMode == this.parmSalesTable().PaymMode && this.parmSalesTable().PaymMode))
        #    {
        #        ret = checkFailed(strFmt("@ACC1684"),this.parmSalesParmTable().SalesId);
        #    }
        #
        #
        #    //--> Reauth event.
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    //--> If reauthorization event is selected and is credit card order and we
        #    //--> have not processed anything else, this kicks in.
        #    if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::ShipConfirm
        #        && ccParams.PaymMode == this.parmSalesTable().PaymMode
        #        && transAmt == 0)
        #    {
        #        select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.PrimaryCard == NoYes::Yes
        #            && salesTableCC.Processed == NoYes::Yes;
        #
        #        //--> An existing transaction exists, we will re-use.
        #        if (salesTableCC)
        #        {
        #            this.createReAuthorization(salesTableCC,salesTotals,CreditCardCaptureID::ShipConfirm);
        #        }
        #        else
        #        {
        #            CreditCardTrans::createAuthorization(salesTotals.totalAmount(),
        #                salesTotals.currencyCode(),
        #                salesTable,
        #                ccParams.TerminalId);
        #        }
        #    }
        #
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #updateCreditCardInvoice
        #boolean updateCreditCardInvoice()
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    SalesParmUpdateCC       salesParmUpdateCC;
        #    SalesParmUpdate         salesParmUpdate;
        #    AmountMST               amountMSTCC;
        #    CreditCardTrans         ccTrans;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    CreditCardParameters    ccParams;
        #    Counter                 numTrans;
        #    MCRCustPaymTable        custPaymTable;
        #    container               lastJournals;
        #    PickingListId           lastPickingList;
        #    PackingSlipId           lastPackingSlip;
        #    TransDate               transDate;
        #    parmId                  refParmId;
        #    CustPackingSlipJour     custPackingSlipJour;
        #    ;
        #    select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #
        #    if (!ccParams.CallCenter)
        #    {
        #        //--> Is the authorization specified?
        #        select sum(amountCur) from salesParmUpdateCC
        #            where salesParmUpdateCC.ParmId == salesParmTable.ParmId;
        #
        #        //--> Get posting amount
        #        if (salesParmUpdateCC.AmountCur > 0)
        #        {
        #            processAmt = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #            processAmt -= this.parmSalesTotals().cashDiscAmount();
        #            //--> Make sure amount selected is enough to cover posting.
        #            if (salesParmUpdateCC.AmountCur < processAmt)
        #            {
        #                ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #            }
        #
        #            while select salesParmUpdateCC
        #                where salesParmUpdateCC.ParmId == this.parmSalesParmTable().ParmId
        #            {
        #                processAmt = Currency::amountCur2MST(salesParmUpdateCC.AmountCur,salesParmUpdateCC.CurrencyCode);
        #                select salesTableCC where salesTableCC.TransID == salesParmUpdateCC.TransID
        #                    && salesTableCC.Cancelled == NoYes::No;
        #
        #                if (salesTableCC)
        #                {
        #                    [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,processAmt,amountMSTCC);
        #                    processAmt -= transAmt;
        #                }
        #                else
        #                {
        #                    ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            processAmt = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #            processAmt -= this.parmSalesTotals().cashDiscAmount();
        #
        #            lastJournals = this.parmSalesTable().lastJournals();
        #            salesParmUpdate = salesParmUpdate::find(this.parmParmId());
        #
        #            if (ccParams.ReAuthType == CreditCardReAuthType::PickList)
        #            {
        #                [lastPickingList,   transDate]    = conpeek(lastJournals, SalesTableType::posPickingList());
        #
        #                refParmId = WMSPickingRoute::find(lastPickingList).ParmId;
        #            }
        #            else if (ccParams.ReAuthType == CreditCardReAuthType::PackSlip)
        #            {
        #                [lastPackingSlip,   transDate]    = conpeek(lastJournals, SalesTableType::posPackingSlip());
        #                select CustPackingSlipJour
        #                    where CustPackingSlipJour.PackingSlipId == lastPackingSlip
        #                    && custPackingSlipJour.DeliveryDate == transDate;
        #
        #                refParmId = custPackingSlipJour.ParmId;
        #            }
        #
        #            if (refParmId)
        #            {
        #                //See if there is an authorization for this posting?
        #                select sumSalesTableCC
        #                        join ccTrans
        #                        where sumSalesTableCC.Cancelled == NoYes::No
        #                        && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && sumSalesTableCC.Captured == NoYes::No
        #                        && sumSalesTableCC.processed == NoYes::Yes
        #                        && sumSalesTableCC.TransID == ccTrans.TransID
        #                        && ccTrans.ParmId == refParmId
        #                        && ccTrans.AmountMST >= processAmt;
        #            }
        #
        #            if (refParmId && sumSalesTableCC)
        #            {
        #                [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,sumSalesTableCC,processAmt,amountMSTCC);
        #            }
        #            else
        #            {
        #                //Get total of SalesTableCC Transactions
        #                select sum(amountMST),salesid from sumSalesTableCC where sumSalesTableCC.SalesId == salesTable.salesId
        #                        && sumSalesTableCC.Cancelled == NoYes::No
        #                        && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && sumSalesTableCC.Captured == NoYes::No
        #                        && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #                amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #                //--> Is the amount to capture less than the total of the authorizations.
        #                if (amountMSTCC >= processAmt)
        #                {
        #                    while select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Cancelled == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,processAmt,amountMSTCC);
        #                        processAmt -= transAmt;
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    select count(RecId) from sumSalesTableCC
        #                        join ccTrans
        #                        group by terminalId
        #                        where sumSalesTableCC.SalesId == salesTable.salesId
        #                        && sumSalesTableCC.Cancelled == NoYes::No
        #                        && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && sumSalesTableCC.Captured == NoYes::No
        #                        && sumSalesTableCC.Processed == NoYes::Yes
        #                        && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #                    if (sumSalesTableCC.RecId > 1)
        #                    {
        #                        while select sumSalesTableCC
        #                            join ccTrans
        #                            where sumSalesTableCC.SalesId == salesTable.salesId
        #                            && sumSalesTableCC.Cancelled == NoYes::No
        #                            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                            && sumSalesTableCC.Captured == NoYes::No
        #                            && sumSalesTableCC.Processed == NoYes::Yes
        #                            && ccTrans.TransID == sumSalesTableCC.TransID
        #                        {
        #                            select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                            if (ccParams.CaptureID == CreditCardCaptureId::Invoice
        #                                && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                            {
        #                                break;
        #                            }
        #                        }
        #                    }
        #                    else
        #                    {
        #                        select sumSalesTableCC
        #                            join ccTrans
        #                            where sumSalesTableCC.SalesId == salesTable.salesId
        #                            && sumSalesTableCC.Cancelled == NoYes::No
        #                            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                            && sumSalesTableCC.Processed == NoYes::Yes
        #                            && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #                        select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                    }
        #
        #                    if (!ccParams)
        #                    {
        #                        select ccParams where ccParams.PrimaryParam == NoYes::Yes
        #                            || ccParams.PaymMode == salesTable.PaymMode;
        #                    }
        #
        #                    //--> Are we supposed to be capturing this transaction?
        #                    //--> if the parameter is invoice and we are posting a packing slip, move on.
        #                    if (ccParams.CaptureID == CreditCardCaptureId::Invoice
        #                        && ccParams.PaymMode == this.parmSalesTable().PaymMode )
        #                    {
        #                        if (ccParams.AuthDelta)
        #                        {
        #                            //--> If amount to capture is more than what we have, we must assume that
        #                            //--> we can capture what is available, then re-authorize the rest.
        #                            while select salesTableCC
        #                                where salesTableCC.SalesId == SalesTable.SalesId
        #                                && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                                && salesTableCC.Processed == NoYes::Yes
        #                                && salesTableCC.Cancelled == NoYes::No
        #                            {
        #                                [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,processAmt,amountMSTCC);
        #                                processAmt -= transAmt;
        #                                if (transAmt != 0)
        #                                {
        #                                    numTrans++;
        #                                    //--> store last transaction
        #                                    sumSalesTableCC.data(salesTableCC);
        #                                }
        #                            }
        #
        #                            if (processAmt > 0 && ret==true)
        #                            {
        #                                select salesTableCC
        #                                    where salesTableCC.SalesId == SalesTable.SalesId
        #                                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                                    && salesTableCC.PrimaryCard == NoYes::Yes
        #                                    && salesTableCC.Processed == NoYes::Yes;
        #
        #                                if (!salesTableCC)
        #                                {
        #                                    ret = this.createAuthorization(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::Invoice);
        #                                }
        #                                else
        #                                {
        #                                    ret = this.createDeltaAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::Invoice);
        #
        #                                }
        #                            }
        #                        }
        #                        else
        #                        {
        #                            if (ccParams.AllowOverCapture)
        #                            {
        #                                while select salesTableCC
        #                                    where salesTableCC.SalesId == SalesTable.SalesId
        #                                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                                    && salesTableCC.Cancelled == NoYes::No
        #                                    && salesTableCC.Captured == NoYes::No
        #                                    && salesTableCC.Processed == NoYes::Yes
        #                                {
        #                                    [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,processAmt,amountMSTCC);
        #                                    processAmt -= transAmt;
        #                                    if (transAmt != 0)
        #                                    {
        #                                        numTrans++;
        #                                    }
        #                                }
        #                            }
        #                            else
        #                            {
        #                                //--> It is possible that call center has processed cash or
        #                                //--> gift cards.  If this ist he case, we have to assume that the
        #                                //--> Call Center functionality would not have allowed the transaction
        #                                //--> to get to this point unless everything was paid.
        #                                if (ccParams.CallCenter)
        #                                {
        #                                    while select salesTableCC
        #                                        where salesTableCC.SalesId == SalesTable.SalesId
        #                                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                                        && salesTableCC.Cancelled == NoYes::No
        #                                        && salesTableCC.Captured == NoYes::No
        #                                        && salesTableCC.Processed == NoYes::Yes
        #                                   {
        #                                        [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,salesTableCC.AmountMST,amountMSTCC);
        #                                        processAmt -= transAmt;
        #                                        if (transAmt != 0)
        #                                        {
        #                                            numTrans++;
        #                                        }
        #                                    }
        #                                }
        #                                else
        #                                {
        #                                    //--> If amount MSTCC is there, this means there are authorizations.  If authorizations and no parameters, we throw error.
        #                                    if (amountMSTCC > 0)
        #                                    {
        #                                        ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #                                    }
        #                                }
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #
        #            //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user
        #            if (numTrans==0 &&  processAmt > 0 && ccParams.CaptureID == CreditCardCaptureId::Invoice
        #                && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #            {
        #                ret = checkFailed(strFmt("@ACC1684",this.parmSalesParmTable().SalesId));
        #            }
        #        }
        #    }
        #    else
        #    {
        #        ret = this.updateCreditCardInvoiceCallCenter();
        #    }
        #
        #
        #    //<-- If a returned item, see if it is a "Credit Capture"
        #    select ccTrans
        #        where ccTrans.TransType == CreditCardTrxType::C
        #        && ccTrans.SalesId == salesTable.SalesId;
        #
        #    if (ccTrans)
        #    {
        #        if (CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreditCapture)
        #        {
        #            this.captureCCRegisteredCredit();
        #        }
        #    }
        #
        #     //<-- Invoice apply payment
        #    this.ApplyPayment();
        #
        #
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    //--> If one of the transactions had posting type assosicated with the terminal, we
        #    //--> check them all.
        #    if ((postingTypeFlag == true || ccParams.PostingType == CreditCardPostingType::Invoice)
        #        && ccParams.paymMode == salesTable.paymMode)
        #    {
        #        if (!CreditCardTrans::checkIsPaid(SalesTable.SalesId, salesTotals.totalAmount()))
        #        {
        #            throw error("@ACC266");
        #        }
        #    }
        #
        #    return ret;
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #updateCreditCardInvoiceCallCenter
        #private boolean updateCreditCardInvoiceCallCenter()
        #{
        #    NoYes                   ret = true;
        #    MCRCustPaymTable        custPaymTable;
        #    AmountMST               totalPayments,paymentOther,ccPayments;
        #    CreditCardTrans         ccTrans;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    Amount                  amountPaid, invoiceTotal;
        #    NoYes                   postingTypeFlag;
        #    SalesTableCC            salesTableCC;
        #    Counter                 numTrans;
        #    CreditCardParameters    ccParams;
        #    CreditCardTrans         sumCCTrans;
        #    salesTableCC            sumSalesTableCC;
        #    ;
        #    select sum(AmountCur) from sumCCTrans
        #        join salesTableCC
        #        where sumCCTrans.SalesId == this.parmSalesTable().SalesId
        #        && sumCCTrans.Result == "0"
        #        && (sumCCTrans.TransType == CreditCardTrxType::D
        #        || sumCCTrans.TransType == CreditCardTrxType::S
        #        || sumCCTrans.TransType == CreditCardTrxType::C
        #        || sumCCTrans.TransType == CreditCardTrxType::V)
        #        && sumCCTrans.TransID == salesTableCC.TransID
        #        && salesTableCC.Cancelled == NoYes::No;
        #
        #    amountPaid = sumCCTrans.AmountCur;
        #
        #    //Get total of SalesTableCC Transactions
        #    select sum(AmountCur),salesid from sumSalesTableCC where sumSalesTableCC.SalesId == salesTable.salesId
        #            && sumSalesTableCC.Cancelled == NoYes::No
        #            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && sumSalesTableCC.Captured == NoYes::No
        #            && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #    ccPayments = sumSalesTableCC.AmountCur;
        #
        #    InvoiceTotal = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #    InvoiceTotal -= this.parmSalesTotals().cashDiscAmount();
        #
        #    select sum(Amount) from custPaymTable
        #        where custPaymTable.RefRecId == this.parmSalesTable().RecId
        #        && custPaymTable.RefTableId == this.parmSalesTable().TableId
        #        && custPaymTable.CustPaymType != MCRCustPaymType::CreditCard;
        #
        #    paymentOther = custPaymTable.Amount;
        #
        #    totalPayments = paymentOther + amountPaid;
        #
        #    if (ccPayments >= invoiceTotal)
        #    {
        #        while select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.Cancelled == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #        {
        #            [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,invoiceTotal,ccPayments);
        #            processAmt -= transAmt;
        #            if (transAmt != 0)
        #            {
        #                numTrans++;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        invoiceTotal -= paymentOther;
        #
        #        select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #        //--> Are we supposed to be capturing this transaction?
        #        //--> if the parameter is invoice and we are posting a packing slip, move on.
        #        if (ccParams.CaptureID == CreditCardCaptureId::Invoice)
        #        {
        #            if (ccParams.AuthDelta)
        #            {
        #                //--> If amount to capture is more than what we have, we must assume that
        #                //--> we can capture what is available, then re-authorize the rest.
        #                while select salesTableCC
        #                    where salesTableCC.SalesId == SalesTable.SalesId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.Processed == NoYes::Yes
        #                    && salesTableCC.Cancelled == NoYes::No
        #                {
        #                    [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,invoiceTotal,ccPayments);
        #                    processAmt -= transAmt;
        #                    if (transAmt != 0)
        #                    {
        #                        numTrans++;
        #                    }
        #                }
        #
        #                if (processAmt > 0 && ret==true)
        #                {
        #                    select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.PrimaryCard == NoYes::Yes
        #                        && salesTableCC.Processed == NoYes::Yes;
        #
        #                    if (!salesTableCC)
        #                    {
        #                        ret = this.createAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::Invoice);
        #                    }
        #                    else
        #                    {
        #                        ret = this.createDeltaAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::Invoice);
        #
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (ccParams.AllowOverCapture)
        #                {
        #                    while select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Cancelled == NoYes::No
        #                        && salesTableCC.Captured == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,ccPayments,invoiceTotal);
        #                        processAmt -= transAmt;
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    while select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Cancelled == NoYes::No
        #                        && salesTableCC.Captured == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::Invoice,salesTableCC,salesTableCC.AmountMST,invoiceTotal);
        #                        processAmt -= transAmt;
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                        }
        #                    }
        #
        #                }
        #
        #            }
        #        }
        #
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #updateCreditCardPackingSlip
        #boolean updateCreditCardPackingSlip()
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    SalesParmUpdateCC       salesParmUpdateCC;
        #    AmountMST               amountMSTCC;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    CreditCardParameters    ccParams;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    Counter                  numTrans;
        #    CreditCardTrans         ccTrans;
        #    ;
        #    //--> Is the authorization specified?
        #    select sum(amountCur) from salesParmUpdateCC
        #        where salesParmUpdateCC.ParmId == this.parmSalesParmTable().ParmId;
        #
        #    //--> Get posting amount
        #    if (salesParmUpdateCC.AmountCur > 0)
        #    {
        #        //--> Make sure amount selected is enough to cover posting.
        #        if (salesParmUpdateCC.AmountCur < Currency::amountCur2MST(salesTotals.totalAmount(),salesTable.CurrencyCode))
        #        {
        #            ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #        }
        #
        #        while select salesParmUpdateCC
        #            where salesParmUpdateCC.ParmId == this.parmSalesParmTable().ParmId
        #        {
        #            processAmt = Currency::amountCur2MST(salesParmUpdateCC.AmountCur,salesParmUpdateCC.CurrencyCode);
        #            select salesTableCC where salesTableCC.TransID == salesParmUpdateCC.TransID
        #                && salesTableCC.Cancelled == NoYes::No;
        #            if (salesTableCC)
        #            {
        #                this.captureCreditTrans(CreditCardCaptureId::PackSlip,salesTableCC,processAmt,amountMSTCC);
        #            }
        #            else
        #            {
        #                ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #            }
        #        }
        #    }
        #    else
        #    {
        #        processAmt = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #
        #        //Get total of SalesTableCC Transactions
        #        select sum(amountMST) from sumSalesTableCC where sumSalesTableCC.SalesId == salesTable.salesId
        #                && sumSalesTableCC.Cancelled == NoYes::No
        #                && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && sumSalesTableCC.Captured == NoYes::No
        #                && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #        amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #        if (amountMSTCC >= processAmt)
        #        {
        #            while select salesTableCC
        #                where salesTableCC.SalesId == SalesTable.SalesId
        #                && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && salesTableCC.Cancelled == NoYes::No
        #                && salesTableCC.Captured == NoYes::No
        #                && salesTableCC.Processed == NoYes::Yes
        #            {
        #                if (processAmt > 0)
        #                {
        #                    [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PackSlip,salesTableCC,processAmt,amountMSTCC);
        #                    processAmt -= transAmt;
        #                }
        #
        #                if (transAmt != 0)
        #                {
        #                    numTrans++;
        #                }
        #            }
        #        }
        #        else
        #        {
        #            select count(RecId) from sumSalesTableCC
        #                join ccTrans
        #                group by terminalId
        #                where sumSalesTableCC.SalesId == salesTable.salesId
        #                && sumSalesTableCC.Cancelled == NoYes::No
        #                && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && sumSalesTableCC.Captured == NoYes::No
        #                && sumSalesTableCC.Processed == NoYes::Yes
        #                && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #            if (sumSalesTableCC.RecId > 1)
        #            {
        #                while select sumSalesTableCC
        #                    join transId,TerminalId From ccTrans
        #                    where sumSalesTableCC.SalesId == salesTable.salesId
        #                    && sumSalesTableCC.Cancelled == NoYes::No
        #                    && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && sumSalesTableCC.Processed == NoYes::Yes
        #                    && ccTrans.TransID == sumSalesTableCC.TransID
        #                {
        #                    select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                    if (ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #                        && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                    {
        #                        if (processAmt > 0)
        #                        {
        #                            [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PackSlip,sumSalesTableCC,processAmt,amountMSTCC);
        #                            processAmt -= transAmt;
        #                        }
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                select sumSalesTableCC
        #                    join transId,TerminalId From ccTrans
        #                    where sumSalesTableCC.SalesId == salesTable.salesId
        #                    && sumSalesTableCC.Cancelled == NoYes::No
        #                    && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && sumSalesTableCC.Captured == NoYes::No
        #                    && sumSalesTableCC.Processed == NoYes::Yes
        #                    && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #                select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #            }
        #
        #            if (!ccParams)
        #            {
        #                select ccParams where ccParams.PrimaryParam == NoYes::Yes
        #                    || ccParams.PaymMode == salesTable.PaymMode;
        #            }
        #
        #            //--> Are we supposed to be capturing this transaction?
        #            //--> if the parameter is invoice and we are posting a packing slip, move on.
        #            if (ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #                && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #            {
        #                if (ccParams.AuthDelta)
        #                {
        #                    //--> If amount to capture is more than what we have, we must assume that
        #                    //--> we can capture what is available, then re-authorize the rest.
        #                    while select salesTableCC
        #                        where salesTableCC.SalesId == SalesTable.SalesId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Captured == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                        && salesTableCC.Cancelled == NoYes::No
        #                    {
        #                        if (processAmt > 0)
        #                        {
        #                            [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PackSlip,salesTableCC,processAmt,amountMSTCC);
        #                            processAmt -= transAmt;
        #                        }
        #
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                            //--> store last transaction
        #                            sumSalesTableCC.data(salesTableCC);
        #                        }
        #                    }
        #
        #                    if (processAmt > 0 && ret==true)
        #                    {
        #                        select salesTableCC
        #                            where salesTableCC.SalesId == SalesTable.SalesId
        #                            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                            && salesTableCC.PrimaryCard == NoYes::Yes
        #                            && salesTableCC.Processed == NoYes::Yes;
        #
        #                        if (!salesTableCC)
        #                        {
        #                            ret = this.createAuthorization(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::PackSlip);
        #                        }
        #                        else
        #                        {
        #                            ret = this.createDeltaAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::PackSlip);
        #
        #                        }
        #                    }
        #                }
        #                else if  (ccParams.AllowOverCapture)
        #                {
        #                    if (ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #                        && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                    {
        #                        if (processAmt > 0)
        #                        {
        #                            [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PackSlip,sumSalesTableCC,processAmt,amountMSTCC);
        #                            processAmt -= transAmt;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #                }
        #            }
        #        }
        #
        #        //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user
        #        if (numTrans==0 && amountMSTCC > 0 && ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #            && (ccParams.PaymMode == this.parmSalesTable().PaymMode && this.parmSalesTable().PaymMode))
        #        {
        #            ret = checkFailed(strFmt("@ACC1684"),this.parmSalesParmTable().SalesId);
        #        }
        #    }
        #
        #    //--> Reauth event.
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    //--> If reauthorization event is selected and is credit card order and we
        #    //--> have not processed anything else, this kicks in.
        #    if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::PackSlip
        #        && ccParams.PaymMode == this.parmSalesTable().PaymMode
        #        && transAmt == 0)
        #    {
        #        select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.PrimaryCard == NoYes::No
        #            && salesTableCC.Captured == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #            && salesTableCC.AmountCur >= processAmt;
        #
        #        //--> An existing transaction exists, we will re-use.
        #        if (!salesTableCC)
        #        {
        #            ret = checkFailed(strFmt("No authorizations have been created for sales order %1"),this.parmSalesTable().SalesId);
        #        }
        #    }
        #
        #    //--> If one of the transactions had posting type assosicated with the terminal, we
        #    //--> check them all.
        #    if ((postingTypeFlag == true || ccParams.PostingType == CreditCardPostingType::Packing)
        #        && ccParams.paymMode == salesTable.paymMode)
        #    {
        #        if (!CreditCardTrans::checkIsPaid(SalesTable.SalesId, salesTotals.totalAmount()))
        #        {
        #            ret = checkFailed("@ACC1896");
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #updateCreditCardPickingList
        #boolean updateCreditCardPickingList()
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    SalesParmUpdateCC       salesParmUpdateCC;
        #    AmountMST               amountMSTCC;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    CreditCardParameters    ccParams;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    Counter                 numTrans;
        #    CreditCardTrans         ccTrans;
        #    ;
        #    //--> Is the authorization specified?
        #    select sum(amountCur) from salesParmUpdateCC
        #        where salesParmUpdateCC.ParmId == this.parmSalesParmTable().ParmId;
        #
        #    select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #
        #    //--> Get posting amount
        #    if (salesParmUpdateCC.AmountCur > 0)
        #    {
        #        processAmt = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #        //--> Make sure amount selected is enough to cover posting.
        #        if (salesParmUpdateCC.AmountCur < processAmt)
        #        {
        #            ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #        }
        #
        #        while select salesParmUpdateCC
        #            where salesParmUpdateCC.ParmId == this.parmSalesParmTable().ParmId
        #        {
        #            processAmt = Currency::amountCur2MST(salesParmUpdateCC.AmountCur,salesParmUpdateCC.CurrencyCode);
        #            select salesTableCC where salesTableCC.TransID == salesParmUpdateCC.TransID
        #                && salesTableCC.Cancelled == NoYes::No;
        #
        #            if (salesTableCC)
        #            {
        #                [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,salesTableCC,processAmt,amountMSTCC);
        #                processAmt -= transAmt;
        #            }
        #            else
        #            {
        #                ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #            }
        #        }
        #    }
        #    else
        #    {
        #        processAmt = Currency::amountCur2MST(this.parmSalesTotals().totalAmount(),this.parmSalesTotals().CurrencyCode());
        #
        #        //See if there is an authorization for this posting?
        #        select sumSalesTableCC
        #                join ccTrans
        #                where sumSalesTableCC.Cancelled == NoYes::No
        #                && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                && sumSalesTableCC.Captured == NoYes::No
        #                && sumSalesTableCC.processed == NoYes::Yes
        #                && sumSalesTableCC.TransID == ccTrans.TransID
        #                && ccTrans.ParmId == this.parmParmId()
        #                && ccTrans.AmountMST >= processAmt;
        #
        #        if (sumSalesTableCC)
        #        {
        #            [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,sumSalesTableCC,processAmt,amountMSTCC);
        #        }
        #        else
        #        {
        #
        #            //Get total of SalesTableCC Transactions
        #            select sum(amountMST) from sumSalesTableCC where sumSalesTableCC.SalesId == salesTable.salesId
        #                    && sumSalesTableCC.Cancelled == NoYes::No
        #                    && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && sumSalesTableCC.Captured == NoYes::No;
        #
        #            amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #            if (amountMSTCC >= processAmt)
        #            {
        #                while select salesTableCC
        #                    where salesTableCC.SalesId == SalesTable.SalesId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.Cancelled == NoYes::No
        #                    && salesTableCC.Processed == NoYes::Yes
        #                {
        #                    if (processAmt > 0)
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,salesTableCC,processAmt,amountMSTCC);
        #                        processAmt -= transAmt;
        #                    }
        #
        #                    if (transAmt != 0)
        #                    {
        #                        numTrans++;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                select count(RecId) from sumSalesTableCC
        #                    join ccTrans
        #                    group by terminalId
        #                    where sumSalesTableCC.SalesId == salesTable.salesId
        #                    && sumSalesTableCC.Cancelled == NoYes::No
        #                    && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && sumSalesTableCC.Processed == NoYes::Yes
        #                    && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #                if (sumSalesTableCC.RecId > 1)
        #                {
        #                    while select sumSalesTableCC
        #                        join ccTrans
        #                        where sumSalesTableCC.SalesId == salesTable.salesId
        #                        && sumSalesTableCC.Cancelled == NoYes::No
        #                        && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && sumSalesTableCC.Processed == NoYes::Yes
        #                        && ccTrans.TransID == sumSalesTableCC.TransID
        #                    {
        #                        select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                        if (ccParams.CaptureID == CreditCardCaptureId::PickList
        #                            && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                        {
        #                            break;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    select sumSalesTableCC
        #                        join transId,TerminalId From ccTrans
        #                        where sumSalesTableCC.SalesId == salesTable.salesId
        #                        && sumSalesTableCC.Cancelled == NoYes::No
        #                        && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && sumSalesTableCC.Processed == NoYes::Yes
        #                        && ccTrans.TransID == sumSalesTableCC.TransID;
        #
        #                    select ccParams where ccParams.TerminalId == ccTrans.TerminalId;
        #                }
        #
        #                if (!ccParams)
        #                {
        #                    select ccParams where ccParams.PrimaryParam == NoYes::Yes
        #                        || ccParams.PaymMode == salesTable.PaymMode;
        #                }
        #
        #                //--> Are we supposed to be capturing this transaction?
        #                //--> if the parameter is invoice and we are posting a packing slip, move on.
        #                if (ccParams.CaptureID == CreditCardCaptureId::PickList
        #                    && (ccParams.PaymMode == this.parmSalesTable().PaymMode
        #                    && this.parmSalesTable().PaymMode))
        #                {
        #                    if (ccParams.AuthDelta)
        #                    {
        #                        //--> If amount to capture is more than what we have, we must assume that
        #                        //--> we can capture what is available, then re-authorize the rest.
        #                        while select salesTableCC
        #                            where salesTableCC.SalesId == SalesTable.SalesId
        #                            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                            && salesTableCC.Processed == NoYes::Yes
        #                            && salesTableCC.Cancelled == NoYes::No
        #                        {
        #                            if (processAmt > 0)
        #                            {
        #                                [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,salesTableCC,processAmt,amountMSTCC);
        #                                processAmt -= transAmt;
        #                            }
        #
        #                            if (transAmt != 0)
        #                            {
        #                                numTrans++;
        #                                //--> store last transaction
        #                                sumSalesTableCC.data(salesTableCC);
        #                            }
        #                        }
        #
        #                        if (processAmt > 0 && ret==true)
        #                        {
        #                            select salesTableCC
        #                                where salesTableCC.SalesId == SalesTable.SalesId
        #                                && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                                && salesTableCC.PrimaryCard == NoYes::Yes
        #                                && salesTableCC.Processed == NoYes::Yes;
        #
        #                            if (!salesTableCC)
        #                            {
        #                                ret = this.createAuthorization(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::PickList);
        #                            }
        #                            else
        #                            {
        #                                ret = this.createDeltaAuthorization(salesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::PickList);
        #
        #                            }
        #                        }
        #
        #                    }
        #                    else if  (ccParams.AllowOverCapture)
        #                    {
        #                        if (ccParams.CaptureID == CreditCardCaptureId::PackSlip
        #                            && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #                        {
        #                            if (processAmt > 0)
        #                            {
        #                                [transAmt,postingTypeFlag,ret] = this.captureCreditTrans(CreditCardCaptureId::PickList,sumSalesTableCC,processAmt,amountMSTCC);
        #                                processAmt -= transAmt;
        #                            }
        #                        }
        #                    }
        #                    else
        #                    {
        #                        ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #                    }
        #                }
        #            }
        #        }
        #
        #        //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user.  Make sure PickList is
        #        //--> not selected because it is the default value on enum
        #        if (numTrans==0 && amountMSTCC > 0 && ccParams.CaptureID == CreditCardCaptureId::PickList && ccParams.RecId > 0
        #            && (ccParams.PaymMode == this.parmSalesTable().PaymMode && this.parmSalesTable().PaymMode))
        #        {
        #            ret = checkFailed(strFmt("@ACC1684"),this.parmSalesParmTable().SalesId);
        #        }
        #    }
        #
        #    //--> Reauth event.
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    //--> If reauthorization event is selected and is credit card order and we
        #    //--> have not processed anything else, this kicks in.
        #    if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::PickList
        #        && ccParams.PaymMode == salesTable.PaymMode
        #        && transAmt == 0)
        #    {
        #        select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.PrimaryCard == NoYes::No
        #            && salesTableCC.Captured == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #            && salesTableCC.AmountCur >= processAmt;
        #
        #        //--> An existing transaction exists, we will re-use.
        #        if (!salesTableCC)
        #        {
        #            ret = checkFailed(strFmt("No authorizations have been created for sales order %1"),this.parmSalesTable().SalesId);
        #        }
        #    }
        #
        #    //--> If one of the transactions had posting type assosicated with the terminal, we
        #    //--> check them all.
        #    if ((postingTypeFlag == true || ccParams.PostingType == CreditCardPostingType::Picking)
        #        && ccParams.paymMode == salesTable.paymMode)
        #    {
        #        if (!CreditCardTrans::checkIsPaid(SalesTable.SalesId, salesTotals.totalAmount()))
        #        {
        #            ret = checkFailed("@ACC266");
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #updateCreditCardProjInvoice
        #boolean updateCreditCardProjInvoice()
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    AmountMST               amountMSTCC;
        #    CreditCardTrans         ccTrans;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    CreditCardParameters    ccParams;
        #    Counter                  numTrans;
        #    ;
        #    processAmt = Currency::amountCur2MST(this.parmProjTotals(),ProjTable::find(this.parmProjProposalJour().ProjInvoiceProjId).currencyId());
        #
        #    //Get total of SalesTableCC Transactions
        #    select sum(amountMST),salesid from sumSalesTableCC
        #            where sumSalesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #            && sumSalesTableCC.Cancelled == NoYes::No
        #            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && sumSalesTableCC.Captured == NoYes::No
        #            && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #    if (sumSalesTableCC.AmountMST == 0)
        #    {
        #        return true;
        #    }
        #
        #    select ccTrans
        #        where ccTrans.ProjProposalId == this.parmProjProposalJour().ProposalId
        #        && ccTrans.Result == '0';
        #
        #    if (ccTrans.CurrencyCode != CompanyInfo::standardCurrency())
        #    {
        #        processAmt = Currency::amountCur2MST(this.parmProjTotals(),ccTrans.CurrencyCode);
        #    }
        #
        #    amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #    if (amountMSTCC >= processAmt)
        #    {
        #        while select salesTableCC
        #            where salesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.Cancelled == NoYes::No
        #            && salesTableCC.Captured == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #        {
        #            [transAmt,postingTypeFlag,ret] = this.captureProjInvoiceCreditTrans(CreditCardServiceCaptureType::Proposal,salesTableCC,processAmt,amountMSTCC);
        #            processAmt -= transAmt;
        #            if (transAmt != 0)
        #            {
        #                numTrans++;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #
        #        //--> Are we supposed to be capturing this transaction?
        #        //--> if the parameter is invoice and we are posting a packing slip, move on.
        #        if (ccParams.ServiceCaptureType == CreditCardServiceCaptureType::Proposal
        #            && ccParams.Payment == this.parmProjProposalJour().Payment )
        #        {
        #
        #            if (ccParams.AuthDelta)
        #            {
        #                //--> If amount to capture is more than what we have, we must assume that
        #                //--> we can capture what is available, then re-authorize the rest.
        #                while select salesTableCC
        #                    where salesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.Captured == NoYes::No
        #                    && salesTableCC.Processed == NoYes::Yes
        #                    && salesTableCC.Cancelled == NoYes::No
        #                {
        #                    [transAmt,postingTypeFlag,ret] = this.captureProjInvoiceCreditTrans(CreditCardServiceCaptureType::Proposal,salesTableCC,amountMSTCC,amountMSTCC);
        #                    processAmt -= transAmt;
        #                    if (transAmt != 0)
        #                    {
        #                        numTrans++;
        #                        //--> store last transaction
        #                        sumSalesTableCC.data(salesTableCC);
        #                    }
        #                }
        #
        #                if (processAmt > 0 && ret==true)
        #                {
        #                    if (CreditCardTable::findPrimary(salesTable.InvoiceAccount))
        #                    {
        #                        ret = this.createAuthorization(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardCaptureID::Invoice);
        #                    }
        #                    else
        #                    {
        #                        if (sumSalesTableCC.RecId == 0)
        #                        {
        #                            select firstOnly1 sumSalesTableCC
        #                                where sumSalesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #                                && sumSalesTableCC.Cancelled == NoYes::No;
        #
        #                            if (!sumSalesTableCC)
        #                            {
        #                                ret = checkFailed("@ACC1691");
        #                            }
        #                        }
        #
        #                        ret = this.createDeltaAuthorizationProj(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardServiceCaptureType::Proposal);
        #
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (ccParams.AllowOverCapture)
        #                {
        #                    while select salesTableCC
        #                        where salesTableCC.ProjProposalId == this.parmProjProposalJour().ProposalId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Cancelled == NoYes::No
        #                        && salesTableCC.Captured == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureProjInvoiceCreditTrans(CreditCardServiceCaptureType::Proposal,salesTableCC,processAmt,amountMSTCC);
        #                        processAmt -= transAmt;
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    //--> If amount MSTCC is there, this means there are authorizations.  If authorizations and no parameters, we throw error.
        #                    if (amountMSTCC > 0)
        #                    {
        #                        ret = checkFailed(strFmt("@ACC1359",this.parmProjProposalJour().ProposalId));
        #                    }
        #                }
        #            }
        #
        #        }
        #    }
        #
        #    //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user
        #    if (numTrans==0 && amountMSTCC > 0 && ccParams.ServiceCaptureType == CreditCardServiceCaptureType::Proposal
        #        && ccParams.Payment == this.parmSalesTable().PaymMode)
        #    {
        #        ret = checkFailed(strFmt("@ACC1684"),this.parmSalesParmTable().SalesId);
        #    }
        #
        #    //<-- If a returned item, see if it is a "Credit Capture"
        #    select ccTrans
        #        where ccTrans.TransType == CreditCardTrxType::C
        #        && ccTrans.ProjProposalId == this.parmProjProposalJour().ProposalId;
        #
        #    if (ccTrans)
        #    {
        #        if (CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreditCapture)
        #        {
        #            this.captureCCRegisteredCredit();
        #        }
        #    }
        #
        #    this.ApplyPaymentProject();
        #
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #
        #    return ret;
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #updateCreditCardServiceInvoice
        #boolean updateCreditCardServiceInvoice()
        #{
        #    SalesTableCC            salesTableCC;
        #    SalesTableCC            sumSalesTableCC;
        #    AmountMST               amountMSTCC;
        #    CreditCardTrans         ccTrans;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    NoYes                   postingTypeFlag;
        #    NoYes                   ret = true;
        #    CreditCardParameters    ccParams;
        #    Counter                 numTrans;
        #    ;
        #    processAmt = Currency::amountCur2MST(this.parmServiceTotals(),ProjTable::find(this.parmServiceOrderTable().ProjId).currencyId());
        #
        #    //Get total of SalesTableCC Transactions
        #    select sum(amountMST),salesid from sumSalesTableCC
        #            where sumSalesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #            && sumSalesTableCC.Cancelled == NoYes::No
        #            && sumSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && sumSalesTableCC.Captured == NoYes::No
        #            && sumSalesTableCC.Processed == NoYes::Yes;
        #
        #    amountMSTCC = sumSalesTableCC.AmountMST;
        #
        #    if (amountMSTCC == 0)
        #    {
        #        return true;
        #    }
        #
        #    if (amountMSTCC >= processAmt)
        #    {
        #        while select salesTableCC
        #            where salesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.Cancelled == NoYes::No
        #            && salesTableCC.Captured == NoYes::No
        #            && salesTableCC.Processed == NoYes::Yes
        #        {
        #            [transAmt,postingTypeFlag,ret] = this.captureServiceOrderCreditTrans(CreditCardServiceCaptureType::Posting,salesTableCC,processAmt,amountMSTCC);
        #            processAmt -= transAmt;
        #            if (transAmt != 0)
        #            {
        #                numTrans++;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #
        #        //--> Are we supposed to be capturing this transaction?
        #        //--> if the parameter is invoice and we are posting a packing slip, move on.
        #        if (ccParams.ServiceCaptureType == CreditCardServiceCaptureType::Proposal
        #            && ccParams.PaymMode == this.parmSalesTable().PaymMode )
        #        {
        #
        #            if (ccParams.AuthDelta)
        #            {
        #                //--> If amount to capture is more than what we have, we must assume that
        #                //--> we can capture what is available, then re-authorize the rest.
        #                while select salesTableCC
        #                    where salesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.Captured == NoYes::No
        #                    && salesTableCC.Processed == NoYes::Yes
        #                    && salesTableCC.Cancelled == NoYes::No
        #                {
        #                    [transAmt,postingTypeFlag,ret] = this.captureServiceOrderCreditTrans(CreditCardServiceCaptureType::Posting,salesTableCC,processAmt,amountMSTCC);
        #                    processAmt -= transAmt;
        #                    if (transAmt != 0)
        #                    {
        #                        numTrans++;
        #                        //--> store last transaction
        #                        sumSalesTableCC.data(salesTableCC);
        #                    }
        #                }
        #
        #                if (processAmt > 0 && ret==true)
        #                {
        #                    if (CreditCardTable::findPrimary(salesTable.InvoiceAccount))
        #                    {
        #                        ret = this.createAuthorizationProj(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardServiceCaptureType::Posting);
        #                    }
        #                    else
        #                    {
        #                        if (sumSalesTableCC.RecId == 0)
        #                        {
        #                            select firstOnly1 sumSalesTableCC
        #                                where sumSalesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #                                && sumSalesTableCC.Cancelled == NoYes::No;
        #
        #                            if (!sumSalesTableCC)
        #                            {
        #                                ret = checkFailed("@ACC1691");
        #                            }
        #                        }
        #
        #                        ret = this.createDeltaAuthorizationProj(sumSalesTableCC,processAmt,ccParams.TerminalId,CreditCardServiceCaptureType::Posting);
        #
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (ccParams.AllowOverCapture)
        #                {
        #                    while select salesTableCC
        #                        where salesTableCC.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #                        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                        && salesTableCC.Cancelled == NoYes::No
        #                        && salesTableCC.Captured == NoYes::No
        #                        && salesTableCC.Processed == NoYes::Yes
        #                    {
        #                        [transAmt,postingTypeFlag,ret] = this.captureServiceOrderCreditTrans(CreditCardServiceCaptureType::Posting,salesTableCC,processAmt,amountMSTCC);
        #                        processAmt -= transAmt;
        #                        if (transAmt != 0)
        #                        {
        #                            numTrans++;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    //--> If amount MSTCC is there, this means there are authorizations.  If authorizations and no parameters, we throw error.
        #                    if (amountMSTCC > 0)
        #                    {
        #                        ret = checkFailed(strFmt("@ACC1359",salesTable.SalesId));
        #                    }
        #                }
        #            }
        #        }
        #
        #    }
        #
        #    //--> Placed based on customer feedback. If authorizations exist and not processed, inform the user
        #    if (numTrans==0 && amountMSTCC > 0 && ccParams.CaptureID == CreditCardCaptureId::Invoice
        #        && ccParams.PaymMode == this.parmSalesTable().PaymMode)
        #    {
        #        ret = checkFailed(strFmt("@ACC1684"),this.parmSalesParmTable().SalesId);
        #    }
        #
        #    //<-- If a returned item, see if it is a "Credit Capture"
        #    select ccTrans
        #        where ccTrans.TransType == CreditCardTrxType::C
        #        && ccTrans.SalesId == salesTable.SalesId;
        #
        #    if (ccTrans)
        #    {
        #        if (CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreditCapture)
        #        {
        #            this.captureCCRegisteredCredit();
        #        }
        #    }
        #
        #
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #
        #    return ret;
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #updateCreditCardTrans
        #CreditCardTrans updateCreditCardTrans(CreditCardTrans ccTrans)
        #{
        #    ;
        #    ccTrans.ParmId = this.parmParmId();
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #updateWarehouseRelease
        #boolean updateWarehouseRelease(AmountCur        amountCur,
        #                               CurrencyCode     _currencyCode)
        #{
        #    SalesTableCC            salesTableCC;
        #    AmountMst               processAmt;
        #    AmountMST               transAmt;
        #    CreditCardParameters    ccParams;
        #    NoYes                   ret = true;
        #    CreditCardTrans         ccTrans;
        #    ;
        #    currencyCode = _currencyCode;
        #    processAmt = Currency::amountCur2MST(amountCur,currencyCode);
        #
        #    select salesTableCC
        #        where salesTableCC.SalesId == SalesTable.SalesId
        #        && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #        && salesTableCC.PrimaryCard == NoYes::Yes
        #        && salesTableCC.Processed == NoYes::Yes;
        #
        #    if (!salesTableCC)
        #    {
        #        select salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.Processed == NoYes::Yes;
        #    }
        #
        #    if (salesTableCC)
        #    {
        #        ccParams = CreditCardParameters::findParameterWithTerminal(CreditCardTrans::find(salesTableCC.TransID).TerminalId);
        #    }
        #
        #    //--> Reauth event.
        #    if (!ccParams)
        #    {
        #        select PostingType,PaymMode from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    //--> If reauthorization event is selected and is credit card order and we
        #    //--> have not processed anything else, this kicks in.
        #    if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::ReleaseToWH
        #        && ccParams.PaymMode == salesTable.PaymMode
        #        && transAmt == 0)
        #    {
        #        ttsBegin;
        #        select forUpdate salesTableCC
        #            where salesTableCC.SalesId == SalesTable.SalesId
        #            && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #            && salesTableCC.PrimaryCard == NoYes::Yes
        #            && salesTableCC.Processed == NoYes::Yes;
        #
        #        if (salesTableCC)
        #        {
        #            salesTableCC.Cancelled = NoYes::Yes;
        #            salesTableCC.write();
        #        }
        #        ttsCommit;
        #
        #        //--> An existing transaction exists, we will re-use.
        #        if (salesTableCC)
        #        {
        #            if (salesTableCC.AuthTransDate == dateNull() || ccParams.AuthByDate == NoYes::No)
        #            {
        #
        #                //--> if no stransaction exists, try primary.
        #                ccTrans = CreditCardTrans::createAuthorization(amountCur,
        #                    CurrencyCode,
        #                    salesTable,
        #                    ccParams.TerminalId,
        #                    salesTableCC);
        #            }
        #            else
        #            {
        #                //--> if no stransaction exists, try primary.
        #                ccTrans = CreditCardTrans::createAuthorization(SalesTableCC::getAmountByDate(SalesTableCC.SalesId,SalesTableCC.AuthTransDate),
        #                    CurrencyCode,
        #                    salesTable,
        #                    ccParams.TerminalId,
        #                    salesTableCC);
        #            }
        #        }
        #        else
        #        {
        #            //--> if no stransaction exists, try primary.
        #            ccTrans = CreditCardTrans::createAuthorization(amountCur,
        #                CurrencyCode,
        #                salesTable,
        #                ccParams.TerminalId);
        #        }
        #    }
        #
        #    if (ccTrans && ccTrans.Result != "0")
        #    {
        #        ret = false;
        #    }
        #    else
        #    {
        #        ret = true;
        #    }
        #
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #ApplyPaymentFreeText
        #static void ApplyPaymentFreeText(custInvoiceJour        custInvoiceJour,
        #                                CustInvoiceTable        custInvoiceTable)
        #{
        #    SpecTrans                   specTrans;
        #    CustTrans                   custTrans;
        #    CustTransOpen               custTransOpen;
        #    custTrans                   payCustTrans;
        #    custTransOpen               payCustTransOpen;
        #    LedgerJournalTrans          ledgerJournalTrans;
        #    CreditCardTrans             ccTransLocal;
        #    CreditCardParameters        ccParams;
        #    SpecTransManager            specTransManager;
        #    CustVendOpenTransManager    transManager;
        #    CustTable                   custTable;
        #    ;
        #
        #    ttsbegin;
        #    while select ccTransLocal
        #        where ccTransLocal.CustInvoiceRefRecId == CustInvoiceTable.RecId
        #              && ccTransLocal.Result  == '0'
        #              && (ccTransLocal.TransType == CreditCardTrxType::D
        #              || ccTransLocal.TransType == CreditCardTrxType::S
        #              || ccTransLocal.TransType == CreditCardTrxType::c)
        #
        #    {
        #        ccParams = CreditCardParameters::findParameterWithTerminal(ccTransLocal.TerminalId);
        #
        #        if (ccTransLocal && ccParams.ApplyPayment)
        #        {
        #
        #            select recId,Invoice,AmountCur,CurrencyCode,AccountNum from custTrans where custTrans.Invoice == CustInvoiceJour.InvoiceId
        #                && custTrans.AccountNum == custInvoiceJour.InvoiceAccount;
        #
        #            if (custTrans)
        #            {
        #                select forupdate custTransOpen where custTransOpen.RefRecId == custTrans.RecId;
        #
        #                if (custTransOpen && custTransOpen.AmountCur >= ccTransLocal.AmountCur
        #                    && !specTrans::existByRef(custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId))
        #                {
        #                    select count(recId) from ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #
        #                    //..if more than one record, we down shift to see if the exact amount is there
        #                    if (ledgerJournalTrans.RecId > 1)
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID
        #                            && ledgerJournalTrans.AmountCurCredit == specTrans.Balance01;
        #                    }
        #                    else
        #                    {
        #                        select forupdate ledgerJournalTrans where ledgerJournalTrans.Txt == ccTransLocal.TransID;
        #                    }
        #
        #                    specTrans = specTrans::findBySpec(ledgerJournalTrans.Company(),ledgerJournalTrans.TableId,ledgerJournalTrans.RecId);
        #
        #                    //--> Ledger voucher is already in use
        #                    if (specTrans)
        #                    {
        #                        continue;
        #                    }
        #
        #                    if (LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Posted == NoYes::No
        #                        && ledgerJournalTrans.RecId != 0)
        #                    {
        #                        ledgerJournalTrans.MarkedInvoice        = custTrans.Invoice;
        #                        ledgerJournalTrans.MarkedInvoiceCompany = custTrans.company();
        #                        ledgerJournalTrans.MarkedInvoiceRecId   = custTransOpen.RecId;
        #                        ledgerJournalTrans.SettleVoucher        = SettlementType::SelectedTransact;
        #
        #                        specTransManager = SpecTransManager::construct(ledgerJournalTrans);
        #
        #                        specTransManager.insert(
        #                            custTransOpen.company(),
        #                            custTransOpen.TableId,
        #                            custTransOpen.RecId,
        #                            custTransOpen.AmountCur,
        #                            custtrans.CurrencyCode);
        #
        #                        ledgerJournalTrans.update();
        #
        #
        #                    }
        #                    else
        #                    {
        #                        select AmountCur,CurrencyCode,Voucher,AccountNum,RecId from payCustTrans
        #                            where payCustTrans.Voucher == ledgerJournalTrans.Voucher;
        #
        #                        select payCustTransOpen
        #                            where payCustTransOpen.RefRecId == payCustTrans.RecId;
        #
        #                        if (abs(payCustTransOpen.AmountCur) >= custTransOpen.AmountCur
        #                            && payCustTrans.CurrencyCode == custTrans.CurrencyCode)
        #                        {
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #
        #                            custTable = CustTable::find(custTrans.AccountNum);
        #
        #                            transManager = CustVendOpenTransManager::construct(custTable);
        #                            //--Update invoice's open trans
        #
        #                            if (custTransOpen && payCustTrans)
        #                            {
        #                                try
        #                                {
        #                                    transManager.updateTransMarked(custTransOpen,NoYes::Yes);
        #                                    transManager.updateTransMarked(payCustTransOpen,NoYes::Yes);
        #                                    transManager.settleMarkedTrans();
        #                                    break;
        #                                }
        #                                catch (Exception::Error)
        #                                {
        #                                    continue;
        #                                }
        #                            }
        #                        }
        #
        #                    }
        #                }
        #
        #            }
        #
        #
        #        }
        #    }
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #construct
        #public static boolean construct(FormletterJournalPost        formLetterJournalPost,
        #                               DocumentStatus               documentStatus)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    SalesParmTable              salesParmTable;
        #    NoYes                       ret = true;
        #    CreditCardTrans             ccTrans;
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    salesTableCC                errSalesTableCC;
        #    DictClass                   dictClass = new DictClass(classIdGet(formLetterJournalPost));
        #    ;
        #    if (dictClass.id() == className2Id('SalesInvoiceJournalPost')
        #        || dictClass.id() == className2Id('SalesPickingListJournalPost')
        #        || dictClass.id() == className2Id('SalesPackingSlipJournalPost'))
        #    {
        #        ccPosting.parmSalesTotals(formLetterJournalPost.parmTotals());
        #        ccPosting.parmDocumentSatus(documentStatus);
        #
        #        select salesParmTable where salesParmTable.RecId ==  formLetterJournalPost.parmParmTable().RecId;
        #
        #        ccPosting.parmSalesParmTable(salesParmTable);
        #        ccPosting.parmParmId(salesParmTable.parmId);
        #        ccPosting.parmSalesTable(salesTable::find(salesParmTable.SalesId));
        #
        #        if (formLetterJournalPost.isProforma())
        #        {
        #            return true;
        #        }
        #
        #        switch (documentStatus)
        #        {
        #            case documentStatus::PickingList    :
        #                ccPosting.parmPickingListJournalPost(formLetterJournalPost);
        #                ret = ccPosting.updateCreditCardPickingList();
        #                break;
        #
        #            case DocumentStatus::PackingSlip    :
        #                ccPosting.parmPackingSlipJournalPost(formLetterJournalPost);
        #                ret = ccPosting.updateCreditCardPackingSlip();
        #                break;
        #
        #            case DocumentStatus::Invoice        :
        #                ccPosting.parmInvoiceJournalPost(formLetterJournalPost);
        #                ret = ccPosting.updateCreditCardInvoice();
        #                break;
        #
        #            default :
        #                ret = true;
        #                break;
        #
        #        }
        #
        #        if (!ret)
        #        {
        #            errCCTrans = ccPosting.parmCreditCardTrans();
        #            //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #            ttsAbort;
        #
        #            ttsBegin;
        #            while select errCCTrans
        #            {
        #                select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #                if (!ccTrans)
        #                {
        #                    ccTrans.data(errCCTrans);
        #                    ccTrans.insert();
        #
        #                    //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                    //--> Then we resinstate the payment voucher
        #                    if (ccTrans.TransType == CreditCardTrxType::D
        #                        && ccTrans.Result == '0'
        #                        && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                    {
        #                        CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                    }
        #                }
        #            }
        #
        #            errSalesTableCC = ccPosting.parmSalesTableCC();
        #            while select errSalesTableCC
        #            {
        #                select forUpdate salesTableCC
        #                    where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #                if (ccTrans.Result == '0')
        #                {
        #                    salesTableCC.Captured = errSalesTableCC.Captured;
        #                    salesTableCC.update();
        #                }
        #            }
        #
        #            ttsCommit;
        #            throw error("@ACC1060");
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #constructAuth
        #public static void constructAuth(XppPrePostArgs _args)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    SalesParmTable              salesParmTable;
        #    SalesParmUpdate             salesParmUpdate;
        #    SalesParmSubTable           salesParmSubTable;
        #    NoYes                       ret = true;
        #    CreditCardTrans             ccTrans;
        #    CreditCardParameters        ccParams;
        #    CreditCardTrans             errCCTrans;
        #    CreditCardTrans             dupCCTrans;
        #    SalesTableCC                salesTableCC;
        #    salesTableCC                errSalesTableCC;
        #    salesTableCC                dupSalesTableCC;
        #    SalesTotals                 salesTotals;
        #    AmountMst                   processAmt;
        #
        #    FormletterService           formLetterService = _args.getThis();
        #    SalesFormLetterContract     salesFormLetterContract = formLetterService.parmFormLetterContract();//salesFormLetter.parmFormLetterContract();
        #    DocumentStatus              documentStatus = salesFormLetterContract.getDocumentStatus();
        #    Days                        days;
        #    ;
        #
        #    if (documentStatus == documentStatus::PickingList || documentStatus == documentStatus::PackingSlip)
        #    {
        #
        #        ccPosting.parmDocumentSatus(documentStatus);
        #
        #        select salesParmTable where salesParmTable.ParmId == salesFormLetterContract.parmParmId();
        #
        #        salesParmUpdate = salesFormLetterContract.parmParmUpdate();
        #
        #        while select salesParmSubTable
        #            where salesParmSubTable.ParmId == salesFormLetterContract.parmParmId()
        #        {
        #
        #            ccPosting.parmSalesParmTable(salesParmTable);
        #            ccPosting.parmParmId(salesFormLetterContract.parmParmId());
        #            ccPosting.parmSalesTable(salesTable::find(salesParmSubTable.OrigSalesId));
        #
        #            if (salesParmUpdate.SpecQty == SalesUpdate::All)
        #            {
        #                salesTotals = salesTotals::construct(ccPosting.parmSalesTable());
        #            }
        #            else
        #            {
        #                SalesTotals = SalesTotals::construct(salesParmSubTable,salesParmUpdate.SpecQty,AccountOrder::Auto,salesParmTable.ParmId,'',documentStatus);
        #                salesTotals.calcMarkupForTable(salesParmTable.ParmId,salesParmTable.SalesId);
        #            }
        #
        #            if (salesFormLetterContract.parmProforma())
        #            {
        #                return;
        #            }
        #
        #            //--> Reauth event.
        #            if (!ccParams)
        #            {
        #                select PostingType,PaymMode,reAuthType,TerminalId from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #            }
        #
        #
        #            //--> If reauthorization event is selected and is credit card order and we
        #            //--> have not processed anything else, this kicks in.
        #            if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::PickList
        #                && ccParams.PaymMode == ccPosting.parmSalesTable().PaymMode)
        #            {
        #
        #                salesTotals.calc();
        #                processAmt = Currency::amount(CreditCardAuthTable::calculateAuthAmount(ccPosting.parmSalesTable(),
        #                    salesTotals.totalAmount(),
        #                    CreditCardAuthContextType::Picking));
        #
        #                //--> If an authorization already exists for this order but has not been captured,
        #                //--> We will not create another one.
        #                select dupSalesTableCC
        #                    join dupCCTrans
        #                    where dupSalesTableCC.SalesId == ccPosting.parmSalesTable().SalesId
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.PrimaryCard == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.Processed == NoYes::Yes
        #                    && dupSalesTableCC.Captured == NoYes::No
        #                    && dupSalesTableCC.AmountCur == processAmt
        #                    && dupSalesTableCC.TransID == dupccTrans.TransID;
        #
        #
        #                //-> Does the transaction exist and did it happen today?  We check the date
        #                //--> becuase the transaction might exist from last month and card could be expired.
        #                days = systemDateGet() - dupccTrans.TransDate;
        #                if (dupSalesTableCC.RecId > 0 && days < CreditCardParameters::findParameterWithTerminal(dupCCTrans.TerminalId).perExpiration )
        #                {
        #                    continue;
        #                }
        #
        #                select salesTableCC
        #                    where salesTableCC.SalesId == ccPosting.parmSalesTable().SalesId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.PrimaryCard == NoYes::Yes
        #                    && salesTableCC.Processed == NoYes::Yes;
        #
        #                //--> An existing transaction exists, we will re-use.
        #                if (documentStatus == documentStatus::PickingList
        #                    && ccParams.ReAuthType == CreditCardReAuthType::PickList)
        #                {
        #
        #                    if (salesTableCC)
        #                    {
        #                        salesTableCC = ccPosting.createReAuthorization(salesTableCC,salesTotals,CreditCardCaptureId::PickList);
        #
        #                    }
        #                    else
        #                    {
        #                        //--> if no stransaction exists, try primary.
        #                        ccTrans = CreditCardTrans::createAuthorization(processAmt,
        #                            salesTotals.currencyCode(),
        #                            ccPosting.parmsalesTable(),
        #                            ccParams.TerminalId);
        #
        #                    }
        #                }
        #                else if (documentStatus == documentStatus::PackingSlip
        #                    && ccParams.ReAuthType == CreditCardReAuthType::PackSlip)
        #                {
        #                    processAmt = CreditCardAuthTable::calculateAuthAmount(ccPosting.parmSalesTable(),salesTotals.totalAmount(),CreditCardAuthContextType::Packing);
        #                    if (salesTableCC)
        #                    {
        #                        salesTableCC = ccPosting.createReAuthorization(salesTableCC,salesTotals,CreditCardCaptureId::PackSlip);
        #
        #                    }
        #                    else
        #                    {
        #                        //--> if no stransaction exists, try primary.
        #                        ccTrans = CreditCardTrans::createAuthorization(Currency::amount(processAmt),
        #                            salesTotals.currencyCode(),
        #                            ccPosting.parmsalesTable(),
        #                            ccParams.TerminalId);
        #
        #                    }
        #                }
        #            }
        #
        #        }
        #
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #constructAuthCIL
        #public static void constructAuthCIL(SalesFormLetter   _salesFormLetter)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    SalesParmTable              salesParmTable;
        #    SalesParmUpdate             salesParmUpdate;
        #    SalesParmSubTable           salesParmSubTable;
        #    NoYes                       ret = true;
        #    CreditCardTrans             ccTrans;
        #    CreditCardParameters        ccParams;
        #    CreditCardTrans             errCCTrans;
        #    CreditCardTrans             dupCCTrans;
        #    SalesTableCC                salesTableCC;
        #    salesTableCC                errSalesTableCC;
        #    salesTableCC                dupSalesTableCC;
        #    SalesTotals                 salesTotals;
        #    AmountMst                   processAmt;
        #    SalesFormLetter             salesFormLetter = _salesFormLetter;
        #    SalesFormLetterContract     salesFormLetterContract = salesFormLetter.parmFormLetterContract();
        #    DocumentStatus              documentStatus = salesFormLetterContract.getDocumentStatus();
        #    Days                        days;
        #    ;
        #
        #    if (documentStatus == documentStatus::PickingList || documentStatus == documentStatus::PackingSlip)
        #    {
        #
        #        ccPosting.parmDocumentSatus(documentStatus);
        #
        #        select salesParmTable where salesParmTable.ParmId == salesFormLetterContract.parmParmId();
        #
        #        salesParmUpdate = salesFormLetterContract.parmParmUpdate();
        #
        #        while select salesParmSubTable
        #            where salesParmSubTable.ParmId == salesFormLetterContract.parmParmId()
        #        {
        #
        #            ccPosting.parmSalesParmTable(salesParmTable);
        #            //ccPosting.parmParmId(salesFormLetterContract.parmParmId());
        #            ccPosting.parmSalesTable(salesTable::find(salesParmSubTable.OrigSalesId));
        #
        #            if (salesParmUpdate.SpecQty == SalesUpdate::All)
        #            {
        #                salesTotals = salesTotals::construct(ccPosting.parmSalesTable());
        #            }
        #            else
        #            {
        #                SalesTotals = SalesTotals::construct(salesParmSubTable,salesParmUpdate.SpecQty,AccountOrder::Auto,salesParmTable.ParmId,'',documentStatus);
        #                salesTotals.calcMarkupForTable(salesParmTable.ParmId,salesParmTable.SalesId);
        #            }
        #
        #            if (salesFormLetterContract.parmProforma())
        #            {
        #                return;
        #            }
        #
        #            //--> Reauth event.
        #            if (!ccParams)
        #            {
        #                select PostingType,PaymMode,reAuthType,TerminalId from ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #            }
        #
        #
        #            //--> If reauthorization event is selected and is credit card order and we
        #            //--> have not processed anything else, this kicks in.
        #            if (ccParams.RecId > 0 && ccParams.ReAuthType == CreditCardReAuthType::PickList
        #                && ccParams.PaymMode == ccPosting.parmSalesTable().PaymMode)
        #            {
        #
        #                salesTotals.calc();
        #                processAmt = Currency::amount(CreditCardAuthTable::calculateAuthAmount(ccPosting.parmSalesTable(),
        #                    salesTotals.totalAmount()));
        #
        #                //--> If an authorization already exists for this order but has not been captured,
        #                //--> We will not create another one.
        #                select dupSalesTableCC
        #                    join dupCCTrans
        #                    where dupSalesTableCC.SalesId == ccPosting.parmSalesTable().SalesId
        #                    && dupSalesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && dupSalesTableCC.PrimaryCard == NoYes::No
        #                    && dupSalesTableCC.Cancelled == NoYes::No
        #                    && dupSalesTableCC.Processed == NoYes::Yes
        #                    && dupSalesTableCC.Captured == NoYes::No
        #                    //&& dupSalesTableCC.AmountCur == processAmt
        #                    && dupSalesTableCC.TransID == dupccTrans.TransID;
        #
        #
        #                //-> Does the transaction exist and did it happen today?  We check the date
        #                //--> becuase the transaction might exist from last month and card could be expired.
        #                days = systemDateGet() - dupccTrans.TransDate;
        #                if (dupSalesTableCC.RecId > 0 && days < CreditCardParameters::findParameterWithTerminal(dupCCTrans.TerminalId).perExpiration )
        #                {
        #                    continue;
        #                }
        #
        #                select salesTableCC
        #                    where salesTableCC.SalesId == ccPosting.parmSalesTable().SalesId
        #                    && salesTableCC.CreditCardTrxType == CreditCardTrxType::A
        #                    && salesTableCC.PrimaryCard == NoYes::Yes
        #                    && salesTableCC.Processed == NoYes::Yes;
        #
        #                //--> An existing transaction exists, we will re-use.
        #                if (documentStatus == documentStatus::PickingList
        #                    && ccParams.ReAuthType == CreditCardReAuthType::PickList)
        #                {
        #
        #                    if (salesTableCC)
        #                    {
        #                        salesTableCC = ccPosting.createReAuthorization(salesTableCC,salesTotals,CreditCardCaptureId::PickList);
        #
        #                    }
        #                    else
        #                    {
        #                        //--> if no stransaction exists, try primary.
        #                        ccTrans = CreditCardTrans::createAuthorization(processAmt,
        #                            salesTotals.currencyCode(),
        #                            ccPosting.parmsalesTable(),
        #                            ccParams.TerminalId);
        #
        #                    }
        #                }
        #                else if (documentStatus == documentStatus::PackingSlip
        #                    && ccParams.ReAuthType == CreditCardReAuthType::PackSlip)
        #                {
        #                    processAmt = CreditCardAuthTable::calculateAuthAmount(ccPosting.parmSalesTable(),salesTotals.totalAmount());
        #                    if (salesTableCC)
        #                    {
        #                        salesTableCC = ccPosting.createReAuthorization(salesTableCC,salesTotals,CreditCardCaptureId::PackSlip);
        #
        #                    }
        #                    else
        #                    {
        #                        //--> if no stransaction exists, try primary.
        #                        ccTrans = CreditCardTrans::createAuthorization(Currency::amount(processAmt),
        #                            salesTotals.currencyCode(),
        #                            ccPosting.parmsalesTable(),
        #                            ccParams.TerminalId);
        #
        #                    }
        #                }
        #            }
        #
        #        }
        #
        #    }
        #
        #
        #}
      ENDSOURCE
      SOURCE #convertCaptureId2Context
        #static CreditCardAuthContextType convertCaptureId2Context(CreditCardCaptureID   captureId)
        #{
        #    ;
        #    switch (captureId)
        #    {
        #        case CreditCardCaptureID::Invoice       :
        #            return CreditCardAuthContextType::All;
        #        case CreditCardCaptureID::PackSlip       :
        #            return CreditCardAuthContextType::Packing;
        #        case CreditCardCaptureID::PickList       :
        #            return CreditCardAuthContextType::Picking;
        #    }
        #
        #    return CreditCardAuthContextType::All;
        #}
      ENDSOURCE
      SOURCE #createAuthTransError
        #static void createAuthTransError(CreditCardTrans        ccTrans)
        #{
        #    CreditCardAuthTrans         ccAuthTrans;
        #    salesTable                  salesTable;
        #    ;
        #    ttsBegin;
        #
        #    ccAuthTrans.clear();
        #    ccAuthTrans.CreditCardNumber    = ccTrans.CreditCardNumSecure;
        #    ccAuthTrans.CreditCardTypeName  = enum2str(ccTrans.CreditCardType);
        #    ccAuthTrans.Description         = ccTrans.RepMsg;
        #    ccAuthTrans.ApprovalAmountCur   = ccTrans.AmountCur;
        #    ccAuthTrans.SalesId             = ccTrans.SalesId;
        #    ccAuthTrans.SalesInvoiceId      = ccTrans.InvoiceId;
        #    ccAuthTrans.UniqueCardId        = ccTrans.CreditCardId;
        #    ccAuthTrans.CurrencyCode        = ccTrans.CurrencyCode;
        #    ccAuthTrans.ProcessorStatus     = CreditCardProcessorStatus::Declined;
        #    ccAuthTrans.write();
        #
        #    if (ccTrans)
        #    {
        #        select forUpdate salesTable where salesTable.SalesId == ccTrans.salesid;
        #
        #        if (salesTable)
        #        {
        #            salesTable.CreditCardAuthorizationError = NoYes::Yes;
        #            salesTable.write();
        #        }
        #    }
        #
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #createConfirmAuthorization
        #static void createConfirmAuthorization(FormletterJournalPost        formLetterJournalPost)
        #{
        #    CreditCardParameters        ccParams;
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    SalesParmTable              salesParmTable;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    ;
        #    select firstOnly1 ccParams;
        #
        #    if (!ccParams)
        #        return;
        #
        #    select salesParmTable where salesParmTable.RecId ==  formLetterJournalPost.parmParmTable().RecId;
        #
        #    ccPosting.parmSalesParmTable(salesParmTable);
        #    ccPosting.parmSalesTable(salesTable::find(salesParmTable.SalesId));
        #    ccPosting.parmSalesTotals(formLetterJournalPost.parmTotals());
        #
        #    if (ccParams)
        #    {
        #        select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    if (!ccParams)
        #    {
        #        return;
        #    }
        #
        #    if (ccPosting.parmSalesTable().PaymMode == ccParams.PaymMode &&
        #        ccParams.AuthConfirm == NoYes::Yes)
        #    {
        #        select salesTableCC where salesTableCC.SalesId == salesParmTable.SalesId
        #            && (salesTableCC.Processed == NoYes::Yes
        #            || salesTableCC.Registered == NoYes::Yes);
        #
        #        if (salesTableCC.Registered)
        #            return;
        #
        #        if (!salesTableCC)
        #        {
        #            ccTrans = CreditCardTrans::createAuthorization(
        #                CreditCardAuthTable::calculateAuthAmount(
        #                    ccPosting.parmsalesTable(),
        #                    ccPosting.parmSalesTotals().totalAmount(),
        #                    CreditCardAuthContextType::Confirmation),
        #                ccPosting.parmSalesTotals().currencyCode(),
        #                ccPosting.parmSalesTable(),
        #                ccParams.TerminalId);
        #        }
        #
        #        if (!ccTrans && !salesTableCC)
        #        {
        #            throw error(strFmt("@ACC1864",salesParmTable.SalesId));
        #        }
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #createPackSlipUpdate
        #static void createPackSlipUpdate(CustPackingSlipJour            custPackingSlipJour)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    salesTable                  salesTable = salesTable::find(custPackingSlipJour.SalesId);
        #    salesTotals                 salesTotals = salesTotals::construct(salesTable,SalesUpdate::PackingSlip);
        #    ;
        #
        #    ccPosting.parmSalesTable(salesTable);
        #    ccPosting.parmSalesTotals(salesTotals);
        #    ccPosting.updateCreditCardPackingSlip();
        #
        #}
      ENDSOURCE
      SOURCE #createSalesBasketAuthorization
        #static void createSalesBasketAuthorization(SalesTable       _salesTable)
        #{
        #    CreditCardParameters        ccParams;
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    salesTotals                 salesTotals = salesTotals::construct(_salesTable,SalesUpdate::All);
        #    ;
        #    select firstOnly1 ccParams;
        #
        #    if (!ccParams)
        #        return;
        #
        #    ccPosting.parmSalesTable(_salesTable);
        #    salesTotals.calc();
        #    ccPosting.parmSalesTotals(salesTotals);
        #
        #    if (!ccParams)
        #    {
        #        select ccParams where ccParams.PrimaryParam == NoYes::Yes;
        #    }
        #
        #    if (!ccParams)
        #    {
        #        return;
        #    }
        #
        #    CreditCardTrans::createAuthorization(
        #        CreditCardAuthTable::calculateAuthAmount(
        #            ccPosting.parmsalesTable(),
        #            ccPosting.parmSalesTotals().totalAmount(),
        #            CreditCardAuthContextType::Confirmation),
        #        ccPosting.parmSalesTotals().currencyCode(),
        #        ccPosting.parmSalesTable(),
        #        ccParams.TerminalId);
        #
        #}
      ENDSOURCE
      SOURCE #processAllCCCharges
        #public static void processAllCCCharges(FormDataSource _formDataSource)
        #{
        #    MultiSelectionHelper        multiSelectionHelper;
        #    LedgerJournalTrans          journalTrans;
        #    CreditCardParameters        ccParams;
        #    CreditCardTrans             ccTrans;
        #    CreditCardTrans             newCCTrans;
        #    SalesTableCC                salesTableCC;
        #    LedgerJournalTransCC        ledgerJournalTransCC;
        #    ;
        #    multiSelectionHelper = multiSelectionHelper::construct();
        #    multiSelectionHelper.parmDatasource(_formDataSource);
        #
        #    journalTrans = multiSelectionHelper.getFirst() as LedgerJournalTrans;
        #
        #    for (journalTrans = _formDataSource.getFirst();journalTrans;journalTrans = _formDataSource.getNext())
        #    {
        #        select count(RecId) from ccParams
        #            where ccParams.PaymMode == ccParams.PaymMode;
        #
        #        if (ccParams.RecId > 1)
        #        {
        #            ccParams = CreditCardParameters::findParameter();
        #        }
        #
        #        if (ccParams)
        #        {
        #            select ledgerJournalTransCC
        #                where ledgerJournalTransCC.JournalNum == journalTrans.JournalNum
        #                && ledgerJournalTransCC.LineNum == journalTrans.LineNum;
        #
        #            if (!ledgerJournalTransCC)
        #            {
        #                warning(strFmt("@ACC1878",journalTrans.Voucher));
        #                continue;
        #            }
        #
        #            if (LedgerJournalTransCC.Processed)
        #            {
        #                continue;
        #            }
        #
        #            ccTrans = CreditCardTrans::createTransfromJournal(ledgerJournalTransCC,journalTrans);
        #
        #            ttsbegin;
        #
        #            //<-- create Credit Card Transaction
        #            ccTrans = CreditCardADV::processCreditCard(ccTrans);
        #
        #            if (ccTrans.result == '-999')
        #            {
        #                info(ccTrans.RepMsg);
        #            }
        #            else if (ccTrans.result != '0')
        #            {
        #                info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #            }
        #            else
        #            {
        #                select firstonly forupdate newCCTrans where newCCTrans.RecId == ccTrans.RecId;
        #
        #                ledgerJournalTransCC.selectForUpdate(true);
        #                ledgerJournalTransCC.Processed = NoYes::Yes;
        #                ledgerJournalTransCC.PNRef     = ccTrans.pNRef;
        #                ledgerJournalTransCC.TransID   = ccTrans.TransID;
        #                ledgerJournalTransCC.update();
        #
        #                select salesTableCC
        #                    where salesTableCC.TransID == LedgerJournalTransCC.TransID;
        #
        #                if (!salesTableCC)
        #                {
        #                    salesTableCC.salesId = journalTrans.MarkedInvoice;
        #                    salesTableCC.AmountCur = journalTrans.AmountCurCredit
        #                        ? journalTrans.AmountCurCredit
        #                        : journalTrans.AmountCurDebit;
        #                    salesTableCC.AmountMST = Currency::amountCur2MST(salesTableCC.AmountCur,journalTrans.CurrencyCode);
        #                    salesTableCC.CreditCardId = LedgerJournalTransCC.CreditCardId;
        #
        #                    if (LedgerJournalTransCC.CreditCardTrxType == CreditCardTrxTypeJour::S)
        #                    {
        #                        salesTableCC.CreditCardTrxType = CreditCardTrxType::S;
        #                    }
        #                    else
        #                    {
        #                        salesTableCC.CreditCardTrxType = CreditCardTrxType::C;
        #                    }
        #                    salesTableCC.TransID = LedgerJournalTransCC.TransID;
        #                    salesTableCC.insert();
        #                }
        #
        #                info(strFmt("@ACC144",ccTrans.pnRef));
        #            }
        #
        #            ttsCommit;
        #        }
        #
        #        //journalTrans = multiSelectionHelper.getNext();
        #    }
        #}
      ENDSOURCE
      SOURCE #runConfirmShipment
        #public static boolean runConfirmShipment(WHSLoadId _loadId)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    salesTableCC                errSalesTableCC;
        #    Total                       totals;
        #    NoYes                       complete = true;
        #    salesTable                  salesTable;
        #    SalesLine                   salesLine;
        #
        #    WHSLoadTable                loadTable = WHSLoadTable::find(_loadId);
        #    WHSLoadLine                 loadLine;
        #    WHSLoadLine                 loadLine2;
        #    TMSRateRoute                rateRoute = new TMSRateRoute();
        #    TMSApportionedValue         apportionedValue;
        #    ;
        #    while select loadLine
        #        group by orderNum
        #        where loadLine.InventTransType  == InventTransType::Sales   &&
        #              loadLine.TransportRequest == NoYes::No                &&
        #              loadLine.LoadId == _loadId
        #    {
        #
        #        salesTable = salesTable::find(loadLine.OrderNum);
        #        ccPosting.parmSalesTable(salesTable);
        #
        #        while select ItemId, InventQty, InventTransId, InventTransType, TransportRequest from loadLine2
        #            where loadLine2.LoadId == loadTable.LoadId
        #        {
        #            salesLine = loadLine2.getOrderCommonFromLoadLine() as SalesLine;
        #
        #            if (salesLine.PriceUnit)
        #            {
        #                totals += loadLine2.InventQty * salesLine.SalesPrice / salesLine.PriceUnit;
        #            }
        #
        #            else
        #            {
        #                totals += loadLine2.InventQty * salesLine.SalesPrice;
        #            }
        #        }
        #
        #        select sum(ApportionValue) from apportionedValue
        #            where apportionedValue.TopLevelRecId     == salesTable.RecId      &&
        #            apportionedValue.TopLevelTableId   == salesTable.TableId;
        #
        #        totals += apportionedValue.ApportionValue;
        #
        #        totals = CreditCardAuthTable::calculateAuthAmount(salesTable,totals);
        #
        #        if (!ccPosting.updateConfirmShipment(totals,salesTable.CurrencyCode))
        #        {
        #            errCCTrans = ccPosting.parmCreditCardTrans();
        #            complete = false;
        #            //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #            ttsAbort;
        #
        #            ttsBegin;
        #            while select errCCTrans
        #            {
        #                select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #                if (!ccTrans)
        #                {
        #                    ccTrans.data(errCCTrans);
        #                    ccTrans.insert();
        #
        #                    //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                    //--> Then we resinstate the payment voucher
        #                    if (ccTrans.TransType == CreditCardTrxType::D
        #                        && ccTrans.Result == '0'
        #                        && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                    {
        #                        CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                    }
        #                }
        #            }
        #
        #            errSalesTableCC = ccPosting.parmSalesTableCC();
        #            while select errSalesTableCC
        #            {
        #                select forUpdate salesTableCC
        #                    where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #                if (ccTrans.Result == '0')
        #                {
        #                    salesTableCC.Captured = errSalesTableCC.Captured;
        #                    salesTableCC.update();
        #                }
        #                else
        #                {
        #                    CreditCardPosting::createAuthTransError(ccTrans);
        #                }
        #            }
        #
        #            ttsCommit;
        #
        #            return complete;
        #        }
        #
        #
        #    }
        #
        #    return complete;
        #}
      ENDSOURCE
      SOURCE #runInvoice
        #public static void runInvoice(XppPrePostArgs _args)
        #{
        #    SalesInvoiceJournalPost     salesInvoiceJournalInvoicePost;
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    documentStatus              documentStatus;
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    salesTableCC                errSalesTableCC;
        #    SalesParmTable              salesParmTable;
        #    DictClass                   dictClass;
        #    ;
        #    salesInvoiceJournalInvoicePost = _args.getThis();
        #
        #    dictClass = new DictClass(classIdGet(salesInvoiceJournalInvoicePost));
        #
        #    if (dictClass.id() == className2Id('SalesInvoiceJournalPost'))
        #    {
        #
        #        if (salesInvoiceJournalInvoicePost.isProforma())
        #        {
        #            return;
        #        }
        #
        #        documentStatus = salesInvoiceJournalInvoicePost.documentStatus();
        #
        #        ccPosting.parmSalesTotals(salesInvoiceJournalInvoicePost.parmTotals());
        #        ccPosting.parmDocumentSatus(documentStatus);
        #
        #        select salesParmTable where salesParmTable.RecId ==  salesInvoiceJournalInvoicePost.parmParmTable().RecId;
        #
        #        ccPosting.parmSalesParmTable(salesParmTable);
        #        ccPosting.parmSalesTable(salesTable::find(salesParmTable.SalesId));
        #        ccPosting.parmParmId(salesParmTable.parmId);
        #        ccPosting.parmInvoiceJournalPost(salesInvoiceJournalInvoicePost);
        #
        #        if (!ccPosting.updateCreditCardInvoice())
        #        {
        #            errCCTrans = ccPosting.parmCreditCardTrans();
        #            //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #            ttsAbort;
        #
        #            ttsBegin;
        #            while select errCCTrans
        #            {
        #                select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #                if (!ccTrans)
        #                {
        #                    ccTrans.data(errCCTrans);
        #                    ccTrans.insert();
        #
        #                    //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                    //--> Then we resinstate the payment voucher
        #                    if (ccTrans.TransType == CreditCardTrxType::D
        #                        && ccTrans.Result == '0'
        #                        && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                    {
        #                        CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                    }
        #                }
        #            }
        #
        #            errSalesTableCC = ccPosting.parmSalesTableCC();
        #            while select errSalesTableCC
        #            {
        #                select forUpdate salesTableCC
        #                    where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #                if (ccTrans.Result == '0')
        #                {
        #                    salesTableCC.Captured = errSalesTableCC.Captured;
        #                    salesTableCC.update();
        #                }
        #            }
        #
        #            ttsCommit;
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #runProjectInvoice
        #public static boolean runProjectInvoice(ProjInvoiceJournalPost projInvoicePost)
        #{
        #    ProjProposalTotals          projProposalTotals;
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    ProjInvoiceJour             projInvoiceJour;
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    salesTableCC                errSalesTableCC;
        #    Total                       totals;
        #    NoYes                       complete = true;
        #    ;
        #    ccPosting.parmProjProposalJour(projInvoicePost.parmProjProposalJour());
        #
        #    projInvoiceJour = projInvoicePost.parmJournalTable();
        #    projProposalTotals = new ProjProposalTotals(ccPosting.parmProjProposalJour(), projInvoiceJour.ParmId);
        #    projProposalTotals.calc();
        #
        #    totals      = projProposalTotals.projInvoiceTotalAmount();
        #    ccPosting.parmProjTotals(totals);
        #
        #    if (!ccPosting.updateCreditCardProjInvoice())
        #    {
        #        errCCTrans = ccPosting.parmCreditCardTrans();
        #        complete = false;
        #        //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #        ttsAbort;
        #
        #        ttsBegin;
        #        while select errCCTrans
        #        {
        #            select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #            if (!ccTrans)
        #            {
        #                ccTrans.data(errCCTrans);
        #                ccTrans.insert();
        #
        #                //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                //--> Then we resinstate the payment voucher
        #                if (ccTrans.TransType == CreditCardTrxType::D
        #                    && ccTrans.Result == '0'
        #                    && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                {
        #                    CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                }
        #            }
        #        }
        #
        #        errSalesTableCC = ccPosting.parmSalesTableCC();
        #        while select errSalesTableCC
        #        {
        #            select forUpdate salesTableCC
        #                where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #            if (ccTrans.Result == '0')
        #            {
        #                salesTableCC.Captured = errSalesTableCC.Captured;
        #                salesTableCC.update();
        #            }
        #        }
        #
        #        ttsCommit;
        #    }
        #
        #    return complete;
        #}
      ENDSOURCE
      SOURCE #runReleaseToWarehouse
        #public static boolean runReleaseToWarehouse(SalesId         salesId,
        #                                            AmountCur       amountCur,
        #                                            CurrencyCode    currencyCode)
        #{
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    salesTableCC                errSalesTableCC;
        #    NoYes                       complete = true;
        #    ;
        #    ccPosting.parmSalesTable(salesTable::find(salesId));
        #
        #    amountCur = CreditCardAuthTable::calculateAuthAmount(ccPosting.parmSalesTable(),amountCur,CreditCardAuthContextType::ReleaseToWH);
        #
        #    if (!ccPosting.updateWarehouseRelease(amountCur,currencyCode))
        #    {
        #        errCCTrans = ccPosting.parmCreditCardTrans();
        #        complete = false;
        #        //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #        ttsAbort;
        #
        #        ttsBegin;
        #        while select errCCTrans
        #        {
        #            select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #            if (!ccTrans)
        #            {
        #                ccTrans.data(errCCTrans);
        #                ccTrans.insert();
        #
        #                //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                //--> Then we resinstate the payment voucher
        #                if (ccTrans.TransType == CreditCardTrxType::D
        #                    && ccTrans.Result == '0'
        #                    && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                {
        #                    CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                }
        #            }
        #        }
        #
        #        errSalesTableCC = ccPosting.parmSalesTableCC();
        #        while select errSalesTableCC
        #        {
        #            select forUpdate salesTableCC
        #                where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #            if (ccTrans.Result == '0')
        #            {
        #                salesTableCC.Captured = errSalesTableCC.Captured;
        #                salesTableCC.update();
        #            }
        #            else
        #            {
        #                CreditCardPosting::createAuthTransError(ccTrans);
        #            }
        #        }
        #
        #        ttsCommit;
        #    }
        #
        #    return complete;
        #}
      ENDSOURCE
      SOURCE #runServiceOrderInvoice
        #public static boolean runServiceOrderInvoice(SMAServiceFunctionLine_Transfer   functionLine_Transfer)
        #{
        #    SMAServiceFunctionLine_Transfer     serviceFunctionLine_Transfer;
        #    CreditCardPosting           ccPosting = new CreditCardPosting();
        #    CreditCardTrans             errCCTrans;
        #    SalesTableCC                salesTableCC;
        #    CreditCardTrans             ccTrans;
        #    salesTableCC                errSalesTableCC;
        #    ProjJournalTable            tmpProjJournalTable;
        #    Total                       totals;
        #    NoYes                       complete = true;
        #    ;
        #    serviceFunctionLine_Transfer = functionLine_Transfer;
        #
        #
        #    tmpProjJournalTable = ProjJournalTable::find(serviceFunctionLine_transfer.parmJournalId_Hour(),true);
        #    totals += tmpProjJournalTable.SalesPrice * tmpProjJournalTable.ProjQty;
        #    tmpProjJournalTable = ProjJournalTable::find(serviceFunctionLine_transfer.parmJournalId_Fee(),true);
        #    totals += tmpProjJournalTable.SalesPrice * tmpProjJournalTable.ProjQty;
        #    tmpProjJournalTable = ProjJournalTable::find(serviceFunctionLine_transfer.parmJournalId_ItemConsum(),true);
        #    totals += tmpProjJournalTable.SalesPrice * tmpProjJournalTable.ProjQty;
        #
        #    ccPosting.parmCurrencyCode(ProjTable::find(serviceFunctionLine_Transfer.projId()).currencyId());
        #    ccPosting.parmServiceTotals(totals);
        #    ccPosting.parmServiceOrderTable(serviceFunctionLine_Transfer.parmServiceOrderTable());
        #
        #    if (!ccPosting.updateCreditCardServiceInvoice())
        #    {
        #        errCCTrans = ccPosting.parmCreditCardTrans();
        #        complete = false;
        #        //errCCTrans.setTmpData(ccPosting.parmCreditCardTrans());
        #        ttsAbort;
        #
        #        ttsBegin;
        #        while select errCCTrans
        #        {
        #            select ccTrans where ccTrans.TransID == errCCTrans.TransID;
        #            if (!ccTrans)
        #            {
        #                ccTrans.data(errCCTrans);
        #                ccTrans.insert();
        #
        #                //--> If capture occured on one transaction (perhaps another keyed the errror?)
        #                //--> Then we resinstate the payment voucher
        #                if (ccTrans.TransType == CreditCardTrxType::D
        #                    && ccTrans.Result == '0'
        #                    && CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId).CreateLedger)
        #                {
        #                    CreditCardCustLedger::construct(ccTrans.CustAccount,ccTrans.AmountCur,ccTrans.TransID);
        #                }
        #            }
        #        }
        #
        #        errSalesTableCC = ccPosting.parmSalesTableCC();
        #        while select errSalesTableCC
        #        {
        #            select forUpdate salesTableCC
        #                where salesTableCC.TransID == errSalesTableCC.TransID;
        #
        #            if (ccTrans.Result == '0')
        #            {
        #                salesTableCC.Captured = errSalesTableCC.Captured;
        #                salesTableCC.update();
        #            }
        #        }
        #
        #        ttsCommit;
        #    }
        #
        #    return complete;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
