Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; 
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CreditCardTransCodes
    PROPERTIES
      Name                #CreditCardTransCodes
      Origin              #{2C92EA61-B926-4AC6-9B60-8D7A73BA2303}
      LegacyId            #20024
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class CreditCardTransCodes
        #{
        #    /*
        #    COPYRIGHT 2004, Red Maple Press, Inc.
        #    ALL RIGHTS RESERVED
        #
        #    For information on the license or copyright of this software, please
        #    contact our offices at +1 972 980 6963
        #    or at www.redmaple.com
        #
        #    This class will determine what Transaction Codes are valid for the industry
        #    type given
        #    */
        #}
      ENDSOURCE
      SOURCE #returnDirect
        #str returnDirect(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnDirectHCS
        #str returnDirectHCS(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnDirectTCS
        #str returnDirectTCS(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnElectCommerce
        #str returnElectCommerce(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnElectCommerceHCS
        #str returnElectCommerceHCS(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnRetail
        #str returnRetail(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str     ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnRetailHCS
        #str returnRetailHCS(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '02';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret = '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnRetailTCSBatch
        #str returnRetailTCSBatch(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str     ret;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            ret = '01';
        #            break;
        #        case 'C'    :   //<-- Return
        #            ret =  '06';
        #            break;
        #        case 'D'    :   //<-- Prior Sale
        #            ret = '03';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            ret = '03';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #returnRetailTCSTrans
        #str returnRetailTCSTrans(CreditCardTrxTypeId   ccTrxType)
        #{
        #    str         code;
        #    //--> This method returns valid transaction codes for the industry
        #    //--> type for Paymentech
        #    ;
        #    switch (ccTrxType)
        #    {
        #        case 'S'    :   //<-- Sale
        #            code =  '01';
        #            break;
        #        case 'A'    :   //<-- Authorization Only:
        #            code = '02';
        #            break;
        #        default     :
        #            throw error(strFmt("@ACC1459",CreditCardUsers::find().TerminalId));
        #    }
        #
        #    return code;
        #
        #}
      ENDSOURCE
      SOURCE #construct
        #server static str construct(CreditCardTrxTypeId   ccTrxType,
        #                            CreditCardTrans       ccTrans,
        #                            NoYes                 batchTransaction = NoYes::No)
        #{
        #    str                     returnStr;
        #    CreditCardTransCodes    ccTransCodes;
        #    CreditCardTerminalTable ccTerminal;
        #    ;
        #    ccTransCodes = New CreditCardTransCodes();
        #
        #    ccTerminal = CreditCardTerminalTable::findTerminalWithId(ccTrans.TerminalId);
        #
        #    switch (ccTerminal.SystemIndicator)
        #    {
        #        case CreditCardSystemIndicator::HCS   :
        #            switch (ccTerminal.IndustryHCS)
        #            {
        #                //<-- Retail
        #                case CreditCardIndustryHCS::Retail         :
        #                    returnStr = ccTransCodes.returnRetailHCS(ccTrxType);
        #                    break;
        #                //<-- Direct
        #                case CreditCardIndustryHCS::Direct         :
        #                    returnStr = ccTransCodes.returnDirectHCS(ccTrxType);
        #                    break;
        #                //<-- Electronic Commerce
        #                case CreditCardIndustryHCS::ElectronicCom  :
        #                    returnSTr = ccTransCodes.returnElectCommerceHCS(ccTrxType);
        #                    break;
        #                default:
        #                    throw error(strFmt("@ACC640"));
        #            }
        #            break;
        #        case CreditCardSystemIndicator::del_TCS   :
        #            throw error(strFmt("@ACC1458"));
        #
        #    }
        #    return returnStr;
        #}
      ENDSOURCE
      SOURCE #retSequenceNum
        #static str retSequenceNum(str strNumber)
        #{
        #    str     indicator;
        #    int     intNumber;
        #    int     tmpLen;
        #    int     sLen;
        #    ;
        #    indicator = CreditCardTerminalTable::getSystemIndicator();
        #
        #    strNumber = strLRTrim(strNumber);
        #    intNumber = str2int(strLRTrim(strNumber));
        #
        #    switch (indicator)
        #    {
        #        case 'L.'   :   //<-- Host Capture
        #            tmpLen = strLen(strNumber);
        #
        #            for (sLen=tmpLen;sLen<=5;sLen++)
        #            {
        #                strNumber = '0' + strNumber;
        #                sLen = strLen(strNumber);
        #            }
        #            break;
        #        case 'K.'   :   //--> Terminal Capture
        #            if (intNumber > 998) //<-- Per TCS Spec
        #            {
        #                intNumber = intNumber - 998;
        #                strNumber = int2str(intNumber);
        #            }
        #
        #            tmpLen = strLen(strNumber);
        #
        #            for (sLen=tmpLen;sLen<=3;sLen++)
        #            {
        #                strNumber = '0' + strNumber;
        #                sLen = strLen(strNumber);
        #            }
        #            break;
        #    }
        #
        #    return strNumber;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
