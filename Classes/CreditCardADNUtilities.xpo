Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; 
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #CreditCardADNUtilities
    PROPERTIES
      Name                #CreditCardADNUtilities
      Origin              #{57641E2B-76D3-4C50-B4B0-4E6F6BD62463}
      LegacyId            #20002
    ENDPROPERTIES
    
    METHODS
      SOURCE #b64md5
        #public str b64md5 (str string)
        #{
        #    ;
        #    return this.binl2b64(this.coreMD5(this.str2binl(string)));
        #}
        #
      ENDSOURCE
      SOURCE #b64md5w
        #public str b64md5w(str string)
        #{
        #    ;
        #    return this.binl2b64(this.coreMD5(this.strw2binl(string)));
        #}
        #
      ENDSOURCE
      SOURCE #binl2b64
        #/*
        # * Convert an array of little-endian words to a base64 encoded string.
        # */
        #private str binl2b64(Array binarray)
        #{
        #    str tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        #    str ret = '';
        #    int i;
        #    ;
        #
        #    for(i = 0; i < binarray.lastIndex() * 32; i += 6)
        #    {
        #        ret += substr(tab,(((binarray.value(i>>5 + 1) << (i mod 32)) & 0x3f) | ((binarray.value(i>>5 + 2) >> (32-i mod 32)) & 0x3f))+1,1);
        #    }
        #    return ret;
        #}
        #
        #//error in code, when i=96, attempts to read binarray(5) from (binarray.value(i>>5 + 2) and this does not exist
        #//binarray has just 4 elements
      ENDSOURCE
      SOURCE #binl2byt
        #private Array binl2byt(Array binarray)
        #{
        #    str hex_tab = '0123456789abcdef';
        #    Array  bytarray = new Array(Types::Integer);//(binarray.length * 4);
        #    str string = '';
        #    int i;
        #
        #    for(i = 0; i < binarray.lastIndex() * 4; i++)
        #    {
        #        bytarray.value(i+1,(binarray.value(i>>2 + 1) >> ((i mod 4)*8+4) & 0xf) << 4 |
        #                            binarray.value(i>>2 + 1) >> ((i mod 4)*8) & 0xf);
        #    }
        #    return bytarray;
        #}
        #
      ENDSOURCE
      SOURCE #binl2hex
        #/*
        # * Convert an array of little-endian words to a hex string.
        # */
        #public str binl2hex(Array binarray)
        #{
        #    str hex_tab = '0123456789abcdef';
        #    str ret = '';
        #    int i;
        #
        #    for(i = 0; i < binarray.lastIndex() * 4; i++)
        #    {
        #        ret += substr(hex_tab,(binarray.value(i>>2 + 1) >> ((i mod 4)*8+4)) & 0xf + 1,1)
        #             + substr(hex_tab,(binarray.value(i>>2 + 1) >> ((i mod 4)*8)) & 0xf + 1,1);
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #calcMD5
        #public str calcMD5(str string)
        #{
        #    ;
        #    return this.binl2hex(this.coreMD5(this.str2binl(string)));
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #class CreditCardADNUtilities
        #{
        #}
      ENDSOURCE
      SOURCE #cmn
        #private int cmn(int q, int a, int b, int x, int s, int t)
        #{
        #    ;
        #    return this.safe_add(this.rol(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
        #}
        #
      ENDSOURCE
      SOURCE #coreMD5
        #/*
        # * Calculate the MD5 of an array of little-endian words, producing an array
        # * of little-endian words.
        # */
        #public Array coreMD5(Array x)
        #{
        #    int a =  1732584193;
        #    int b = -271733879;
        #    int c = -1732584194;
        #    int d =  271733878;
        #    int i;
        #
        #    int olda = a;
        #    int oldb = b;
        #    int oldc = c;
        #    int oldd = d;
        #
        #    Array ret = new Array(Types::Integer);
        #    ;
        #
        #    for(i = 1; i < x.lastIndex()+1; i += 16)
        #    {
        #
        #        olda = a;
        #        oldb = b;
        #        oldc = c;
        #        oldd = d;
        #
        #
        #        a = this.ff(a, b, c, d, x.value(i+ 0), 7 , -680876936);
        #        d = this.ff(d, a, b, c, x.value(i+ 1), 12, -389564586);
        #        c = this.ff(c, d, a, b, x.value(i+ 2), 17,  606105819);
        #        b = this.ff(b, c, d, a, x.value(i+ 3), 22, -1044525330);
        #        a = this.ff(a, b, c, d, x.value(i+ 4), 7 , -176418897);
        #        d = this.ff(d, a, b, c, x.value(i+ 5), 12,  1200080426);
        #        c = this.ff(c, d, a, b, x.value(i+ 6), 17, -1473231341);
        #        b = this.ff(b, c, d, a, x.value(i+ 7), 22, -45705983);
        #        a = this.ff(a, b, c, d, x.value(i+ 8), 7 ,  1770035416);
        #        d = this.ff(d, a, b, c, x.value(i+ 9), 12, -1958414417);
        #        c = this.ff(c, d, a, b, x.value(i+10), 17, -42063);
        #        b = this.ff(b, c, d, a, x.value(i+11), 22, -1990404162);
        #        a = this.ff(a, b, c, d, x.value(i+12), 7 ,  1804603682);
        #        d = this.ff(d, a, b, c, x.value(i+13), 12, -40341101);
        #        c = this.ff(c, d, a, b, x.value(i+14), 17, -1502002290);
        #        b = this.ff(b, c, d, a, x.value(i+15), 22,  1236535329);
        #
        #        a = this.gg(a, b, c, d, x.value(i+ 1), 5 , -165796510);
        #        d = this.gg(d, a, b, c, x.value(i+ 6), 9 , -1069501632);
        #        c = this.gg(c, d, a, b, x.value(i+11), 14,  643717713);
        #        b = this.gg(b, c, d, a, x.value(i+ 0), 20, -373897302);
        #        a = this.gg(a, b, c, d, x.value(i+ 5), 5 , -701558691);
        #        d = this.gg(d, a, b, c, x.value(i+10), 9 ,  38016083);
        #        c = this.gg(c, d, a, b, x.value(i+15), 14, -660478335);
        #        b = this.gg(b, c, d, a, x.value(i+ 4), 20, -405537848);
        #        a = this.gg(a, b, c, d, x.value(i+ 9), 5 ,  568446438);
        #        d = this.gg(d, a, b, c, x.value(i+14), 9 , -1019803690);
        #        c = this.gg(c, d, a, b, x.value(i+ 3), 14, -187363961);
        #        b = this.gg(b, c, d, a, x.value(i+ 8), 20,  1163531501);
        #        a = this.gg(a, b, c, d, x.value(i+13), 5 , -1444681467);
        #        d = this.gg(d, a, b, c, x.value(i+ 2), 9 , -51403784);
        #        c = this.gg(c, d, a, b, x.value(i+ 7), 14,  1735328473);
        #        b = this.gg(b, c, d, a, x.value(i+12), 20, -1926607734);
        #
        #        a = this.hh(a, b, c, d, x.value(i+ 5), 4 , -378558);
        #        d = this.hh(d, a, b, c, x.value(i+ 8), 11, -2022574463);
        #        c = this.hh(c, d, a, b, x.value(i+11), 16,  1839030562);
        #        b = this.hh(b, c, d, a, x.value(i+14), 23, -35309556);
        #        a = this.hh(a, b, c, d, x.value(i+ 1), 4 , -1530992060);
        #        d = this.hh(d, a, b, c, x.value(i+ 4), 11,  1272893353);
        #        c = this.hh(c, d, a, b, x.value(i+ 7), 16, -155497632);
        #        b = this.hh(b, c, d, a, x.value(i+10), 23, -1094730640);
        #        a = this.hh(a, b, c, d, x.value(i+13), 4 ,  681279174);
        #        d = this.hh(d, a, b, c, x.value(i+ 0), 11, -358537222);
        #        c = this.hh(c, d, a, b, x.value(i+ 3), 16, -722521979);
        #        b = this.hh(b, c, d, a, x.value(i+ 6), 23,  76029189);
        #        a = this.hh(a, b, c, d, x.value(i+ 9), 4 , -640364487);
        #        d = this.hh(d, a, b, c, x.value(i+12), 11, -421815835);
        #        c = this.hh(c, d, a, b, x.value(i+15), 16,  530742520);
        #        b = this.hh(b, c, d, a, x.value(i+ 2), 23, -995338651);
        #
        #        a = this.ii(a, b, c, d, x.value(i+ 0), 6 , -198630844);
        #        d = this.ii(d, a, b, c, x.value(i+ 7), 10,  1126891415);
        #        c = this.ii(c, d, a, b, x.value(i+14), 15, -1416354905);
        #        b = this.ii(b, c, d, a, x.value(i+ 5), 21, -57434055);
        #        a = this.ii(a, b, c, d, x.value(i+12), 6 ,  1700485571);
        #        d = this.ii(d, a, b, c, x.value(i+ 3), 10, -1894986606);
        #        c = this.ii(c, d, a, b, x.value(i+10), 15, -1051523);
        #        b = this.ii(b, c, d, a, x.value(i+ 1), 21, -2054922799);
        #        a = this.ii(a, b, c, d, x.value(i+ 8), 6 ,  1873313359);
        #        d = this.ii(d, a, b, c, x.value(i+15), 10, -30611744);
        #        c = this.ii(c, d, a, b, x.value(i+ 6), 15, -1560198380);
        #        b = this.ii(b, c, d, a, x.value(i+13), 21,  1309151649);
        #        a = this.ii(a, b, c, d, x.value(i+ 4), 6 , -145523070);
        #        d = this.ii(d, a, b, c, x.value(i+11), 10, -1120210379);
        #        c = this.ii(c, d, a, b, x.value(i+ 2), 15,  718787259);
        #        b = this.ii(b, c, d, a, x.value(i+ 9), 21, -343485551);
        #
        #        a = this.safe_add(a, olda);
        #        b = this.safe_add(b, oldb);
        #        c = this.safe_add(c, oldc);
        #        d = this.safe_add(d, oldd);
        #    }
        #    ret.value(1,a);
        #    ret.value(2,b);
        #    ret.value(3,c);
        #    ret.value(4,d);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #ff
        #private int ff(int a, int b, int c, int d, int x, int s, int t)
        #{
        #    ;
        #    return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);
        #}
        #
      ENDSOURCE
      SOURCE #gg
        #private int gg(int a, int b, int c, int d, int x, int s, int t)
        #{
        #    ;
        #    return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);
        #}
        #
      ENDSOURCE
      SOURCE #hexMD5
        #public str hexMD5 (str string)
        #{
        #    ;
        #    return this.binl2hex(this.coreMD5(this.str2binl(string)));
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #hexMD5w
        #public str hexMD5w(str string)
        #{
        #    ;
        #    return this.binl2hex(this.coreMD5(this.strw2binl(string)));
        #}
        #
      ENDSOURCE
      SOURCE #hh
        #private int hh(int a, int b, int c, int d, int x, int s, int t)
        #{
        #    ;
        #    return this.cmn(b ^ c ^ d, a, b, x, s, t);
        #}
        #
      ENDSOURCE
      SOURCE #ii
        #private int ii(int a, int b, int c, int d, int x, int s, int t)
        #{
        #    ;
        #    return this.cmn(c ^ (b | (~d)), a, b, x, s, t);
        #}
        #
      ENDSOURCE
      SOURCE #rol
        #private int rol(int num, int cnt)
        #{
        #    int mask;
        #    int leftside;
        #    int rightside;
        #    ;
        #
        #    mask = any2int(-power(2,31));
        #    mask = mask >> (32 - (cnt + 1));
        #    mask = ~mask;
        #
        #    leftside = (num << cnt);
        #    rightside = (num >> (32 - cnt));
        #    rightside = mask & rightside;
        #
        #    return leftside | rightside;
        #
        #//  return (num << cnt) | (num >> (32 - cnt));
        #}
        #
      ENDSOURCE
      SOURCE #safe_add
        #private int safe_add(int x, int y)
        #{
        #    int lsw = (x & 0xffff) + (y & 0xffff);
        #    int msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        #
        #    return (msw << 16) | (lsw & 0xffff);
        #}
      ENDSOURCE
      SOURCE #str2binl
        #/*
        # * Convert an 8-bit character string to a sequence of 16-word blocks, stored
        # * as an array, and append appropriate padding for MD4/5 calculation.
        # * If any of the characters are >255, the high byte is silently ignored.
        # */
        #public Array str2binl(str string)
        #{
        #    int     nblk = ((strlen(string) + 8) >> 6) + 1; // number of 16-word blocks
        #    Array   blks = new Array(Types::Integer);
        #    int     i;
        #    ;
        #//nblk * 16
        #
        #    for(i = 1; i < nblk * 16 + 1; i++)
        #    {
        #        blks.value(i,0);
        #    }
        #    for(i = 0; i < strlen(string); i++)
        #    {
        #        blks.value(i>>2 + 1,blks.value(i>>2 + 1) | (char2num(string,i+1) & 0xff) << ((i mod 4) * 8));
        #
        #    }
        #    blks.value(i>>2 + 1,blks.value(i>>2 + 1) | 0x80 << ((i mod 4) * 8));
        #    blks.value(nblk*16-2+1,strlen(string) * 8);
        #
        #    return blks;
        #}
      ENDSOURCE
      SOURCE #strw2binl
        #/*
        # * Convert a wide-character string to a sequence of 16-word blocks, stored as
        # * an array, and append appropriate padding for MD4/5 calculation.
        # */
        #private Array strw2binl(str string)
        #{
        #    int nblk = ((strlen(string) + 4) >> 5) + 1; // number of 16-word blocks
        #    Array blks = new Array(Types::Integer);
        #    int i;
        #    ;
        #
        #//nblk * 16
        #    for(i = 1; i < nblk * 16 + 1; i++)
        #    {
        #        blks.value(i,0);
        #    }
        #    for(i = 0; i < strlen(string); i++)
        #    {
        #        blks.value(i>>1 + 1,blks.value(i>>1 + 1) | char2num(string,i + 1) << ((i mod 2) * 16));
        #
        #    }
        #    blks.value(i>>1 + 1,blks.value(i>>1 + 1) | 0x80 << ((i mod 2) * 16));
        #    blks.value(nblk*16-2+1,strlen(string) * 16);
        #
        #    return blks;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
