Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; 
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #CreditCardTrans
    EnforceFKRelation 0
    PROPERTIES
      Name                #CreditCardTrans
      Label               #@ACC99
      FormRef             #creditCardtrans
      TitleField1         #TransID
      TitleField2         #RepMsg
      ConfigurationKey    #CreditCardAdv
      SecurityKey         #CreditCardTables
      TableGroup          #Transaction
      PrimaryIndex        #CreditCardTransIdIdx
      ClusterIndex        #CreditCardTransIdIdx
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      DeveloperDocumentation  #@ACC1434
      Origin              #{D183F1DF-8163-4F4E-8F97-F97C2EC6EBC5}
      LegacyId            #20014
    ENDPROPERTIES
    
    FIELDS
      FIELD #AAV
        STRING
        PROPERTIES
          Name                #AAV
          Label               #@ACC1618
          HelpText            #@ACC1619
          Table               #CreditCardTrans
          Origin              #{7C9AC8DC-6C80-4B82-8321-67C480524F45}
          LegacyId            #20088
          ExtendedDataType    #CreditCardPNRef
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #AmountCur
        REAL
        PROPERTIES
          Name                #AmountCur
          Table               #CreditCardTrans
          Origin              #{96311478-8E13-4A2D-877F-70A15B6A0FEC}
          LegacyId            #20011
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #AmountMST
        REAL
        PROPERTIES
          Name                #AmountMST
          Table               #CreditCardTrans
          Origin              #{1F4DAFAC-67F2-44E4-8882-B9F02D897C77}
          LegacyId            #20012
          ExtendedDataType    #AmountMST
        ENDPROPERTIES
        
      FIELD #AuthCode
        STRING
        PROPERTIES
          Name                #AuthCode
          Table               #CreditCardTrans
          Origin              #{2897AA15-6480-4D13-B6C3-9ABF794E514D}
          LegacyId            #20023
          ExtendedDataType    #CreditCardAuthCode
          StringSize          #6
        ENDPROPERTIES
        
      FIELD #AuthNetId
        STRING
        PROPERTIES
          Name                #AuthNetId
          Table               #CreditCardTrans
          Origin              #{77EB373A-EBE8-42B6-822E-C9F1D2B0160C}
          LegacyId            #20050
          ExtendedDataType    #CreditCardAuthNetId
          StringSize          #2
        ENDPROPERTIES
        
      FIELD #AuthSource
        STRING
        PROPERTIES
          Name                #AuthSource
          Table               #CreditCardTrans
          Origin              #{872382A2-B245-4D24-AF74-3EDEBCCCBCB3}
          LegacyId            #20051
          ExtendedDataType    #CreditCardAuthSource
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #AvsAddr
        STRING
        PROPERTIES
          Name                #AvsAddr
          Table               #CreditCardTrans
          Origin              #{9F4EE7F3-A1DC-493C-B939-C4E64D8642C8}
          LegacyId            #20006
          ExtendedDataType    #CreditCardAvsAddr
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #AVSEmail
        STRING
        PROPERTIES
          Name                #AVSEmail
          Table               #CreditCardTrans
          Origin              #{13F71D05-8D8C-413C-8BD0-61BFB4D21C83}
          LegacyId            #20072
          ExtendedDataType    #Email
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #AVSPhone
        STRING
        PROPERTIES
          Name                #AVSPhone
          Table               #CreditCardTrans
          Origin              #{F914F680-FB9A-4F78-9333-C658F4F43A48}
          LegacyId            #20065
          ExtendedDataType    #Phone
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BatchLastTrans
        ENUM
        PROPERTIES
          Name                #BatchLastTrans
          Label               #@ACC725
          HelpText            #@ACC726
          Table               #CreditCardTrans
          Origin              #{E5C298D1-BB2B-4EA5-BA05-FC07D1875CBF}
          LegacyId            #20045
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BatchNumber
        STRING
        PROPERTIES
          Name                #BatchNumber
          Table               #CreditCardTrans
          Origin              #{DAD2D146-0FF3-447F-9C6F-33EC24AE2B06}
          LegacyId            #20038
          ExtendedDataType    #CreditCardBatchNumber
          StringSize          #6
        ENDPROPERTIES
        
      FIELD #BatchPaymentechNum
        STRING
        PROPERTIES
          Name                #BatchPaymentechNum
          Label               #@ACC727
          HelpText            #@ACC728
          Table               #CreditCardTrans
          Origin              #{C080FA48-8571-439B-8166-3B3712696C68}
          LegacyId            #20046
          ExtendedDataType    #CreditCardBatchNumber
          StringSize          #6
        ENDPROPERTIES
        
      FIELD #BatchTransNumber
        STRING
        PROPERTIES
          Name                #BatchTransNumber
          Label               #@SYS119489
          HelpText            #@ACC724
          Table               #CreditCardTrans
          Origin              #{390EEF6B-4558-443B-9696-1DEA36B5331F}
          LegacyId            #20044
          ExtendedDataType    #CreditCardBatchNumber
          StringSize          #6
        ENDPROPERTIES
        
      FIELD #BusRelAccount
        STRING
        PROPERTIES
          Name                #BusRelAccount
          Table               #CreditCardTrans
          Origin              #{70626B0E-95D8-45B6-9581-D3E8AA13E50A}
          LegacyId            #20028
          ExtendedDataType    #smmBusRelAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CAVV
        STRING
        PROPERTIES
          Name                #CAVV
          Label               #@ACC1432
          HelpText            #@ACC1431
          Table               #CreditCardTrans
          Origin              #{7ED5B002-30BA-4374-87A2-E9844795BD00}
          LegacyId            #20087
          ExtendedDataType    #CreditCardPNRef
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #CID
        STRING
        PROPERTIES
          Name                #CID
          Table               #CreditCardTrans
          Origin              #{66931FE8-06C9-4F4E-BE0E-094FD6810F98}
          LegacyId            #20036
          ExtendedDataType    #CreditCardCID
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #CitiPlan
        STRING
        PROPERTIES
          Name                #CitiPlan
          Table               #CreditCardTrans
          Origin              #{42E05684-6A22-4157-8AB4-F4D2DCB6EDEC}
          LegacyId            #20055
          ExtendedDataType    #CreditCardCitiPlan
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #CollectionInidicator
        STRING
        PROPERTIES
          Name                #CollectionInidicator
          Table               #CreditCardTrans
          Origin              #{2E8E21A2-DACD-4927-91EE-26A3ACC7E27A}
          LegacyId            #20085
          ExtendedDataType    #CreditCardRepMsg
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #Comment1
        STRING
        PROPERTIES
          Name                #Comment1
          Table               #CreditCardTrans
          Origin              #{DD966484-EFC0-455E-9343-471047A903CA}
          LegacyId            #20016
          ExtendedDataType    #CreditCardComment
          StringSize          #256
        ENDPROPERTIES
        
      FIELD #Comment2
        STRING
        PROPERTIES
          Name                #Comment2
          Table               #CreditCardTrans
          Origin              #{8CED124E-0F77-42F6-9B00-F63AAA3A8B4B}
          LegacyId            #20017
          ExtendedDataType    #CreditCardComment
          StringSize          #256
        ENDPROPERTIES
        
      FIELD #CommerceIndicator
        STRING
        PROPERTIES
          Name                #CommerceIndicator
          Table               #CreditCardTrans
          Origin              #{A11D5562-5FE8-4287-A7CB-BE68BBB8298F}
          LegacyId            #20083
          ExtendedDataType    #CreditCardRepMsg
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #CommercialCard
        ENUM
        PROPERTIES
          Name                #CommercialCard
          Label               #@ACC699
          HelpText            #@ACC700
          Table               #CreditCardTrans
          Origin              #{B33B1BD8-FF14-4F3E-B315-6A2F8A1F455D}
          LegacyId            #20041
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CommercialLocalTax
        ENUM
        PROPERTIES
          Name                #CommercialLocalTax
          Label               #@ACC701
          HelpText            #@ACC702
          Table               #CreditCardTrans
          Origin              #{9E366C56-5CC1-470E-9754-4890F8618ABD}
          LegacyId            #20042
          EnumType            #CreditCardCommercialTaxFlag
        ENDPROPERTIES
        
      FIELD #CommercialSalesTax
        REAL
        PROPERTIES
          Name                #CommercialSalesTax
          Table               #CreditCardTrans
          Origin              #{12C8213C-D0F8-421B-A38E-6335BEA9E1A7}
          LegacyId            #20043
          ExtendedDataType    #TaxAmountCur
        ENDPROPERTIES
        
      FIELD #CreditCardId
        STRING
        PROPERTIES
          Name                #CreditCardId
          Table               #CreditCardTrans
          Origin              #{2DB77C3F-4F6C-472F-A34B-D9AB24AE451D}
          LegacyId            #20002
          ExtendedDataType    #CreditCardId
        ENDPROPERTIES
        
      FIELD #CreditCardNumEncrypt
        STRING
        PROPERTIES
          Name                #CreditCardNumEncrypt
          Table               #CreditCardTrans
          Origin              #{E89BA471-ACEB-463C-BB0D-55CAEC33B7D5}
          LegacyId            #20048
          ExtendedDataType    #CreditCardNumEncrypt
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #CreditCardNumSecure
        STRING
        PROPERTIES
          Name                #CreditCardNumSecure
          Table               #CreditCardTrans
          Origin              #{E79DF778-764B-4A90-85FD-EC9D08CA6B4C}
          LegacyId            #20031
          ExtendedDataType    #CreditCardNum
          StringSize          #22
        ENDPROPERTIES
        
      FIELD #CreditCardType
        ENUM
        PROPERTIES
          Name                #CreditCardType
          Table               #CreditCardTrans
          Origin              #{298EB626-24EA-41A7-847F-894A47CE6566}
          LegacyId            #20029
          EnumType            #CreditCardType
        ENDPROPERTIES
        
      FIELD #CreditCardVoucher
        STRING
        PROPERTIES
          Name                #CreditCardVoucher
          Table               #CreditCardTrans
          Origin              #{DFB96108-C353-4F93-93A1-3EAAAD020682}
          LegacyId            #20026
          ExtendedDataType    #CreditCardVoucherId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CurrencyCode
        STRING
        PROPERTIES
          Name                #CurrencyCode
          Table               #CreditCardTrans
          Origin              #{9131EBFE-7798-47E6-BE73-50F45357E8B4}
          LegacyId            #20013
          ExtendedDataType    #CurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #CustAccount
        STRING
        PROPERTIES
          Name                #CustAccount
          Table               #CreditCardTrans
          Origin              #{23534668-A647-477D-A202-7D13E317770B}
          LegacyId            #20027
          ExtendedDataType    #CustAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CustInvoiceRefRecId
        INT64
        PROPERTIES
          Name                #CustInvoiceRefRecId
          Table               #CreditCardTrans
          Origin              #{9026423B-4543-427E-BB32-6B124814FA5D}
          LegacyId            #20081
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #CustomerRef
        STRING
        PROPERTIES
          Name                #CustomerRef
          Table               #CreditCardTrans
          Origin              #{078D438D-1219-4D13-96C3-31A088770C63}
          LegacyId            #20076
          ExtendedDataType    #CreditCardReferenceId
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #CVDResponse
        ENUM
        PROPERTIES
          Name                #CVDResponse
          Table               #CreditCardTrans
          Origin              #{24AD6864-1199-49A6-8BF8-6CAFAD093440}
          LegacyId            #20035
          EnumType            #CreditCardCVDResponse
        ENDPROPERTIES
        
      FIELD #CVDResponseStr
        STRING
        PROPERTIES
          Name                #CVDResponseStr
          Table               #CreditCardTrans
          Origin              #{FF499493-3B6A-4F42-AA85-A010FC3E994C}
          ExtendedDataType    #CreditCardCVDResponseStr
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #CVDSent
        ENUM
        PROPERTIES
          Name                #CVDSent
          Table               #CreditCardTrans
          Origin              #{919E8482-FF9A-4A0C-B22A-86F8A2A8524C}
          LegacyId            #20034
          EnumType            #CreditCardCVDValues
        ENDPROPERTIES
        
      FIELD #CybersourceToken
        STRING
        PROPERTIES
          Name                #CybersourceToken
          Table               #CreditCardTrans
          Origin              #{587F1910-6A50-44E5-BC9D-BBD1EB601EA4}
          LegacyId            #20071
          ExtendedDataType    #CreditCardCybersourceToken
          StringSize          #256
        ENDPROPERTIES
        
      FIELD #Debit
        ENUM
        PROPERTIES
          Name                #Debit
          Label               #@ACC1001
          HelpText            #@ACC1093
          Table               #CreditCardTrans
          Origin              #{3BC7CF42-9CB4-4E0D-B6BC-DCEBA40A5577}
          LegacyId            #20056
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #del_AVSCity
        STRING
        PROPERTIES
          Name                #del_AVSCity
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{59DD2818-1AA9-411F-957C-75A6A0AE7AA1}
          LegacyId            #20062
          ExtendedDataType    #AddressCity
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #del_AVSCountryRegionId
        STRING
        PROPERTIES
          Name                #del_AVSCountryRegionId
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{1135CC57-5B1A-4A67-B265-D3671B06F052}
          LegacyId            #20063
          ExtendedDataType    #AddressCountryRegionId
        ENDPROPERTIES
        
      FIELD #del_AVSName
        STRING
        PROPERTIES
          Name                #del_AVSName
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{943E5415-529E-4AB3-9FE1-B80A41A7DB4D}
          LegacyId            #20064
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #del_AVSState
        STRING
        PROPERTIES
          Name                #del_AVSState
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{9455E113-607D-4C10-8801-2AC17AA85BC2}
          LegacyId            #20061
          ExtendedDataType    #AddressStateId
        ENDPROPERTIES
        
      FIELD #del_AvsZip
        STRING
        PROPERTIES
          Name                #del_AvsZip
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{B2C9FB2D-7D7E-49C8-885F-FEAC5D4FCCE6}
          LegacyId            #20007
          ExtendedDataType    #CreditCardAvsZip
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #del_EmplId
        STRING
        PROPERTIES
          Name                #del_EmplId
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{4532E2E7-9FA4-4ECE-8EB6-44E45EB60929}
          LegacyId            #20009
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #del_Street
        STRING
        PROPERTIES
          Name                #del_Street
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{D7061DD3-F578-4C93-AE86-89DC4E0C9C7A}
          LegacyId            #20021
          ExtendedDataType    #StreetName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #del_ZipCode
        STRING
        PROPERTIES
          Name                #del_ZipCode
          ConfigurationKey    #SysDeletedObjects60
          Table               #CreditCardTrans
          Origin              #{0F4D4464-521B-4DB5-AC4F-538830124BDC}
          LegacyId            #20020
          ExtendedDataType    #AddressZipCodeId
        ENDPROPERTIES
        
      FIELD #ECIRaw
        STRING
        PROPERTIES
          Name                #ECIRaw
          Table               #CreditCardTrans
          Origin              #{19CCD825-2E95-4E08-A928-7F00F1D9AEF9}
          LegacyId            #20084
          ExtendedDataType    #CreditCardECIRaw
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #EntrySource
        ENUM
        PROPERTIES
          Name                #EntrySource
          Table               #CreditCardTrans
          Origin              #{262AEC3B-C79D-4DAE-81B6-57FBADDB21A7}
          LegacyId            #20037
          EnumType            #CreditCardEntrySource
        ENDPROPERTIES
        
      FIELD #IAvs
        STRING
        PROPERTIES
          Name                #IAvs
          Table               #CreditCardTrans
          Origin              #{25756224-150E-42AE-9601-FE4ECD42B0FA}
          LegacyId            #20008
          ExtendedDataType    #CreditCardIAvs
        ENDPROPERTIES
        
      FIELD #InvoiceId
        STRING
        PROPERTIES
          Name                #InvoiceId
          Table               #CreditCardTrans
          Origin              #{D7275DED-F2AE-4CAC-91AE-ACD673C03E7A}
          LegacyId            #20025
          ExtendedDataType    #CustInvoiceId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #JournalOrig
        ENUM
        PROPERTIES
          Name                #JournalOrig
          Table               #CreditCardTrans
          Origin              #{CCEDD1CD-00DC-4121-A61D-3D88D5995688}
          LegacyId            #20024
          EnumType            #CreditCardJournalOrig
        ENDPROPERTIES
        
      FIELD #Location
        INT64
        PROPERTIES
          Name                #Location
          Table               #CreditCardTrans
          Origin              #{BE4412F6-6825-4ACB-967B-A76FD2F4E70C}
          ExtendedDataType    #LogisticsLocationRecId
        ENDPROPERTIES
        
      FIELD #NameOnCard
        STRING
        PROPERTIES
          Name                #NameOnCard
          Label               #@ACC14
          HelpText            #@ACC15
          Table               #CreditCardTrans
          Origin              #{E4496A68-0C6D-4745-A3B7-69A1A4AC949A}
          LegacyId            #20070
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #OneTimeDateExp
        DATE
        PROPERTIES
          Name                #OneTimeDateExp
          Table               #CreditCardTrans
          Origin              #{13213733-8ACB-4375-86FC-92FD9F0C5D7A}
          LegacyId            #20033
          ExtendedDataType    #CreditCardExpirationDate
        ENDPROPERTIES
        
      FIELD #OneTimeTrans
        ENUM
        PROPERTIES
          Name                #OneTimeTrans
          Label               #@ACC564
          HelpText            #@ACC1486
          Table               #CreditCardTrans
          Origin              #{82AFD58A-23A1-4DD2-A772-86D98FCF3509}
          LegacyId            #20032
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #OrbitalTxRefIdx
        STRING
        PROPERTIES
          Name                #OrbitalTxRefIdx
          Table               #CreditCardTrans
          Origin              #{DE827359-8136-4318-AF01-6F1AE4959ACC}
          LegacyId            #20068
          ExtendedDataType    #CreditCardOrbitalTxRefIdx
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #OrbitalTxRefNum
        STRING
        PROPERTIES
          Name                #OrbitalTxRefNum
          Table               #CreditCardTrans
          Origin              #{F3E9ED97-7FFC-493E-AB8E-11C3E843AABC}
          LegacyId            #20049
          ExtendedDataType    #CreditCardOrbitalTxRefNum
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #OrigDateTime
        DATETIME
        PROPERTIES
          Name                #OrigDateTime
          Table               #CreditCardTrans
          Origin              #{DEFC4867-3542-49DE-A73E-99C66962F137}
          LegacyId            #20073
          ExtendedDataType    #TransDateTime
        ENDPROPERTIES
        
      FIELD #OrigID
        STRING
        PROPERTIES
          Name                #OrigID
          Label               #@ACC165
          HelpText            #@ACC166
          Table               #CreditCardTrans
          Origin              #{59B3308B-E1E9-494D-93C4-51C5B0235876}
          LegacyId            #20022
          ExtendedDataType    #CreditCardPNRef
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #PackingSlipId
        STRING
        PROPERTIES
          Name                #PackingSlipId
          Table               #CreditCardTrans
          Origin              #{64419E33-E2E0-40A6-AAB4-01D136F74F77}
          LegacyId            #20080
          ExtendedDataType    #PackingSlipId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ParesStatus
        STRING
        PROPERTIES
          Name                #ParesStatus
          Table               #CreditCardTrans
          Origin              #{C175EBA5-053A-4B0F-9E06-0ECA75D04822}
          LegacyId            #20086
          ExtendedDataType    #CreditCardParesStatus
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #ParmId
        STRING
        PROPERTIES
          Name                #ParmId
          Table               #CreditCardTrans
          Origin              #{416B36C0-B1CE-4AE3-841C-E19EBCB257BB}
          ExtendedDataType    #ParmId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PayPalReferenceId
        STRING
        PROPERTIES
          Name                #PayPalReferenceId
          Label               #@SYS81755
          HelpText            #@SYS96899
          Table               #CreditCardTrans
          Origin              #{5CD813A2-D01E-44CD-B0C5-FF434C3BEB8B}
          LegacyId            #20059
          ExtendedDataType    #CreditCardReferenceId
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #PNRef
        STRING
        PROPERTIES
          Name                #PNRef
          Table               #CreditCardTrans
          Origin              #{05A05050-7120-4F33-A347-C1B609C964B2}
          LegacyId            #20004
          ExtendedDataType    #CreditCardPNRef
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #PrivateLabel
        ENUM
        PROPERTIES
          Name                #PrivateLabel
          Table               #CreditCardTrans
          Origin              #{18C0E774-AED3-4BBA-80A7-E2CF1924F1A0}
          LegacyId            #20052
          EnumType            #CreditCardPrivateLabel
        ENDPROPERTIES
        
      FIELD #Profile
        ENUM
        PROPERTIES
          Name                #Profile
          Label               #@SYS40276
          HelpText            #@ACC1320
          Table               #CreditCardTrans
          Origin              #{29980CA6-5D97-4D5C-9E12-CF60108815D1}
          LegacyId            #20078
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ProfileId
        STRING
        PROPERTIES
          Name                #ProfileId
          Table               #CreditCardTrans
          Origin              #{B7F034F6-744E-4730-AA4E-AAC0A0CF8FBC}
          LegacyId            #20077
          ExtendedDataType    #CreditCardProfileId
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #ProjProposalId
        STRING
        PROPERTIES
          Name                #ProjProposalId
          Table               #CreditCardTrans
          Origin              #{71358392-9B7D-4100-A11C-E57C03A3B160}
          LegacyId            #20079
          ExtendedDataType    #ProjProposalId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #RecurringToken
        ENUM
        PROPERTIES
          Name                #RecurringToken
          Table               #CreditCardTrans
          Origin              #{D0339703-67E6-4120-9FB8-743B59A8969A}
          LegacyId            #20057
          EnumType            #CreditCardRecurringToken
        ENDPROPERTIES
        
      FIELD #RefRecId
        INT64
        PROPERTIES
          Name                #RefRecId
          Table               #CreditCardTrans
          Origin              #{9832475E-81D6-4CF0-89A3-CA48D4E3EC99}
          LegacyId            #20075
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Registered
        ENUM
        PROPERTIES
          Name                #Registered
          Label               #@SYS50316
          HelpText            #@ACC661
          Table               #CreditCardTrans
          Origin              #{81EF1BCC-B402-4E91-AB99-B72D7E2B1580}
          LegacyId            #20039
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RegisteredDate
        DATE
        PROPERTIES
          Name                #RegisteredDate
          Label               #@ACC660
          Table               #CreditCardTrans
          Origin              #{783ABFF7-D156-47FE-A08C-8EBCBAD6A337}
          LegacyId            #20040
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #RemovedFromBatch
        ENUM
        PROPERTIES
          Name                #RemovedFromBatch
          Label               #@ACC911
          HelpText            #@ACC912
          Table               #CreditCardTrans
          Origin              #{09131292-7F5A-4110-AE44-D1636E3DDA4C}
          LegacyId            #20053
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RepMsg
        STRING
        PROPERTIES
          Name                #RepMsg
          Table               #CreditCardTrans
          Origin              #{4EECAD54-6074-471E-A138-6C76ABFFA3F3}
          LegacyId            #20005
          ExtendedDataType    #CreditCardRepMsg
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #ResponseLevel
        ENUM
        PROPERTIES
          Name                #ResponseLevel
          HelpText            #@ACC1739
          Table               #CreditCardTrans
          Origin              #{4770C7C6-A094-489C-ABC0-E180288823F3}
          EnumType            #ErrorTolerance
        ENDPROPERTIES
        
      FIELD #ResponseRefRecId
        INT64
        PROPERTIES
          Name                #ResponseRefRecId
          Visible             #No
          Table               #CreditCardTrans
          Origin              #{681F00B4-6B75-483F-9693-4C4BA8A2137B}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Result
        STRING
        PROPERTIES
          Name                #Result
          Label               #@SYS6769
          HelpText            #@ACC1049
          Table               #CreditCardTrans
          Origin              #{CF37CFE7-A53A-4734-83D8-E15500484DC8}
          LegacyId            #20030
          ExtendedDataType    #TransTxt
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #RetrevalRefNum
        STRING
        PROPERTIES
          Name                #RetrevalRefNum
          Table               #CreditCardTrans
          Origin              #{F96FBC72-5316-4F46-A01D-7295C5B34FFD}
          LegacyId            #20047
          ExtendedDataType    #CreditCardRetrievalRefNum
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #SalesId
        STRING
        PROPERTIES
          Name                #SalesId
          Table               #CreditCardTrans
          Origin              #{CBAF015E-F3F9-464E-A3FC-8D522B15B93E}
          LegacyId            #20014
          ExtendedDataType    #SalesId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ServiceOrderId
        STRING
        PROPERTIES
          Name                #ServiceOrderId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #CreditCardTrans
          Origin              #{43D019B3-001F-4FD3-80BB-D80740CF0446}
          ExtendedDataType    #SMAServiceOrderId
        ENDPROPERTIES
        
      FIELD #smmQuotationId
        STRING
        PROPERTIES
          Name                #smmQuotationId
          Table               #CreditCardTrans
          Origin              #{968F1310-1CCC-496D-9209-A6544B1934D5}
          LegacyId            #20015
          ExtendedDataType    #smmQuotationId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #SoloIssueNum
        STRING
        PROPERTIES
          Name                #SoloIssueNum
          Table               #CreditCardTrans
          Origin              #{942D4269-DD6A-4706-AD67-F95F954DAD12}
          LegacyId            #20067
          ExtendedDataType    #CreditCardSoloIssueNum
          StringSize          #2
        ENDPROPERTIES
        
      FIELD #SoloStartDate
        DATE
        PROPERTIES
          Name                #SoloStartDate
          Table               #CreditCardTrans
          Origin              #{10B41D9E-DFAC-482D-9D6D-3D7271DB9A31}
          LegacyId            #20066
          ExtendedDataType    #CreditCardSoloStartDate
        ENDPROPERTIES
        
      FIELD #TerminalId
        STRING
        PROPERTIES
          Name                #TerminalId
          Table               #CreditCardTrans
          Origin              #{E42C5A53-45BD-41CF-A70C-6BD5838E6F56}
          LegacyId            #20058
          ExtendedDataType    #CreditCardTerminalId
        ENDPROPERTIES
        
      FIELD #TransCurrencyCode
        STRING
        PROPERTIES
          Name                #TransCurrencyCode
          Label               #@SYS62786
          Table               #CreditCardTrans
          Origin              #{5D75BB9A-A8C4-4401-931D-A52DF6600AD2}
          LegacyId            #20069
          ExtendedDataType    #CurrencyCodeISO
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #TransDate
        DATE
        PROPERTIES
          Name                #TransDate
          Table               #CreditCardTrans
          Origin              #{C68C1B9C-D3A1-4663-B78A-31CB5CF9B842}
          LegacyId            #20003
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #TransID
        STRING
        PROPERTIES
          Name                #TransID
          Mandatory           #Yes
          AllowEdit           #No
          Table               #CreditCardTrans
          Origin              #{4E0CD709-85B1-466B-8C68-66B0E2B9B401}
          LegacyId            #20018
          ExtendedDataType    #CreditCardTransID
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TransType
        ENUM
        PROPERTIES
          Name                #TransType
          Table               #CreditCardTrans
          Origin              #{E34098F9-1FE1-4179-9E8A-864EB7340DEB}
          LegacyId            #20019
          EnumType            #CreditCardTrxType
        ENDPROPERTIES
        
      FIELD #TrxType
        STRING
        PROPERTIES
          Name                #TrxType
          Table               #CreditCardTrans
          Origin              #{C133FD4D-D821-4AAD-836F-AC5BDEA66307}
          LegacyId            #20001
          ExtendedDataType    #CreditCardTrxTypeId
        ENDPROPERTIES
        
      FIELD #TxRefGuid
        GUID
        PROPERTIES
          Name                #TxRefGuid
          Table               #CreditCardTrans
          Origin              #{3734A44D-13B6-4C5E-976C-4096EA4CD860}
          ExtendedDataType    #CreditCardTxRefGuid
        ENDPROPERTIES
        
      FIELD #UsePayPalRef
        ENUM
        PROPERTIES
          Name                #UsePayPalRef
          Label               #@ACC1432
          HelpText            #@ACC1433
          Table               #CreditCardTrans
          Origin              #{5777B275-586E-4562-BB57-93A6632869C9}
          LegacyId            #20060
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #VeresEnrolled
        STRING
        PROPERTIES
          Name                #VeresEnrolled
          Table               #CreditCardTrans
          Origin              #{4BF69A5B-6451-465E-B41A-EAE542960F4F}
          LegacyId            #20089
          ExtendedDataType    #CreditCardVeresEnrolled
          StringSize          #1
        ENDPROPERTIES
        
      FIELD #VoiceAuth
        ENUM
        PROPERTIES
          Name                #VoiceAuth
          Label               #@ACC621
          HelpText            #@ACC1485
          Table               #CreditCardTrans
          Origin              #{65AC6A98-C0C2-4FDD-86C8-30598F0F57CB}
          LegacyId            #20054
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Voucher
        STRING
        PROPERTIES
          Name                #Voucher
          Table               #CreditCardTrans
          Origin              #{1AF30F13-9133-4BD0-9D43-88BCFE18DC5F}
          LegacyId            #20010
          ExtendedDataType    #Voucher
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #WorkerProcessor
        INT64
        PROPERTIES
          Name                #WorkerProcessor
          Table               #CreditCardTrans
          Origin              #{107217B3-4719-4791-A355-D163609BDA54}
          ExtendedDataType    #CreditCardWorkerProcessor
        ENDPROPERTIES
        
      FIELD #xid
        STRING
        PROPERTIES
          Name                #xid
          Label               #@SYS6769
          HelpText            #@ACC1049
          Table               #CreditCardTrans
          Origin              #{0560F689-B5E2-4AFA-9105-21B2C926A15C}
          LegacyId            #20082
          ExtendedDataType    #TransTxt
          StringSize          #60
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditCardId
          #PNRef
          #AmountCur
          #CurrencyCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditCardId
          #PNRef
          #AmountCur
          #CurrencyCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Amount
        PROPERTIES
          Name                #Amount
          Label               #@SYS53072
        ENDPROPERTIES
        
        GROUPFIELDS
          #AmountCur
          #AmountMST
          #CurrencyCode
          #TransCurrencyCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AuthSource
        PROPERTIES
          Name                #AuthSource
          Label               #@ACC915
        ENDPROPERTIES
        
        GROUPFIELDS
          #AuthNetId
          #AuthSource
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AVS
        PROPERTIES
          Name                #AVS
          Label               #@ACC1162
        ENDPROPERTIES
        
        GROUPFIELDS
          #AvsAddr
          #IAvs
          #AVSPhone
          #AVSEmail
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Batch
        PROPERTIES
          Name                #Batch
          Label               #@SYS14462
        ENDPROPERTIES
        
        GROUPFIELDS
          #BatchNumber
          #BatchTransNumber
          #BatchLastTrans
          #BatchPaymentechNum
          #RemovedFromBatch
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Citibank
        PROPERTIES
          Name                #Citibank
          Label               #@ACC869
        ENDPROPERTIES
        
        GROUPFIELDS
          #PrivateLabel
          #CitiPlan
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Commercial
        PROPERTIES
          Name                #Commercial
          Label               #@ACC699
        ENDPROPERTIES
        
        GROUPFIELDS
          #CommercialCard
          #CommercialLocalTax
          #CommercialSalesTax
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CVD
        PROPERTIES
          Name                #CVD
          Label               #@ACC632
        ENDPROPERTIES
        
        GROUPFIELDS
          #CVDSent
          #CVDResponseStr
          #CVDResponse
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Cybersource
        PROPERTIES
          Name                #Cybersource
          Label               #@ACC1249
        ENDPROPERTIES
        
        GROUPFIELDS
          #CybersourceToken
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Debit
        PROPERTIES
          Name                #Debit
          Label               #@SYS9512
        ENDPROPERTIES
        
        GROUPFIELDS
          #Debit
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Encrypt
        PROPERTIES
          Name                #Encrypt
          Label               #@ACC1088
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditCardNumEncrypt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Hidden
        PROPERTIES
          Name                #Hidden
          Label               #@SYS54478
        ENDPROPERTIES
        
        GROUPFIELDS
          #CID
          #TxRefGuid
          #CustInvoiceRefRecId
          #Location
          #ParmId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS104938
        ENDPROPERTIES
        
        GROUPFIELDS
          #PNRef
          #TransID
          #OrigID
          #RetrevalRefNum
          #AuthCode
          #PayPalReferenceId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Journal
        PROPERTIES
          Name                #Journal
          Label               #@SYS24010
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalOrig
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Messages
        PROPERTIES
          Name                #Messages
          Label               #@SYS74342
        ENDPROPERTIES
        
        GROUPFIELDS
          #Result
          #RepMsg
          #Comment1
          #Comment2
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #OneTime
        PROPERTIES
          Name                #OneTime
          Label               #@ACC565
        ENDPROPERTIES
        
        GROUPFIELDS
          #OneTimeTrans
          #CreditCardNumSecure
          #OneTimeDateExp
          #NameOnCard
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Orbital
        PROPERTIES
          Name                #Orbital
          Label               #@ACC864
        ENDPROPERTIES
        
        GROUPFIELDS
          #OrbitalTxRefNum
          #OrbitalTxRefIdx
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Origin
        PROPERTIES
          Name                #Origin
          Label               #@SYS26398
        ENDPROPERTIES
        
        GROUPFIELDS
          #Voucher
          #SalesId
          #smmQuotationId
          #PackingSlipId
          #InvoiceId
          #ProjProposalId
          #CreditCardVoucher
          #ServiceOrderId
          #TerminalId
          #WorkerProcessor
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Other
        PROPERTIES
          Name                #Other
          Label               #@SYS108846
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomerRef
          #RefRecId
          #OrigDateTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Party
        PROPERTIES
          Name                #Party
          Label               #@ACC316
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #BusRelAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PayerAuth
        PROPERTIES
          Name                #PayerAuth
          Label               #@ACC1397
        ENDPROPERTIES
        
        GROUPFIELDS
          #AAV
          #CAVV
          #ParesStatus
          #CollectionInidicator
          #ECIRaw
          #CommerceIndicator
          #xid
          #VeresEnrolled
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PayPal
        PROPERTIES
          Name                #PayPal
          Label               #@ACC1111
        ENDPROPERTIES
        
        GROUPFIELDS
          #UsePayPalRef
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Profile
        PROPERTIES
          Name                #Profile
          Label               #@SYS29160
        ENDPROPERTIES
        
        GROUPFIELDS
          #Profile
          #ProfileId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Registration
        PROPERTIES
          Name                #Registration
          Label               #@SYS2499
        ENDPROPERTIES
        
        GROUPFIELDS
          #Registered
          #RegisteredDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Response
        PROPERTIES
          Name                #Response
          Label               #@SYS80247
        ENDPROPERTIES
        
        GROUPFIELDS
          #ResponseLevel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Solo
        PROPERTIES
          Name                #Solo
          Label               #@ACC1254
        ENDPROPERTIES
        
        GROUPFIELDS
          #SoloIssueNum
          #SoloStartDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Telecheck
        PROPERTIES
          Name                #Telecheck
          Label               #@ACC251
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Transaction
        PROPERTIES
          Name                #Transaction
          Label               #@SYS15191
        ENDPROPERTIES
        
        GROUPFIELDS
          #Result
          #CreditCardType
          #CreditCardId
          #EntrySource
          #TrxType
          #RecurringToken
          #TransType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TransDate
        PROPERTIES
          Name                #TransDate
          Label               #@SYS67
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Verbal
        PROPERTIES
          Name                #Verbal
          Label               #@ACC621
        ENDPROPERTIES
        
        GROUPFIELDS
          #VoiceAuth
          #AuthCode
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PNRef
      PROPERTIES
        Name                #PNRef
        Origin              #{72CCE56F-58B2-4B99-A1CE-DDF0F2A891F5}
        LegacyId            #20001
      ENDPROPERTIES
      
      INDEXFIELDS
        #PNRef
        #TransDate
      ENDINDEXFIELDS
      
      #OrigIdx
      PROPERTIES
        Name                #OrigIdx
        Origin              #{D553DBC2-761F-4F73-99F6-D89D626A82E7}
        LegacyId            #20002
      ENDPROPERTIES
      
      INDEXFIELDS
        #OrigID
      ENDINDEXFIELDS
      
      #RecIdIdx
      PROPERTIES
        Name                #RecIdIdx
        Origin              #{31C714BC-DB95-4AE3-9667-622BD4EEBB53}
        LegacyId            #20003
      ENDPROPERTIES
      
      INDEXFIELDS
        #RecId
      ENDINDEXFIELDS
      
      #HcmWorkerIdx
      PROPERTIES
        Name                #HcmWorkerIdx
        Origin              #{BCBF95FB-8415-4FF0-B3FF-D874BEE76018}
      ENDPROPERTIES
      
      INDEXFIELDS
        #WorkerProcessor
      ENDINDEXFIELDS
      
      #CreditCardTransIdIdx
      PROPERTIES
        Name                #CreditCardTransIdIdx
        AllowDuplicates     #No
        Origin              #{AC62189D-786A-49B0-B60B-95D2EBB30E6D}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TransID
      ENDINDEXFIELDS
      
      #CurrencyIdx
      PROPERTIES
        Name                #CurrencyIdx
        Origin              #{940CAB7C-93A5-4826-AEF8-D09DCF3B5689}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TrxType
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #CreditCard
        PROPERTIES
          Name                #CreditCard
          Table               #CreditCardTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CreditCardId
            RelatedField        #CreditCardId
            SourceEDT           #CreditCardId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CreditCardResponseTable
        PROPERTIES
          Name                #CreditCardResponseTable
          Table               #CreditCardResponseTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CreditCardResponseTable
          Role                #ResponseRefRecId
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ResponseRefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CreditCardTerminalTable
        PROPERTIES
          Name                #CreditCardTerminalTable
          Table               #CreditCardTerminalTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TerminalId
            RelatedField        #TerminalId
            SourceEDT           #CreditCardTerminalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Currency
        PROPERTIES
          Name                #Currency
          Table               #Currency
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CurrencyCode
            RelatedField        #CurrencyCode
            SourceEDT           #CurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustInvoiceId
        PROPERTIES
          Name                #CustInvoiceId
          Table               #CustInvoiceJour
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InvoiceId
            RelatedField        #InvoiceId
            SourceEDT           #CustInvoiceId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustInvoiceTable
        PROPERTIES
          Name                #CustInvoiceTable
          Table               #CustInvoiceTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CustInvoiceRefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTable
        PROPERTIES
          Name                #CustTable
          Table               #CustTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustAccount
            RelatedField        #AccountNum
            SourceEDT           #CustAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #HcmWorker
        PROPERTIES
          Name                #HcmWorker
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerProcessor
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ISOCurrencyCode
        PROPERTIES
          Name                #ISOCurrencyCode
          Table               #ISOCurrencyCode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TransCurrencyCode
            RelatedField        #ISCCurrencyCodeAlpha
            SourceEDT           #CurrencyCodeISO
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTrans
        PROPERTIES
          Name                #LedgerJournalTrans
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Voucher
            RelatedField        #Voucher
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Location_FK
        PROPERTIES
          Name                #Location_FK
          Table               #LogisticsPostalAddress
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Location
            RelatedField        #RecId
            SourceEDT           #LogisticsLocationRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjProposalJour
        PROPERTIES
          Name                #ProjProposalJour
          Table               #ProjProposalJour
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ProjProposalId
            RelatedField        #ProposalId
            SourceEDT           #ProjProposalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesQuotationTable
        PROPERTIES
          Name                #SalesQuotationTable
          Table               #SalesQuotationTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #smmQuotationId
            RelatedField        #QuotationId
            SourceEDT           #smmQuotationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesTable
        PROPERTIES
          Name                #SalesTable
          Table               #SalesTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #SalesId
            RelatedField        #SalesId
            SourceEDT           #SalesId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesTableCC
        PROPERTIES
          Name                #SalesTableCC
          Table               #SalesTableCC
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TransID
            RelatedField        #TransID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SMAServiceOrderTable
        PROPERTIES
          Name                #SMAServiceOrderTable
          Table               #SMAServiceOrderTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ServiceOrderId
            RelatedField        #ServiceOrderId
            SourceEDT           #SMAServiceOrderId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #smmBusRelTable
        PROPERTIES
          Name                #smmBusRelTable
          Table               #smmBusRelTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BusRelAccount
            RelatedField        #BusRelAccount
            SourceEDT           #smmBusRelAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #checkDimension
        #public NoYes checkDimension(RefRecId      processLineDimension,
        #                                RefRecId    transDefaultDimension)
        #{
        #    DimensionAttribute      dimensionAttribute;
        #    DimensionAttributeValue dimensionAttributeValue;
        #    DimensionAttributeValueSet  valueSet;
        #    DimensionAttributeValueSetItem  valueSetItem;
        #    Common                          entity;
        #    DimensionValue                  dimensionValue;
        #    Map                             map = new Map(Types::Container,Types::Container);
        #    NoYes                         found;
        #    int                             usage;
        #    ;
        #
        #    valueSet = DimensionAttributeValueSet::find(processLineDimension);
        #
        #    while select DimensionAttributeValueSet,DimensionAttributeValue from valueSetItem
        #        where valueSetItem.DimensionAttributeValueSet == valueSet.RecId
        #    {
        #        dimensionAttributeValue = dimensionAttributeValue::find(valueSetItem.DimensionAttributeValue);
        #
        #        dimensionAttribute =    dimensionAttribute::find(dimensionAttributeValue.DimensionAttribute);
        #
        #        entity = DimensionDefaultingControllerBase::findBackingEntityInstance(
        #            curext(),
        #            dimensionAttribute,
        #            dimensionAttributeValue.EntityInstance);
        #        dimensionValue = dimensionAttributeValue.getValue();
        #
        #        if (!Map.exists([dimensionAttribute.Name,dimensionValue]))
        #        {
        #            Map.insert([dimensionAttribute.Name,dimensionValue],[dimensionAttribute.Name,dimensionValue]);
        #        }
        #
        #    }
        #
        #    usage = map.elements();
        #
        #    if (usage==0)
        #        return true;
        #
        #    valueSet = DimensionAttributeValueSet::find(transDefaultDimension);
        #
        #    while select DimensionAttributeValueSet,DimensionAttributeValue from valueSetItem
        #        where valueSetItem.DimensionAttributeValueSet == valueSet.RecId
        #    {
        #        dimensionAttributeValue = dimensionAttributeValue::find(valueSetItem.DimensionAttributeValue);
        #
        #        dimensionAttribute =    dimensionAttribute::find(dimensionAttributeValue.DimensionAttribute);
        #
        #        entity = DimensionDefaultingControllerBase::findBackingEntityInstance(
        #            curext(),
        #            dimensionAttribute,
        #            dimensionAttributeValue.EntityInstance);
        #        dimensionValue = dimensionAttributeValue.getValue();
        #
        #        if (Map.exists([dimensionAttribute.Name,dimensionValue]))
        #        {
        #            found = true;
        #        }
        #
        #    }
        #
        #    return found;
        #}
      ENDSOURCE
      SOURCE #getAddress
        #CreditCardTrans getAddress(CreditCardTrans  ccTrans)
        #{
        #    CreditCardTable         ccTable = CreditCardTable::find(ccTrans.CreditCardId);
        #    CustTable               custTable;
        #    SalesTable              salesTable;
        #    ;
        #    if (ccTable.Location)
        #    {
        #        ccTrans.Location    = ccTable.Location;
        #    }
        #    else
        #    {
        #        salesTable = SalesTable::find(ccTrans.SalesId);
        #        custTable = CustTable::find(salesTable.InvoiceAccount);
        #
        #        if (!custTable.postalAddress())
        #        {
        #            custTable = CustTable::find(salesTable.CustAccount);
        #        }
        #
        #        //ccTrans.Location    =   custTable.postalAddress().RecId;
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #getMerchantRef
        #CreditCardReferenceId getMerchantRef(CreditCardTrans        ccTrans)
        #{
        #    CreditCardParameters            ccParameters = CreditCardParameters::findParameterWithTerminal(ccTrans.TerminalId);
        #    CreditCardReferenceId           ccRef;
        #    CreditCardTrans                 oldCCTrans;
        #    Counter                         numRecs;
        #    CreditCardReferenceId           orderNum;
        #    ;
        #    //--> If using Customer Ref or PO Number and blank, we revert to recid
        #    if ((!ccTrans.CustomerRef || ccTrans.CustomerRef == '0') && ccParameters.CustomerDesc == CreditCardCustomerDesc::CustRef)
        #    {
        #        ccParameters.CustomerDesc = CreditCardCustomerDesc::RecId;
        #    }
        #
        #    switch (ccParameters.CustomerDesc)
        #    {
        #        case    CreditCardCustomerDesc::RecId   :
        #            select count(RecId),customerRef from oldCCTrans where oldCCTrans.CustomerRef == int642str(ccTrans.RefRecId)
        #                && oldCCTrans.Result == '0';
        #
        #            if (oldCCTrans.RecId == 0)
        #            {
        #                ccRef = int642str(ccTrans.RecId);
        #            }
        #            else
        #            {
        #                numRecs = int642int(oldCCTrans.RecId);
        #                select customerRef from oldCCTrans where oldCCTrans.RecId == ccTrans.RefRecId;
        #
        #                if (ccTrans.TransType == CreditCardTrxType::D ||
        #                    ccTrans.TransType == CreditCardTrxType::V ||
        #                    ccTrans.TransType == CreditCardTrxType::C)
        #                {
        #                    ccRef = oldCCTrans.CustomerRef;
        #                }
        #                else
        #                {
        #                    ccRef = int642str(ccTrans.RecId) + '-' + int642str(numRecs);
        #                }
        #            }
        #            break;
        #        case    CreditCardCustomerDesc::CustRef   :
        #            select count(recId),customerRef from oldCCTrans where oldCCTrans.CustomerRef like SalesTable::find(ccTrans.SalesId).CustomerRef + '*';
        #
        #            if (oldCCTrans.RecId == 0)
        #            {
        #                ccRef = SalesTable::find(ccTrans.SalesId).CustomerRef;
        #            }
        #            else
        #            {
        #                ccRef = SalesTable::find(ccTrans.SalesId).CustomerRef + '-' + int642str(oldCCTrans.RecId);
        #            }
        #            break;
        #        case    CreditCardCustomerDesc::PurchOrderFormNum   :
        #            select count(recId),customerRef from oldCCTrans where oldCCTrans.CustomerRef == SalesTable::find(ccTrans.SalesId).PurchOrderFormNum;
        #
        #            if (oldCCTrans.RecId >0)
        #            {
        #                ccRef = SalesTable::find(ccTrans.SalesId).PurchOrderFormNum;
        #            }
        #            else
        #            {
        #                ccRef = SalesTable::find(ccTrans.SalesId).CustomerRef + '-' + int642str(oldCCTrans.RecId);
        #            }
        #            break;
        #        case    CreditCardCustomerDesc::SalesId   :
        #
        #            orderNum = strReplace(ccTrans.SalesId,'_','');
        #            orderNum = strReplace(orderNum,'-','');
        #            select count(recId),customerRef from oldCCTrans where oldCCTrans.CustomerRef == orderNum
        #                && oldCCTrans.RecId != ccTrans.RecId
        #                && oldCCTrans.Result == '0';
        #
        #            if (oldCCTrans.RecId == 0)
        #            {
        #                ccRef = orderNum;
        #            }
        #            else
        #            {
        #                numRecs = int642int(oldCCTrans.RecId);
        #                select customerRef from oldCCTrans where oldCCTrans.RecId == ccTrans.RefRecId;
        #
        #                if (ccTrans.TransType == CreditCardTrxType::D ||
        #                    ccTrans.TransType == CreditCardTrxType::V ||
        #                    ccTrans.TransType == CreditCardTrxType::C)
        #                {
        #                    ccRef = oldCCTrans.CustomerRef;
        #                }
        #                else
        #                {
        #                    ccRef = orderNum + int642str(numRecs);
        #                }
        #            }
        #            break;
        #    }
        #
        #    if (strLen(ccRef) == 0)
        #    {
        #        ccRef = int642str(ccTrans.RefRecId);
        #    }
        #
        #    return ccRef;
        #}
      ENDSOURCE
      SOURCE #getPhone
        #TempStr getPhone(Phone     phone)
        #{
        #    TempStr             tmpPhone;
        #    ;
        #    tmpPhone            = strRem(phone," ");
        #    tmpPhone            = strRem(tmpPhone,"(");
        #    tmpPhone            = strRem(tmpPhone,")");
        #    tmpPhone            = strRem(tmpPhone,"-");
        #
        #    return tmpPhone;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    ;
        #    if (this.CreditCardNumSecure && !this.CreditCardNumEncrypt)
        #    {
        #        this.CreditCardNumEncrypt = CreditCardUtility::encrypt(this.CreditCardNumSecure,CreditCardEncryptionTable::retrieveKey());
        #    }
        #
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforCustInvoiceTable
        #CreditCardTerminalTable resolveTerminalforCustInvoiceTable(SalesTableCC        salesTableCC,
        #                                    CustInvoiceTable    custInvoiceTable,
        #                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == custInvoiceTable.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                if (this.checkDimension(processLine.DefaultDimension,CustInvoiceTable.DefaultDimension))
        #                {
        #                    secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                }
        #                break;
        #            }
        #
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforFreeText
        #CreditCardTerminalTable resolveTerminalforFreeText(SalesTableCC         salesTableCC,
        #                                    CustInvoiceTable                    custInvoiceTable,
        #                                    CreditCardTrans                     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == custInvoiceTable.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                break;
        #            }
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforJournal
        #CreditCardTerminalTable resolveTerminalforJournal(  LedgerJournalTrans   ledgerJournalTrans,
        #                                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine,secProcessLine;
        #    CreditCardParameters                ccParameters;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    ccType = ccTrans.CreditCardType;
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (!processLine)
        #    {
        #        select PaymMode,terminalId from ccParameters
        #            where ccParameters.PaymMode == ledgerJournalTrans.PaymMode;
        #
        #        select secProcessLine
        #            where secProcessLine.TerminalId == ccParameters.TerminalId;
        #
        #        if (secProcessLine)
        #        {
        #            select processLine
        #                where processLine.ProcessGroupId == secProcessLine.ProcessGroupId
        #                && processLine.SetPrimary == NoYes::Yes;
        #        }
        #    }
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == ledgerJournalTrans.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                if (this.checkDimension(processLine.DefaultDimension,ledgerJournalTrans.DefaultDimension))
        #                {
        #                    secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                }
        #                break;
        #            }
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforLedgerJournalCC
        #CreditCardTerminalTable resolveTerminalforLedgerJournalCC(LedgerJournalTransCC        ledgerJournalTransCC,
        #                                    LedgerJournalTrans          LedgerJournalTrans,
        #                                    CreditCardTrans             ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == ledgerJournalTrans.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                if (this.checkDimension(processLine.DefaultDimension,ledgerJournalTrans.DefaultDimension))
        #                {
        #                    secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                }
        #                break;
        #            }
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforProjCC
        #CreditCardTerminalTable resolveTerminalforProjCC(SalesTableCC        salesTableCC,
        #                                    ProjProposalJour          proposalJour,
        #                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        //--> Let's see if we have a full match
        #        select processLine
        #            where processLine.CreditCardType == ccType
        #            && processLine.CreditCardTypeActive == NoYes::Yes
        #            && processLine.CurrencyCode == proposalJour.CurrencyId
        #            && processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId
        #            && processLine.CustAccount == ccTrans.CustAccount
        #            && processLine.ProcessGroupId == processGroup;
        #
        #        if (processLine)
        #        {
        #            secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == proposalJour.CurrencyId
        #                && processLine.CustAccount == ccTrans.CustAccount
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == proposalJour.CurrencyId
        #                && processLine.CustAccount == ccTrans.CustAccount
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == proposalJour.CurrencyId
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        //--> Select only card type
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        //--> Select currency and country only
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CurrencyCode == proposalJour.CurrencyId
        #                && processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                ccTrans.TransCurrencyCode = proposalJour.CurrencyId;
        #            }
        #        }
        #
        #        //--> Select currency only
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CurrencyCode == proposalJour.CurrencyId
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                ccTrans.TransCurrencyCode = proposalJour.CurrencyId;
        #            }
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforProjProposal
        #CreditCardTerminalTable resolveTerminalforProjProposal(SalesTableCC         salesTableCC,
        #                                    ProjProposalJour                    projProposalJour,
        #                                    CreditCardTrans                     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == projProposalJour.CurrencyId)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                break;
        #            }
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforSalesTableCC
        #CreditCardTerminalTable resolveTerminalforSalesTableCC(SalesTableCC        salesTableCC,
        #                                    SalesTable          salesTable,
        #                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == salesTable.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                if (this.checkDimension(processLine.DefaultDimension,salesTable.DefaultDimension))
        #                {
        #                    secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                }
        #                break;
        #            }
        #
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforSalesTableCCwithWeb
        #CreditCardTerminalTable resolveTerminalforSalesTableCCwithWeb(SalesTableCC        salesTableCC,
        #                                    axSalesTable          salesTable,
        #                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if (((processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes)
        #                || processLine.CreditCardTypeActive == NoYes::No)
        #                && (processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == salesTable.parmCurrencyCode())
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == ccTrans.CustAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                break;
        #            }
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforServiceCC
        #CreditCardTerminalTable resolveTerminalforServiceCC(SalesTableCC        salesTableCC,
        #                                    SMAServiceorderTable          serviceTable,
        #                                    CreditCardTrans     ccTrans)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardType                      ccType;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        ccType = ccTrans.CreditCardType;
        #
        #        //--> Let's see if we have a full match
        #        select processLine
        #            where processLine.CreditCardType == ccType
        #            && processLine.CreditCardTypeActive == NoYes::Yes
        #            && processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #            && processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId
        #            && processLine.CustAccount == ccTrans.CustAccount
        #            && processLine.ProcessGroupId == processGroup;
        #
        #        if (processLine)
        #        {
        #            secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #                && processLine.CustAccount == ccTrans.CustAccount
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #                && processLine.CustAccount == ccTrans.CustAccount
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        //--> Select only card type
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CreditCardType == ccType
        #                && processLine.CreditCardTypeActive == NoYes::Yes
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #            }
        #        }
        #
        #        //--> Select currency and country only
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #                && processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(ccTrans.Location).CountryRegionId
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                ccTrans.TransCurrencyCode = ProjTable::find(serviceTable.ProjId).currencyId();
        #            }
        #        }
        #
        #        //--> Select currency only
        #        if (!secondaryTerminal)
        #        {
        #            select processLine
        #                where processLine.CurrencyCode == ProjTable::find(serviceTable.ProjId).currencyId()
        #                && processLine.ProcessGroupId == processGroup;
        #
        #            if (processLine)
        #            {
        #                secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                ccTrans.TransCurrencyCode = ProjTable::find(serviceTable.ProjId).CustAccount;
        #            }
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #showCustomerName
        #display CustName showCustomerName()
        #{
        #    return CustTable::find(this.CustAccount).name();
        #}
      ENDSOURCE
      SOURCE #checkIsPaid
        #static NoYes checkIsPaid(SalesId  _salesId, AmountMST _totals)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTrans         prevCCTrans;
        #    AmountMst               debits;
        #    AmountMst               credits;
        #    AmountMst               totals;
        #    ;
        #    select sum(amountMST) from ccTrans where ccTrans.SalesId == _salesId
        #                && (ccTrans.TransType == CreditCardTrxType::D || ccTrans.TransType == CreditCardTrxType::S)
        #                && ccTrans.Result == '0';
        #
        #    debits = ccTrans.AmountMST;
        #
        #    while select SalesId,OrigId,AmountMST from ccTrans where ccTrans.SalesId == _salesId
        #        && (ccTrans.TransType == CreditCardTrxType::C
        #        || ccTrans.TransType == CreditCardTrxType::V)
        #        && ccTrans.Result == '0'
        #    {
        #        select prevCCTrans
        #            where prevCCTRans.SalesId == ccTrans.SalesId
        #            && prevCCTrans.PNRef == ccTrans.OrigID
        #            && prevCCTrans.Result == '0'
        #            && (prevCCTrans.TransType == CreditCardTrxType::D
        #            || prevCCTrans.TransType == CreditCardTrxType::S);
        #
        #        if (!prevCCTrans)
        #        {
        #            credits = ccTrans.AmountMST;
        #        }
        #    }
        #
        #
        #    //--> Credits here tend to be negative amounts
        #    credits = -(ccTrans.AmountMST);
        #
        #    totals = debits - credits;
        #
        #    if (totals < _totals)
        #        return false;
        #    else
        #        return true;
        #}
      ENDSOURCE
      SOURCE #createAuthorization
        #static CreditCardTrans createAuthorization(AmountCur              authAmount,
        #                         CurrencyCode           currencyId,
        #                         SalesTable             salesTable,
        #                         CreditCardTerminalId   terminalId,
        #                         SalesTableCC           salesTableCC    = null)
        #{
        #    CreditCardTrans             ccTrans;
        #    //SalesTableCC                salesTableCC;
        #    CreditCardTable             ccTable;
        #    CreditCardNum               ccNum;
        #    SalesTotals                 salesTotals;
        #    ;
        #    if (salesTableCC.CreditCardId)
        #    {
        #        select ccTable
        #            where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #    }
        #    else
        #    {
        #
        #        select ccTable
        #            where ccTable.CustAccount == salesTable.InvoiceAccount
        #            && ccTable.PrimaryCard == NoYes::Yes;
        #    }
        #
        #    if (!ccTable)
        #    {
        #        throw error(strFmt("@ACC1372",salesTable.InvoiceAccount));
        #    }
        #
        #    ccTrans.clear();
        #    ccTrans.AmountMST           =   Currency::amountCur2MST(authAmount,CurrencyId);
        #    ccTrans.AmountCur           =   authAmount;
        #    ccTrans.CreditCardID        =   ccTable.CreditCardId;
        #    ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #    ccTrans.CurrencyCode        =   currencyId;
        #    ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #    ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #    ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #    ccTrans.WorkerProcessor     =   currentWorker();
        #    ccTrans.OneTimeDateExp      =   ccTable.ExpirationDate;
        #    ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #    ccTrans.SalesId             =   salesTable.SalesId;
        #    ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #    ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #    ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                        DateTimeUtil::getSystemDateTime(),
        #                                        DateTimeUtil::getCompanyTimeZone());
        #    ccTrans.TransDate           =   systemDateGet();
        #    ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #    ccTrans.TransType           =   CreditCardTrxType::A;
        #    ccTrans.TrxType             =   'A';
        #    ccTrans.Profile             =   cctable.Profile;
        #    ccTrans.ProfileId           =   ccTable.ProfileId;
        #
        #    ccTrans = ccTrans.getAddress(ccTrans);
        #
        #    if (ccTrans.Profile == NoYes::No)
        #    {
        #        if (ccTrans.CreditCardId)
        #        {
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #        }
        #        else
        #        {
        #            throw error("@ACC1685");
        #        }
        #    }
        #
        #    ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #    ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #
        #    //--> Customer reference
        #    ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #    if (ccTrans.CreditCardType != CreditCardType::PayPal &&
        #        ccTrans.Profile == NoYes::No)
        #    {
        #        //--> Is this a commercial card?
        #        ccNum = CreditCardTable::retrieveValue(ccTable);
        #
        #        if (CreditCardTable::isCorporateCard(ccNum))
        #        {
        #            //--> Retrieve Sales Tax Amounts
        #            salesTotals = SalesTotals::construct(salesTable, SalesUpdate::All);
        #            salesTotals.calc();
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = salesTotals.totalTaxAmount();
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!salesTable.TaxGroup)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else if (salesTable.VATNum)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #
        #        }
        #    }
        #
        #    ccTrans.insert();
        #
        #    ttsbegin;
        #    //<-- create Credit Card Transaction
        #    ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #
        #    if (CreditCardAdv::checkReturn(ccTrans,ccTrans.Result))
        #    {
        #        salesTableCC::createTrans(ccTrans);
        #        //info(strFmt("@ACC144",ccTrans.pnRef ? ccTrans.PNRef : ccTrans.OrbitalTxRefNum));
        #    }
        #    //--> Removed Info due to LCS Best Practices error 50 Client API found in method
        #    //else
        #    //{
        #        //info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #    //}
        #
        #    ttscommit;
        #
        #    return ccTrans;
        #
        #}
        #
      ENDSOURCE
      SOURCE #createAuthorizationProj
        #static CreditCardTrans createAuthorizationProj(AmountCur              authAmount,
        #                         CurrencyCode           currencyId,
        #                         ProjProposalJour       projProposalJour,
        #                         CreditCardTerminalId   terminalId,
        #                         SalesTableCC           salesTableCC    = null)
        #{
        #    CreditCardTrans             ccTrans;
        #    //SalesTableCC                salesTableCC;
        #    CreditCardTable             ccTable;
        #    ;
        #    if (salesTableCC.CreditCardId)
        #    {
        #        select ccTable
        #            where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #    }
        #    else
        #    {
        #
        #        select ccTable
        #            where ccTable.CustAccount == ProjTable::find(projProposalJour.ProjInvoiceProjId).CustAccount
        #            && ccTable.PrimaryCard == NoYes::Yes;
        #    }
        #
        #    if (!ccTable)
        #    {
        #        throw error(strFmt("@ACC1372",projTable::find(projProposalJour.ProjInvoiceProjId).CustAccount));
        #    }
        #
        #    ccTrans.clear();
        #    ccTrans.AmountMST           =   Currency::amountCur2MST(authAmount,CurrencyId);
        #    ccTrans.AmountCur           =   authAmount;
        #    ccTrans.CreditCardID        =   ccTable.CreditCardId;
        #    ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #    ccTrans.CurrencyCode        =   currencyId;
        #    ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #    ccTrans.CustAccount         =   projTable::find(projProposalJour.ProjInvoiceProjId).CustAccount;
        #    ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #    ccTrans.WorkerProcessor     =   currentWorker();
        #    ccTrans.OneTimeDateExp      =   ccTable.ExpirationDate;
        #    ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #    ccTrans.ProjProposalId      =   projProposalJour.ProposalId;
        #    ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #    ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #    ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                        DateTimeUtil::getSystemDateTime(),
        #                                        DateTimeUtil::getCompanyTimeZone());
        #    ccTrans.TransDate           =   systemDateGet();
        #    ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #    ccTrans.TransType           =   CreditCardTrxType::A;
        #    ccTrans.TrxType             =   'A';
        #    ccTrans.Profile             =   cctable.Profile;
        #    ccTrans.ProfileId           =   ccTable.ProfileId;
        #
        #    ccTrans = ccTrans.getAddress(ccTrans);
        #
        #    if (ccTrans.Profile == NoYes::No)
        #    {
        #        if (ccTrans.CreditCardId)
        #        {
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #        }
        #        else
        #        {
        #            throw error("@ACC1685");
        #        }
        #    }
        #
        #    ccTrans.TerminalId          =   ccTrans.resolveTerminalforProjCC(salesTableCC,projProposalJour,ccTrans).TerminalId;
        #    ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #
        #    //--> Customer reference
        #    ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #    ccTrans.insert();
        #
        #    ttsbegin;
        #    //<-- create Credit Card Transaction
        #    ccTrans = CreditCardAdv::processCreditCard(ccTrans);
        #
        #
        #    if (CreditCardAdv::checkReturn(ccTrans,ccTrans.Result))
        #    {
        #        salesTableCC::createTrans(ccTrans);
        #        //info(strFmt("@ACC144",ccTrans.pnRef ? ccTrans.PNRef : ccTrans.OrbitalTxRefNum));
        #    }
        #    else
        #    {
        #        //info(strfmt("@ACC143",ccTrans.result,ccTrans.RepMsg));
        #    }
        #
        #    ttscommit;
        #
        #    return ccTrans;
        #
        #}
        #
      ENDSOURCE
      SOURCE #createTransforCapture
        #static CreditCardTrans createTransforCapture (SalesTableCC salesTableCC,
        #                                              SalesTable   salesTable,
        #                                              AmountCur    salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #
        #    select AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CommercialCard,
        #        CommercialLocalTax,CommercialSalesTax,OneTimeDateExp,CreditCardType,CreditCardNumEncrypt,CustomerRef,
        #        CybersourceToken,OrbitalTxRefNum,NameOnCard,PNRef,Profile,ProfileId,RetrevalRefNum,TerminalId,txRefGuid from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        && prevCCTrans.SalesId == salesTable.SalesId
        #        && prevCCTrans.Result == '0';
        #
        #    if (!prevCCTrans)
        #    {
        #        select prevCCTrans where prevCCTrans.RefRecId == salesTableCC.RecId;
        #    }
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTotal;
        #        ccTrans.AmountCur           =   Currency::curAmount(ccTrans.AmountMST,salesTable.CurrencyCode);
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   salesTable.CurrencyCode;
        #        ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #        ccTrans.Profile             =   prevCCTrans.Profile;
        #        ccTrans.ProfileId           =   prevCCTrans.ProfileId;
        #        ccTrans.TxRefGuid           =   prevCCTrans.TxRefGuid;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex,CreditCardProcessor::Elavon :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.TxRefGuid   =   prevCCTrans.TxRefGuid;
        #                ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        //--> Fail safe for transaction date
        #        if (ccTrans.OrigDateTime == DateTimeUtil::minValue() || !ccTrans.OrigDateTime)
        #        {
        #            ccTrans.OrigDateTime = DateTimeUtil::getSystemDateTime();
        #        }
        #
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.RefRecId    =   prevCCTrans.RecId;
        #        ccTrans.SalesId     =   salesTable.SalesId;
        #        ccTrans.SoloIssueNum=   prevCCTrans.SoloIssueNum;
        #        ccTrans.SoloStartDate=  prevCCTrans.SoloStartDate;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   today();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #
        #
        #        ccTrans.insert();
        #        //--> Customer reference is after teh insert so we have a recid
        #        if (!ccTrans.CustomerRef)
        #        {
        #            ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        }
        #        ccTrans.write();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCaptureFreeText
        #static CreditCardTrans createTransforCaptureFreeText (SalesTableCC salesTableCC,
        #                                              CustInvoiceTable   custInvoiceTable,
        #                                              AmountCur    salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        && prevCCTrans.CustInvoiceRefRecId == custInvoiceTable.RecId;
        #
        #    if (salesTableCC && custInvoiceTable)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTotal;
        #        ccTrans.AmountCur           =   Currency::curAmount(ccTrans.AmountMST,custInvoiceTable.CurrencyCode);
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   custInvoiceTable.CurrencyCode;
        #        ccTrans.CustAccount         =   custInvoiceTable.InvoiceAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.InvoiceId     =   custInvoiceTable.InvoiceId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.CustInvoiceRefRecId = custInvoiceTable.RecId;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCaptureProjProposal
        #static CreditCardTrans createTransforCaptureProjProposal (SalesTableCC salesTableCC,
        #                                              ProjProposalJour   projProposalJour,
        #                                              AmountCur    projTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #
        #    select firstonly AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        //--> If converted from service order, the original trans won't have the proposal
        #        && (prevCCTrans.ProjProposalId == projProposalJour.ProposalId
        #        || prevCCTrans.ServiceOrderId == salesTableCC.ServiceOrderId);
        #
        #    if (salesTableCC && projProposalJour)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,NameONCard,CreditCardType,CreditCardNum,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   Currency::curAmount(projTotal,projProposalJour.CurrencyId);
        #        ccTrans.AmountMST           =   projTotal;
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   projProposalJour.CurrencyId;
        #        ccTrans.CustAccount         =   projProposalJour.InvoiceAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard ? prevCCTrans.NameOnCard : ccTable.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex,CreditCardProcessor::Elavon :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.TxRefGuid   =   prevCCTrans.TxRefGuid;
        #                ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.Profile     =   prevCCTrans.Profile;
        #        ccTrans.ProfileId   =   prevCCTrans.ProfileId;
        #        ccTrans.InvoiceId     =   projProposalJour.ProjInvoiceId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.ProjProposalId = projProposalJour.ProposalId;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCaptureServiceOrder
        #static CreditCardTrans createTransforCaptureServiceOrder (SalesTableCC salesTableCC,
        #                                              SMAServiceOrderTable   serviceOrderTable,
        #                                              AmountCur    projTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #
        #    select firstonly AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        && prevCCTrans.ServiceOrderId == serviceOrderTable.ServiceOrderId;
        #
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   Currency::curAmount(projTotal,ProjTable::find(serviceOrderTable.ProjId).currencyId());
        #        ccTrans.AmountMST           =   projTotal;
        #        ccTrans.AmountMST           =   projTotal;
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.CustAccount         =   serviceOrderTable.CustAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex,CreditCardProcessor::Elavon :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.TxRefGuid   =   prevCCTrans.TxRefGuid;
        #                ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.ServiceOrderId = serviceOrderTable.ServiceOrderId;
        #        ccTrans.RefRecId    = serviceOrderTable.RecId;
        #
        #        ccTrans.insert();
        #
        #        //--> Customer reference is after teh insert so we have a recid
        #        if (!ccTrans.CustomerRef)
        #        {
        #            ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #            ccTrans.write();
        #        }
        #
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCredit
        #static CreditCardTrans createTransforCredit (SalesTableCC salesTableCC,
        #                                              SalesTable   salesTable,
        #                                              AmountCur    salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef,OrigId,TxRefGuid
        #        from prevCCTrans
        #        where prevCCTrans.SalesId==salesTable.SalesId
        #        && prevCCTrans.TransID == salesTableCC.TransID;
        #
        #    select firstonly AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,CustomerRef,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef,TxRefGuid,OrigId
        #        from prevAuthCCTrans
        #        where prevAuthCCTRans.SalesId == salesTable.SalesId
        #        && prevAuthCCTrans.PNRef == prevCCTrans.OrigID
        #        && prevAuthCCTrans.TransType == CreditCardTrxType::A;
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        ccTrans.clear();
        #        if (prevCCTrans.AmountMST == abs(salesTotal))
        #        {
        #            ccTrans.AmountMST           =   salesTotal;
        #            ccTrans.AmountCur           =   Currency::curAmount(ccTrans.AmountMST,salesTable.CurrencyCode);
        #        }
        #        else
        #        {
        #            //--> Some processors will allow partial approvals
        #            ccTrans.AmountCur   =   prevCCTrans.AmountCur;
        #            ccTrans.AmountMST   =   prevCCTrans.AmountMST;
        #        }
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   salesTable.CurrencyCode;
        #        ccTrans.CustAccount =   salesTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Commidea      :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                    break;
        #                case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData,
        #                    CreditCardProcessor::TSYS           :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    break;
        #                case CreditCardProcessor::Elavon        :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum  = prevCCTrans.RetrevalRefNum;
        #                    break;
        #                default:
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #            }
        #        }
        #
        #        ccTrans.Profile     =   prevCCTrans.Profile;
        #        ccTrans.ProfileId   =   prevCCTrans.ProfileId;
        #        ccTrans.CustomerRef    =   prevAuthCCTrans.CustomerRef ?  prevAuthCCTrans.CustomerRef : prevCCTrans.CustomerRef;
        #        ccTrans.SalesId     =   salesTable.SalesId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransCurrencyCode =   companyInfo::standardCurrency();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.TxRefGuid    =   newGuid();
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCreditFreeText
        #static CreditCardTrans createTransforCreditFreeText(SalesTableCC salesTableCC,
        #                                              CustInvoiceTable   custInvoiceTable,
        #                                              AmountMST         salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly CustInvoiceRefRecId,TransID from prevCCTrans
        #        where prevCCTRans.CustInvoiceRefRecId == custInvoiceTable.RecId
        #        && prevCCTrans.TransID == salesTableCC.TransID;
        #
        #    select CustInvoiceRefRecId,PNRef,TransType from prevAuthCCTrans
        #        where prevCCTRans.CustInvoiceRefRecId == custInvoiceTable.RecId
        #        && prevAuthCCTrans.PNRef == prevCCTrans.OrigID
        #        && prevAuthCCTrans.TransType == CreditCardTrxType::A;
        #
        #    if (salesTableCC && custInvoiceTable)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   salesTotal;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,custInvoiceTable.CurrencyCode);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   custInvoiceTable.CurrencyCode;
        #        ccTrans.CustAccount =   custInvoiceTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Commidea      :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                    break;
        #                case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    break;
        #            }
        #
        #        }
        #
        #        ccTrans.CustInvoiceRefRecId = custInvoiceTable.RecId;
        #        ccTrans.InvoiceId   =   custInvoiceTable.InvoiceId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCreditProjProposal
        #static CreditCardTrans createTransforCreditProjProposal(SalesTableCC salesTableCC,
        #                                              ProjProposalJour   projProposalJour,
        #                                              AmountMST    projTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly ProjProposalId,TransID from prevCCTrans
        #        where prevCCTRans.ProjProposalId == projProposalJour.ProposalId
        #        && prevCCTrans.TransID == salesTableCC.TransID;
        #
        #    select ProjProposalId,PNRef,TransType from prevAuthCCTrans
        #        where prevCCTRans.ProjProposalId == projProposalJour.ProposalId
        #        && prevAuthCCTrans.PNRef == prevCCTrans.OrigID
        #        && prevAuthCCTrans.TransType == CreditCardTrxType::A;
        #
        #    if (salesTableCC && projProposalJour)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly CreditCardId,Inactive,CreditCardType
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   projTotal;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,projProposalJour.CurrencyId);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   projProposalJour.CurrencyId;
        #        ccTrans.CustAccount =   projProposalJour.InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Commidea      :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                    break;
        #                case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    break;
        #            }
        #
        #        }
        #
        #
        #        ccTrans.ProjProposalId  = projProposalJour.ProposalId;
        #        ccTrans.InvoiceId   =   projProposalJour.ProjInvoiceId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCreditRegister
        #static CreditCardTrans createTransforCreditRegister(SalesTableCC                salesTableCC,
        #                                                    SalesTable                  salesTable,
        #                                                    AmountCur                   salesTotal,
        #                                                    CreditCardNum               ccNum = '',
        #                                                    CreditCardExpirationDate    ccExpDate = str2date("1/1/1900",213),
        #                                                    TempStr                     nameOnCard = '')
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && salesTable)
        #    {
        #        select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #            NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #            CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef
        #            from prevCCTrans
        #            where prevCCTrans.SalesId==salesTable.SalesId
        #            && (prevCCTrans.TransID == salesTableCC.TransID
        #            || prevCCTrans.PNRef == salesTableCC.PNRef)
        #            && prevCCTrans.result == '0'
        #            && prevCCTrans.TransType != CreditCardTrxType::A;
        #
        #        //<-- Get Credit card information
        #        select firstonly CreditCardType,CreditCardNum,NameOncard,CreditCardId,Inactive,CorporateCard,Profile,ProfileId
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.AmountCur   =   salesTotal;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,salesTable.CurrencyCode);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #
        #        if (prevCCTrans)
        #        {
        #            if (prevCCTRans.Profile)
        #            {
        #                ccTrans.Profile =   prevCCtrans.Profile;
        #                ccTrans.ProfileId  = prevCCTrans.ProfileId;
        #            }
        #            else
        #            {
        #                ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #                ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #                ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #
        #            }
        #        }
        #        else
        #        {
        #            if (ccTable.Profile)
        #            {
        #                ccTrans.Profile     =   ccTable.Profile;
        #                ccTrans.ProfileId   =   ccTable.ProfileId;
        #                ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #                ccTrans.CommercialCard      = ccTable.CorporateCard;
        #            }
        #            else
        #            {
        #                //--> Used in cases where the transaction is for a credit card id
        #                if (ccTable.CreditCardId)
        #                {
        #                    ccTrans.CommercialCard      = ccTable.CorporateCard;
        #                    ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                    ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #                }
        #                else
        #                {
        #                    ccTrans.CreditCardNumEncrypt = CreditCardTrans::storeValue(ccNum);
        #                    ccTrans.OneTimeDateExp = ccExpDate;
        #                    ccTrans.CreditCardNumSecure = '************' +
        #                        subStr(ccNum,strlen(ccNum)-3,4);
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                    ccTrans.NameOnCard          =   nameOnCard;
        #                }
        #            }
        #        }
        #
        #        ccTrans.CurrencyCode=   salesTable.CurrencyCode;
        #        ccTrans.CustAccount =   salesTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #
        #        switch (ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID         = prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Elavon        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum  = prevCCTrans.RetrevalRefNum;
        #                break;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.Registered  =   NoYes::Yes;
        #        ccTrans.RegisteredDate = systemDateGet();
        #        ccTrans.SalesId     =   salesTable.SalesId;
        #
        #        ccTrans.TerminalId  =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans.CustomerRef    =   prevCCTrans.CustomerRef ? prevCCTrans.CustomerRef : ccTrans.getMerchantRef(ccTrans);
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCreditRegisterFree
        #static CreditCardTrans createTransforCreditRegisterFree(SalesTableCC                salesTableCC,
        #                                                    CustInvoiceTable            custInvoiceTable,
        #                                                    AmountMST                   salesTotal,
        #                                                    CreditCardNum               ccNum = '',
        #                                                    CreditCardExpirationDate    ccExpDate = str2date("1/1/1900",213))
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && custInvoiceTable)
        #    {
        #        select firstonly AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #            NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location
        #            from prevCCTrans
        #            where prevCCTrans.CustInvoiceRefRecId == custInvoiceTable.RecId
        #            && prevCCTrans.TransID == salesTableCC.TransID;
        #
        #        //<-- Get Credit card information
        #        select firstonly ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #                ccTrans.AmountCur   =   salesTotal;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,custInvoiceTable.CurrencyCode);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CustInvoiceRefRecId = custInvoiceTable.RecId;
        #
        #        if (prevCCTrans)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #            ccTrans.TerminalId          =   ccTrans.resolveTerminalforFreeText(salesTableCC,custInvoiceTable,ccTrans).TerminalId;
        #            ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #        }
        #        ccTrans.CurrencyCode=   custInvoiceTable.CurrencyCode;
        #        ccTrans.CustAccount =   custInvoiceTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #
        #        switch (ccTrans.resolveTerminalforFreeText(salesTableCC,custInvoiceTable,ccTrans).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID         = prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Elavon        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum  = prevCCTrans.RetrevalRefNum;
        #                break;
        #            default:
        #
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #        }
        #
        #        ccTrans.Registered  =   NoYes::Yes;
        #        ccTrans.RegisteredDate = systemDateGet();
        #        ccTrans.TerminalId  =   ccTrans.resolveTerminalforFreeText(salesTableCC,custInvoiceTable,ccTrans).TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateget();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforCreditServiceOrder
        #static CreditCardTrans createTransforCreditServiceOrder(SalesTableCC salesTableCC,
        #                                              SMAServiceOrderTable   serviceOrderTable,
        #                                              AmountMST    projTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly ProjProposalId,TransID from prevCCTrans
        #        where prevCCTRans.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #        && prevCCTrans.TransID == salesTableCC.TransID;
        #
        #    select ProjProposalId,PNRef,TransType from prevAuthCCTrans
        #        where prevCCTRans.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #        && prevAuthCCTrans.PNRef == prevCCTrans.OrigID
        #        && prevAuthCCTrans.TransType == CreditCardTrxType::A;
        #
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly CreditCardId,Inactive,CreditCardType
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   projTotal;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,ProjTable::find(serviceOrderTable.ProjId).currencyId());
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.CustAccount =   serviceOrderTable.CustAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Commidea      :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                    break;
        #                case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                    break;
        #            }
        #
        #        }
        #
        #
        #        ccTrans.ServiceOrderId  = serviceOrderTable.ServiceOrderId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransForDeltaAuth
        #static CreditCardTrans createTransForDeltaAuth(CreditCardTrans oldCCTrans,
        #                                              SalesTable    salesTable,
        #                                              Amount        processAmt)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable = CreditCardTable::find(oldCCTrans.CreditCardId);
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (oldCCTrans.Result == '0')
        #    {
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   processAmt;
        #        ccTrans.AmountMST           =   Currency::amountCur2MST(processAmt,oldCCTrans.CurrencyCode);
        #        ccTrans.CID                 =   oldCCTrans.CID;
        #        ccTrans.CitiPlan            =   oldCCTrans.CitiPlan;
        #        ccTrans.CVDSent             =   oldCCTrans.CVDSent;
        #        ccTrans.CreditCardID        =   oldCCTrans.CreditCardId;
        #        ccTrans.CreditCardType      =   oldCCTrans.CreditCardType;
        #
        #        ccTrans.CreditCardNumSecure     = oldCCTrans.CreditCardNumSecure;
        #        if (oldCCTrans.Profile)
        #        {
        #            ccTrans.Profile     = oldCCTrans.Profile;
        #            ccTrans.ProfileId   = oldCCTrans.ProfileId;
        #        }
        #        else
        #        {
        #            ccNum   = CreditCardUtility::decrypt(oldCCTrans.CreditCardNumEncrypt,
        #                CreditCardEncryptionTable::findKeyByDate(oldCCTrans.TransDate).EncryptionKey);
        #            ccTrans.CreditCardNumEncrypt    = CreditCardUtility::encrypt(ccNum,
        #                CreditCardEncryptionTable::findKeyByDate(systemDateGet()).EncryptionKey);
        #        }
        #
        #        ccTrans.OneTimeDateExp          = oldCCTrans.OneTimeDateExp;
        #        ccTrans.TerminalId              = oldCCTrans.TerminalId;
        #        ccTrans.SoloIssueNum            = oldCCTrans.SoloIssueNum;
        #        ccTrans.SoloStartDate           = oldCCTrans.SoloStartDate;
        #        ccTrans.NameOnCard              = oldCCTrans.NameOnCard;
        #        ccTrans.TransCurrencyCode       = oldCCTrans.TransCurrencyCode;
        #        ccTrans.OrigDateTime            = DateTimeUtil::applyTimeZoneOffset(
        #                                        DateTimeUtil::getSystemDateTime(),
        #                                        DateTimeUtil::getCompanyTimeZone());
        #
        #        ccTrans.RefRecId            =   oldCCTrans.RefRecId;
        #        ccTrans.CurrencyCode        =   oldCCTrans.CurrencyCode;
        #        ccTrans.CustAccount         =   oldCCTrans.CustAccount;
        #        ccTrans.EntrySource         =   oldCCTrans.entrySource;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeTrans        =   NoYes::Yes;
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.SalesId             =   oldCCTrans.SalesId;
        #        ccTrans.ServiceOrderId      =   oldCCTrans.ServiceOrderId;
        #        ccTrans.ProjProposalId      =   oldCCTrans.ProjProposalId;
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   oldCCTrans.TransType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(oldCCTrans.TransType);
        #        ccTrans.UsePayPalRef        =   CreditCardParameters::findParameter().UsePayPalRef;
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        ccTrans.Location            =   oldCCTrans.Location;
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransForDeltaAuthProj
        #static CreditCardTrans createTransForDeltaAuthProj(CreditCardTrans oldCCTrans,
        #                                              ProjProposalJour       projProposalJour,
        #                                              Amount        processAmt)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable = CreditCardTable::find(oldCCTrans.CreditCardId);
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (oldCCTrans.Result == '0')
        #    {
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   processAmt;
        #        ccTrans.AmountMST           =   Currency::amountCur2MST(processAmt,oldCCTrans.CurrencyCode);
        #        ccTrans.CID                 =   oldCCTrans.CID;
        #        ccTrans.CitiPlan            =   oldCCTrans.CitiPlan;
        #        ccTrans.CVDSent             =   oldCCTrans.CVDSent;
        #        ccTrans.CreditCardID        =   oldCCTrans.CreditCardId;
        #        ccTrans.CreditCardType      =   oldCCTrans.CreditCardType;
        #
        #        ccTrans.CreditCardNumSecure     = oldCCTrans.CreditCardNumSecure;
        #        if (oldCCTrans.Profile)
        #        {
        #            ccTrans.Profile     = oldCCTrans.Profile;
        #            ccTrans.ProfileId   = oldCCTrans.ProfileId;
        #        }
        #        else
        #        {
        #            ccNum   = CreditCardUtility::decrypt(oldCCTrans.CreditCardNumEncrypt,
        #                CreditCardEncryptionTable::findKeyByDate(oldCCTrans.TransDate).EncryptionKey);
        #            ccTrans.CreditCardNumEncrypt    = CreditCardUtility::encrypt(ccNum,
        #                CreditCardEncryptionTable::findKeyByDate(systemDateGet()).EncryptionKey);
        #        }
        #
        #        ccTrans.OneTimeDateExp          = oldCCTrans.OneTimeDateExp;
        #        ccTrans.TerminalId              = oldCCTrans.TerminalId;
        #        ccTrans.SoloIssueNum            = oldCCTrans.SoloIssueNum;
        #        ccTrans.SoloStartDate           = oldCCTrans.SoloStartDate;
        #        ccTrans.NameOnCard              = oldCCTrans.NameOnCard;
        #        ccTrans.TransCurrencyCode       = oldCCTrans.TransCurrencyCode;
        #        ccTrans.OrigDateTime            = DateTimeUtil::applyTimeZoneOffset(
        #                                        DateTimeUtil::getSystemDateTime(),
        #                                        DateTimeUtil::getCompanyTimeZone());
        #
        #        ccTrans.RefRecId            =   oldCCTrans.RefRecId;
        #        ccTrans.CurrencyCode        =   oldCCTrans.CurrencyCode;
        #        ccTrans.CustAccount         =   oldCCTrans.CustAccount;
        #        ccTrans.EntrySource         =   oldCCTrans.entrySource;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeTrans        =   NoYes::Yes;
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.SalesId             =   oldCCTrans.SalesId;
        #        ccTrans.ServiceOrderId      =   oldCCTrans.ServiceOrderId;
        #        ccTrans.ProjProposalId      =   oldCCTrans.ProjProposalId;
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   oldCCTrans.TransType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(oldCCTrans.TransType);
        #        ccTrans.UsePayPalRef        =   CreditCardParameters::findParameter().UsePayPalRef;
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        ccTrans.Location            =   oldCCTrans.Location;
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforJournalVoid
        #static CreditCardTrans createTransforJournalVoid (LedgerJournalTransCC ledgerJournalTransCC,
        #                                                  LedgerJournalTrans   ledgerJournalTrans)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (ledgerJournalTransCC && ledgerJournalTrans)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,
        #            Location,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == ledgerJournalTransCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   ledgerJournalTrans.AmountCurCredit;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,ledgerJournalTrans.CurrencyCode);
        #        ccTrans.CreditCardID=   ledgerJournalTransCC.CreditCardId;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CurrencyCode=   ledgerJournalTrans.CurrencyCode;
        #        ccTrans.CustAccount =   ledgerJournalTrans.parmAccount();
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.OrigID      =   ledgerJournalTransCC.PNRef;
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::Journal;
        #        ccTrans.TerminalId  =   CreditCardTerminalTable::find().TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::V;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::V) ;
        #        ccTrans.Voucher     =   ledgerJournalTrans.Voucher;
        #        ccTrans.Location    =   ccTable.Location;
        #        ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = ledgerJournalTrans.CurrencyCode;
        #        ccTrans.CurrencyCode=   ledgerJournalTrans.CurrencyCode;
        #        ccTrans.Profile     =   ccTable.Profile;
        #        ccTrans.ProfileId   =   ccTable.ProfileId;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforProjCapture
        #static CreditCardTrans createTransforProjCapture (SalesTableCC salesTableCC,
        #                                              ProjProposalJour   projProposalJour,
        #                                              AmountCur    salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #
        #    select AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CommercialCard,
        #        CommercialLocalTax,CommercialSalesTax,OneTimeDateExp,CreditCardType,CreditCardNumEncrypt,CustomerRef,
        #        CybersourceToken,OrbitalTxRefNum,NameOnCard,PNRef,Profile,ProfileId,RetrevalRefNum,ServiceOrderId,
        #        TerminalId,txRefGuid from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        && prevCCTrans.ProjProposalId == projProposalJour.ProposalId
        #        && prevCCTrans.Result == '0';
        #
        #    if (salesTableCC && projProposalJour)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   salesTotal;
        #        ccTrans.AmountMST           =   salesTotal;//Currency::amountCur2MST(ccTrans.AmountCur,salesTable.CurrencyCode);
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   ProjTable::find(projProposalJour.ProjInvoiceProjId).currencyId();
        #        ccTrans.CustAccount         =   ProjTable::find(projProposalJour.ProjInvoiceProjId).CustAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #        ccTrans.Profile             =   prevCCTrans.Profile;
        #        ccTrans.ProfileId           =   prevCCTrans.ProfileId;
        #        ccTrans.TxRefGuid           =   prevCCTrans.TxRefGuid;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex,CreditCardProcessor::Elavon :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.TxRefGuid   =   prevCCTrans.TxRefGuid;
        #                ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        //--> Fail safe for transaction date
        #        if (ccTrans.OrigDateTime == DateTimeUtil::minValue() || !ccTrans.OrigDateTime)
        #        {
        #            ccTrans.OrigDateTime = DateTimeUtil::getSystemDateTime();
        #        }
        #
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.RefRecId    =   prevCCTrans.RecId;
        #        ccTrans.ServiceOrderId     =   prevCCTrans.ServiceOrderId;
        #        ccTrans.SoloIssueNum=   prevCCTrans.SoloIssueNum;
        #        ccTrans.SoloStartDate=  prevCCTrans.SoloStartDate;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   today();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #
        #
        #        ccTrans.insert();
        #        //--> Customer reference is after teh insert so we have a recid
        #        if (!ccTrans.CustomerRef)
        #        {
        #            ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        }
        #        ccTrans.write();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforRefCredit
        #static CreditCardTrans createTransforRefCredit (SalesTableCC salesTableCC)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef
        #        from prevCCTrans
        #        where prevCCTrans.SalesId==salesTableCC.SalesId
        #        && prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.TransType != CreditCardTrxType::C;
        #
        #    if (!prevCCTrans)
        #    {
        #        select firstonly prevCCTrans where
        #            prevCCTrans.PNRef == salesTableCC.PNRef
        #            && prevCCTrans.TransType != CreditCardTrxType::C
        #            && prevCCTrans.Result == '0';
        #
        #
        #    }
        #
        #    if (salesTableCC)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   salesTableCC.AmountCur;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,salesTableCC.CurrencyCode);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CommercialCard =CreditCardTable::find(salesTableCC.CreditCardId).CorporateCard;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   salesTableCC.CurrencyCode;
        #        ccTrans.CustAccount =   SalesTable::find(salesTableCC.SalesId).InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Elavon        :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum  = prevCCTrans.RetrevalRefNum;
        #                    break;
        #                default:
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #
        #            }
        #
        #        }
        #
        #        ccTrans.SalesId     =   salesTableCC.SalesId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode = companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.Profile     =   prevCCTrans.Profile;
        #        ccTrans.ProfileId   =   prevCCTrans.ProfileId;
        #
        #        ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforRefCreditFree
        #static CreditCardTrans createTransforRefCreditFree(SalesTableCC salesTableCC)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTrans     prevAuthCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef
        #        from prevCCTrans
        #        where prevCCTrans.CustInvoiceRefRecId==salesTableCC.CustInvoiceRefRecId
        #        && prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.TransType != CreditCardTrxType::C;
        #
        #    if (!prevCCTrans)
        #    {
        #        select firstonly prevCCTrans where
        #            prevCCTrans.PNRef == salesTableCC.PNRef
        #            && prevCCTrans.TransType != CreditCardTrxType::C
        #            && prevCCTrans.Result == '0';
        #    }
        #
        #    if (salesTableCC)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountCur   =   salesTableCC.AmountCur;
        #        ccTrans.AmountMST   =   Currency::amountCur2MST(ccTrans.AmountCur,salesTableCC.CurrencyCode);
        #        ccTrans.AuthCode    =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId   =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource  =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan    =   prevCCTrans.CitiPlan;
        #        ccTrans.CommercialCard =CreditCardTable::find(salesTableCC.CreditCardId).CorporateCard;
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType =prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode=   salesTableCC.CurrencyCode;
        #        ccTrans.CustInvoiceRefRecId = salesTableCC.CustInvoiceRefRecId;
        #        ccTrans.CustAccount =   SalesTable::find(salesTableCC.SalesId).InvoiceAccount;
        #        ccTrans.CybersourceToken=prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard  =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        if (prevCCTRans)
        #        {
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::RealEx        :
        #                    ccTrans.OrigID      =   prevAuthCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = int642str(prevAuthCCTrans.RecId);
        #                    ccTrans.TransCurrencyCode   = prevAuthCCTrans.TransCurrencyCode;
        #                    break;
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                default:
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #
        #            }
        #
        #        }
        #
        #        ccTrans.SalesId     =   salesTableCC.SalesId;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode = companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::C;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::C) ;
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.Profile     =   prevCCTrans.Profile;
        #        ccTrans.ProfileId   =   prevCCTrans.ProfileId;
        #
        #        ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforServOrderCapture
        #static CreditCardTrans createTransforServOrderCapture (SalesTableCC salesTableCC,
        #                                              SMAServiceOrderTable   serviceOrderTable,
        #                                              AmountCur    salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #
        #    select AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CommercialCard,
        #        CommercialLocalTax,CommercialSalesTax,OneTimeDateExp,CreditCardType,CreditCardNumEncrypt,CustomerRef,
        #        CybersourceToken,OrbitalTxRefNum,NameOnCard,PNRef,Profile,ProfileId,RetrevalRefNum,TerminalId,txRefGuid from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.TransID == salesTableCC.TransID
        #        && prevCCTrans.ServiceOrderId == serviceOrderTable.ServiceOrderId
        #        && prevCCTrans.Result == '0';
        #
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        ccTrans.clear();
        #        ccTrans.AmountCur           =   salesTotal;
        #        ccTrans.AmountMST           =   salesTotal;//Currency::amountCur2MST(ccTrans.AmountCur,salesTable.CurrencyCode);
        #        ccTrans.AuthCode            =   prevCCTrans.AuthCode;
        #        ccTrans.AuthNetId           =   prevCCTrans.AuthNetId;
        #        ccTrans.AuthSource          =   prevCCTrans.AuthSource;
        #        ccTrans.CitiPlan            =   prevCCTrans.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #        ccTrans.CommercialCard      =   prevCCTrans.CommercialCard;
        #        ccTrans.CommercialLocalTax  =   prevCCTrans.CommercialLocalTax;
        #        ccTrans.CommercialSalesTax  =   prevCCTrans.CommercialSalesTax;
        #        ccTrans.OneTimeDateExp      =   prevCCTRans.OneTimeDateExp;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #        ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #        ccTrans.CurrencyCode        =   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.CustAccount         =   serviceOrderTable.CustAccount;
        #        ccTrans.CybersourceToken    =   prevCCTrans.CybersourceToken;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.NameOnCard          =   prevCCTrans.NameOnCard;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.OrbitalTxRefNum     =   prevCCTrans.OrbitalTxRefNum;
        #        ccTrans.Profile             =   prevCCTrans.Profile;
        #        ccTrans.ProfileId           =   prevCCTrans.ProfileId;
        #        ccTrans.TxRefGuid           =   prevCCTrans.TxRefGuid;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(prevCCTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal,CreditCardProcessor::AuthorizeNet :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Cybersource  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::RealEx        :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = int642str(prevCCTrans.RecId);
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   prevccTrans.PNRef;
        #                ccTrans.RetrevalRefNum  =   prevccTrans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   prevCCTrans.Comment2;
        #                break;
        #
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex,CreditCardProcessor::Elavon :
        #                ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                ccTrans.TxRefGuid   =   prevCCTrans.TxRefGuid;
        #                ccTrans.CustomerRef =   prevCCTrans.CustomerRef;
        #            default:
        #                ccTrans.OrigID      = prevCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OrigDateTime    = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #
        #        //--> Fail safe for transaction date
        #        if (ccTrans.OrigDateTime == DateTimeUtil::minValue() || !ccTrans.OrigDateTime)
        #        {
        #            ccTrans.OrigDateTime = DateTimeUtil::getSystemDateTime();
        #        }
        #
        #        ccTrans.RecurringToken      = salesTableCC.RecurringToken;
        #        ccTrans.RefRecId    =   prevCCTrans.RecId;
        #        ccTrans.ServiceOrderId     =   serviceOrderTable.ServiceOrderId;
        #        ccTrans.SoloIssueNum=   prevCCTrans.SoloIssueNum;
        #        ccTrans.SoloStartDate=  prevCCTrans.SoloStartDate;
        #        ccTrans.TerminalId  =   prevCCTrans.TerminalId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.TransDate   =   today();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   CreditCardTrxType::D;
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(CreditCardTrxType::D) ;
        #        ccTrans.VoiceAuth   =   prevCCTrans.VoiceAuth;
        #        ccTrans.Location    =   prevCCTrans.Location;
        #
        #
        #        ccTrans.insert();
        #        //--> Customer reference is after teh insert so we have a recid
        #        if (!ccTrans.CustomerRef)
        #        {
        #            ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        }
        #        ccTrans.write();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforVoid
        #static CreditCardTrans createTransforVoid (SalesTableCC         salesTableCC,
        #                                              SalesTable        salesTable,
        #                                              CreditCardTrans   oldCCTrans,
        #                                              AmountCur         salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && salesTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur       =   -salesTotal;
        #        ccTrans.AmountMST       =   Currency::amountCur2MST(ccTrans.AmountCur,salesTable.CurrencyCode);
        #        ccTRans.AuthCode        =   oldCCTrans.AuthCode;
        #        ccTrans.CitiPlan        =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID    =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType  =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode    =   salesTable.CurrencyCode;
        #        ccTrans.CustAccount     =   salesTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=   oldCCTrans.CybersourceToken;
        #        ccTrans.WorkerProcessor =   currentWorker();
        #        ccTrans.JournalOrig     =   CreditCardJournalOrig::System;
        #        ccTrans.TerminalId      =   oldccTrans.TerminalId;
        #        ccTrans.NameOnCard      =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = CompanyInfo::standardCurrency();
        #        ccTrans.OrigDateTime    =   oldCCTrans.OrigDateTime
        #            ? DateTimeUtil::newDateTime(oldCCTrans.TransDate,0) : oldCCTrans.OrigDateTime;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(ccTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = oldCCTrans.OrbitalTxRefNum;
        #                ccTrans.OrbitalTxRefIdx = oldCCTrans.OrbitalTxRefIdx;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTRans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::Heartland  :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case    CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum  = oldCCTrans.RetrevalRefNum;
        #                break;
        #            case    CreditCardProcessor::AdFlex :
        #                ccTrans.TxRefGuid       = oldCCTrans.TxRefGuid;
        #                break;
        #            case CreditCardProcessor::Elavon        :
        #                    ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum  = oldCCTrans.RetrevalRefNum;
        #                    break;
        #            default :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #
        #        }
        #
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.Profile         =   oldCCTrans.Profile;
        #        ccTrans.ProfileId       =   oldCCTrans.ProfileId;
        #        ccTrans.RefRecId        =   oldCCTrans.RefRecId;
        #        ccTrans.SalesId         =   salesTable.SalesId;
        #        ccTrans.TerminalId      =   oldCCTrans.TerminalId;
        #        ccTrans.TransDate       =   systemDateGet();
        #        ccTrans.TransID         =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType       =   CreditCardTrxType::V;
        #        ccTrans.TrxType         =   dictEnum.index2Symbol(CreditCardTrxType::V) ;
        #        ccTrans.CreditCardNumEncrypt = oldccTrans.CreditCardNumEncrypt;
        #        ccTrans.Location        =   oldCCTrans.Location;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforVoidFromFreeText
        #static CreditCardTrans createTransforVoidFromFreeText (SalesTableCC         salesTableCC,
        #                                              CustInvoiceTable  custInvoiceTable,
        #                                              CreditCardTrans   oldCCTrans,
        #                                              AmountMST         salesTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && custInvoiceTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur       =   -salesTotal;
        #        ccTrans.AmountMST       =   Currency::amountCur2MST(ccTrans.AmountCur,custInvoiceTable.CurrencyCode);
        #        ccTrans.CitiPlan        =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID    =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType  =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode    =   custInvoiceTable.CurrencyCode;
        #        ccTrans.CustAccount     =   custInvoiceTable.InvoiceAccount;
        #        ccTrans.CybersourceToken=   oldCCTrans.CybersourceToken;
        #        ccTrans.WorkerProcessor =   currentWorker();
        #        ccTrans.JournalOrig     =   CreditCardJournalOrig::System;
        #        ccTrans.TerminalId      =   oldccTrans.TerminalId;
        #        ccTrans.NameOnCard      =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = custInvoiceTable.CurrencyCode;
        #        ccTrans.OrigDateTime    =   oldCCTrans.OrigDateTime
        #            ? DateTimeUtil::newDateTime(oldCCTrans.TransDate,0) : oldCCTrans.OrigDateTime;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(ccTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = oldCCTrans.OrbitalTxRefNum;
        #                ccTrans.OrbitalTxRefIdx = oldCCTrans.OrbitalTxRefIdx;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTRans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   oldCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                break;
        #
        #        }
        #
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.InvoiceId         =   custInvoiceTable.InvoiceId;
        #        ccTrans.CustInvoiceRefRecId = custInvoiceTable.RecId;
        #        ccTrans.TerminalId      =   oldCCTrans.TerminalId;
        #        ccTrans.TransDate       =   systemDateGet();
        #        ccTrans.TransID         =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType       =   CreditCardTrxType::V;
        #        ccTrans.TrxType         =   dictEnum.index2Symbol(CreditCardTrxType::V) ;
        #        ccTrans.CreditCardNumEncrypt = oldccTrans.CreditCardNumEncrypt;
        #        ccTrans.Location        =   oldCCTrans.Location;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforVoidFromProjProposal
        #static CreditCardTrans createTransforVoidFromProjProposal(SalesTableCC         salesTableCC,
        #                                              ProjProposalJour   projProposalJour,
        #                                              CreditCardTrans   oldCCTrans,
        #                                              AmountMST         projTotal)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && projProposalJour)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur       =   -projTotal;
        #        ccTrans.AmountMST       =   Currency::amountCur2MST(ccTrans.AmountCur,projProposalJour.CurrencyId);
        #        ccTrans.CitiPlan        =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID    =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType  =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode    =   projProposalJour.CurrencyId;
        #        ccTrans.CustAccount     =   projProposalJour.InvoiceAccount;
        #        ccTrans.CybersourceToken=   oldCCTrans.CybersourceToken;
        #        ccTrans.WorkerProcessor =   currentWorker();
        #        ccTrans.JournalOrig     =   CreditCardJournalOrig::System;
        #        ccTrans.TerminalId      =   oldccTrans.TerminalId;
        #        ccTrans.NameOnCard      =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = projProposalJour.CurrencyId;
        #        ccTrans.OrigDateTime    =   oldCCTrans.OrigDateTime
        #            ? DateTimeUtil::newDateTime(oldCCTrans.TransDate,0) : oldCCTrans.OrigDateTime;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(ccTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = oldCCTrans.OrbitalTxRefNum;
        #                ccTrans.OrbitalTxRefIdx = oldCCTrans.OrbitalTxRefIdx;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTRans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   oldCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                break;
        #
        #        }
        #
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.InvoiceId         =   projProposalJour.ProjInvoiceId;
        #        ccTrans.ProjProposalId  =   projProposalJour.ProposalId;
        #        ccTrans.TerminalId      =   oldCCTrans.TerminalId;
        #        ccTrans.TransDate       =   systemDateGet();
        #        ccTrans.TransID         =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType       =   CreditCardTrxType::V;
        #        ccTrans.TrxType         =   dictEnum.index2Symbol(CreditCardTrxType::V) ;
        #        ccTrans.CreditCardNumEncrypt = oldccTrans.CreditCardNumEncrypt;
        #        ccTrans.Location        =   oldCCTrans.Location;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransforVoidFromServiceOrder
        #static CreditCardTrans createTransforVoidFromServiceOrder(SalesTableCC         salesTableCC,
        #                                              SMAServiceOrderTable   serviceOrderTable,
        #                                              CreditCardTrans   oldCCTrans,
        #                                              AmountMST         total)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountCur       =   -total;
        #        ccTrans.AmountMST       =   Currency::amountCur2MST(ccTrans.AmountCur,ProjTable::find(serviceOrderTable.ProjId).currencyId());
        #        ccTrans.CitiPlan        =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID    =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType  =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode    =   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.CustAccount     =   serviceOrderTable.custAccount;
        #        ccTrans.CybersourceToken=   oldCCTrans.CybersourceToken;
        #        ccTrans.WorkerProcessor =   currentWorker();
        #        ccTrans.JournalOrig     =   CreditCardJournalOrig::System;
        #        ccTrans.TerminalId      =   oldccTrans.TerminalId;
        #        ccTrans.NameOnCard      =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = CompanyInfo::standardCurrency();
        #        ccTrans.OrigDateTime    =   oldCCTrans.OrigDateTime
        #            ? DateTimeUtil::newDateTime(oldCCTrans.TransDate,0) : oldCCTrans.OrigDateTime;
        #
        #        switch (CreditCardTerminalTable::findTerminalWithId(ccTrans.TerminalId).Processor)
        #        {
        #            case CreditCardProcessor::PayPal      :
        #                ccTrans.OrigID      =   salesTableCC.PNRef;
        #                break;
        #            case CreditCardProcessor::Paymentech    :
        #                if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.AuthCode;
        #                }
        #                else
        #                {
        #                    ccTrans.OrigID      =   oldCCTrans.RetrevalRefNum;
        #                }
        #                break;
        #            case CreditCardProcessor::Orbital   :
        #                ccTrans.OrbitalTxRefNum = oldCCTrans.OrbitalTxRefNum;
        #                ccTrans.OrbitalTxRefIdx = oldCCTrans.OrbitalTxRefIdx;
        #                break;
        #            case CreditCardProcessor::AuthorizeNet       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Cybersource   :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                break;
        #            case CreditCardProcessor::Moneris       :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTRans.RetrevalRefNum;
        #                break;
        #            case CreditCardProcessor::Commidea      :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                ccTrans.Comment2    =   oldCCTrans.Comment2;
        #                break;
        #            case    CreditCardProcessor::Heartland,CreditCardProcessor::DPS,CreditCardProcessor::FirstData  :
        #                ccTrans.OrigID      =   oldCCTrans.PNRef;
        #                ccTrans.RetrevalRefNum = oldCCTrans.RetrevalRefNum;
        #                break;
        #
        #        }
        #
        #        ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #        ccTrans.ServiceOrderId  =   serviceOrderTable.ServiceOrderId;
        #        ccTrans.TerminalId      =   oldCCTrans.TerminalId;
        #        ccTrans.TransDate       =   systemDateGet();
        #        ccTrans.TransID         =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType       =   CreditCardTrxType::V;
        #        ccTrans.TrxType         =   dictEnum.index2Symbol(CreditCardTrxType::V) ;
        #        ccTrans.CreditCardNumEncrypt = oldccTrans.CreditCardNumEncrypt;
        #        ccTrans.Location        =   oldCCTrans.Location;
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransFreeText
        #static CreditCardTrans createTransFreeText(SalesTableCC         salesTableCC,
        #                                           CustInvoiceTable     custInvoiceTable)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    custFreeInvoiceCalcTotals         salesTotals;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && custInvoiceTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,NameOncard,CreditCardId,CreditCardNum,CreditCardType,SoloIssueNum,SoloStartDate,Profile,ProfileId
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   custInvoiceTable.CurrencyCode;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   custInvoiceTable.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.invoiceId            =   custInvoiceTable.InvoiceId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.CustInvoiceRefRecId =   custInvoiceTable.RecId;
        #        ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            if (prevCCTRans.Profile)
        #            {
        #                ccTrans.Profile =   prevCCtrans.Profile;
        #                ccTrans.ProfileId  = prevCCTrans.ProfileId;
        #            }
        #            else
        #            {
        #                ccTrans.CreditCardNumSecure = prevCCTrans.CreditCardNumSecure;
        #                ccTrans.CreditCardNumEncrypt = prevCCTrans.CreditCardNumEncrypt;
        #                ccTrans.OneTimeDateExp  = prevCCTrans.OneTimeDateExp;
        #
        #            }
        #        }
        #        else
        #        {
        #            if (ccTable.Profile)
        #            {
        #                ccTrans.Profile =   ccTable.Profile;
        #                ccTrans.ProfileId  = ccTable.ProfileId;
        #            }
        #            else
        #            {
        #                //--> Used in cases where the transaction is for a credit card id
        #                if (ccTable.CreditCardId)
        #                {
        #                    ccTrans.CommercialCard      = ccTable.CorporateCard;
        #                    ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforFreeText(salesTableCC,custInvoiceTable,ccTrans).TerminalId;
        #                    ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #                }
        #            }
        #        }
        #
        #        ccTrans.TerminalId          =   ccTrans.resolveTerminalforFreeText(salesTableCC,custInvoiceTable,ccTrans).TerminalId;
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        if (CreditCardTable::isCorporateCard(ccNum) || ccTable.CorporateCard)
        #        {
        #            //--> Retrieve Sales Tax Amounts
        #            salesTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
        #            salesTotals.calc();
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = salesTotals.custFreeInvoiceTaxTotal();
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!CustInvoiceTable.TaxGroup)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else if (CustInvoiceTable.VATNum)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #
        #        }
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfrom3DCheck
        #static CreditCardTrans createTransfrom3DCheck(tmpCC3dEnrollCheck _tmpCC3dEnrollCheck)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTable     ccTable;
        #    ;
        #    ccTrans.clear();
        #
        #    ccTrans.AmountCur           =   _tmpCC3dEnrollCheck.AmountCur;
        #    ccTrans.AuthCode            =   _tmpCC3dEnrollCheck.AuthCode;
        #    ccTrans.AmountMST           =   currency::amountCur2MST(_tmpCC3dEnrollCheck.AmountCur,_tmpCC3dEnrollCheck.CurrencyCode);
        #    ccTrans.CreditCardType      =   _tmpCC3dEnrollCheck.CardType;
        #    ccTrans.CurrencyCode        =   _tmpCC3dEnrollCheck.CurrencyCode;
        #    ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #    ccTrans.CustAccount         =   _tmpCC3dEnrollCheck.CustAccount;
        #    ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #    ccTrans.OneTimeDateExp      =   _tmpCC3dEnrollCheck.ExpirationDate;
        #    ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #    ccTrans.RefRecId            =   _tmpCC3dEnrollCheck.RecId;
        #    ccTrans.PNRef               =   _tmpCC3dEnrollCheck.PNRef;
        #    ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                        DateTimeUtil::getSystemDateTime(),
        #                                        DateTimeUtil::getCompanyTimeZone());
        #    ccTrans.SalesId             =   _tmpCC3dEnrollCheck.SalesId;
        #    ccTrans.TransDate           =   systemDateGet();
        #    ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #    ccTrans.TransType           =   CreditCardTrxType::A;
        #    ccTrans.TrxType             =   'A';
        #    ccTrans.Result              =   '0';
        #    ccTrans.Location            =   _tmpCC3dEnrollCheck.Location;
        #
        #    ccTrans.CreditCardNumSecure =    '************' +
        #            subStr(_tmpCC3dEnrollCheck.CreditCardNum,strlen(_tmpCC3dEnrollCheck.CreditCardNum)-3,4);
        #    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #
        #    ccTrans.NameOnCard          =   _tmpCC3dEnrollCheck.NameOnCard;
        #    ccTrans.TerminalId          =   _tmpCC3dEnrollCheck.TerminalId;
        #
        #    //--> Payer Authorization
        #    ccTrans.AAV                 =   _tmpCC3dEnrollCheck.AAV;
        #    ccTrans.CAVV                =   _tmpCC3dEnrollCheck.CAVV;
        #    ccTrans.VeresEnrolled       =   _tmpCC3dEnrollCheck.VeresEnrolled;
        #    ccTrans.ParesStatus         =   _tmpCC3dEnrollCheck.ParesStatus;
        #    ccTrans.CollectionInidicator=   _tmpCC3dEnrollCheck.CollectionInidicator;
        #    ccTrans.ECIRaw              =   _tmpCC3dEnrollCheck.ECIRaw;
        #    ccTrans.CommerceIndicator   =   _tmpCC3dEnrollCheck.CommerceIndicator;
        #    ccTrans.xid                 =   _tmpCC3dEnrollCheck.xid;
        #    ccTrans.insert();
        #
        #    if (ccTrans.SalesId)
        #    {
        #        SalesTableCC::createTrans(ccTrans);
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromJournal
        #static CreditCardTrans createTransfromJournal(LedgerJournalTransCC ledgerJournalTransCC,
        #                                              LedgerJournalTrans   ledgerJournalTrans)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTable         ccTable;
        #    DictEnum                dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    CreditCardTrxType       ccTrxType;
        #    CreditCardTrans         prevCCTrans;
        #    ;
        #    if (ledgerJournalTransCC && ledgerJournalTrans)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,
        #            CreditCardType,SoloIssueNum,SoloStartDate,NameOnCard
        #            from ccTable where ccTable.CreditCardId == ledgerJournalTransCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        //--> Get amount no matter where it is
        #        if (ledgerJournalTrans.AmountCurCredit != 0)
        #        {
        #            ccTrans.AmountCur   =   ledgerJournalTrans.AmountCurCredit;
        #        }
        #        else
        #        {
        #            ccTrans.AmountCur   =   -ledgerJournalTrans.AmountCurDebit;
        #        }
        #
        #        ccTrans.AmountMST           =   Currency::amountCur2MST(ccTrans.AmountCur,ledgerJournalTrans.CurrencyCode);
        #        ccTrans.CreditCardID=   ledgerJournalTransCC.CreditCardId;
        #        ccTrans.CurrencyCode=   ledgerJournalTrans.CurrencyCode;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CustAccount =   ledgerJournalTrans.parmAccount();
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::Journal;
        #        ccTrans.Voucher     =   ledgerJournalTrans.Voucher;
        #        ccTrans.SalesId     =   ledgerJournalTrans.Voucher;
        #        ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = ledgerJournalTrans.CurrencyCode;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TerminalId  =   ccTrans.resolveTerminalforJournal(ledgerJournalTrans,ccTrans).TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   str2enum(ccTrxType, enum2str(ledgerJournalTransCC.CreditCardTrxType));
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(ledgerJournalTransCC.CreditCardTrxType);
        #        ccTrans.Profile     =   ccTable.Profile;
        #        ccTrans.ProfileId   =   ccTable.ProfileId;
        #        ccTrans.InvoiceId   =   LedgerJournalTrans.MarkedInvoice;
        #        ccTrans.CustomerRef =   ledgerJournalTrans.MarkedInvoice ? ledgerJournalTrans.MarkedInvoice : ledgerJournalTrans.Voucher;
        #        ccTrans.TxRefGuid   =   newGuid();
        #
        #        if (ledgerJournalTransCC.PNRef || ledgerJournalTransCC.TransID)
        #        {
        #            if (ledgerJournalTransCC.PNRef)
        #            {
        #                select prevCCTrans
        #                    where prevCCTrans.PNRef == ledgerJournalTransCC.PNRef;
        #            }
        #            else if (ledgerJournalTransCC.TransID)
        #            {
        #                select prevCCTrans
        #                    where prevCCTrans.TransID == ledgerJournalTransCC.TransID;
        #            }
        #
        #            if (prevCCTrans)
        #            {
        #                ccTrans.TerminalId = prevCCTrans.TerminalId;
        #            }
        #
        #            switch (CreditCardTerminalTable::find().Processor)
        #            {
        #                case CreditCardProcessor::PayPal      :
        #                    ccTrans.OrigID         = prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Paymentech    :
        #                    if (CreditCardTerminalTable::find().SystemIndicator == CreditCardSystemIndicator::del_TCS )
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.AuthCode;
        #                    }
        #                    else
        #                    {
        #                        ccTrans.OrigID      =   prevCCTrans.RetrevalRefNum;
        #                    }
        #                    break;
        #                case CreditCardProcessor::Orbital   :
        #                    ccTrans.OrbitalTxRefNum = prevCCTrans.OrbitalTxRefNum;
        #                    break;
        #                case CreditCardProcessor::AuthorizeNet       :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #                case CreditCardProcessor::Cybersource   :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    break;
        #
        #                case CreditCardProcessor::Moneris       :
        #                    ccTrans.OrigID      =   prevCCTRans.PNRef;
        #                    ccTrans.PNRef       =   prevCCTRans.RetrevalRefNum;
        #                case CreditCardProcessor::Elavon        :
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum  = prevCCTrans.RetrevalRefNum;
        #                    break;
        #                default:
        #                    ccTrans.OrigID      =   prevCCTrans.PNRef;
        #                    ccTrans.RetrevalRefNum = prevCCTrans.RetrevalRefNum;
        #            }
        #        }
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromJournalMCR
        #static CreditCardTrans createTransfromJournalMCR(SalesTableCC         salesTableCC,
        #                                              LedgerJournalTrans   ledgerJournalTrans)
        #{
        #    CreditCardTrans         ccTrans;
        #    CreditCardTable         ccTable;
        #    DictEnum                dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    CreditCardTrxType       ccTrxType;
        #    ;
        #    if (salesTableCC && ledgerJournalTrans)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,
        #            CreditCardType,SoloIssueNum,SoloStartDate,NameOnCard
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        //--> Get amount no matter where it is
        #        if (ledgerJournalTrans.AmountCurCredit != 0)
        #        {
        #            ccTrans.AmountCur   =   ledgerJournalTrans.AmountCurCredit;
        #        }
        #        else
        #        {
        #            ccTrans.AmountCur   =   -ledgerJournalTrans.AmountCurDebit;
        #        }
        #
        #        ccTrans.AmountMST           =   Currency::amountCur2MST(ccTrans.AmountCur,ledgerJournalTrans.CurrencyCode);
        #        ccTrans.CreditCardID=   salesTableCC.CreditCardId;
        #        ccTrans.CurrencyCode=   ledgerJournalTrans.CurrencyCode;
        #        ccTrans.CreditCardType =ccTable.CreditCardType;
        #        ccTrans.CustAccount =   ledgerJournalTrans.parmAccount();
        #        ccTrans.WorkerProcessor = currentWorker();
        #        ccTrans.EntrySource =   CreditCardEntrySource::Manual;
        #        ccTrans.JournalOrig =   CreditCardJournalOrig::Journal;
        #        ccTrans.Voucher     =   ledgerJournalTrans.Voucher;
        #        ccTrans.SalesId     =   ledgerJournalTrans.Voucher;
        #        ccTrans.NameOnCard  =   ccTable.NameOnCard;
        #        ccTrans.TransCurrencyCode = ledgerJournalTrans.CurrencyCode;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TerminalId  =   ccTrans.resolveTerminalforJournal(ledgerJournalTrans,ccTrans).TerminalId;
        #        ccTrans.TransDate   =   systemDateGet();
        #        ccTrans.TransID     =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType   =   str2enum(ccTrxType, enum2str(salesTableCC.CreditCardTrxType));
        #        ccTrans.TrxType     =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.Profile     =   ccTable.Profile;
        #        ccTrans.ProfileId   =   ccTable.ProfileId;
        #        ccTrans.CustomerRef =   ledgerJournalTrans.MarkedInvoice ? ledgerJournalTrans.MarkedInvoice : ledgerJournalTrans.Voucher;
        #        ccTrans.TxRefGuid   =   newGuid();
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromSalesCC
        #static CreditCardTrans createTransfromSalesCC(SalesTableCC salesTableCC,
        #                                              SalesTable   salesTable)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    SalesUpdate         salesUpdate;
        #    SalesTotals         salesTotals;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,
        #        CreditCardNumEncrypt,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != ''
        #        && salesTableCC.pnRef != '';
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   salesTable.CurrencyCode;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.SalesId             =   salesTable.SalesId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.TxRefGuid           =   newGuid();
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #            ccTrans.Location             =  prevCCTrans.Location;
        #            ccTrans.Profile             =   cctable.Profile;
        #            ccTrans.ProfileId           =   ccTable.ProfileId;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            //--> Not used where payment type is PayPal
        #            if (ccTrans.CreditCardType != CreditCardType::PayPal)
        #            {
        #                if (ccTable.Profile == NoYes::No)
        #                {
        #                    ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #                    ccTrans.Location            =   salesTableCC.Location;
        #                }
        #                else
        #                {
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #                    ccTrans.Location            = salesTableCC.Location;
        #                }
        #            }
        #            else
        #            {
        #                ccTrans.TerminalId          = ccTrans.resolveTerminalforSalesTableCC(salesTAbleCC,salesTable,ccTrans).TerminalId;
        #                ccTrans.Location            = salesTableCC.Location;
        #            }
        #        }
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #        else
        #        {
        #            ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #
        #
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        if (ccTrans.CreditCardType != CreditCardType::PayPal &&
        #            ccTrans.Profile == NoYes::No)
        #        {
        #            //--> Is this a commercial card?
        #            ccNum = CreditCardTable::retrieveValue(ccTable);
        #
        #            if (CreditCardTable::isCorporateCard(ccNum)
        #                || ccTable.CorporateCard == NoYes::Yes)
        #            {
        #                //--> Retrieve Sales Tax Amounts
        #                salesTotals = SalesTotals::construct(salesTable, salesUpdate);
        #                salesTotals.calc();
        #
        #                ccTrans.CommercialCard = NoYes::Yes;
        #                ccTrans.CommercialSalesTax = salesTotals.totalTaxAmount();
        #
        #                //--> If Sales tax code is empty then we set the local tax flag to zero
        #                if (!salesTable.TaxGroup)
        #                {
        #                    ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #                }
        #                else if (salesTable.VATNum)
        #                {
        #                    ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #                }
        #                else
        #                {
        #                    ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #                }
        #
        #
        #            }
        #        }
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromSalesCCCommon
        #static CreditCardTrans createTransfromSalesCCCommon(SalesTableCC salesTableCC,
        #                                              Common   common)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    //--> Common table
        #    CustInvoiceTable    custInvoiceTable;
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,
        #        CreditCardNumEncrypt,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && common)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        //ccTrans.CurrencyCode        =   salesTable.CurrencyCode;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        //ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        //ccTrans.SalesId             =   salesTable.SalesId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.TxRefGuid           =   newGuid();
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        switch (common.tableId)
        #        {
        #            case TableNum(CustInvoiceTable) :
        #                custInvoiceTable = common;
        #                ccTrans.CustInvoiceRefRecId = common.RecId;
        #                ccTrans.CurrencyCode = custInvoiceTable.CurrencyCode;
        #                ccTrans.TerminalId = ccTrans.resolveTerminalforCustInvoiceTable(salesTableCC,
        #                                                custInvoiceTable,
        #                                                ccTrans).TerminalId;
        #        }
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #            ccTrans.Location             =  prevCCTrans.Location;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            //--> Not used where payment type is PayPal
        #            if (ccTrans.CreditCardType != CreditCardType::PayPal)
        #            {
        #                if (ccTable.Profile == NoYes::No)
        #                {
        #                    ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #                    ccTrans.Location            =   salesTableCC.Location;
        #                }
        #                else
        #                {
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #                    ccTrans.Location            = salesTableCC.Location;
        #                }
        #            }
        #            else
        #            {
        #                ccTrans.Location            = salesTableCC.Location;
        #            }
        #        }
        #
        #
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #
        #
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        //--> PCARD/Level II not here.  Must be sales table
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromSalesCCforReauth
        #static CreditCardTrans createTransfromSalesCCforReauth(SalesTableCC salesTableCC,
        #                                              SalesTable   salesTable,
        #                                              SalesTotals  salesTotals)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,TransDate,TransCurrencyCode,ProfileId,Profile,
        #        CreditCardNumEncrypt,CreditCardType,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId,Location
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.CID                 =   prevCCTrans.CID;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CVDSent             =   prevCCTrans.CVDSent;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #
        #        if (prevCCTrans)
        #        {
        #            ccTrans.CreditCardNumSecure     = prevCCTrans.CreditCardNumSecure;
        #            if (prevCCTrans.Profile)
        #            {
        #                ccTrans.Profile = prevCCTrans.Profile;
        #                ccTrans.ProfileId   = prevCCTRans.ProfileId;
        #            }
        #            else
        #            {
        #                ccNum   = CreditCardUtility::decrypt(prevCCTrans.CreditCardNumEncrypt,
        #                    CreditCardEncryptionTable::findKeyByDate(prevCCTrans.TransDate).EncryptionKey);
        #                ccTrans.CreditCardNumEncrypt    = CreditCardUtility::encrypt(ccNum,
        #                    CreditCardEncryptionTable::findKeyByDate(systemDateGet()).EncryptionKey);
        #            }
        #            ccTrans.OneTimeDateExp          = prevCCTrans.OneTimeDateExp;
        #            ccTrans.TerminalId              = prevCCTrans.TerminalId;
        #            ccTrans.SoloIssueNum            = prevCCTrans.SoloIssueNum;
        #            ccTrans.SoloStartDate           = prevCCTrans.SoloStartDate;
        #            ccTrans.NameOnCard              = prevCCTrans.NameOnCard;
        #            ccTrans.TransCurrencyCode       = prevCCTrans.TransCurrencyCode;
        #            ccTrans.OrigDateTime            = DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            if (prevCCTrans.Profile)
        #            {
        #                ccTrans.Profile =       ccTable.Profile;
        #                ccTrans.ProfileId   = ccTable.ProfileId;
        #            }
        #            else
        #            {
        #                ccNum   = CreditCardUtility::decrypt(ccTable.CreditCardNum,
        #                    CreditCardEncryptionTable::findKeyByDate(ccTrans.TransDate).EncryptionKey);
        #                ccTrans.CreditCardNumEncrypt    = CreditCardUtility::encrypt(ccNum,
        #                    CreditCardEncryptionTable::findKeyByDate(systemDateGet()).EncryptionKey);
        #            }
        #            ccTrans.SoloIssueNum          = ccTable.SoloIssueNum;
        #            ccTrans.SoloStartDate         = ccTable.SoloStartDate;
        #            ccTrans.TerminalId          =   CreditCardTerminalTable::find().TerminalId;
        #            ccTrans.NameOnCard          =  salesTableCC.NameOnCard;
        #            ccTrans.TransCurrencyCode   =  CompanyInfo::standardCurrency();
        #            ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        }
        #
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.CurrencyCode        =   salesTable.CurrencyCode;
        #        ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeTrans        =   NoYes::Yes;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.SalesId             =   salesTable.SalesId;
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.UsePayPalRef        =   CreditCardParameters::findParameter().UsePayPalRef;
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        ccTrans.Location            =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal
        #            && CreditCardParameters::findParameter().UsePayPalRef)
        #        {
        #             ccTrans.OrigID      =   salesTableCC.PNRef;
        #        }
        #
        #        if (CreditCardTable::isCorporateCard(ccNum))
        #        {
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = salesTotals.totalTaxAmount();
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!salesTable.TaxGroup)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else if (salesTable.VATNum)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #        }
        #
        #        ccTrans.AmountCur = salesTotals.totalAmount();
        #        ccTrans.AmountMST = Currency::amountCur2MST(ccTrans.AmountCur,ccTrans.CurrencyCode);
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromSalesCCwithWeb
        #static CreditCardTrans createTransfromSalesCCwithWeb(SalesTableCC salesTableCC,
        #                                              axSalesTable   salesTable)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    SalesUpdate         salesUpdate;
        #    SalesTotals         salesTotals;
        #    SalesTable          locSalesTable;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,
        #        CreditCardNumEncrypt,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   salesTable.parmCurrencyCode();
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   salesTable.parmInvoiceAccount();
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.SalesId             =   salesTable.parmSalesId();
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   today();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.TxRefGuid           =   newGuid();
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #            ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCCwithWeb(salesTableCC,SalesTable,ccTrans).TerminalId;
        #            ccTrans.Profile             =   cctable.Profile;
        #            ccTrans.ProfileId           =   ccTable.ProfileId;
        #            ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #        }
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #        //--> Is this a commercial card?
        #        ccNum = CreditCardTable::retrieveValue(ccTable);
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        if (CreditCardTable::isCorporateCard(ccNum))
        #        {
        #            //--> Retrieve Sales Tax Amounts
        #            locSalesTable = SalesTable::find(salesTable.parmSalesId());
        #            salesTotals = SalesTotals::construct(locsalesTable, salesUpdate);
        #            salesTotals.calc();
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = salesTotals.totalTaxAmount();
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!salesTable.parmTaxGroup())
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else if (salesTable.parmVATNum())
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #        }
        #
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromSalesCCwoNum
        #static CreditCardTrans createTransfromSalesCCwoNum(SalesTableCC salesTableCC,
        #                                              SalesTable   salesTable,
        #                                              CreditCardTrans   oldCCTrans)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    SalesUpdate         salesUpdate;
        #    SalesTotals         salesTotals;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,
        #        CreditCardNumEncrypt,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && salesTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   salesTable.CurrencyCode;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   salesTable.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.OneTimeTrans        =   NoYes::Yes;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.SalesId             =   salesTable.SalesId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.TerminalId          =   oldCCTrans.TerminalId;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #            ccTrans.OrigDateTime         = prevCCTrans.OrigDateTime
        #            ? prevCCTrans.OrigDateTime : DateTimeUtil::newDateTime(prevCCTrans.TransDate,0);
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            if (ccTable.RecId > 0)
        #            {
        #                ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #                ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #            }
        #            else
        #            {
        #                ccTrans.CreditCardNumSecure =   oldCCTrans.CreditCardNumSecure;
        #                ccTrans.CreditCardNumEncrypt =  oldCCTrans.CreditCardNumEncrypt;
        #                ccTrans.TerminalId          =   ccTrans.resolveTerminalforSalesTableCC(salesTableCC,SalesTable,ccTrans).TerminalId;
        #                ccTrans.NameOnCard          =   oldCCTrans.NameOnCard;
        #                ccTrans.OneTimeDateExp      =   oldCCTrans.OneTimeDateExp;
        #                ccTrans.OrigDateTime        =   DateTimeUtil::utcNow();
        #            }
        #        }
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #
        #        if (CreditCardTable::isCorporateCard(CreditCardTable::retrieveValueNum(ccTrans.CreditCardNumEncrypt)))
        #        {
        #            //--> Retrieve Sales Tax Amounts
        #            salesTotals = SalesTotals::construct(salesTable, salesUpdate);
        #            salesTotals.calc();
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = salesTotals.totalTaxAmount();
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!salesTable.TaxGroup)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else if (salesTable.VATNum)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::NonTaxable;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #        }
        #
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransfromServOrderCCforReauth
        #static CreditCardTrans createTransfromServOrderCCforReauth(SalesTableCC salesTableCC,
        #                                              SMAServiceOrderTable   serviceOrderTable,
        #                                              Total        totals)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,TransDate,TransCurrencyCode,ProfileId,Profile,
        #        CreditCardNumEncrypt,CreditCardType,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId,Location
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.CID                 =   prevCCTrans.CID;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CVDSent             =   prevCCTrans.CVDSent;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   prevCCTrans.CreditCardType;
        #
        #        if (prevCCTrans)
        #        {
        #            ccTrans.CreditCardNumSecure     = prevCCTrans.CreditCardNumSecure;
        #            if (prevCCTrans.Profile)
        #            {
        #                ccTrans.Profile = prevCCTrans.Profile;
        #                ccTrans.ProfileId   = prevCCTRans.ProfileId;
        #            }
        #            else
        #            {
        #                ccNum   = CreditCardUtility::decrypt(prevCCTrans.CreditCardNumEncrypt,
        #                    CreditCardEncryptionTable::findKeyByDate(prevCCTrans.TransDate).EncryptionKey);
        #                ccTrans.CreditCardNumEncrypt    = CreditCardUtility::encrypt(ccNum,
        #                    CreditCardEncryptionTable::findKeyByDate(systemDateGet()).EncryptionKey);
        #            }
        #            ccTrans.OneTimeDateExp          = prevCCTrans.OneTimeDateExp;
        #            ccTrans.TerminalId              = prevCCTrans.TerminalId;
        #            ccTrans.SoloIssueNum            = prevCCTrans.SoloIssueNum;
        #            ccTrans.SoloStartDate           = prevCCTrans.SoloStartDate;
        #            ccTrans.NameOnCard              = prevCCTrans.NameOnCard;
        #            ccTrans.TransCurrencyCode       = prevCCTrans.TransCurrencyCode;
        #            ccTrans.OrigDateTime            = DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #            ccTrans.SoloIssueNum          = ccTable.SoloIssueNum;
        #            ccTrans.SoloStartDate         = ccTable.SoloStartDate;
        #            ccTrans.TerminalId          =   CreditCardTerminalTable::find().TerminalId;
        #            ccTrans.NameOnCard          =  salesTableCC.NameOnCard;
        #            ccTrans.TransCurrencyCode   =  CompanyInfo::standardCurrency();
        #            ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        }
        #
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.CurrencyCode        =   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.CustAccount         =   serviceOrderTable.CustAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeTrans        =   NoYes::Yes;
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.ServiceOrderId      =   serviceOrderTable.ServiceOrderId;
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.UsePayPalRef        =   CreditCardParameters::findParameter().UsePayPalRef;
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #        ccTrans.Location            =   prevCCTrans.Location;
        #        ccTrans.TxRefGuid           =   newGuid();
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal
        #            && CreditCardParameters::findParameter().UsePayPalRef)
        #        {
        #             ccTrans.OrigID      =   salesTableCC.PNRef;
        #        }
        #
        #        if (CreditCardTable::isCorporateCard(ccNum))
        #        {
        #
        #            ccTrans.CommercialCard = NoYes::Yes;
        #
        #
        #
        #        }
        #
        #        ccTrans.AmountCur = Totals;
        #        ccTrans.AmountMST = Currency::amountCur2MST(ccTrans.AmountCur,ccTrans.CurrencyCode);
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransProjProposal
        #static CreditCardTrans createTransProjProposal(SalesTableCC         salesTableCC,
        #                                           ProjProposalJour         projProposalJour)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly AmountCur,AmountMST,AuthCode,AuthNetId,AuthSource,CitiPlan,CreditCardNumSecure,CreditCardNumEncrypt,TerminalId,
        #        NameOnCard,CybersourceToken,OneTimeDateExp,PNRef,RetrevalRefNum,OrbitalTxRefNum,Location,Profile,ProfileId,
        #        CommercialCard,CommercialLocalTax,CommercialSalesTax,CreditCardType,OrigDateTime,TransType,CustomerRef
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && projProposalJour)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   projProposalJour.CurrencyId;
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   projProposalJour.InvoiceAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.invoiceId           =   projProposalJour.ProjInvoiceId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #        ccTrans.ProjProposalId      =   projProposalJour.ProposalId;
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            //--> Not used where payment type is PayPal
        #            if (ccTrans.CreditCardType != CreditCardType::PayPal)
        #            {
        #                if (ccTable.Profile == NoYes::No)
        #                {
        #                    ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #                    ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforProjProposal(salesTableCC,projProposalJour,ccTrans).TerminalId;
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #                    ccTrans.Location            =   salesTableCC.Location;
        #                    //--> Is this a commercial card?
        #                    ccNum = CreditCardTable::retrieveValue(ccTable);
        #                }
        #                else
        #                {
        #                    ccTrans.TerminalId          =   ccTrans.resolveTerminalforProjProposal(salesTableCC,projProposalJour,ccTrans).TerminalId;
        #                    ccTrans.Profile             =   cctable.Profile;
        #                    ccTrans.ProfileId           =   ccTable.ProfileId;
        #                    ccTrans.NameOnCard          =   ccTable.NameOnCard;
        #                    ccTrans.Location            = salesTableCC.Location;
        #                }
        #            }
        #            else
        #            {
        #                ccTrans.TerminalId          = ccTrans.resolveTerminalforProjProposal(salesTableCC,projProposalJour,ccTrans).TerminalId;
        #                ccTrans.Location            = salesTableCC.Location;
        #            }
        #        }
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        if (CreditCardTable::isCorporateCard(ccNum) || ccTable.CorporateCard)
        #        {
        #            ccTrans.CommercialCard = NoYes::Yes;
        #            ccTrans.CommercialSalesTax = projProposalJour.SumTax;
        #
        #            //--> If Sales tax code is empty then we set the local tax flag to zero
        #            if (!projProposalJour.TaxGroupId)
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxNotProvided;
        #            }
        #            else
        #            {
        #                ccTrans.CommercialLocalTax = CreditCardCommercialTaxFlag::TaxIncluded;
        #            }
        #
        #        }
        #
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #createTransServiceOrder
        #static CreditCardTrans createTransServiceOrder(SalesTableCC         salesTableCC,
        #                                           SMAServiceOrderTable         serviceOrderTable)
        #{
        #    CreditCardTrans     ccTrans;
        #    CreditCardTrans     prevCCTrans;
        #    CreditCardTable     ccTable;
        #    CreditCardNum       ccNum;
        #    DictEnum            dictEnum = new DictEnum(enumnum(CreditCardTrxType));
        #    ;
        #    select firstonly oneTimeDateExp,CreditCardNumSecure,
        #        CreditCardNumEncrypt,TerminalId,NameOnCard,RetrevalRefNum,PNRef,RecId
        #        from prevCCTrans
        #        index hint PNRef
        #        where prevCCTrans.PNRef == salesTableCC.PNRef
        #        && prevCCTrans.PNRef != '';
        #
        #    if (salesTableCC && serviceOrderTable)
        #    {
        #        //<-- Get Credit card information
        #        select firstonly Profile,ProfileId,inactive,CreditCardId,CreditCardType,CreditCardNum,SoloIssueNum,SoloStartDate
        #            from ccTable where ccTable.CreditCardId == salesTableCC.CreditCardId;
        #
        #        if (ccTable.Inactive == NoYes::Yes)
        #            throw error(strFmt("@ACC164", ccTable.CreditCardId));
        #
        #        ccTrans.clear();
        #        ccTrans.AmountMST           =   salesTableCC.AmountMST;
        #        ccTrans.AmountCur           =   salesTableCC.AmountCur;
        #        ccTrans.AuthCode            =   salesTableCC.AuthCode;
        #        ccTrans.CitiPlan            =   salesTableCC.CitiPlan;
        #        ccTrans.CreditCardID        =   salesTableCC.CreditCardId;
        #        ccTrans.CreditCardType      =   ccTable.CreditCardType;
        #        ccTrans.CurrencyCode        =   ProjTable::find(serviceOrderTable.ProjId).currencyId();
        #        ccTrans.TransCurrencyCode   =   companyInfo::standardCurrency();
        #        ccTrans.CustAccount         =   ProjTable::find(serviceOrderTable.ProjId).CustAccount;
        #        ccTrans.EntrySource         =   CreditCardEntrySource::Manual;
        #        ccTrans.WorkerProcessor     =   currentWorker();
        #        ccTrans.OneTimeDateExp      =   prevCCTrans.OneTimeDateExp;
        #        ccTrans.JournalOrig         =   CreditCardJournalOrig::System;
        #        ccTrans.RecurringToken      =   salesTableCC.RecurringToken;
        #        ccTrans.RefRecId            =   salesTableCC.RecId;
        #        ccTrans.ServiceOrderId      =   serviceOrderTable.ServiceOrderId;
        #        ccTrans.SoloIssueNum        =   ccTable.SoloIssueNum;
        #        ccTrans.SoloStartDate       =   ccTable.SoloStartDate;
        #        ccTrans.OrigDateTime        =   DateTimeUtil::applyTimeZoneOffset(
        #                                            DateTimeUtil::getSystemDateTime(),
        #                                            DateTimeUtil::getCompanyTimeZone());
        #        ccTrans.TransDate           =   systemDateGet();
        #        ccTrans.TransID             =   NumberSeq::newGetNum(CreditCardParameters::numRefCCTransId()).num();
        #        ccTrans.TransType           =   salesTableCC.CreditCardTrxType;
        #        ccTrans.TrxType             =   dictEnum.index2Symbol(salesTableCC.CreditCardTrxType);
        #        ccTrans.VoiceAuth           =   salesTableCC.VoiceAuth;
        #
        #        ccTrans = ccTrans.getAddress(ccTrans);
        #
        #        if (prevCCTrans.RecId > 0)
        #        {
        #            ccTrans.CreditCardNumSecure =   prevCCTrans.CreditCardNumSecure;
        #            ccTrans.CreditCardNumEncrypt =  prevCCTrans.CreditCardNumEncrypt;
        #            ccTrans.TerminalId           =  prevCCTrans.TerminalId;
        #            ccTrans.NameOnCard           =  prevCCTRans.NameOnCard;
        #        }
        #        else
        #        {
        #            //--> Used in cases where the transaction is for a credit card id
        #            ccTrans.CreditCardNumSecure =   CreditCardTable::getCCSecure(ccTable);
        #            ccTrans.CreditCardNumEncrypt =  CreditCardTrans::storeValue(ccTable.CreditCardNum);
        #            ccTrans.TerminalId          =   ccTrans.resolveTerminalforServiceCC(salesTableCC,serviceOrderTable,ccTrans).TerminalId;
        #            ccTrans.Profile             =   cctable.Profile;
        #            ccTrans.ProfileId           =   ccTable.ProfileId;
        #            ccTrans.NameOnCard          =   salesTableCC.NameOnCard;
        #        }
        #
        #        if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::PayPal)
        #        {
        #             ccTrans.OrigID         =   salesTableCC.PNRef;
        #        }
        #        else if (CreditCardTerminalTable::find().Processor == CreditCardProcessor::Paymentech)
        #        {
        #            ccTrans.OrigID          =   prevCCTrans.RetrevalRefNum;
        #        }
        #        //--> Is this a commercial card?
        #        ccNum = CreditCardTable::retrieveValue(ccTable);
        #        //--> Customer reference
        #        ccTrans.CustomerRef         =   ccTrans.getMerchantRef(ccTrans);
        #
        #        if (CreditCardTable::isCorporateCard(ccNum))
        #        {
        #            ccTrans.CommercialCard = NoYes::Yes;
        #
        #
        #        }
        #
        #
        #        ccTrans.insert();
        #    }
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #find
        #static CreditCardTrans find(CreditCardTransId       ccTransId)
        #{
        #    CreditCardTrans         ccTrans;
        #    ;
        #    select ccTrans where
        #        ccTrans.TransID == ccTransId;
        #
        #    return ccTrans;
        #}
      ENDSOURCE
      SOURCE #findRelatedVoidTrans
        #static CreditCardTrans findRelatedVoidTrans(CreditCardTransId ccTransId)
        #{
        #    CreditCardTrans     creditCardTrans;
        #    ;
        #    select firstonly creditCardTrans
        #        index hint OrigIdx
        #        where creditCardTrans.OrigID == ccTransId
        #        && (creditCardTrans.TransType == creditCardTrxType::V ||
        #        creditCardTrans.TransType == creditCardTrxType::C);
        #
        #
        #    return creditCardTrans;
        #
        #}
      ENDSOURCE
      SOURCE #lookupTransForAuth
        #client static void lookupTransForAuth(FormStringControl   _ctrl,
        #                                      SalesParmUpdateCC   salesParmUpdateCC)
        #{
        #    Args    args;
        #    Object  formRun;
        #    ;
        #
        #    args = new Args();
        #    args.name(formstr(CreditCardTransAuthLookup));
        #    args.record(salesParmUpdateCC);
        #    args.caller(_ctrl);
        #    formRun = classFactory.formRunClass(args);
        #    formRun.parmSalesParm(salesParmUpdateCC);
        #    FormRun.parmsalesId(SalesParmUpdateCC.SalesId);
        #    formRun.init();
        #
        #
        #    _ctrl.performFormLookup(formRun);
        #}
      ENDSOURCE
      SOURCE #lookupTransForCredit
        #client static void lookupTransForCredit(FormStringControl   _ctrl,
        #                                        SalesTableCC        salesTableCC)
        #{
        #    Args    args;
        #    Object  formRun;
        #    ;
        #
        #    args = new Args();
        #    args.name(formstr(CreditCardTransLookup));
        #    args.record(salesTableCC);
        #    args.caller(_ctrl);
        #    formRun = classFactory.formRunClass(args);
        #    formRun.init();
        #
        #    _ctrl.performFormLookup(formRun);
        #}
      ENDSOURCE
      SOURCE #lookupTransForCreditJour
        #client static void lookupTransForCreditJour(FormStringControl   _ctrl,
        #                                        ledgerJournalTransCC        ledgerJournalTransCC)
        #{
        #    Args    args;
        #    Object  formRun;
        #    ;
        #
        #    args = new Args();
        #    args.name(formstr(CreditCardTransLookup));
        #    args.record(ledgerJournalTransCC);
        #    args.caller(_ctrl);
        #    formRun = classFactory.formRunClass(args);
        #    formRun.init();
        #
        #    _ctrl.performFormLookup(formRun);
        #}
      ENDSOURCE
      SOURCE #lookupTransForPayPalAuth
        #client static void lookupTransForPayPalAuth(FormStringControl   _ctrl,
        #                                      SalesTableCC        salesTableCC)
        #{
        #    Args    args;
        #    Object  formRun;
        #    ;
        #
        #    args = new Args();
        #    args.name(formstr(CreditCardTransAuthLookup));
        #    args.record(salesTableCC);
        #    args.caller(_ctrl);
        #    formRun = classFactory.formRunClass(args);
        #    formRun.init();
        #
        #
        #    _ctrl.performFormLookup(formRun);
        #}
      ENDSOURCE
      SOURCE #resolveTerminalforSalesTable
        #static CreditCardTerminalTable resolveTerminalforSalesTable(SalesTable          salesTable)
        #{
        #    CreditCardProcessLine               processLine;
        #    CreditCardTerminalTable             primaryTerminal;
        #    CreditCardTerminalTable             secondaryTerminal;
        #    CreditCardProcessGroupId            processGroup;
        #    CreditCardTrans                     ccTrans;
        #    ;
        #    primaryTerminal = CreditCardTerminalTable::find();
        #
        #    //--> is there a primary of the same terminal?
        #    select processLine
        #        where processLine.TerminalId == primaryTerminal.TerminalId
        #        && processLine.SetPrimary == NoYes::Yes;
        #
        #    if (processLine)
        #    {
        #        //--> Store process group for the remainder
        #        processGroup = processLine.ProcessGroupId;
        #
        #        while select processLine
        #            order by Priority desc
        #            where processLine.ProcessGroupId == processGroup
        #            && processLine.SetPrimary == NoYes::No
        #        {
        #            if ((processLine.CurrencyCode == '' ||
        #                processLine.CurrencyCode == salesTable.CurrencyCode)
        #                && (processLine.CountryRegionId == '' ||
        #                processLine.CountryRegionId == LogisticsPostalAddress::findByLocation(salesTable.deliveryAddress().RecId).CountryRegionId)
        #                && (processLine.CustAccount == '' ||
        #                processLine.CustAccount == salesTable.InvoiceAccount)
        #                && (processLine.SalesOriginId == '' ||
        #                processLine.SalesOriginId)
        #                && processLine.ProcessGroupId == processGroup)
        #            {
        #                if (ccTrans.checkDimension(processLine.DefaultDimension,salesTable.DefaultDimension))
        #                {
        #                    secondaryTerminal = CreditCardTerminalTable::findTerminalWithId(processLine.TerminalId);
        #                }
        #                break;
        #            }
        #
        #
        #        }
        #
        #        if (secondaryTerminal)
        #        {
        #            primaryTerminal = secondaryTerminal;
        #        }
        #    }
        #
        #    return primaryTerminal;
        #
        #}
      ENDSOURCE
      SOURCE #storeValue
        #static TempStr storeValue(CreditCardNum ccNum)
        #{
        #    ;
        #    return CreditCardUtility::encrypt(ccNum,CreditCardEncryptionTable::retrieveKey());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: END
