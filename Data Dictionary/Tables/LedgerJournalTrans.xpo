Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; 
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #LedgerJournalTrans
    EnforceFKRelation 0
    PROPERTIES
      Name                #LedgerJournalTrans
      Label               #@SYS23470
      TitleField1         #JournalNum
      TitleField2         #Voucher
      ConfigurationKey    #LedgerBasic
      SecurityKey         #LedgerTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      TableGroup          #WorksheetLine
      PrimaryIndex        #RecId
      ClusterIndex        #RecId
      ModifiedDateTime    #Yes
      DeveloperDocumentation  #@SYS125945
      Origin              #{2C1200D4-0000-1000-3D39-1C93ABDC3521}
      LegacyId            #212
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccountAgreementId_RU
        STRING
        PROPERTIES
          Name                #AccountAgreementId_RU
          Table               #LedgerJournalTrans
          Origin              #{2D1B6111-8712-47CD-8216-A4C393F178A0}
          ExtendedDataType    #AgreementId_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AccountType
        ENUM
        PROPERTIES
          Name                #AccountType
          Table               #LedgerJournalTrans
          Origin              #{196E3F5A-21C7-432A-8D1F-A19977AD34F7}
          LegacyId            #3
          EnumType            #LedgerJournalACType
        ENDPROPERTIES
        
      FIELD #AcknowledgementDate
        DATE
        PROPERTIES
          Name                #AcknowledgementDate
          Table               #LedgerJournalTrans
          Origin              #{8C1F100E-BDC2-4A2B-9391-7E0E2E44F327}
          LegacyId            #32
          ExtendedDataType    #AcknowledgementDate
        ENDPROPERTIES
        
      FIELD #Addressing_PL
        STRING
        PROPERTIES
          Name                #Addressing_PL
          HelpText            #@GLS221067
          Table               #LedgerJournalTrans
          CountryRegionCodes  #PL
          Origin              #{776799A5-90F4-4B56-AF2B-A8E85F1745A1}
          ExtendedDataType    #Addressing
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #AgreementCompany_RU
        STRING
        PROPERTIES
          Name                #AgreementCompany_RU
          Table               #LedgerJournalTrans
          Origin              #{A3C24C54-4A61-4FF9-9E0F-CEF78496A834}
          LegacyId            #8275
          ExtendedDataType    #AgreementCompany_RU
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #AmountCurCredit
        REAL
        PROPERTIES
          Name                #AmountCurCredit
          Table               #LedgerJournalTrans
          Origin              #{FAC0A2D8-9B70-4A73-81D4-7C3017F6A2CC}
          LegacyId            #29
          ExtendedDataType    #AmountCurCredit
        ENDPROPERTIES
        
      FIELD #AmountCurDebit
        REAL
        PROPERTIES
          Name                #AmountCurDebit
          Table               #LedgerJournalTrans
          Origin              #{582D85EC-BA95-468E-B0CE-A7879E3D3504}
          LegacyId            #7
          ExtendedDataType    #AmountCurDebit
        ENDPROPERTIES
        
      FIELD #AnnouncementNum_RU
        STRING
        PROPERTIES
          Name                #AnnouncementNum_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{0C97C261-BC59-4B17-8591-2E13B8E6B953}
          LegacyId            #8145
          ExtendedDataType    #BankCashDueAnnouncement_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Approved
        ENUM
        PROPERTIES
          Name                #Approved
          Table               #LedgerJournalTrans
          Origin              #{F049E971-C2AE-4FCA-BCEF-C197D0BF3AAC}
          LegacyId            #66
          ExtendedDataType    #Approved
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Approver
        INT64
        PROPERTIES
          Name                #Approver
          Table               #LedgerJournalTrans
          Origin              #{4608DA89-C707-4F0D-A370-55DBFB16D1D5}
          LegacyId            #484
          ExtendedDataType    #HcmApprover
        ENDPROPERTIES
        
      FIELD #AssessableValue_IN
        REAL
        PROPERTIES
          Name                #AssessableValue_IN
          Label               #@GLS5298
          HelpText            #@GLS5520
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{9BAA3F71-2E5B-472D-91C5-47F1FBEC4DE9}
          LegacyId            #8247
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #Attachments_CN
        INT
        PROPERTIES
          Name                #Attachments_CN
          Label               #@SYS73813
          HelpText            #@GLS54548
          Table               #LedgerJournalTrans
          CountryRegionCodes  #CN
          Origin              #{23FB5735-E9B3-41F7-BDFA-EA3BCB332619}
          LegacyId            #8079
          ExtendedDataType    #Counter
        ENDPROPERTIES
        
      FIELD #BankAccountId
        STRING
        PROPERTIES
          Name                #BankAccountId
          ConfigurationKey    #CustVendNegotiableInstrument
          Table               #LedgerJournalTrans
          Origin              #{18A0F048-C19A-42A6-B69F-358CFF063A85}
          LegacyId            #133
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #BankAgreementExt_RU
        INT64
        PROPERTIES
          Name                #BankAgreementExt_RU
          Label               #@GLS114396
          HelpText            #@GLS114397
          Table               #LedgerJournalTrans
          Origin              #{A06624FC-94C6-44BB-A213-46962F1B444E}
          ExtendedDataType    #AgreementHeaderExtRecId_RU
        ENDPROPERTIES
        
      FIELD #BankBillOfExchangeNum
        STRING
        PROPERTIES
          Name                #BankBillOfExchangeNum
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{073E3D66-0859-47A3-96A9-2083922C315F}
          LegacyId            #143
          ExtendedDataType    #BankBillOfExchangeNum
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeCode
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeCode
          Table               #LedgerJournalTrans
          Origin              #{D0180DAD-48C3-46C7-ABDE-8C0677919C04}
          LegacyId            #106
          ExtendedDataType    #BankCentralBankPurposeCode
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeText
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeText
          Table               #LedgerJournalTrans
          Origin              #{CF1E4634-3FCA-4161-9F9E-AE4C6AC41928}
          LegacyId            #108
          ExtendedDataType    #BankCentralBankPurposeText
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #BankCentralBankTransTypeCur_RU
        STRING
        PROPERTIES
          Name                #BankCentralBankTransTypeCur_RU
          Table               #LedgerJournalTrans
          Origin              #{F395F09E-DE7D-4C74-8AD1-656A23535EBA}
          LegacyId            #16011
          ExtendedDataType    #BankCentralBankTransTypeCur_RU
        ENDPROPERTIES
        
      FIELD #BankChequeDepositTransRefRecID
        INT64
        PROPERTIES
          Name                #BankChequeDepositTransRefRecID
          Label               #@SYS117501
          HelpText            #@SYS117502
          Visible             #No
          ConfigurationKey    #Bank
          Table               #LedgerJournalTrans
          Origin              #{8213DC3F-FFD5-491C-8AB5-ACB0060F352D}
          LegacyId            #174
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #BankChequeNum
        STRING
        PROPERTIES
          Name                #BankChequeNum
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{341665A4-C410-4142-BBA4-6EC0DAC84017}
          LegacyId            #86
          ExtendedDataType    #BankChequeNum
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #BankClientDocumentTypeId_RU
        STRING
        PROPERTIES
          Name                #BankClientDocumentTypeId_RU
          Table               #LedgerJournalTrans
          Origin              #{F77FC052-4028-406E-9921-B01913D5F933}
          ExtendedDataType    #BankClientDocumentTypeId_RU
          StringSize          #2
        ENDPROPERTIES
        
      FIELD #BankCommAccountId_RU
        STRING
        PROPERTIES
          Name                #BankCommAccountId_RU
          Label               #@GLS102283
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{96FB25D6-52B0-414B-8037-E0322F1E8A66}
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #BankCurrency
        STRING
        PROPERTIES
          Name                #BankCurrency
          Visible             #No
          Table               #LedgerJournalTrans
          IgnoreEDTRelation   #Yes
          Origin              #{663307CB-5C16-4C24-9ECC-3E0E2D81465A}
          ExtendedDataType    #CurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #BankCurrencyAmount
        REAL
        PROPERTIES
          Name                #BankCurrencyAmount
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{07CBFCF9-F2FC-442C-A369-0FBDC14203E6}
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #BankCurrencyDealCourse_RU
        REAL
        PROPERTIES
          Name                #BankCurrencyDealCourse_RU
          Table               #LedgerJournalTrans
          Origin              #{2ABCAFEA-20B1-4629-80A1-F0FC39773732}
          ExtendedDataType    #BankCurrencyDealCourse_RU
        ENDPROPERTIES
        
      FIELD #BankCurrencyTransferLog_RU
        INT64
        PROPERTIES
          Name                #BankCurrencyTransferLog_RU
          Label               #@GLS114386
          HelpText            #@GLS114387
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{44D827DD-CC6A-41B2-B0BB-CD1E68E703E3}
          LegacyId            #8326
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #BankDepositNum
        STRING
        PROPERTIES
          Name                #BankDepositNum
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{F87F1128-42E1-4EF2-A735-9146084F37CC}
          LegacyId            #43
          ExtendedDataType    #BankDepositNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BankDepositVoucher
        ENUM
        PROPERTIES
          Name                #BankDepositVoucher
          Table               #LedgerJournalTrans
          Origin              #{A6469F77-198C-4CAB-86F9-F1A6E686C52D}
          LegacyId            #41
          ExtendedDataType    #BankDepositVoucher
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BankNegInstRecipientName
        STRING
        PROPERTIES
          Name                #BankNegInstRecipientName
          Table               #LedgerJournalTrans
          AnalysisDefaultTotal #No
          Origin              #{08BCFDAD-4D03-45B6-B6BA-489A45D563C9}
          LegacyId            #17
          ExtendedDataType    #BankNegInstRecipientName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #BankPaymentRegistrationNum_LV
        STRING
        PROPERTIES
          Name                #BankPaymentRegistrationNum_LV
          Table               #LedgerJournalTrans
          CountryRegionCodes  #LV
          Origin              #{275A9FA7-59FD-4EC7-A314-F6466BC33F23}
          ExtendedDataType    #LvBankPaymentRegistrationNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BankPrintAccountNum_RU
        STRING
        PROPERTIES
          Name                #BankPrintAccountNum_RU
          Label               #@GLS103112
          HelpText            #@GLS103113
          ConfigurationKey    #Bank
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{5CD84822-979B-4A7B-8B2E-F2B6BB4C07EF}
          LegacyId            #16025
          ExtendedDataType    #LedgerJournalAC
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BankPromissoryNoteNum
        STRING
        PROPERTIES
          Name                #BankPromissoryNoteNum
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{CC8D55EE-E040-4652-A53F-98EE5245C03E}
          LegacyId            #134
          ExtendedDataType    #BankPromissoryNoteNum
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #BankReconcileAccountAtPost
        ENUM
        PROPERTIES
          Name                #BankReconcileAccountAtPost
          Label               #@Sys117279
          HelpText            #@SYS117280
          ConfigurationKey    #Bank
          Table               #LedgerJournalTrans
          Origin              #{E2075154-9F9E-41C4-910D-10BEBF1448F4}
          LegacyId            #173
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BankRemittanceFileId
        STRING
        PROPERTIES
          Name                #BankRemittanceFileId
          Table               #LedgerJournalTrans
          Origin              #{9299932A-64B5-4EFD-85F4-ACDBF6E952FE}
          LegacyId            #132
          ExtendedDataType    #BankRemittanceFileId
        ENDPROPERTIES
        
      FIELD #BankRemittanceType
        ENUM
        PROPERTIES
          Name                #BankRemittanceType
          Table               #LedgerJournalTrans
          Origin              #{C722417D-056B-436B-82C8-959D6CA399B8}
          LegacyId            #131
          EnumType            #BankRemittanceType
        ENDPROPERTIES
        
      FIELD #BankRespWorkerId_RU
        INT64
        PROPERTIES
          Name                #BankRespWorkerId_RU
          Label               #@GLS102281
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{36106F89-045E-46A9-8F18-80CF8D280205}
          ExtendedDataType    #HcmWorkerRecId
        ENDPROPERTIES
        
      FIELD #BankSpecAccountId_RU
        STRING
        PROPERTIES
          Name                #BankSpecAccountId_RU
          Label               #@GLS107795
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{31621C87-65FC-4E56-A4E7-2655EB4C300A}
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #BankTransType
        STRING
        PROPERTIES
          Name                #BankTransType
          Table               #LedgerJournalTrans
          Origin              #{39DF8A16-9BB1-4E03-B310-ABFEFC05C493}
          LegacyId            #48
          ExtendedDataType    #BankTransactionType
        ENDPROPERTIES
        
      FIELD #BankVendAccountId_RU
        STRING
        PROPERTIES
          Name                #BankVendAccountId_RU
          Label               #@GLS114384
          HelpText            #@GLS114385
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{C00C56AE-4C37-4BFD-AFE9-AE8EB9D44946}
          ExtendedDataType    #VendAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BudgetSourceLedgerEntryUnposted
        INT64
        PROPERTIES
          Name                #BudgetSourceLedgerEntryUnposted
          ConfigurationKey    #LedgerAdv2BudgetCtrl
          Table               #LedgerJournalTrans
          Origin              #{C8CFFF3B-4CDB-4DB6-9B61-A8D96B10EE6B}
          LegacyId            #329
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Cancel
        ENUM
        PROPERTIES
          Name                #Cancel
          HelpText            #@SYS28207
          ConfigurationKey    #VendInvoiceRegisterApproval
          Table               #LedgerJournalTrans
          Origin              #{4D7B0D3A-8FF3-46C0-AC05-536F1F8DC674}
          LegacyId            #59
          ExtendedDataType    #Cancelled
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CashDiscAmount
        REAL
        PROPERTIES
          Name                #CashDiscAmount
          HelpText            #@SYS783
          Table               #LedgerJournalTrans
          Origin              #{D3BCEBB0-36CE-4062-98D7-5B650016B3AA}
          LegacyId            #31
          ExtendedDataType    #DiscAmount
        ENDPROPERTIES
        
      FIELD #CashDiscBaseDate
        DATE
        PROPERTIES
          Name                #CashDiscBaseDate
          Table               #LedgerJournalTrans
          Origin              #{671A75A0-CE1B-4578-A70C-FA7A6497B9CD}
          ExtendedDataType    #CashDiscBaseDate
        ENDPROPERTIES
        
      FIELD #CashDiscBaseDays
        INT
        PROPERTIES
          Name                #CashDiscBaseDays
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{1ADBF88E-A1AF-4B83-805D-62267F290CDF}
          ExtendedDataType    #CashDiscBaseDays
        ENDPROPERTIES
        
      FIELD #CashDiscCode
        STRING
        PROPERTIES
          Name                #CashDiscCode
          Table               #LedgerJournalTrans
          Origin              #{18EFB572-3DB9-4C2A-B693-14E3AECE2D1E}
          LegacyId            #88
          ExtendedDataType    #CashDiscCode
        ENDPROPERTIES
        
      FIELD #CashDiscPercent
        REAL
        PROPERTIES
          Name                #CashDiscPercent
          Table               #LedgerJournalTrans
          CountryRegionCodes  #ES
          Origin              #{271F7727-D2BD-4E6F-8B27-3A47D6524DAE}
          LegacyId            #11
          ExtendedDataType    #DiscPct
        ENDPROPERTIES
        
      FIELD #CashReceiptNum_LV
        STRING
        PROPERTIES
          Name                #CashReceiptNum_LV
          Table               #LedgerJournalTrans
          CountryRegionCodes  #LV
          Origin              #{C060E058-9E9B-4B2F-99B1-23E0AD499D14}
          LegacyId            #8149
          ExtendedDataType    #LvCashReceiptNumber
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CFDIUUID_MX
        STRING
        PROPERTIES
          Name                #CFDIUUID_MX
          Table               #LedgerJournalTrans
          CountryRegionCodes  #MX
          Origin              #{6F10DC5E-2F88-4B31-9095-814D9DC6FBDB}
          ExtendedDataType    #EInvoiceCFDIUUID_MX
          StringSize          #36
        ENDPROPERTIES
        
      FIELD #CommProfileType_RU
        ENUM
        PROPERTIES
          Name                #CommProfileType_RU
          Table               #LedgerJournalTrans
          Origin              #{980FBF72-2391-4865-802D-A70D903040B8}
          EnumType            #CommProfileType_RU
        ENDPROPERTIES
        
      FIELD #Company
        STRING
        PROPERTIES
          Name                #Company
          Label               #@SYS10499
          HelpText            #@SYS14017
          Table               #LedgerJournalTrans
          Origin              #{2DDE6F4A-6EC7-4156-940F-927F636D30E1}
          LegacyId            #5
          ExtendedDataType    #SelectableDataArea
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #CompanyLocation_IN
        INT64
        PROPERTIES
          Name                #CompanyLocation_IN
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{95D89488-3C64-42D1-AD0C-19C590EA6BC2}
          LegacyId            #8272
          ExtendedDataType    #LogisticsLocationRecId
        ENDPROPERTIES
        
      FIELD #ConsignmentNoteNum_IN
        STRING
        PROPERTIES
          Name                #ConsignmentNoteNum_IN
          Table               #LedgerJournalTrans
          Origin              #{1CD5D595-B6EC-46CF-AA56-F2238E7CDCA2}
          LegacyId            #8262
          ExtendedDataType    #ConsignmentNum_IN
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #Correct_RU
        ENUM
        PROPERTIES
          Name                #Correct_RU
          Table               #LedgerJournalTrans
          Origin              #{054A9CAC-02AA-4B12-BE95-D67A4FBBE6E6}
          LegacyId            #8069
          ExtendedDataType    #Correct_RU
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CorrectedInvoiceDate_RU
        DATE
        PROPERTIES
          Name                #CorrectedInvoiceDate_RU
          Table               #LedgerJournalTrans
          Origin              #{410C48B4-1A05-4C32-8EBA-6C217B841E7D}
          LegacyId            #8076
          ExtendedDataType    #CorrectedInvoiceDate_RU
        ENDPROPERTIES
        
      FIELD #CorrectedInvoiceId_RU
        STRING
        PROPERTIES
          Name                #CorrectedInvoiceId_RU
          Table               #LedgerJournalTrans
          Origin              #{1B2F0F7E-3707-47C3-B8D3-E02D2E65C370}
          LegacyId            #8075
          ExtendedDataType    #CorrectedInvoiceId_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CorrectionType_RU
        ENUM
        PROPERTIES
          Name                #CorrectionType_RU
          Table               #LedgerJournalTrans
          Origin              #{02519983-C0F2-460C-AC52-02AE2AC8BC00}
          EnumType            #FactureCorrectionType_RU
        ENDPROPERTIES
        
      FIELD #CurrencyCode
        STRING
        PROPERTIES
          Name                #CurrencyCode
          Mandatory           #Yes
          Table               #LedgerJournalTrans
          Origin              #{39229688-ABDC-4DF5-B2B0-2D9A54C002EF}
          LegacyId            #8
          ExtendedDataType    #CurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #CustBankAccount
        INT64
        PROPERTIES
          Name                #CustBankAccount
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{1311EBFC-A86B-484E-93F6-A2084DEBDE35}
          LegacyId            #324
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #CustEinvoicePaymDeliveryNum
        INT
        PROPERTIES
          Name                #CustEinvoicePaymDeliveryNum
          Table               #LedgerJournalTrans
          Origin              #{3F689935-9D72-4224-8B0A-39448DEFF22F}
          LegacyId            #204
          ExtendedDataType    #CustEinvoicePaymDeliveryNum
        ENDPROPERTIES
        
      FIELD #CustEinvoicePaymSectionNum
        INT
        PROPERTIES
          Name                #CustEinvoicePaymSectionNum
          Table               #LedgerJournalTrans
          Origin              #{D1521F41-32E3-4263-A2F6-753B20D40535}
          LegacyId            #205
          ExtendedDataType    #CustEinvoicePaymSectionNum
        ENDPROPERTIES
        
      FIELD #CustEinvoicePaymTransNum
        INT
        PROPERTIES
          Name                #CustEinvoicePaymTransNum
          Table               #LedgerJournalTrans
          Origin              #{FFDEEF46-32C4-4CCF-9998-D32D5E57D484}
          LegacyId            #206
          ExtendedDataType    #CustEinvoicePaymTransNum
        ENDPROPERTIES
        
      FIELD #CustFactureAutoCreate_RU
        ENUM
        PROPERTIES
          Name                #CustFactureAutoCreate_RU
          Table               #LedgerJournalTrans
          Origin              #{23BFDA0D-D824-4C2B-9D7D-60A38D3A9B8A}
          LegacyId            #8065
          ExtendedDataType    #CustFactureAutoCreate_RU
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CustomsDuty_IN
        REAL
        PROPERTIES
          Name                #CustomsDuty_IN
          Table               #LedgerJournalTrans
          Origin              #{989D799D-CB6D-46E9-AD84-9F9EE2FDB65F}
          LegacyId            #8263
          ExtendedDataType    #CustomsAmount_IN
        ENDPROPERTIES
        
      FIELD #CustomsTariffCodeTable_IN
        INT64
        PROPERTIES
          Name                #CustomsTariffCodeTable_IN
          Label               #@GLS5516
          HelpText            #@GLS5517
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{A572A693-AB84-4580-98CB-084C5986B5F0}
          LegacyId            #8302
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #CustomsTariffDirection_IN
        ENUM
        PROPERTIES
          Name                #CustomsTariffDirection_IN
          Label               #@GLS5515
          Table               #LedgerJournalTrans
          Origin              #{FBB89824-479E-4BE5-858A-90FEC377E0D8}
          LegacyId            #8244
          EnumType            #Direction_IN
        ENDPROPERTIES
        
      FIELD #CustTransId
        INT64
        PROPERTIES
          Name                #CustTransId
          HelpText            #@SYS16603
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{91E13529-9221-4E69-B3B1-F08C6A207468}
          LegacyId            #34
          ExtendedDataType    #CustTransRefRecId
        ENDPROPERTIES
        
      FIELD #CustVendAccount_PL
        STRING
        PROPERTIES
          Name                #CustVendAccount_PL
          Table               #LedgerJournalTrans
          Origin              #{D2D145B9-B536-489B-8474-321AEA0E4B1C}
          ExtendedDataType    #PlCustVendAccount
        ENDPROPERTIES
        
      FIELD #CustVendBankAccountId
        STRING
        PROPERTIES
          Name                #CustVendBankAccountId
          HelpText            #@SYS67312
          Table               #LedgerJournalTrans
          Origin              #{CB1196F6-4AC7-4411-8E1C-0B018EE5273A}
          LegacyId            #109
          ExtendedDataType    #BankAccountID
        ENDPROPERTIES
        
      FIELD #CustVendName_PL
        STRING
        PROPERTIES
          Name                #CustVendName_PL
          Table               #LedgerJournalTrans
          Origin              #{D38ACF99-3D33-45CF-804B-20D1A34B3FA4}
          ExtendedDataType    #PlCustVendName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #CustVendNegInstProtestReason
        ENUM
        PROPERTIES
          Name                #CustVendNegInstProtestReason
          Table               #LedgerJournalTrans
          Origin              #{1E2FE75F-9EC7-4DB4-81DC-BFC18E654C40}
          LegacyId            #130
          EnumType            #CustVendNegInstProtestReason
        ENDPROPERTIES
        
      FIELD #DateCashDisc
        DATE
        PROPERTIES
          Name                #DateCashDisc
          Label               #@SYS26471
          HelpText            #@SYS10266
          Table               #LedgerJournalTrans
          Origin              #{E8A1100E-3688-4607-9F6A-FEB317ECC3C5}
          LegacyId            #72
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #DebitCurrencyCode_LT
        STRING
        PROPERTIES
          Name                #DebitCurrencyCode_LT
          Table               #LedgerJournalTrans
          Origin              #{D9AB39F2-B77A-4F50-862D-29FF7DB3F49F}
          LegacyId            #8154
          ExtendedDataType    #LtDebitCurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #DefaultDimension
        INT64
        PROPERTIES
          Name                #DefaultDimension
          Table               #LedgerJournalTrans
          Origin              #{35CA7168-CA2A-475D-B412-77CB7A019889}
          LegacyId            #165
          ExtendedDataType    #DimensionDefault
        ENDPROPERTIES
        
      FIELD #DelayTaxCalculation
        ENUM
        PROPERTIES
          Name                #DelayTaxCalculation
          Label               #@SYP4882967
          HelpText            #@SYP4882967
          SaveContents        #No
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{D527C1BB-ACA8-4D4E-86C9-1F256B6C354D}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DocumentDate
        DATE
        PROPERTIES
          Name                #DocumentDate
          HelpText            #@SYS4847
          Table               #LedgerJournalTrans
          Origin              #{9ADEB0F5-FE49-41EB-A0FA-E5DF6DE00BFC}
          LegacyId            #64
          ExtendedDataType    #DocumentDate
        ENDPROPERTIES
        
      FIELD #DocumentNum
        STRING
        PROPERTIES
          Name                #DocumentNum
          HelpText            #@SYS17470
          Table               #LedgerJournalTrans
          Origin              #{658EFFA0-51CC-4DDA-8FBC-F66E1A6408FF}
          LegacyId            #65
          ExtendedDataType    #DocumentNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Due
        DATE
        PROPERTIES
          Name                #Due
          HelpText            #@SYS14909
          Table               #LedgerJournalTrans
          Origin              #{3E2724C8-1315-40D5-A5F0-B85FE1BDE7A3}
          LegacyId            #71
          ExtendedDataType    #DueDate
        ENDPROPERTIES
        
      FIELD #EnterpriseNumber
        STRING
        PROPERTIES
          Name                #EnterpriseNumber
          Table               #LedgerJournalTrans
          Origin              #{66E2884F-BD6D-411C-BF9A-CA533B5A60F8}
          LegacyId            #18
          ExtendedDataType    #TaxEnterpriseNumber
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #ErrorCodePayment
        STRING
        PROPERTIES
          Name                #ErrorCodePayment
          Table               #LedgerJournalTrans
          Origin              #{E6B27EA0-24BD-45ED-9A28-EE81222FF79F}
          LegacyId            #121
          ExtendedDataType    #ErrorCodePayment
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #EUSalesList
        STRING
        PROPERTIES
          Name                #EUSalesList
          Table               #LedgerJournalTrans
          Origin              #{C14E24C1-B573-4B7F-A668-176EA7BF7F53}
          LegacyId            #485
          ExtendedDataType    #ListDispatchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ExchRate
        REAL
        PROPERTIES
          Name                #ExchRate
          HelpText            #@SYS13237
          Table               #LedgerJournalTrans
          Origin              #{3FC02990-7C21-4796-B588-CA3CE717DF4C}
          LegacyId            #9
          ExtendedDataType    #ExchRate
        ENDPROPERTIES
        
      FIELD #ExchRateSecond
        REAL
        PROPERTIES
          Name                #ExchRateSecond
          HelpText            #@SYS53166
          Table               #LedgerJournalTrans
          Origin              #{19EA4280-D295-40C5-84EC-B5F096E3BA7E}
          LegacyId            #94
          ExtendedDataType    #ExchrateSecondary
        ENDPROPERTIES
        
      FIELD #ExciseRecordType_IN
        ENUM
        PROPERTIES
          Name                #ExciseRecordType_IN
          Table               #LedgerJournalTrans
          Origin              #{3D112777-134E-4667-8447-2E2E5832E273}
          LegacyId            #8252
          EnumType            #ExciseRecordType_IN
        ENDPROPERTIES
        
      FIELD #ExciseTariffCodes_IN
        INT64
        PROPERTIES
          Name                #ExciseTariffCodes_IN
          Label               #@GLS5344
          HelpText            #@GLS5514
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{F7AB56B5-D0DD-4757-9120-D2CE2AB33EE3}
          LegacyId            #8303
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #ExciseType_IN
        ENUM
        PROPERTIES
          Name                #ExciseType_IN
          Table               #LedgerJournalTrans
          Origin              #{9A852227-23C6-498D-B2F5-FED89352FAF1}
          LegacyId            #8306
          EnumType            #ExciseType_IN
        ENDPROPERTIES
        
      FIELD #FileCreated
        DATE
        PROPERTIES
          Name                #FileCreated
          Label               #@SYS22185
          HelpText            #@SYS13440
          Table               #LedgerJournalTrans
          Origin              #{F5E7BFCC-F3A2-46C6-9143-E5ABB0DA996D}
          LegacyId            #77
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #ForeignBankFee_LT
        ENUM
        PROPERTIES
          Name                #ForeignBankFee_LT
          Table               #LedgerJournalTrans
          Origin              #{ACF50AD7-59C4-4774-83A0-D8E59B9960C7}
          LegacyId            #8151
          ExtendedDataType    #LTForeignBankFee
          EnumType            #ForeignBankFee_LT
        ENDPROPERTIES
        
      FIELD #ForeignCompany
        STRING
        PROPERTIES
          Name                #ForeignCompany
          Label               #@SYS25343
          HelpText            #@SYS25342
          ConfigurationKey    #LedgerAdvIntercompanyAccounting
          Table               #LedgerJournalTrans
          Origin              #{8A7DC7D0-A6AC-4EA5-A65E-5477C4D12A73}
          LegacyId            #56
          ExtendedDataType    #SelectableDataArea
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #ForeignVoucher
        STRING
        PROPERTIES
          Name                #ForeignVoucher
          Label               #@SYS25344
          HelpText            #@SYS25345
          ConfigurationKey    #LedgerAdvIntercompanyAccounting
          Table               #LedgerJournalTrans
          Origin              #{3CE9E1D6-2B55-46F5-9CA2-FBDDE99A6B50}
          LegacyId            #55
          ExtendedDataType    #Voucher
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #FreqCode
        ENUM
        PROPERTIES
          Name                #FreqCode
          HelpText            #@SYS12732
          ConfigurationKey    #LedgerBasic
          Table               #LedgerJournalTrans
          Origin              #{9EAE9886-5F2B-4172-9015-47A7B517E1CD}
          LegacyId            #70
          EnumType            #PeriodUnit
        ENDPROPERTIES
        
      FIELD #FreqValue
        INT
        PROPERTIES
          Name                #FreqValue
          ConfigurationKey    #LedgerBasic
          Table               #LedgerJournalTrans
          Origin              #{37A0ECA5-2E96-42DB-856C-85B272BDDED1}
          LegacyId            #69
          ExtendedDataType    #Freq
        ENDPROPERTIES
        
      FIELD #FurtherPostingRecId
        INT64
        PROPERTIES
          Name                #FurtherPostingRecId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{B58075CF-6BE6-45BC-93DB-C5C0F9B4003E}
          LegacyId            #122
          ExtendedDataType    #LedgerJournalTransRefRecId
        ENDPROPERTIES
        
      FIELD #FurtherPostingType
        ENUM
        PROPERTIES
          Name                #FurtherPostingType
          Table               #LedgerJournalTrans
          Origin              #{04CB9B71-6CCA-4D92-860D-33DBF7A0F5DF}
          LegacyId            #100
          ExtendedDataType    #FurtherPostingType
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #GSTHSTTaxType_CA
        ENUM
        PROPERTIES
          Name                #GSTHSTTaxType_CA
          Table               #LedgerJournalTrans
          Origin              #{2723179C-D145-498E-AC45-8942B22AE687}
          LegacyId            #322
          EnumType            #GSTHSTTaxType_CA
        ENDPROPERTIES
        
      FIELD #GTAServiceCategory_IN
        ENUM
        PROPERTIES
          Name                #GTAServiceCategory_IN
          Table               #LedgerJournalTrans
          Origin              #{1550BB42-5CF7-44CF-B7F2-0274F668D9AC}
          LegacyId            #8258
          EnumType            #GTAServiceCategory_IN
        ENDPROPERTIES
        
      FIELD #ImportDate
        DATE
        PROPERTIES
          Name                #ImportDate
          Label               #@SYS66024
          HelpText            #@SYS66025
          Table               #LedgerJournalTrans
          Origin              #{A4F3EB2A-0EE2-4821-BB8D-13E9570C7A44}
          LegacyId            #104
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #InformByPhone_LT
        ENUM
        PROPERTIES
          Name                #InformByPhone_LT
          Table               #LedgerJournalTrans
          Origin              #{F646B0B8-FFFD-475A-873C-B0E1CB49C761}
          LegacyId            #8153
          ExtendedDataType    #LTInformByPhone
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InformByTelex_LT
        ENUM
        PROPERTIES
          Name                #InformByTelex_LT
          Table               #LedgerJournalTrans
          Origin              #{F5574A0B-C980-42C9-81BC-BDFABB2B7A0A}
          LegacyId            #8152
          ExtendedDataType    #LTInformByTelex
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #IntBank_LV
        STRING
        PROPERTIES
          Name                #IntBank_LV
          Table               #LedgerJournalTrans
          CountryRegionCodes  #LV
          Origin              #{DB0AAB12-BA36-47F8-A792-C572102A67E2}
          LegacyId            #16050
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #IntraComVATDueDate_W
        ENUM
        PROPERTIES
          Name                #IntraComVATDueDate_W
          Table               #LedgerJournalTrans
          Origin              #{00DA8EDE-223B-45E3-B0EE-4A1FEFB7F209}
          LegacyId            #8072
          ExtendedDataType    #IntraComVATDueDate_W
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Invisible
        ENUM
        PROPERTIES
          Name                #Invisible
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{2A4A8C58-130C-43D4-BD8A-85FA05E40E10}
          LegacyId            #61
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Invoice
        STRING
        PROPERTIES
          Name                #Invoice
          HelpText            #@SYS4726
          Table               #LedgerJournalTrans
          Origin              #{579A5EAE-BFD2-442B-B344-172938A44D64}
          LegacyId            #79
          ExtendedDataType    #InvoiceId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InvoiceReleaseDate
        DATETIME
        PROPERTIES
          Name                #InvoiceReleaseDate
          Table               #LedgerJournalTrans
          Origin              #{17477856-5FE4-4F63-8820-0B931C76D96D}
          LegacyId            #142
          ExtendedDataType    #InvoiceReleaseDate
        ENDPROPERTIES
        
      FIELD #JournalNum
        STRING
        PROPERTIES
          Name                #JournalNum
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{246CFDD7-3FEB-4636-A0B0-2705E5DC582E}
          LegacyId            #1
          ExtendedDataType    #LedgerJournalId
        ENDPROPERTIES
        
      FIELD #LastTransferred
        DATE
        PROPERTIES
          Name                #LastTransferred
          Table               #LedgerJournalTrans
          Origin              #{168362AF-087C-44F6-8F93-0F63447F6566}
          LegacyId            #82
          ExtendedDataType    #LastTransferred
        ENDPROPERTIES
        
      FIELD #LedgerDimension
        INT64
        PROPERTIES
          Name                #LedgerDimension
          Table               #LedgerJournalTrans
          Origin              #{FA155E73-AF2C-4FCB-9F80-7C9CD4A138C3}
          LegacyId            #167
          ExtendedDataType    #DimensionDynamicAccount
        ENDPROPERTIES
        
      FIELD #LedgerJournalDlvDate_ES
        DATE
        PROPERTIES
          Name                #LedgerJournalDlvDate_ES
          Table               #LedgerJournalTrans
          CountryRegionCodes  #ES
          Origin              #{2A170000-00D4-1000-CFE8-91EF2F067C23}
          LegacyId            #491
          ExtendedDataType    #LedgerJournalDlvDate_ES
        ENDPROPERTIES
        
      FIELD #LedgerVoucherType_CN
        INT64
        PROPERTIES
          Name                #LedgerVoucherType_CN
          Table               #LedgerJournalTrans
          Origin              #{7BFBB7F2-3CFA-4806-8821-7A6C8AA8D72D}
          LegacyId            #8280
          ExtendedDataType    #LedgerVoucherTypeRefRecId_CN
        ENDPROPERTIES
        
      FIELD #LineNum
        REAL
        PROPERTIES
          Name                #LineNum
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{CA303D67-B7C7-4CAE-9EFD-D7467F44484F}
          LegacyId            #2
          ExtendedDataType    #LineNum
        ENDPROPERTIES
        
      FIELD #Listcode
        ENUM
        PROPERTIES
          Name                #Listcode
          Table               #LedgerJournalTrans
          Origin              #{6F57EED8-7217-4F76-A84E-2F891CDD37B0}
          LegacyId            #99
          ExtendedDataType    #ListcodeId
          EnumType            #Listcode
        ENDPROPERTIES
        
      FIELD #LoadingDate
        DATE
        PROPERTIES
          Name                #LoadingDate
          Label               #@SYS22179
          HelpText            #@SYS11099
          Table               #LedgerJournalTrans
          Origin              #{E18A5749-8306-44D9-A1FF-017C1C26D9FA}
          LegacyId            #75
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #MainAccountType
        QUEUE
        PROPERTIES
          Name                #MainAccountType
          Label               #@SYS125447
          HelpText            #@SYS125448
          SaveContents        #No
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{1E203F90-B4BD-47D4-98C7-5098512479CB}
          LegacyId            #25
          ExtendedDataType    #SysContainer
        ENDPROPERTIES
        
      FIELD #MarkedInvoice
        STRING
        PROPERTIES
          Name                #MarkedInvoice
          HelpText            #@SYS104664
          Table               #LedgerJournalTrans
          Origin              #{2A363C5E-0844-4061-A0FF-D7565C6E05E6}
          LegacyId            #46
          ExtendedDataType    #InvoiceId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #MarkedInvoiceCompany
        STRING
        PROPERTIES
          Name                #MarkedInvoiceCompany
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{369636AE-6692-4DB8-8AEC-4435E8BB215B}
          LegacyId            #180
          ExtendedDataType    #SelectableDataArea
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #MarkedInvoiceRecId
        INT64
        PROPERTIES
          Name                #MarkedInvoiceRecId
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{D739D327-A2E2-4A70-B2B6-7B0CDA1751C4}
          LegacyId            #54
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #MarkupCode_RU
        STRING
        PROPERTIES
          Name                #MarkupCode_RU
          Table               #LedgerJournalTrans
          Origin              #{4DF96C37-A970-4DF4-AFB7-25FB5A57C4DC}
          LegacyId            #8173
          ExtendedDataType    #MarkupCodeVend_RU
        ENDPROPERTIES
        
      FIELD #MaximumRetailPrice_IN
        REAL
        PROPERTIES
          Name                #MaximumRetailPrice_IN
          Label               #@GLS5296
          HelpText            #@GLS5543
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{83354FAE-15B7-477D-8FAF-5BAB1CCAEE17}
          LegacyId            #8248
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #MCRCCGeneralLedgerId
        STRING
        PROPERTIES
          Name                #MCRCCGeneralLedgerId
          Label               #@MCR24856
          HelpText            #@MCR24858
          ConfigurationKey    #MCRPayment
          Table               #LedgerJournalTrans
          Origin              #{17A14570-F4CB-46D5-AC75-F8888633D85D}
          LegacyId            #30004
          ExtendedDataType    #LedgerJournalId
        ENDPROPERTIES
        
      FIELD #MCRPaymOrderID
        STRING
        PROPERTIES
          Name                #MCRPaymOrderID
          Table               #LedgerJournalTrans
          Origin              #{A8E7963C-6AA1-49DB-9452-1AE54CC3B779}
          LegacyId            #30001
          ExtendedDataType    #MCRPaymOrderId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #MCRPrintTxtOnCheck
        ENUM
        PROPERTIES
          Name                #MCRPrintTxtOnCheck
          Table               #LedgerJournalTrans
          Origin              #{13EBC082-D3C1-472E-BD4D-92F750F7C752}
          LegacyId            #30013
          ExtendedDataType    #MCRPrintTxtOnCheck
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #MCRRefPaymID
        INT64
        PROPERTIES
          Name                #MCRRefPaymID
          Label               #@SYS11443
          HelpText            #@MCR24917
          ConfigurationKey    #MCRPayment
          Table               #LedgerJournalTrans
          Origin              #{D9054764-DD2B-4676-AB35-84AF89608695}
          LegacyId            #30007
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #NatureOfAssessee_IN
        ENUM
        PROPERTIES
          Name                #NatureOfAssessee_IN
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{6D199EE1-3017-4C5F-8F25-F20898DA01B9}
          LegacyId            #8266
          EnumType            #NatureOfAssessee_IN
        ENDPROPERTIES
        
      FIELD #NegInstId
        STRING
        PROPERTIES
          Name                #NegInstId
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{BCA35605-4049-4DB2-9931-B193CBF6C8C0}
          LegacyId            #144
          ExtendedDataType    #CustVendNegInstId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #NoEdit
        ENUM
        PROPERTIES
          Name                #NoEdit
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{D1B3A64C-CB53-4404-AC79-698AB9BC7460}
          LegacyId            #60
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #NonRecoverablePercent_IN
        REAL
        PROPERTIES
          Name                #NonRecoverablePercent_IN
          Label               #@GLS5534
          HelpText            #@GLS5535
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{5416171F-D4FB-4336-A8CF-FCA31588B6D7}
          LegacyId            #8259
          ExtendedDataType    #Percent
        ENDPROPERTIES
        
      FIELD #OffSessionId_RU
        STRING
        PROPERTIES
          Name                #OffSessionId_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{C3CFD37E-2579-4A5B-AEB3-3F3BE818FFE7}
          LegacyId            #16037
          ExtendedDataType    #OffSessionId_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #OffsetAccountAgreementId_RU
        STRING
        PROPERTIES
          Name                #OffsetAccountAgreementId_RU
          Table               #LedgerJournalTrans
          Origin              #{F542848D-EF0C-4163-9B2B-2DF75B186DCA}
          ExtendedDataType    #AgreementId_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #OffsetAccountType
        ENUM
        PROPERTIES
          Name                #OffsetAccountType
          Label               #@SYS23950
          HelpText            #@SYS27735
          Table               #LedgerJournalTrans
          Origin              #{8D23A3EC-768F-4163-9D16-4625F74C0BF9}
          LegacyId            #47
          EnumType            #LedgerJournalACType
        ENDPROPERTIES
        
      FIELD #OffsetAgreementCompany_RU
        STRING
        PROPERTIES
          Name                #OffsetAgreementCompany_RU
          Table               #LedgerJournalTrans
          Origin              #{EFBE562F-E5D6-40AD-AA6D-F5D8415AA86E}
          LegacyId            #8276
          ExtendedDataType    #AgreementCompany_RU
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #OffsetCompany
        STRING
        PROPERTIES
          Name                #OffsetCompany
          Label               #@SYS25382
          HelpText            #@SYS16943
          ConfigurationKey    #LedgerAdvIntercompanyAccounting
          Table               #LedgerJournalTrans
          Origin              #{CC22CC30-FC61-44A4-B80C-64A3DE209289}
          LegacyId            #49
          ExtendedDataType    #SelectableDataArea
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #OffsetDefaultDimension
        INT64
        PROPERTIES
          Name                #OffsetDefaultDimension
          Table               #LedgerJournalTrans
          Origin              #{EC62C352-9BD0-4FDC-8003-36F44F54B162}
          LegacyId            #166
          ExtendedDataType    #DimensionDefault
        ENDPROPERTIES
        
      FIELD #OffsetLedgerDimension
        INT64
        PROPERTIES
          Name                #OffsetLedgerDimension
          Label               #@SYS11162
          HelpText            #@SYS28145
          Table               #LedgerJournalTrans
          Origin              #{4B4827A8-808F-49A1-BBB1-732C3B9C85BF}
          LegacyId            #171
          ExtendedDataType    #DimensionDynamicAccount
        ENDPROPERTIES
        
      FIELD #OffsetPostingProfile_RU
        STRING
        PROPERTIES
          Name                #OffsetPostingProfile_RU
          Label               #@GLS104672
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU,PL,CZ,HU,LT,LV,EE
          Origin              #{9EB692BA-B383-44DE-9294-6D941F35709F}
          LegacyId            #16044
          ExtendedDataType    #PostingProfile
        ENDPROPERTIES
        
      FIELD #OffsetTxt
        STRING
        PROPERTIES
          Name                #OffsetTxt
          Label               #@SYS24282
          HelpText            #@SYS3026
          Table               #LedgerJournalTrans
          Origin              #{DE3D7D88-2152-486B-9E51-A48AD83C1DFE}
          LegacyId            #50
          ExtendedDataType    #LedgerJournalTransTxt
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #OperationType_MX
        ENUM
        PROPERTIES
          Name                #OperationType_MX
          Table               #LedgerJournalTrans
          Origin              #{74002B00-E945-438C-B706-B2F514EB6BB9}
          LegacyId            #332
          EnumType            #VendorOperationType_MX
        ENDPROPERTIES
        
      FIELD #PackedExtensions
        QUEUE
        PROPERTIES
          Name                #PackedExtensions
          SaveContents        #No
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{F65BCB41-8521-48CB-9AAD-AA6EF97BA36B}
          ExtendedDataType    #SysExtensionSerializerPackedContainer
        ENDPROPERTIES
        
      FIELD #Payment
        STRING
        PROPERTIES
          Name                #Payment
          HelpText            #@SYS4296
          Table               #LedgerJournalTrans
          Origin              #{E6456969-8569-45F2-BCB2-1B35F21C36DF}
          LegacyId            #87
          ExtendedDataType    #PaymTermId
        ENDPROPERTIES
        
      FIELD #PaymentAccount
        STRING
        PROPERTIES
          Name                #PaymentAccount
          Label               #@SYS21686
          HelpText            #@SYS3082
          ConfigurationKey    #BankElectronicBanking
          Table               #LedgerJournalTrans
          Origin              #{5795E97C-C742-4180-A1D9-763892266AE4}
          LegacyId            #78
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #PaymentNotes
        STRING
        PROPERTIES
          Name                #PaymentNotes
          Table               #LedgerJournalTrans
          Origin              #{1C2E7095-F6CC-48CC-8984-DCD5A901EA9C}
          LegacyId            #53
          ExtendedDataType    #PaymNote
          StringSize          #1000
        ENDPROPERTIES
        
      FIELD #PaymentPriority_LT
        ENUM
        PROPERTIES
          Name                #PaymentPriority_LT
          Table               #LedgerJournalTrans
          Origin              #{35A7929E-C99F-4AE0-B4C2-B77C6F6E5D7E}
          LegacyId            #8150
          ExtendedDataType    #LTPaymentPriority
          EnumType            #PaymentPriority_LT
        ENDPROPERTIES
        
      FIELD #PaymentSequenceNum
        INT
        PROPERTIES
          Name                #PaymentSequenceNum
          Table               #LedgerJournalTrans
          Origin              #{2A26FC2B-6633-4E53-9351-0800A57C159E}
          LegacyId            #110
          ExtendedDataType    #PaymentSequenceNum
        ENDPROPERTIES
        
      FIELD #PaymentStatus
        ENUM
        PROPERTIES
          Name                #PaymentStatus
          HelpText            #@SYS1426
          Table               #LedgerJournalTrans
          Origin              #{2488FA57-4F9A-4901-BFAA-AA95EA09DF8E}
          LegacyId            #30
          EnumType            #CustVendPaymStatus
        ENDPROPERTIES
        
      FIELD #PaymId
        STRING
        PROPERTIES
          Name                #PaymId
          Table               #LedgerJournalTrans
          Origin              #{AFEEB076-DD0D-4EF3-B26F-23A158911789}
          LegacyId            #68
          ExtendedDataType    #PaymId
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #PaymInstruction1
        INT64
        PROPERTIES
          Name                #PaymInstruction1
          Label               #@SYS75599
          Table               #LedgerJournalTrans
          Origin              #{F6F90CF8-E693-4AF2-8FCA-A2B159E36E07}
          LegacyId            #293
          ExtendedDataType    #PaymInstructionRecId
        ENDPROPERTIES
        
      FIELD #PaymInstruction2
        INT64
        PROPERTIES
          Name                #PaymInstruction2
          Label               #@SYS75600
          Table               #LedgerJournalTrans
          Origin              #{5CB5E5F4-25F1-45B2-BC7D-B6B61C203F17}
          LegacyId            #294
          ExtendedDataType    #PaymInstructionRecId
        ENDPROPERTIES
        
      FIELD #PaymInstruction3
        INT64
        PROPERTIES
          Name                #PaymInstruction3
          Label               #@SYS75601
          Table               #LedgerJournalTrans
          Origin              #{63FB6899-4FED-4FCC-9130-77338C0BC94B}
          LegacyId            #295
          ExtendedDataType    #PaymInstructionRecId
        ENDPROPERTIES
        
      FIELD #PaymInstruction4
        INT64
        PROPERTIES
          Name                #PaymInstruction4
          Label               #@SYS75602
          Table               #LedgerJournalTrans
          Origin              #{96056A4F-51B7-4DE2-9A5A-D0BC581FE358}
          LegacyId            #296
          ExtendedDataType    #PaymInstructionRecId
        ENDPROPERTIES
        
      FIELD #PaymMode
        STRING
        PROPERTIES
          Name                #PaymMode
          Table               #LedgerJournalTrans
          Origin              #{86282479-5610-4DF8-94F7-300AE320330B}
          LegacyId            #45
          ExtendedDataType    #PaymMode
        ENDPROPERTIES
        
      FIELD #PaymPurpose_LT
        STRING
        PROPERTIES
          Name                #PaymPurpose_LT
          Table               #LedgerJournalTrans
          Origin              #{0BACCBB1-F672-41A2-B5C7-0DCD91DADF31}
          LegacyId            #16046
          ExtendedDataType    #LtPaymentPurpose
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #PaymReference
        STRING
        PROPERTIES
          Name                #PaymReference
          Table               #LedgerJournalTrans
          Origin              #{9AB2EF29-68F3-4181-86DE-37FC278534F2}
          LegacyId            #42
          ExtendedDataType    #PaymReference
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PaymSpec
        STRING
        PROPERTIES
          Name                #PaymSpec
          HelpText            #@SYS16655
          Table               #LedgerJournalTrans
          Origin              #{338AC6DC-537B-47D8-86BF-D3EB64DC3C5C}
          LegacyId            #44
          ExtendedDataType    #PaymSpec
        ENDPROPERTIES
        
      FIELD #PoolRecId
        INT64
        PROPERTIES
          Name                #PoolRecId
          Label               #@SYS76108
          Table               #LedgerJournalTrans
          Origin              #{87F50953-96C3-4DFE-B9DC-779829087166}
          LegacyId            #102
          ExtendedDataType    #LedgerJournalTransRefRecId
        ENDPROPERTIES
        
      FIELD #PostingProfile
        STRING
        PROPERTIES
          Name                #PostingProfile
          Table               #LedgerJournalTrans
          Origin              #{6A4C31E7-11FB-4945-8529-6CA32193D47E}
          LegacyId            #27
          ExtendedDataType    #PostingProfile
        ENDPROPERTIES
        
      FIELD #Prepayment
        ENUM
        PROPERTIES
          Name                #Prepayment
          Label               #@SYS59473
          HelpText            #@SYS59475
          ConfigurationKey    #LedgerBasicSalesTax
          Table               #LedgerJournalTrans
          Origin              #{A4FD3F62-14BB-4B1D-9DBC-9829299C90AE}
          LegacyId            #103
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Price
        REAL
        PROPERTIES
          Name                #Price
          HelpText            #@SYS13641
          Table               #LedgerJournalTrans
          Origin              #{33EC585B-74ED-49EC-9302-009386B05FEA}
          LegacyId            #20
          ExtendedDataType    #Price
        ENDPROPERTIES
        
      FIELD #PurchIdRange
        STRING
        PROPERTIES
          Name                #PurchIdRange
          HelpText            #@SYS58910
          Table               #LedgerJournalTrans
          Origin              #{D52AC866-3BDD-4710-B076-6120AC8F1CE6}
          LegacyId            #101
          ExtendedDataType    #PurchIdRange
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #PurchLedgerPosting
        ENUM
        PROPERTIES
          Name                #PurchLedgerPosting
          ConfigurationKey    #VendInvoiceRegisterApproval
          Table               #LedgerJournalTrans
          Origin              #{5A463521-B61B-40DE-A620-0E3672C5DFB9}
          LegacyId            #84
          ExtendedDataType    #PurchLedgerPosting
          EnumType            #ArrivalPostingType
        ENDPROPERTIES
        
      FIELD #Qty
        REAL
        PROPERTIES
          Name                #Qty
          Table               #LedgerJournalTrans
          Origin              #{D52325BC-36E0-4182-8F8B-B8356379DFA6}
          LegacyId            #14
          ExtendedDataType    #QtyStatistical
        ENDPROPERTIES
        
      FIELD #RCashDocRepresPersonId
        STRING
        PROPERTIES
          Name                #RCashDocRepresPersonId
          Table               #LedgerJournalTrans
          Origin              #{07C766C0-DA11-499F-AE03-B15DC470206F}
          LegacyId            #16038
          ExtendedDataType    #RCashDocRepresPersonId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #RCashDocRepresType
        ENUM
        PROPERTIES
          Name                #RCashDocRepresType
          Table               #LedgerJournalTrans
          Origin              #{BE5FED5D-91E0-495B-8C47-E6747CEF285D}
          LegacyId            #16059
          EnumType            #RCashDocRepresType
        ENDPROPERTIES
        
      FIELD #RCashPayTransType
        ENUM
        PROPERTIES
          Name                #RCashPayTransType
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{946BBCE0-9140-4373-9C32-223400ADD8D3}
          LegacyId            #18001
          EnumType            #RCashPayLedgerTransType
        ENDPROPERTIES
        
      FIELD #ReasonRefRecID
        INT64
        PROPERTIES
          Name                #ReasonRefRecID
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{1AC54F35-C56A-454A-B840-3410EB525939}
          LegacyId            #107
          ExtendedDataType    #ReasonRefRecID
        ENDPROPERTIES
        
      FIELD #ReceiptDate_W
        DATE
        PROPERTIES
          Name                #ReceiptDate_W
          Table               #LedgerJournalTrans
          Origin              #{54136BC7-0025-402A-982B-D89C47325C97}
          ExtendedDataType    #PurchReceiptDate_W
        ENDPROPERTIES
        
      FIELD #RefCopyReverse_CN
        INT64
        PROPERTIES
          Name                #RefCopyReverse_CN
          Label               #@GLS54944
          HelpText            #@GLS54945
          ConfigurationKey    #LedgerBasic
          Table               #LedgerJournalTrans
          CountryRegionCodes  #CN
          Origin              #{8FB8EAD0-690C-4CF8-A337-F6FB17F35353}
          LegacyId            #8083
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #ReleaseDate
        DATETIME
        PROPERTIES
          Name                #ReleaseDate
          Table               #LedgerJournalTrans
          Origin              #{DF52F3E2-66B2-47B7-9CDE-B5A3AA431C56}
          LegacyId            #192
          ExtendedDataType    #PostReleaseDate
        ENDPROPERTIES
        
      FIELD #ReleaseDateComment
        STRING
        PROPERTIES
          Name                #ReleaseDateComment
          Table               #LedgerJournalTrans
          Origin              #{D2DC2875-433D-47C0-B618-C29E21F6575B}
          LegacyId            #141
          ExtendedDataType    #ReleaseDateComment
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #RemainAmount
        REAL
        PROPERTIES
          Name                #RemainAmount
          Label               #@SYS95
          HelpText            #@SYS5216
          Table               #LedgerJournalTrans
          Origin              #{79DF52B9-5EEE-4F6E-AAD5-B33A84499E50}
          LegacyId            #35
          ExtendedDataType    #Amount
        ENDPROPERTIES
        
      FIELD #RemittanceAddress
        INT64
        PROPERTIES
          Name                #RemittanceAddress
          Table               #LedgerJournalTrans
          Origin              #{88699E8A-262B-489B-801E-8B65162D5ADA}
          LegacyId            #189
          ExtendedDataType    #RemittanceAddress
        ENDPROPERTIES
        
      FIELD #RemittanceLocation
        INT64
        PROPERTIES
          Name                #RemittanceLocation
          Table               #LedgerJournalTrans
          Origin              #{6D945675-5AFF-42A5-8CC4-A6AFA22DA686}
          LegacyId            #188
          ExtendedDataType    #RemittanceLocation
        ENDPROPERTIES
        
      FIELD #RemitteeCurrency
        STRING
        PROPERTIES
          Name                #RemitteeCurrency
          Label               #@SYS91987
          HelpText            #@SYS91988
          Table               #LedgerJournalTrans
          Origin              #{55D734FC-90F0-4625-9F90-EB9CB5F69A86}
          LegacyId            #148
          ExtendedDataType    #CurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #RepresPersonCard_W
        STRING
        PROPERTIES
          Name                #RepresPersonCard_W
          Visible             #No
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU,PL,LV,EE,CZ,HU
          Origin              #{F3C1DD13-6A75-426B-B9DD-337BB3D95AF9}
          ExtendedDataType    #PayeeDocument_RU
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #RepresPersonName_W
        STRING
        PROPERTIES
          Name                #RepresPersonName_W
          Visible             #No
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU,PL,LV,EE,CZ,HU
          Origin              #{5BA02DFB-2D93-4F17-A7F2-8348047965B7}
          ExtendedDataType    #EmplName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ReverseDate
        DATE
        PROPERTIES
          Name                #ReverseDate
          Label               #@SYS116153
          HelpText            #@SYS116150
          ConfigurationKey    #LedgerBasicReversingEntries
          Table               #LedgerJournalTrans
          Origin              #{60255E76-C716-474A-B674-DA1E4EFDA20A}
          LegacyId            #169
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #ReverseEntry
        ENUM
        PROPERTIES
          Name                #ReverseEntry
          Label               #@SYS116155
          HelpText            #@SYS116154
          ConfigurationKey    #LedgerBasicReversingEntries
          Table               #LedgerJournalTrans
          Origin              #{4ED27813-EBF8-4B8A-BC73-5403F8B0BAE6}
          LegacyId            #168
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RevRecId
        INT64
        PROPERTIES
          Name                #RevRecId
          Visible             #No
          ConfigurationKey    #LedgerBasicReversingEntries
          Table               #LedgerJournalTrans
          Origin              #{E8BC20C1-619D-413E-8C84-EEB334F7C7A4}
          LegacyId            #170
          ExtendedDataType    #LedgerJournalTransRefRecId
        ENDPROPERTIES
        
      FIELD #SalesTaxFormTypes_IN
        INT64
        PROPERTIES
          Name                #SalesTaxFormTypes_IN
          Label               #@GLS5518
          HelpText            #@GLS5519
          Table               #LedgerJournalTrans
          Origin              #{3FCC8C4E-B94F-4DC2-9275-E03030F8FDE3}
          LegacyId            #8281
          ExtendedDataType    #SalesTaxFormTypesRecId_IN
        ENDPROPERTIES
        
      FIELD #ServiceCodeTable_IN
        INT64
        PROPERTIES
          Name                #ServiceCodeTable_IN
          Label               #@GLS5065
          HelpText            #@GLS5525
          Visible             #No
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{257E52AF-7521-4911-BBCA-A0F5F4A25728}
          LegacyId            #8305
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #SettleVoucher
        ENUM
        PROPERTIES
          Name                #SettleVoucher
          Table               #LedgerJournalTrans
          Origin              #{1555E750-5999-4769-B3A1-FA8638708E55}
          LegacyId            #26
          EnumType            #SettlementType
        ENDPROPERTIES
        
      FIELD #SkipBlockedForManualEntryCheck
        ENUM
        PROPERTIES
          Name                #SkipBlockedForManualEntryCheck
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{3E36D357-E9A5-4658-9B0A-600B0600FC1C}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #SoftwareDeclReceived_IN
        ENUM
        PROPERTIES
          Name                #SoftwareDeclReceived_IN
          Table               #LedgerJournalTrans
          Origin              #{96288C50-FB9F-4A7D-B879-8F0739488BAC}
          ExtendedDataType    #SoftwareDeclReceived_IN
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Tax1099Amount
        REAL
        PROPERTIES
          Name                #Tax1099Amount
          Table               #LedgerJournalTrans
          Origin              #{8F20C6E7-EC9A-43D7-9592-02365488DE3B}
          LegacyId            #51
          ExtendedDataType    #Tax1099Amount
        ENDPROPERTIES
        
      FIELD #Tax1099Fields
        INT64
        PROPERTIES
          Name                #Tax1099Fields
          Table               #LedgerJournalTrans
          Origin              #{8EDE2823-8B22-4259-8361-9EB4B961D149}
          LegacyId            #306
          ExtendedDataType    #Tax1099FieldsRecId
        ENDPROPERTIES
        
      FIELD #Tax1099RecId
        INT64
        PROPERTIES
          Name                #Tax1099RecId
          Visible             #No
          ConfigurationKey    #PublicSector
          Table               #LedgerJournalTrans
          Origin              #{7DD47C1E-D851-45AE-80EC-82DB61A060D6}
          LegacyId            #39
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Tax1099State
        STRING
        PROPERTIES
          Name                #Tax1099State
          Table               #LedgerJournalTrans
          Origin              #{CE51CE12-3CD6-4E06-98D7-5973BCAD22C7}
          LegacyId            #147
          ExtendedDataType    #Tax1099State
        ENDPROPERTIES
        
      FIELD #Tax1099StateAmount
        REAL
        PROPERTIES
          Name                #Tax1099StateAmount
          Table               #LedgerJournalTrans
          Origin              #{C94379FA-4A97-43B7-9BFF-7FA2A5985A34}
          LegacyId            #146
          ExtendedDataType    #Tax1099StateAmount
        ENDPROPERTIES
        
      FIELD #TaxBase_W
        REAL
        PROPERTIES
          Name                #TaxBase_W
          Table               #LedgerJournalTrans
          Origin              #{FD37A550-41D4-49CE-8CEF-46BC8AA9CE70}
          LegacyId            #16074
          ExtendedDataType    #TaxBase_W
        ENDPROPERTIES
        
      FIELD #TaxCode
        STRING
        PROPERTIES
          Name                #TaxCode
          HelpText            #@SYS27130
          Table               #LedgerJournalTrans
          Origin              #{B585842E-406A-43BD-999C-11198BB9FC93}
          LegacyId            #36
          ExtendedDataType    #TaxCode
        ENDPROPERTIES
        
      FIELD #TaxDirectionControl
        ENUM
        PROPERTIES
          Name                #TaxDirectionControl
          Label               #@SYS22926
          HelpText            #@SYS70273
          ConfigurationKey    #LedgerBasicSalesTax
          Table               #LedgerJournalTrans
          Origin              #{8D84CB7A-DB9B-46C9-B9F8-3DB1403F9166}
          LegacyId            #123
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TaxGroup
        STRING
        PROPERTIES
          Name                #TaxGroup
          HelpText            #@SYS6254
          Table               #LedgerJournalTrans
          Origin              #{BA318BB2-56AE-464F-9F31-A93842E5E733}
          LegacyId            #10
          ExtendedDataType    #TaxGroupJournal
        ENDPROPERTIES
        
      FIELD #TaxItemGroup
        STRING
        PROPERTIES
          Name                #TaxItemGroup
          Label               #@SYS21932
          HelpText            #@SYS27751
          Table               #LedgerJournalTrans
          Origin              #{B1A92B8C-8298-414F-96AB-34A821E1F657}
          LegacyId            #96
          ExtendedDataType    #TaxGroupJournal
        ENDPROPERTIES
        
      FIELD #TaxPeriodPaymentCode_PL
        STRING
        PROPERTIES
          Name                #TaxPeriodPaymentCode_PL
          Table               #LedgerJournalTrans
          Origin              #{CFD33A9C-5B0F-4C58-8904-CFA61E1FB6EA}
          ExtendedDataType    #PlTaxPeriodPaymentCode
        ENDPROPERTIES
        
      FIELD #TaxSetoffVoucher_IN
        STRING
        PROPERTIES
          Name                #TaxSetoffVoucher_IN
          Label               #@GLS221798
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{A6310559-1553-4074-A595-D300C2A619A3}
          ExtendedDataType    #Voucher
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TaxWithholdAlternateVendorAcct_TH
        STRING
        PROPERTIES
          Name                #TaxWithholdAlternateVendorAcct_TH
          Table               #LedgerJournalTrans
          Origin              #{9BB1229F-CDB2-44F2-931B-E25B812D2E2B}
          LegacyId            #8027
          ExtendedDataType    #TaxWithholdAlternateVendorAcct_TH
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TaxWithholdCalculate_TH
        ENUM
        PROPERTIES
          Name                #TaxWithholdCalculate_TH
          Table               #LedgerJournalTrans
          Origin              #{E8AAEB41-002A-4C44-84C3-7916EEF4FCB6}
          LegacyId            #8025
          ExtendedDataType    #TaxWithholdCalculate_TH
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TaxWithholdCode_IN
        STRING
        PROPERTIES
          Name                #TaxWithholdCode_IN
          HelpText            #@GLS222697
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{20A3AA07-DE2C-4E08-90B2-FA8F7D894374}
          ExtendedDataType    #TaxWithholdCode
        ENDPROPERTIES
        
      FIELD #TaxWithholdGroup
        STRING
        PROPERTIES
          Name                #TaxWithholdGroup
          Table               #LedgerJournalTrans
          Origin              #{7F53509A-89D7-4731-BD26-17999E7286AE}
          LegacyId            #145
          ExtendedDataType    #TaxWithholdGroup
        ENDPROPERTIES
        
      FIELD #TaxWithholdItemGroupHeading_TH
        INT64
        PROPERTIES
          Name                #TaxWithholdItemGroupHeading_TH
          Table               #LedgerJournalTrans
          Origin              #{9D6BA3B7-14CB-47B2-B4EB-65818508123C}
          LegacyId            #335
          ExtendedDataType    #TaxWithholdItemGroupId_TH
        ENDPROPERTIES
        
      FIELD #TCSGroup_IN
        STRING
        PROPERTIES
          Name                #TCSGroup_IN
          Label               #@GLS5363
          HelpText            #@GLS5846
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{C10E9E03-95FD-4D56-A717-14D3C9CAC96D}
          LegacyId            #8265
          ExtendedDataType    #TaxWithholdGroup
        ENDPROPERTIES
        
      FIELD #TDSGroup_IN
        STRING
        PROPERTIES
          Name                #TDSGroup_IN
          Label               #@GLS5362
          HelpText            #@GLS5823
          Table               #LedgerJournalTrans
          CountryRegionCodes  #IN
          Origin              #{26763D4B-594F-43C7-BE31-5B32EBDE5155}
          LegacyId            #8264
          ExtendedDataType    #TaxWithholdGroup
        ENDPROPERTIES
        
      FIELD #TransactionType
        ENUM
        PROPERTIES
          Name                #TransactionType
          Table               #LedgerJournalTrans
          Origin              #{99F032F7-B60C-4B47-B753-C35C9ECCA2FD}
          LegacyId            #63
          EnumType            #LedgerTransType
        ENDPROPERTIES
        
      FIELD #TransDate
        DATE
        PROPERTIES
          Name                #TransDate
          HelpText            #@SYS14475
          Table               #LedgerJournalTrans
          Origin              #{F07DF87F-3A0E-41C2-8193-BD7E517EBFCD}
          LegacyId            #62
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #Transfer
        ENUM
        PROPERTIES
          Name                #Transfer
          Label               #@SYS10443
          HelpText            #@SYS25252
          Table               #LedgerJournalTrans
          Origin              #{73A61B99-F1B5-4FC2-A6D5-53437CA15890}
          LegacyId            #81
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TransferCurrency_RU
        STRING
        PROPERTIES
          Name                #TransferCurrency_RU
          HelpText            #@GLS114403
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{E8E97BDF-6411-4528-A3DE-9AEFC12AE192}
          ExtendedDataType    #CurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #Transferred
        ENUM
        PROPERTIES
          Name                #Transferred
          Label               #@SYS12615
          HelpText            #@SYS16893
          Table               #LedgerJournalTrans
          Origin              #{F39C3821-637F-4DA8-AE2D-A770EC7E5AD6}
          LegacyId            #58
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TransferredBy
        STRING
        PROPERTIES
          Name                #TransferredBy
          Label               #@SYS23830
          HelpText            #@SYS25656
          Table               #LedgerJournalTrans
          Origin              #{4F1862FF-D452-4A5F-8D99-ADE81EAB3743}
          LegacyId            #74
          ExtendedDataType    #UserId
          StringSize          #8
        ENDPROPERTIES
        
      FIELD #TransferredOn
        DATE
        PROPERTIES
          Name                #TransferredOn
          Label               #@SYS23831
          HelpText            #@SYS23832
          Table               #LedgerJournalTrans
          Origin              #{4317DFC2-B736-4FAE-9AFA-C047EE3ECAEF}
          LegacyId            #83
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #TransferredTo
        STRING
        PROPERTIES
          Name                #TransferredTo
          Label               #@SYS25348
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #LedgerJournalTrans
          Origin              #{6F99C1DD-725D-4264-A9F5-7DA187083167}
          LegacyId            #80
          ExtendedDataType    #LedgerJournalId
        ENDPROPERTIES
        
      FIELD #Triangulation
        ENUM
        PROPERTIES
          Name                #Triangulation
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{DE85ED0B-7317-4C6F-9EFB-9DB0D00C482E}
          LegacyId            #95
          ExtendedDataType    #EUROTriangulation
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Txt
        STRING
        PROPERTIES
          Name                #Txt
          Table               #LedgerJournalTrans
          Origin              #{3C948B31-8F9F-43E3-B1BF-6E5FD236897A}
          LegacyId            #6
          ExtendedDataType    #LedgerJournalTransTxt
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #VatDueDate_W
        DATE
        PROPERTIES
          Name                #VatDueDate_W
          Table               #LedgerJournalTrans
          Origin              #{DBF871BF-EEEF-441C-ACBD-3FF0916A863C}
          LegacyId            #16068
          ExtendedDataType    #VatDueDate_W
        ENDPROPERTIES
        
      FIELD #VATGoodsType_IN
        ENUM
        PROPERTIES
          Name                #VATGoodsType_IN
          Table               #LedgerJournalTrans
          Origin              #{2338438B-50AE-426C-BF2C-B62BF5214C0F}
          LegacyId            #8260
          EnumType            #VATGoodsType_IN
        ENDPROPERTIES
        
      FIELD #VATNumJournal
        STRING
        PROPERTIES
          Name                #VATNumJournal
          HelpText            #@GLS221057
          Table               #LedgerJournalTrans
          Origin              #{B9CBA0C3-21B6-48DE-9F92-4AADD52B299F}
          LegacyId            #97
          ExtendedDataType    #VATNumJournal
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #VATOnPayment_RU
        ENUM
        PROPERTIES
          Name                #VATOnPayment_RU
          Table               #LedgerJournalTrans
          Origin              #{564CED55-2040-4D54-9C9D-7762517EAFDE}
          LegacyId            #8068
          ExtendedDataType    #VATOnPayment_RU
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #VATOperationCode_RU
        STRING
        PROPERTIES
          Name                #VATOperationCode_RU
          Table               #LedgerJournalTrans
          Origin              #{89878603-829B-4888-8F6A-AC89AF7BFFF9}
          LegacyId            #8144
          ExtendedDataType    #VATOperationCode_RU
        ENDPROPERTIES
        
      FIELD #VATPaymRefRecId_RU
        INT64
        PROPERTIES
          Name                #VATPaymRefRecId_RU
          Table               #LedgerJournalTrans
          CountryRegionCodes  #RU
          Origin              #{7F4C2C4D-BAF8-4CD3-99A9-DA9D18D669E2}
          LegacyId            #8142
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #VATTaxAgentVendAccount_RU
        STRING
        PROPERTIES
          Name                #VATTaxAgentVendAccount_RU
          Table               #LedgerJournalTrans
          Origin              #{253FC669-8DCD-4D4C-A644-C61370EC8AC6}
          LegacyId            #8143
          ExtendedDataType    #VATTaxAgentVendAccount_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #VendBankAccount
        INT64
        PROPERTIES
          Name                #VendBankAccount
          Visible             #No
          Table               #LedgerJournalTrans
          Origin              #{A9075344-05BA-4E40-AE13-5351ABE58BF5}
          LegacyId            #323
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #VendInvoiceDeclaration_IS
        INT64
        PROPERTIES
          Name                #VendInvoiceDeclaration_IS
          Table               #LedgerJournalTrans
          Origin              #{3D975541-5EB4-4E02-8571-E6EF9D87CE02}
          LegacyId            #304
          ExtendedDataType    #InvoiceDeclarationId_IS
        ENDPROPERTIES
        
      FIELD #VendTransId
        INT64
        PROPERTIES
          Name                #VendTransId
          HelpText            #@SYS8551
          Table               #LedgerJournalTrans
          Origin              #{73DABFCE-AA27-4670-AB58-F5054ACE81AA}
          LegacyId            #33
          ExtendedDataType    #VendTransRefRecId
        ENDPROPERTIES
        
      FIELD #Voucher
        STRING
        PROPERTIES
          Name                #Voucher
          HelpText            #@SYS5732
          Table               #LedgerJournalTrans
          Origin              #{B66BE570-A7E4-48A1-B5E3-59B4EA7962FF}
          LegacyId            #28
          ExtendedDataType    #Voucher
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Voucher_CN
        STRING
        PROPERTIES
          Name                #Voucher_CN
          Table               #LedgerJournalTrans
          Origin              #{DCA98060-7404-4564-93F0-369B3E6C255D}
          LegacyId            #8125
          ExtendedDataType    #Voucher_CN
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalNum
          #TransDate
          #Voucher
          #LedgerDimension
          #Txt
          #CurrencyCode
          #AmountCurDebit
          #AmountCurCredit
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Account_W
        PROPERTIES
          Name                #Account_W
          Label               #@SYS2355
        ENDPROPERTIES
        
        GROUPFIELDS
          #Company
          #AccountType
          #Txt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Administration
        PROPERTIES
          Name                #Administration
          Label               #@SYS9853
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymentStatus
          #Cancel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Agreement_RU
        PROPERTIES
          Name                #Agreement_RU
          Label               #@GLS104636
        ENDPROPERTIES
        
        GROUPFIELDS
          #AgreementCompany_RU
          #AccountAgreementId_RU
          #accountAgreementDocumentTitle_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Amount
        PROPERTIES
          Name                #Amount
          Label               #@SYS12227
        ENDPROPERTIES
        
        GROUPFIELDS
          #RemainAmount
          #CashDiscAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Amount_IN
        PROPERTIES
          Name                #Amount_IN
          Label               #@SYS6928
        ENDPROPERTIES
        
        GROUPFIELDS
          #AssessableValue_IN
          #MaximumRetailPrice_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Approve
        PROPERTIES
          Name                #Approve
          Label               #@SYS16449
        ENDPROPERTIES
        
        GROUPFIELDS
          #Approver
          #Approved
          #InvoiceReleaseDate
          #ReleaseDateComment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Bank
        PROPERTIES
          Name                #Bank
          Label               #@SYS22173
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankTransType
          #PaymReference
          #AnnouncementNum_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankChequeDepositTransRef
        PROPERTIES
          Name                #BankChequeDepositTransRef
          Label               #@SYS102674
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankChequeDepositTransRefRecID
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankClientDocumentType_RU
        PROPERTIES
          Name                #BankClientDocumentType_RU
          Label               #@SYS80739
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankClientDocumentTypeId_RU
          #paymentDocumentName_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankCurrencyDealCourse_RU
        PROPERTIES
          Name                #BankCurrencyDealCourse_RU
          Label               #@GLS114373
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankCurrencyDealCourse_RU
          #TransferCurrency_RU
          #BankClientDocumentTypeId_RU
          #BankSpecAccountId_RU
          #BankCommAccountId_RU
          #BankVendAccountId_RU
          #BankAgreementExt_RU
          #BankRespWorkerId_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankReconcileAtChequeReversal
        PROPERTIES
          Name                #BankReconcileAtChequeReversal
          Label               #@SYS100071
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankReconcileAccountAtPost
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BillOfExchangeDocument
        PROPERTIES
          Name                #BillOfExchangeDocument
          Label               #@SYS79267
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankBillOfExchangeNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BTL91
        PROPERTIES
          Name                #BTL91
          Label               #@SYS75603
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymInstruction1
          #PaymInstruction2
          #PaymInstruction3
          #PaymInstruction4
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BudgetSource
        PROPERTIES
          Name                #BudgetSource
          Label               #@SYS127829
        ENDPROPERTIES
        
        GROUPFIELDS
          #BudgetSourceLedgerEntryUnposted
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CashDiscBaseDate
        PROPERTIES
          Name                #CashDiscBaseDate
          Label               #@SYS61119
        ENDPROPERTIES
        
        GROUPFIELDS
          #CashDiscBaseDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CashDiscount
        PROPERTIES
          Name                #CashDiscount
          Label               #@SYS4376
        ENDPROPERTIES
        
        GROUPFIELDS
          #CashDiscCode
          #DateCashDisc
          #CashDiscAmount
          #CashDiscPercent
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CashReceipts_LV
        PROPERTIES
          Name                #CashReceipts_LV
          Label               #@GLS113242
        ENDPROPERTIES
        
        GROUPFIELDS
          #CashReceiptNum_LV
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CFDI_MX
        PROPERTIES
          Name                #CFDI_MX
          Label               #@SYS4081641
        ENDPROPERTIES
        
        GROUPFIELDS
          #CFDIUUID_MX
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CommissionTrade_RU
        PROPERTIES
          Name                #CommissionTrade_RU
          Label               #@SYP4882468
        ENDPROPERTIES
        
        GROUPFIELDS
          #CommProfileType_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CompanyInformation_IN
        PROPERTIES
          Name                #CompanyInformation_IN
          Label               #@SYS6949
        ENDPROPERTIES
        
        GROUPFIELDS
          #displayAddress_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Correct_RU
        PROPERTIES
          Name                #Correct_RU
          Label               #@SYS13069
        ENDPROPERTIES
        
        GROUPFIELDS
          #Correct_RU
          #CorrectedInvoiceId_RU
          #CorrectedInvoiceDate_RU
          #CorrectionType_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Currency
        PROPERTIES
          Name                #Currency
          Label               #@SYS7572
        ENDPROPERTIES
        
        GROUPFIELDS
          #AmountCurDebit
          #AmountCurCredit
          #CurrencyCode
          #ExchRate
          #ExchRateSecond
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CurrencyShow
        PROPERTIES
          Name                #CurrencyShow
          Label               #@SYS7572
        ENDPROPERTIES
        
        GROUPFIELDS
          #AmountCurDebit
          #AmountCurCredit
          #CurrencyCode
          #Triangulation
          #editExchRate
          #editExchRateSecond
          #AssessableValue_IN
          #MaximumRetailPrice_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomerImportPayments
        PROPERTIES
          Name                #CustomerImportPayments
          Label               #@SYS26610
        ENDPROPERTIES
        
        GROUPFIELDS
          #LoadingDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomsAll_IN
        PROPERTIES
          Name                #CustomsAll_IN
          Label               #@GLS5007
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsTariffDirection_IN
          #CustomsTariffCodeTable_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomsMisc_IN
        PROPERTIES
          Name                #CustomsMisc_IN
          Label               #@GLS5007
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsDuty_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dates
        PROPERTIES
          Name                #Dates
          Label               #@SYS80293
        ENDPROPERTIES
        
        GROUPFIELDS
          #AcknowledgementDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DepositSlip
        PROPERTIES
          Name                #DepositSlip
          Label               #@SYS23659
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankDepositVoucher
          #BankDepositNum
          #BankChequeNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Description
        PROPERTIES
          Name                #Description
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Txt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS342338
        ENDPROPERTIES
        
        GROUPFIELDS
          #DefaultDimension
          #OffsetDefaultDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DiotInformation_MX
        PROPERTIES
          Name                #DiotInformation_MX
          Label               #@SYS312478
        ENDPROPERTIES
        
        GROUPFIELDS
          #OperationType_MX
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Document
        PROPERTIES
          Name                #Document
          Label               #@SYS98369
        ENDPROPERTIES
        
        GROUPFIELDS
          #DocumentNum
          #DocumentDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EUSalesList
        PROPERTIES
          Name                #EUSalesList
          Label               #@SYS11410
        ENDPROPERTIES
        
        GROUPFIELDS
          #EUSalesList
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Excise_IN
        PROPERTIES
          Name                #Excise_IN
          Label               #@GLS5005
        ENDPROPERTIES
        
        GROUPFIELDS
          #ExciseType_IN
          #ExciseTariffCodes_IN
          #ExciseRecordType_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ExciseAll_IN
        PROPERTIES
          Name                #ExciseAll_IN
          Label               #@GLS5005
        ENDPROPERTIES
        
        GROUPFIELDS
          #ExciseRecordType_IN
          #ExciseTariffCodes_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ExportPayments
        PROPERTIES
          Name                #ExportPayments
          Label               #@SYS12612
        ENDPROPERTIES
        
        GROUPFIELDS
          #FileCreated
          #PaymentSequenceNum
          #CustEinvoicePaymDeliveryNum
          #CustEinvoicePaymSectionNum
          #CustEinvoicePaymTransNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ForeignPayments_LT
        PROPERTIES
          Name                #ForeignPayments_LT
          Label               #@GLS113335
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymentPriority_LT
          #ForeignBankFee_LT
          #InformByTelex_LT
          #InformByPhone_LT
          #DebitCurrencyCode_LT
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FurtherPosting
        PROPERTIES
          Name                #FurtherPosting
          Label               #@SYS83891
        ENDPROPERTIES
        
        GROUPFIELDS
          #FurtherPostingType
          #FurtherPostingRecId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #g1099Fields
        PROPERTIES
          Name                #g1099Fields
          Label               #@SYS24226
        ENDPROPERTIES
        
        GROUPFIELDS
          #Tax1099Fields
          #Tax1099Amount
          #Tax1099State
          #Tax1099StateAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #GSTHSTTaxType_CA
        PROPERTIES
          Name                #GSTHSTTaxType_CA
          Label               #@SYS313827
        ENDPROPERTIES
        
        GROUPFIELDS
          #GSTHSTTaxType_CA
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #JournalNum
          #Voucher
          #TransDate
          #LineNum
          #LedgerVoucherType_CN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #IntercompanyAccounting
        PROPERTIES
          Name                #IntercompanyAccounting
          Label               #@SYS3805
        ENDPROPERTIES
        
        GROUPFIELDS
          #ForeignVoucher
          #ForeignCompany
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Intrastat
        PROPERTIES
          Name                #Intrastat
          Label               #@SYS6530
        ENDPROPERTIES
        
        GROUPFIELDS
          #Listcode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Invoice
        PROPERTIES
          Name                #Invoice
          Label               #@SYS12128
        ENDPROPERTIES
        
        GROUPFIELDS
          #Invoice
          #Due
          #Payment
          #PaymId
          #VATNumJournal
          #EnterpriseNumber
          #PurchIdRange
          #ConsignmentNoteNum_IN
          #CFDIUUID_MX
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InvoicePool
        PROPERTIES
          Name                #InvoicePool
          Label               #@SYS58907
        ENDPROPERTIES
        
        GROUPFIELDS
          #PoolRecId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Item
        PROPERTIES
          Name                #Item
          Label               #@SYS14428
        ENDPROPERTIES
        
        GROUPFIELDS
          #LedgerJournalDlvDate_ES
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Markup_RU
        PROPERTIES
          Name                #Markup_RU
          Label               #@SYS116804
        ENDPROPERTIES
        
        GROUPFIELDS
          #MarkupCode_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRBankReconciliation
        PROPERTIES
          Name                #MCRBankReconciliation
          Label               #@SYS24040
        ENDPROPERTIES
        
        GROUPFIELDS
          #MCRCCGeneralLedgerId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRMiscellaneous
        PROPERTIES
          Name                #MCRMiscellaneous
          Label               #@SYS80069
        ENDPROPERTIES
        
        GROUPFIELDS
          #MCRPrintTxtOnCheck
          #CustTransId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Misc
        PROPERTIES
          Name                #Misc
          Label               #@SYS80069
        ENDPROPERTIES
        
        GROUPFIELDS
          #CompanyLocation_IN
          #TaxWithholdAlternateVendorAcct_TH
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NegInst
        PROPERTIES
          Name                #NegInst
          Label               #@SYS71438
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankRemittanceFileId
          #NegInstId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NegotiableInstrument
        PROPERTIES
          Name                #NegotiableInstrument
          Label               #@SYS71438
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustVendNegInstProtestReason
          #Due
          #BankRemittanceType
          #BankAccountId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NotificationToTheCentralBank
        PROPERTIES
          Name                #NotificationToTheCentralBank
          Label               #@SYS67156
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankCentralBankPurposeCode
          #BankCentralBankPurposeText
          #ImportDate
          #BankCentralBankTransTypeCur_RU
          #BankCurrencyTransferLog_RU
          #BankPaymentRegistrationNum_LV
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Officials_RU
        PROPERTIES
          Name                #Officials_RU
          Label               #@GLS102112
        ENDPROPERTIES
        
        GROUPFIELDS
          #OffSessionId_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #OffsetAccount
        PROPERTIES
          Name                #OffsetAccount
          Label               #@SYS11162
        ENDPROPERTIES
        
        GROUPFIELDS
          #OffsetTxt
          #OffsetCompany
          #OffsetAccountType
          #OffsetLedgerDimension
          #OffsetAgreementCompany_RU
          #OffsetAccountAgreementId_RU
          #offsetAccountAgreementDocumentTitle_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #OffsetAccount_W
        PROPERTIES
          Name                #OffsetAccount_W
          Label               #@SYS11162
        ENDPROPERTIES
        
        GROUPFIELDS
          #OffsetCompany
          #OffsetAccountType
          #OffsetTxt
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Payment
        PROPERTIES
          Name                #Payment
          Label               #@SYS828
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymentNotes
          #PaymMode
          #PaymSpec
          #PaymentAccount
          #Prepayment
          #ErrorCodePayment
          #RemitteeCurrency
          #BankNegInstRecipientName
          #PaymPurpose_LT
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Payment_RU
        PROPERTIES
          Name                #Payment_RU
          Label               #@SYS828
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymMode
          #PaymSpec
          #PaymentNotes
          #Prepayment
          #CustFactureAutoCreate_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PaymentOrder_LV
        PROPERTIES
          Name                #PaymentOrder_LV
          Label               #@GLS108610
        ENDPROPERTIES
        
        GROUPFIELDS
          #IntBank_LV
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Periodic
        PROPERTIES
          Name                #Periodic
          Label               #@SYS8782
        ENDPROPERTIES
        
        GROUPFIELDS
          #FreqCode
          #FreqValue
          #LastTransferred
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Posting
        PROPERTIES
          Name                #Posting
          Label               #@SYS12919
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostingProfile
          #Company
          #AccountType
          #LedgerDimension
          #AccountAgreementId_RU
          #accountAgreementDocumentTitle_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Posting_W
        PROPERTIES
          Name                #Posting_W
          Label               #@SYS12919
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostingProfile
          #SettleVoucher
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PostingProfiles_RU
        PROPERTIES
          Name                #PostingProfiles_RU
          Label               #@GLS103572
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostingProfile
          #OffsetPostingProfile_RU
          #SettleVoucher
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PostingRelease
        PROPERTIES
          Name                #PostingRelease
          Label               #@sys114594
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReleaseDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PrintPaymentOrder_RU
        PROPERTIES
          Name                #PrintPaymentOrder_RU
          Label               #@GLS103114
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankPrintAccountNum_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectIdentification
        PROPERTIES
          Name                #ProjectIdentification
          Label               #@SYS89920
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransDate
          #LedgerDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectIdentificationLedger
        PROPERTIES
          Name                #ProjectIdentificationLedger
          Label               #@SYS89920
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransDate
          #LedgerDimension
          #OffsetLedgerDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PromissoryNoteDocument
        PROPERTIES
          Name                #PromissoryNoteDocument
          Label               #@SYS74003
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankPromissoryNoteNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSA
        PROPERTIES
          Name                #PSA
          Label               #@PSA43
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Purch
        PROPERTIES
          Name                #Purch
          Label               #@SYS9283
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchLedgerPosting
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Quantity
        PROPERTIES
          Name                #Quantity
          Label               #@SYS3065
        ENDPROPERTIES
        
        GROUPFIELDS
          #Qty
          #Price
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RCashOrderNotes_RU
        PROPERTIES
          Name                #RCashOrderNotes_RU
          Label               #@GLS100690
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankCentralBankPurposeText
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RCashPayTransType
        PROPERTIES
          Name                #RCashPayTransType
          Label               #@SYS21201
        ENDPROPERTIES
        
        GROUPFIELDS
          #RCashPayTransType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Reason
        PROPERTIES
          Name                #Reason
          Label               #@SYS107174
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReasonRefRecID
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReceiptDate_W
        PROPERTIES
          Name                #ReceiptDate_W
          Label               #@GLS110092
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReceiptDate_W
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Reference_CN
        PROPERTIES
          Name                #Reference_CN
          Label               #@SYS15217
        ENDPROPERTIES
        
        GROUPFIELDS
          #RefCopyReverse_CN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Reference_RU
        PROPERTIES
          Name                #Reference_RU
          Label               #@GLS106473
        ENDPROPERTIES
        
        GROUPFIELDS
          #VATPaymRefRecId_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Remittance
        PROPERTIES
          Name                #Remittance
          Label               #@sys152838
        ENDPROPERTIES
        
        GROUPFIELDS
          #RemittanceAddress
          #RemittanceLocation
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Representative_RU
        PROPERTIES
          Name                #Representative_RU
          Label               #@SYS54387
        ENDPROPERTIES
        
        GROUPFIELDS
          #RCashDocRepresType
          #RCashDocRepresPersonId
          #represPersonNameEdit_W
          #represPersonCardEdit_W
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReversingEntry
        PROPERTIES
          Name                #ReversingEntry
          Label               #@SYS116155
        ENDPROPERTIES
        
        GROUPFIELDS
          #RevRecId
          #ReverseEntry
          #ReverseDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesTax
        PROPERTIES
          Name                #SalesTax
          Label               #@SYS5878
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxCode
          #TaxGroup
          #TaxItemGroup
          #TaxDirectionControl
          #TaxBase_W
          #VatDueDate_W
          #IntraComVATDueDate_W
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesTaxAll_IN
        PROPERTIES
          Name                #SalesTaxAll_IN
          Label               #@GLS5536
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesTaxFormTypes_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ServiceTax_IN
        PROPERTIES
          Name                #ServiceTax_IN
          Label               #@GLS5006
        ENDPROPERTIES
        
        GROUPFIELDS
          #GTAServiceCategory_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Settlement
        PROPERTIES
          Name                #Settlement
          Label               #@SYS10163
        ENDPROPERTIES
        
        GROUPFIELDS
          #SettleVoucher
          #MarkedInvoice
          #MarkedInvoiceRecId
          #MarkedInvoiceCompany
          #MCRPaymOrderID
          #MCRCCGeneralLedgerId
          #MCRRefPaymID
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TAN_IN
        PROPERTIES
          Name                #TAN_IN
          Label               #@SYS33817
        ENDPROPERTIES
        
        GROUPFIELDS
          #NatureOfAssessee_IN
          #SoftwareDeclReceived_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Tax_IN
        PROPERTIES
          Name                #Tax_IN
          Label               #@GLS5290
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsTariffCodeTable_IN
          #ExciseTariffCodes_IN
          #CustomsTariffDirection_IN
          #SalesTaxFormTypes_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TaxSetoffVoucher_IN
        PROPERTIES
          Name                #TaxSetoffVoucher_IN
          Label               #@GLS221798
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxSetoffVoucher_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TaxWithholdCode_IN
        PROPERTIES
          Name                #TaxWithholdCode_IN
          Label               #@GLS222696
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxWithholdCode_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ThirdPartyBank
        PROPERTIES
          Name                #ThirdPartyBank
          Label               #@SYS79534
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustVendBankAccountId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TransactionType
        PROPERTIES
          Name                #TransactionType
          Label               #@SYS21201
        ENDPROPERTIES
        
        GROUPFIELDS
          #Transfer
          #TransactionType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Transfer
        PROPERTIES
          Name                #Transfer
          Label               #@SYS13220
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransferredBy
          #TransferredOn
          #TransferredTo
          #Transferred
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VAT_IN
        PROPERTIES
          Name                #VAT_IN
          Label               #@GLS5004
        ENDPROPERTIES
        
        GROUPFIELDS
          #VATGoodsType_IN
          #NonRecoverablePercent_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VATOnPayment_RU
        PROPERTIES
          Name                #VATOnPayment_RU
          Label               #@GLS106909
        ENDPROPERTIES
        
        GROUPFIELDS
          #VATOnPayment_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VatRegister_PL
        PROPERTIES
          Name                #VatRegister_PL
          Label               #@GLS105955
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustVendAccount_PL
          #Addressing_PL
          #VATNumJournal
          #CustVendName_PL
          #VatDueDate_W
          #IntraComVATDueDate_W
          #TaxPeriodPaymentCode_PL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VATTaxAgent_RU
        PROPERTIES
          Name                #VATTaxAgent_RU
          Label               #@GLS112871
        ENDPROPERTIES
        
        GROUPFIELDS
          #VATTaxAgentVendAccount_RU
          #VATOperationCode_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VATTaxAgentInvoice_RU
        PROPERTIES
          Name                #VATTaxAgentInvoice_RU
          Label               #@GLS112871
        ENDPROPERTIES
        
        GROUPFIELDS
          #VATOperationCode_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VendInvoiceDeclaration
        PROPERTIES
          Name                #VendInvoiceDeclaration
          Label               #@SYS126906
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendInvoiceDeclaration_IS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VendTrans
        PROPERTIES
          Name                #VendTrans
          Label               #@SYS13278
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendTransId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Voucher_CN
        PROPERTIES
          Name                #Voucher_CN
          Label               #@GLS60258
        ENDPROPERTIES
        
        GROUPFIELDS
          #LedgerVoucherType_CN
          #Voucher_CN
          #Attachments_CN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WithHoldingTax
        PROPERTIES
          Name                #WithHoldingTax
          Label               #@SYS7372
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxWithholdCalculate_TH
          #TaxWithholdGroup
          #TaxWithholdItemGroupHeading_TH
          #TDSGroup_IN
          #TCSGroup_IN
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #NumVoucherIdx
      PROPERTIES
        Name                #NumVoucherIdx
        Origin              #{2B0D0001-00D4-1000-F5E8-991A69D97568}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #JournalNum
        #Voucher
        #LineNum
        #AccountType
        #INCLUDEDCOLUMNPRESENT
        #OffsetAccountType
        #INCLUDEDCOLUMNPRESENT
        #OffsetLedgerDimension
        #INCLUDEDCOLUMNPRESENT
        #TransactionType
        #INCLUDEDCOLUMNPRESENT
        #TaxGroup
        #INCLUDEDCOLUMNPRESENT
        #TaxItemGroup
        #INCLUDEDCOLUMNPRESENT
        #TaxCode
        #INCLUDEDCOLUMNPRESENT
      ENDINDEXFIELDS
      
      #FurtherPostingRecIdIdx
      PROPERTIES
        Name                #FurtherPostingRecIdIdx
        Origin              #{2B160002-00D4-1000-6C5D-1256E01949A0}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #FurtherPostingRecId
      ENDINDEXFIELDS
      
      #VoucherTransdate
      PROPERTIES
        Name                #VoucherTransdate
        Origin              #{2B100003-00D4-1000-5C14-F26096F88EC2}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #Voucher
        #TransDate
        #TransactionType
      ENDINDEXFIELDS
      
      #PoolRecId
      PROPERTIES
        Name                #PoolRecId
        Origin              #{2B090005-00D4-1000-DCB5-7E6C52656349}
        LegacyId            #5
      ENDPROPERTIES
      
      INDEXFIELDS
        #PoolRecId
      ENDINDEXFIELDS
      
      #VendTransIdx
      PROPERTIES
        Name                #VendTransIdx
        Origin              #{2B0C0006-00D4-1000-77A9-325EB884616E}
        LegacyId            #6
      ENDPROPERTIES
      
      INDEXFIELDS
        #VendTransId
      ENDINDEXFIELDS
      
      #DimensionAttributeValueSetIdx
      PROPERTIES
        Name                #DimensionAttributeValueSetIdx
        Origin              #{2B1D0009-00D4-1000-C11A-B4957A4B840F}
        LegacyId            #9
      ENDPROPERTIES
      
      INDEXFIELDS
        #DefaultDimension
      ENDINDEXFIELDS
      
      #DimensionAttributeValueSetIdx1
      PROPERTIES
        Name                #DimensionAttributeValueSetIdx1
        Origin              #{2B1E000A-00D4-1000-C11A-B4957A760017}
        LegacyId            #10
      ENDPROPERTIES
      
      INDEXFIELDS
        #OffsetDefaultDimension
      ENDINDEXFIELDS
      
      #DimensionAttributeValueCombinationIdx
      PROPERTIES
        Name                #DimensionAttributeValueCombinationIdx
        Origin              #{2B25000B-00D4-1000-8473-D8B02D64A239}
        LegacyId            #11
      ENDPROPERTIES
      
      INDEXFIELDS
        #LedgerDimension
      ENDINDEXFIELDS
      
      #DimensionAttributeValueCombinationIdx1
      PROPERTIES
        Name                #DimensionAttributeValueCombinationIdx1
        Origin              #{2B26000C-00D4-1000-8473-D8B02D8F1E41}
        LegacyId            #12
      ENDPROPERTIES
      
      INDEXFIELDS
        #OffsetLedgerDimension
      ENDINDEXFIELDS
      
      #PaymInstructionIdx1
      PROPERTIES
        Name                #PaymInstructionIdx1
        Origin              #{2B13004A-00D4-1000-E210-6A692B3F1206}
        LegacyId            #74
      ENDPROPERTIES
      
      INDEXFIELDS
        #PaymInstruction1
      ENDINDEXFIELDS
      
      #PaymInstructionIdx2
      PROPERTIES
        Name                #PaymInstructionIdx2
        Origin              #{2B13004B-00D4-1000-E210-85902B3F1206}
        LegacyId            #75
      ENDPROPERTIES
      
      INDEXFIELDS
        #PaymInstruction2
      ENDINDEXFIELDS
      
      #PaymInstructionIdx3
      PROPERTIES
        Name                #PaymInstructionIdx3
        Origin              #{2B13004C-00D4-1000-E210-A0B72B3F1206}
        LegacyId            #76
      ENDPROPERTIES
      
      INDEXFIELDS
        #PaymInstruction3
      ENDINDEXFIELDS
      
      #PaymInstructionIdx4
      PROPERTIES
        Name                #PaymInstructionIdx4
        Origin              #{2B13004D-00D4-1000-E210-BBDE2B3F1206}
        LegacyId            #77
      ENDPROPERTIES
      
      INDEXFIELDS
        #PaymInstruction4
      ENDINDEXFIELDS
      
      #VendInvoiceDeclaration_ISIdx
      PROPERTIES
        Name                #VendInvoiceDeclaration_ISIdx
        Origin              #{2B1C0052-00D4-1000-30E6-22E19708ED7F}
        LegacyId            #82
      ENDPROPERTIES
      
      INDEXFIELDS
        #VendInvoiceDeclaration_IS
      ENDINDEXFIELDS
      
      #Tax1099FieldsIdx
      PROPERTIES
        Name                #Tax1099FieldsIdx
        Origin              #{2B100053-00D4-1000-6712-5A4CA88CFD3F}
        LegacyId            #83
      ENDPROPERTIES
      
      INDEXFIELDS
        #Tax1099Fields
      ENDINDEXFIELDS
      
      #BudgetSourceIdx
      PROPERTIES
        Name                #BudgetSourceIdx
        ConfigurationKey    #LedgerAdv2BudgetCtrl
        Origin              #{35A5C8FE-8FD5-4A19-9CB6-9058901A5312}
        LegacyId            #87
      ENDPROPERTIES
      
      INDEXFIELDS
        #BudgetSourceLedgerEntryUnposted
      ENDINDEXFIELDS
      
      #ApproverIdx
      PROPERTIES
        Name                #ApproverIdx
        Origin              #{28966E10-7C87-44DA-802B-3CB279DFA64D}
        LegacyId            #207
      ENDPROPERTIES
      
      INDEXFIELDS
        #Approver
      ENDINDEXFIELDS
      
      #LedgerVoucherType_CNIdx
      PROPERTIES
        Name                #LedgerVoucherType_CNIdx
        Origin              #{280A1EB4-4C5B-44C1-B479-94A336A9A106}
        LegacyId            #8012
      ENDPROPERTIES
      
      INDEXFIELDS
        #LedgerVoucherType_CN
      ENDINDEXFIELDS
      
      #BankCurrencyTransferLog_RUIdx
      PROPERTIES
        Name                #BankCurrencyTransferLog_RUIdx
        Origin              #{238735BB-578B-405A-9617-F0E2EBD94030}
        LegacyId            #8027
      ENDPROPERTIES
      
      INDEXFIELDS
        #BankCurrencyTransferLog_RU
      ENDINDEXFIELDS
      
      #AssetToFromRecId_RU
      PROPERTIES
        Name                #AssetToFromRecId_RU
        ConfigurationKey    #RAsset
        Origin              #{2B133E81-00D4-1000-4CBB-84CBBF3F5108}
        LegacyId            #16001
      ENDPROPERTIES
      
      INDEXFIELDS
        #Invisible
      ENDINDEXFIELDS
      
      #MCRInvoice
      PROPERTIES
        Name                #MCRInvoice
        ConfigurationKey    #MCRCallCenter
        Origin              #{F56BBE71-35F3-4C8A-A1A6-D91ABBAA4736}
        LegacyId            #30003
      ENDPROPERTIES
      
      INDEXFIELDS
        #Invoice
      ENDINDEXFIELDS
      
      #RevRecIdIdx
      PROPERTIES
        Name                #RevRecIdIdx
        Origin              #{68F039B6-6BDE-4A0D-B9E7-B1529002EAF7}
      ENDPROPERTIES
      
      INDEXFIELDS
        #RevRecId
        #TransDate
        #INCLUDEDCOLUMNPRESENT
      ENDINDEXFIELDS
      
      #BankRespWorkerId_RUIdx
      PROPERTIES
        Name                #BankRespWorkerId_RUIdx
        Origin              #{FF01266C-BAD8-4467-A135-7B06582C9FCF}
      ENDPROPERTIES
      
      INDEXFIELDS
        #BankRespWorkerId_RU
      ENDINDEXFIELDS
      
      #BankAgreementExt_RUIdx
      PROPERTIES
        Name                #BankAgreementExt_RUIdx
        Origin              #{9FC6E5D1-91FD-4051-9BB7-F5D63FEB3DCB}
      ENDPROPERTIES
      
      INDEXFIELDS
        #BankAgreementExt_RU
      ENDINDEXFIELDS
      
      #OffsetAccountAgreement_RUIdx
      PROPERTIES
        Name                #OffsetAccountAgreement_RUIdx
        Origin              #{A063DA16-1A70-4F9B-8C4D-9D971FBEF2C6}
      ENDPROPERTIES
      
      INDEXFIELDS
        #OffsetAccountAgreementId_RU
      ENDINDEXFIELDS
      
      #AccountAgreement_RUIdx
      PROPERTIES
        Name                #AccountAgreement_RUIdx
        Origin              #{9DE5B5B8-16CD-4141-8E02-BD34903816BD}
      ENDPROPERTIES
      
      INDEXFIELDS
        #AccountAgreementId_RU
      ENDINDEXFIELDS
      
      #PlTaxDueTableIdx
      PROPERTIES
        Name                #PlTaxDueTableIdx
        Origin              #{F5316A67-1CD7-437A-96A3-B398CA54B4EC}
      ENDPROPERTIES
      
      INDEXFIELDS
        #TaxPeriodPaymentCode_PL
      ENDINDEXFIELDS
      
      #MCRPaymOrderID
      PROPERTIES
        Name                #MCRPaymOrderID
        ConfigurationKey    #MCRCallCenter
        Origin              #{2C00C1F4-79A4-4474-BEF1-12FA574F5584}
      ENDPROPERTIES
      
      INDEXFIELDS
        #MCRPaymOrderID
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #AccountAgreementHeaderExt_RU
        PROPERTIES
          Name                #AccountAgreementHeaderExt_RU
          Table               #AgreementHeaderExt_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #AccountAgreementHeaderExt_RU
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AgreementCompany_RU
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountAgreementId_RU
            RelatedField        #AgreementId
            SourceEDT           #AgreementId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Approver_FK
        PROPERTIES
          Name                #Approver_FK
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #HcmWorker
          Role                #Approver_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Approver
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AssetLedger
        PROPERTIES
          Name                #AssetLedger
          Table               #AssetLedger
          EntityRelationshipRole  #@SYS125946
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AssetLedger
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #5
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankAccountTable
        PROPERTIES
          Name                #BankAccountTable
          Table               #BankAccountTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymentAccount
            RelatedField        #AccountID
            SourceEDT           #CompanyBankAccountId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankAccountTable_BankAccountId
        PROPERTIES
          Name                #BankAccountTable_BankAccountId
          Table               #BankAccountTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankAccountTable_BankAccountId
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankAccountId
            RelatedField        #AccountID
            SourceEDT           #CompanyBankAccountId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankAgreementHeaderExt_RU
        PROPERTIES
          Name                #BankAgreementHeaderExt_RU
          Table               #AgreementHeaderExt_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankAgreementHeaderExt_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankAgreementExt_RU
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankCentralBankPurpose
        PROPERTIES
          Name                #BankCentralBankPurpose
          Table               #BankCentralBankPurpose
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankCentralBankPurposeCode
            RelatedField        #Code
            SourceEDT           #BankCentralBankPurposeCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankChequeReversalCust
        PROPERTIES
          Name                #BankChequeReversalCust
          Table               #CustTrans
          Validate            #No
          EntityRelationshipRole  #@SYS125948
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankChequeReversalCust
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankChequeDepositTransRefRecID
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankChequeReversalVend
        PROPERTIES
          Name                #BankChequeReversalVend
          Table               #VendTrans
          Validate            #No
          EntityRelationshipRole  #@SYS125949
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankChequeReversalVend
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankChequeDepositTransRefRecID
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankChequeTable_RU
        PROPERTIES
          Name                #BankChequeTable_RU
          Table               #BankChequeTable
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankChequeTable_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TransDate
            RelatedField        #TransDate
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Voucher
            RelatedField        #Voucher
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankClientDocumentType_RU
        PROPERTIES
          Name                #BankClientDocumentType_RU
          Table               #BankClientDocumentType_RU
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankClientDocumentTypeId_RU
            RelatedField        #TypeId
            SourceEDT           #BankClientDocumentTypeId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankCommAccountId_RU
        PROPERTIES
          Name                #BankCommAccountId_RU
          Table               #BankAccountTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankCommAccountId_RU
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankCommAccountId_RU
            RelatedField        #AccountID
            SourceEDT           #CompanyBankAccountId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankCurrencyTransferLog_RU
        PROPERTIES
          Name                #BankCurrencyTransferLog_RU
          Table               #BankCurrencyTransferLog_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankCurrencyTransferLog_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankCurrencyTransferLog_RU
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankDepositCancel
        PROPERTIES
          Name                #BankDepositCancel
          Table               #BankDeposit
          Validate            #No
          EntityRelationshipRole  #@SYS125950
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankDepositCancel
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankChequeDepositTransRefRecID
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankPaymentOrderJour_RU
        PROPERTIES
          Name                #BankPaymentOrderJour_RU
          Table               #BankPaymentOrderJour_RU
          Validate            #No
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankPaymentOrderJour
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TransDate
            RelatedField        #JournalTransDate
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #LineNum
            RelatedField        #JournalLineNum
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountType
            RelatedField        #LedgerACType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #JournalNum
            RelatedField        #JournalNum
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Voucher
            RelatedField        #Voucher
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankPromissoryNoteTable
        PROPERTIES
          Name                #BankPromissoryNoteTable
          Table               #BankPromissoryNoteTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankPromissoryNoteTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankPromissoryNoteNum
            RelatedField        #PromissoryNoteNum
            SourceEDT           #BankPromissoryNoteNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankRemittanceFilesCust
        PROPERTIES
          Name                #BankRemittanceFilesCust
          Table               #BankRemittanceFilesCust
          EntityRelationshipRole  #@SYS125951
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankRemittanceFilesCust
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankRemittanceFileId
            RelatedField        #FileId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankRemittanceFilesVend
        PROPERTIES
          Name                #BankRemittanceFilesVend
          Table               #BankRemittanceFilesVend
          EntityRelationshipRole  #@SYS125952
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankRemittanceFilesVend
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankRemittanceFileId
            RelatedField        #FileId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankRespWorker_RU
        PROPERTIES
          Name                #BankRespWorker_RU
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BankRespWorker_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankRespWorkerId_RU
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankSpecAccountId_RU
        PROPERTIES
          Name                #BankSpecAccountId_RU
          Table               #BankAccountTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankSpecAccountId_RU
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankSpecAccountId_RU
            RelatedField        #AccountID
            SourceEDT           #CompanyBankAccountId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankTransType
        PROPERTIES
          Name                #BankTransType
          Table               #BankTransType
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankTransType
            RelatedField        #BankTransType
            SourceEDT           #BankTransactionType
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankVendAccountId_RU
        PROPERTIES
          Name                #BankVendAccountId_RU
          Table               #VendTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankVendAccountId_RU
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankVendAccountId_RU
            RelatedField        #AccountNum
            SourceEDT           #VendAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BudgetSource
        PROPERTIES
          Name                #BudgetSource
          Table               #BudgetSource
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BudgetSource
          Role                #BudgetSource_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BudgetSourceLedgerEntryUnposted
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CashDisc
        PROPERTIES
          Name                #CashDisc
          Table               #CashDisc
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CashDiscCode
            RelatedField        #CashDiscCode
            SourceEDT           #CashDiscCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CompanyLocation_IN
        PROPERTIES
          Name                #CompanyLocation_IN
          Table               #LogisticsLocation
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LogisticsLocation
          Role                #LogisticsLocation_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CompanyLocation_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Currency
        PROPERTIES
          Name                #Currency
          Table               #Currency
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #CurrencyCode
          Role                #TransactionCurrency
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CurrencyCode
            RelatedField        #CurrencyCode
            SourceEDT           #CurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Currency_RemitteeCurrency
        PROPERTIES
          Name                #Currency_RemitteeCurrency
          Table               #Currency
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #Currency_RemitteeCurrency
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #RemitteeCurrency
            RelatedField        #CurrencyCode
            SourceEDT           #CurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustBankAccount_FK
        PROPERTIES
          Name                #CustBankAccount_FK
          Table               #CustBankAccount
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustBankAccount_FK
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CustBankAccount
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustEPRemitInfo_BR
        PROPERTIES
          Name                #CustEPRemitInfo_BR
          Table               #CustEPRemitInfo_BR
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #LedgerJournalTrans
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustomsTariffCodeTable_IN
        PROPERTIES
          Name                #CustomsTariffCodeTable_IN
          Table               #CustomsTariffCodeTable_IN
          EntityRelationshipRole  #@GLS5192
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustomsTariffCodeTable_IN
          Role                #CustomsTariffCodeTable_IN_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustomsTariffCodeTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPaymMode
        PROPERTIES
          Name                #CustPaymMode
          Table               #CustPaymModeTable
          EntityRelationshipRole  #@SYS125953
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustPaymMode
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPaymModeSpec
        PROPERTIES
          Name                #CustPaymModeSpec
          Table               #CustPaymModeSpec
          EntityRelationshipRole  #@SYS125954
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustPaymModeSpec
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymSpec
            RelatedField        #Specification
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPostingProfile
        PROPERTIES
          Name                #CustPostingProfile
          Table               #CustLedger
          EntityRelationshipRole  #@SYS125955
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustPostingProfile
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTable_RU
        PROPERTIES
          Name                #CustTable_RU
          Table               #CustTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustTable_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankPrintAccountNum_RU
            RelatedField        #AccountNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTable_W
        PROPERTIES
          Name                #CustTable_W
          Table               #CustTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustTable_W
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #AccountNum
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
            Value               #3
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTrans
        PROPERTIES
          Name                #CustTrans
          Table               #CustTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustTransId
            RelatedField        #RecId
            SourceEDT           #CustTransRefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTransCashDisc
        PROPERTIES
          Name                #CustTransCashDisc
          Table               #CustTransCashDisc
          Validate            #No
          EntityRelationshipRole  #@SYS125957
          RelationshipType    #Link
          RelatedTableRole    #CustTransCashDisc
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTransOpen
        PROPERTIES
          Name                #CustTransOpen
          Table               #CustTransOpen
          EntityRelationshipRole  #@SYS125958
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustTransOpen
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkedInvoiceCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkedInvoiceRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_AgreementCompany
        PROPERTIES
          Name                #DataArea_AgreementCompany
          Table               #DataArea
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #RContractCompanyCredit
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AgreementCompany_RU
            RelatedField        #id
            SourceEDT           #AgreementCompany_RU
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #AgreementCompany_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_Company
        PROPERTIES
          Name                #DataArea_Company
          Table               #DataArea
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #DataArea_Company
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #id
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_ForeignCompany
        PROPERTIES
          Name                #DataArea_ForeignCompany
          Table               #DataArea
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #DataArea_ForeignCompany
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ForeignCompany
            RelatedField        #id
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_MarkedInvoiceCompany
        PROPERTIES
          Name                #DataArea_MarkedInvoiceCompany
          Table               #DataArea
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #DataArea_MarkedInvoiceCompany
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkedInvoiceCompany
            RelatedField        #id
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_OffsetAgreementCompany
        PROPERTIES
          Name                #DataArea_OffsetAgreementCompany
          Table               #DataArea
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #RContractCompanyDebit
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #OffsetAgreementCompany_RU
            RelatedField        #id
            SourceEDT           #AgreementCompany_RU
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #AgreementCompany_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DataArea_OffsetCompany
        PROPERTIES
          Name                #DataArea_OffsetCompany
          Table               #DataArea
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #DataArea_OffsetCompany
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #id
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
            SourceEDT           #SelectableDataArea
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DebitCurrencyCode_LT
        PROPERTIES
          Name                #DebitCurrencyCode_LT
          Table               #Currency
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DebitCurrencyCode_LT
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #DebitCurrencyCode_LT
            RelatedField        #CurrencyCode
            SourceEDT           #LtDebitCurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DefaultDimension
        PROPERTIES
          Name                #DefaultDimension
          Table               #DimensionAttributeValueSet
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DefaultDimension
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DefaultDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #EmplPostingProfile_RU
        PROPERTIES
          Name                #EmplPostingProfile_RU
          Table               #EmplLedger_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #EmplPostingProfile_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #13
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ExciseTariffCodes_IN
        PROPERTIES
          Name                #ExciseTariffCodes_IN
          Table               #ExciseTariffCodes_IN
          EntityRelationshipRole  #@GLS5235
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ExciseTariffCodes_IN
          Role                #ExciseTariffCodes_IN_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ExciseTariffCodes_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntBank_LV
        PROPERTIES
          Name                #IntBank_LV
          Table               #BankAccountTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankAccountTable_LV
          Role                #IntBank_LV
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #IntBank_LV
            RelatedField        #AccountID
            SourceEDT           #CompanyBankAccountId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InvoiceDeclarationId_FK
        PROPERTIES
          Name                #InvoiceDeclarationId_FK
          Table               #VendInvoiceDeclaration_IS
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DeclarationUsedForInvoicing
          Role                #JournalLines
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #VendInvoiceDeclaration_IS
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerDimension
        PROPERTIES
          Name                #LedgerDimension
          Table               #DimensionAttributeValueCombination
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LedgerDimension
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #LedgerDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTable
        PROPERTIES
          Name                #LedgerJournalTable
          Table               #LedgerJournalTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #JournalNum
            RelatedField        #JournalNum
            SourceEDT           #LedgerJournalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTable_TransferredTo
        PROPERTIES
          Name                #LedgerJournalTable_TransferredTo
          Table               #LedgerJournalTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #LedgerJournalTable_TransferredTo
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TransferredTo
            RelatedField        #JournalNum
            SourceEDT           #LedgerJournalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTrans
        PROPERTIES
          Name                #LedgerJournalTrans
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PoolRecId
            RelatedField        #RecId
            SourceEDT           #LedgerJournalTransRefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTrans_FurtherPostingRecId
        PROPERTIES
          Name                #LedgerJournalTrans_FurtherPostingRecId
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #LedgerJournalTrans_FurtherPostingRecId
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #FurtherPostingRecId
            RelatedField        #RecId
            SourceEDT           #LedgerJournalTransRefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTrans_RevRecId
        PROPERTIES
          Name                #LedgerJournalTrans_RevRecId
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #LedgerJournalTrans_RevRecId
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #RevRecId
            RelatedField        #RecId
            SourceEDT           #LedgerJournalTransRefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTransVATPaym_RU
        PROPERTIES
          Name                #LedgerJournalTransVATPaym_RU
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          RelatedTableRole    #LedgerJournalTransVATPaym_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #VATPaymRefRecId_RU
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTransVoucherTemplate
        PROPERTIES
          Name                #LedgerJournalTransVoucherTemplate
          Table               #LedgerJournalTransVoucherTemplate
          Validate            #No
          EntityRelationshipRole  #@SYS125964
          RelationshipType    #Link
          RelatedTableRole    #LedgerJournalTransVoucherTemplate
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #JournalNum
            RelatedField        #JournalNum
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Voucher
            RelatedField        #Voucher
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTxt
        PROPERTIES
          Name                #LedgerJournalTxt
          Table               #LedgerJournalTxt
          EntityRelationshipRole  #@SYS124924
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LedgerJournalTxt
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Txt
            RelatedField        #Txt
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerJournalTxtOffset
        PROPERTIES
          Name                #LedgerJournalTxtOffset
          Table               #LedgerJournalTxt
          EntityRelationshipRole  #@SYS125965
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LedgerJournalTxtOffset
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetTxt
            RelatedField        #Txt
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerPaymMode
        PROPERTIES
          Name                #LedgerPaymMode
          Table               #VendPaymModeTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #VendPaymMode
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #2
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LedgerVoucherType_CN
        PROPERTIES
          Name                #LedgerVoucherType_CN
          Table               #LedgerVoucherType_CN
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LedgerVoucherType_CN
          Role                #LedgerVoucherType_CN_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #LedgerVoucherType_CN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LvOtherClients
        PROPERTIES
          Name                #LvOtherClients
          Table               #LvOtherClients
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #ClientId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MCRCCGeneralLegerId
        PROPERTIES
          Name                #MCRCCGeneralLegerId
          Table               #LedgerJournalTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #MCRCCGeneralLedgerId
          Role                #LedgerJournalTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #MCRCCGeneralLedgerId
            RelatedField        #JournalNum
            SourceEDT           #LedgerJournalId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MCRCustPaymTable
        PROPERTIES
          Name                #MCRCustPaymTable
          Table               #MCRCustPaymTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MCRRefPaymID
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OfficialsTrans_RU
        PROPERTIES
          Name                #OfficialsTrans_RU
          Table               #OfficialsTrans_RU
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Link
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffSessionId_RU
            RelatedField        #OffSessionId
            SourceEDT           #OffSessionId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetAccountAgreementHeaderExt_RU
        PROPERTIES
          Name                #OffsetAccountAgreementHeaderExt_RU
          Table               #AgreementHeaderExt_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #OffsetAccountAgreementHeaderExt_RU
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetAgreementCompany_RU
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetAccountAgreementId_RU
            RelatedField        #AgreementId
            SourceEDT           #AgreementId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetDefaultDimension
        PROPERTIES
          Name                #OffsetDefaultDimension
          Table               #DimensionAttributeValueSet
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetDefaultDimension
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #OffsetDefaultDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetLedgerDimension
        PROPERTIES
          Name                #OffsetLedgerDimension
          Table               #DimensionAttributeValueCombination
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetLedgerDimension
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #OffsetLedgerDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetPostingProfileCust_RU
        PROPERTIES
          Name                #OffsetPostingProfileCust_RU
          Table               #CustLedger
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetPostingProfileCust_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetPostingProfile_RU
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetPostingProfileEmpl_RU
        PROPERTIES
          Name                #OffsetPostingProfileEmpl_RU
          Table               #EmplLedger_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetPostingProfileEmpl_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #13
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetPostingProfile_RU
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetPostingProfileRCash
        PROPERTIES
          Name                #OffsetPostingProfileRCash
          Table               #RCashLedger
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetPostingProfileRCash
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #15
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetPostingProfile_RU
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetPostingProfileVend_RU
        PROPERTIES
          Name                #OffsetPostingProfileVend_RU
          Table               #VendLedger
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetPostingProfileVend_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetPostingProfile_RU
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetRCashDocRepresBankEmplId
        PROPERTIES
          Name                #OffsetRCashDocRepresBankEmplId
          Table               #EmployeeTable_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #OffsetRCashDocRepresBankEmplId
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #6
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #EmployeeId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetRCashDocRepresCustPersonId
        PROPERTIES
          Name                #OffsetRCashDocRepresCustPersonId
          Table               #ContactPerson
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetRCashDocRepresCustPersonId
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #ContactPersonId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #1
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetRCashDocRepresEmplId
        PROPERTIES
          Name                #OffsetRCashDocRepresEmplId
          Table               #EmployeeTable_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetRCashDocRepresEmplId
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #EmployeeTable_RU
            RelatedField        #AdvHolder
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #13
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #EmployeeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetRCashDocRepresLedgerEmplId
        PROPERTIES
          Name                #OffsetRCashDocRepresLedgerEmplId
          Table               #EmployeeTable_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetRCashDocRepresLedgerEmplId
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #EmployeeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OffsetRCashDocRepresVendPersonId
        PROPERTIES
          Name                #OffsetRCashDocRepresVendPersonId
          Table               #ContactPerson
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OffsetRCashDocRepresVendPersonId
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetCompany
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #ContactPersonId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymInstruction1
        PROPERTIES
          Name                #PaymInstruction1
          Table               #PaymInstruction
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PaymInstruction1
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymInstruction1
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymInstruction2
        PROPERTIES
          Name                #PaymInstruction2
          Table               #PaymInstruction
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PaymInstruction2
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymInstruction2
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymInstruction3
        PROPERTIES
          Name                #PaymInstruction3
          Table               #PaymInstruction
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PaymInstruction3
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymInstruction3
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymInstruction4
        PROPERTIES
          Name                #PaymInstruction4
          Table               #PaymInstruction
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PaymInstruction4
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymInstruction4
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymTerm
        PROPERTIES
          Name                #PaymTerm
          Table               #PaymTerm
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Payment
            RelatedField        #PaymTermId
            SourceEDT           #PaymTermId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PlCustVendVatRegNums
        PROPERTIES
          Name                #PlCustVendVatRegNums
          Table               #PlCustVendVatRegNums
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PlCustVendVatRegNums
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CustVendAccount_PL
            RelatedField        #CustVendAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PlTaxDueTable
        PROPERTIES
          Name                #PlTaxDueTable
          Table               #PlTaxDueTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PlTaxDueTable
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxPeriodPaymentCode_PL
            RelatedField        #TaxPeriodPaymentCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PostingProfileRCash
        PROPERTIES
          Name                #PostingProfileRCash
          Table               #RCashLedger
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PostingProfileRCash
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #15
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjJournalTxt
        PROPERTIES
          Name                #ProjJournalTxt
          Table               #ProjJournalTxt
          EntityRelationshipRole  #@SYS125968
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ProjJournalTxt
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #3
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Txt
            RelatedField        #Txt
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjJournalTxtOffset
        PROPERTIES
          Name                #ProjJournalTxtOffset
          Table               #ProjJournalTxt
          EntityRelationshipRole  #@SYS125969
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ProjJournalTxtOffset
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #3
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OffsetTxt
            RelatedField        #Txt
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReasonRef
        PROPERTIES
          Name                #ReasonRef
          Table               #ReasonTableRef
          Validate            #No
          EntityRelationshipRole  #@SYS125970
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ReasonRef
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ReasonRefRecID
            RelatedField        #RecId
            SourceEDT           #ReasonRefRecID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #RefCopyReverse_CN
        PROPERTIES
          Name                #RefCopyReverse_CN
          Table               #LedgerJournalTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #RefCopyReverse_CN
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RefCopyReverse_CN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #RemittanceAddress_FK
        PROPERTIES
          Name                #RemittanceAddress_FK
          Table               #LogisticsPostalAddress
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #RemittanceAddress_FK
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #RemittanceAddress
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #RemittanceLocation_FK
        PROPERTIES
          Name                #RemittanceLocation_FK
          Table               #LogisticsLocation
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #RemittanceLocation_FK
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #RemittanceLocation
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesTaxFormTypes_IN
        PROPERTIES
          Name                #SalesTaxFormTypes_IN
          Table               #SalesTaxFormTypes_IN
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #SalesTaxFormTypes_IN
          Role                #SalesTaxFormTypes_IN_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SalesTaxFormTypes_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ServiceCodeTable_IN
        PROPERTIES
          Name                #ServiceCodeTable_IN
          Table               #ServiceCodeTable_IN
          EntityRelationshipRole  #@GLS5076
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ServiceCodeTable_IN
          Role                #ServiceCodeTable_IN_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ServiceCodeTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TAMDeduction
        PROPERTIES
          Name                #TAMDeduction
          Table               #TAMDeduction
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #LedgerJournalTransRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Tax1099BoxDetail
        PROPERTIES
          Name                #Tax1099BoxDetail
          Table               #Tax1099BoxDetail
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          RelatedTableRole    #Tax1099BoxDetail
          Role                #Tax1099BoxDetail_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Tax1099RecId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Tax1099Fields
        PROPERTIES
          Name                #Tax1099Fields
          Table               #Tax1099Fields
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #Tax1099Fields
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Tax1099Fields
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Tax1099State
        PROPERTIES
          Name                #Tax1099State
          Table               #LogisticsAddressState
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #Tax1099State
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Tax1099State
            RelatedField        #StateId
            SourceEDT           #Tax1099State
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxGroup
        PROPERTIES
          Name                #TaxGroup
          Table               #TaxGroupHeading
          EntityRelationshipRole  #@SYS123571
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxGroup
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxGroup
            RelatedField        #TaxGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxItemGroup
        PROPERTIES
          Name                #TaxItemGroup
          Table               #TaxItemGroupHeading
          EntityRelationshipRole  #@SYS125972
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxItemGroup
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxItemGroup
            RelatedField        #TaxItemGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxServiceTariff
        PROPERTIES
          Name                #TaxServiceTariff
          Table               #TaxServiceTariff
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #TaxServiceTariff
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #ParentRecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #ParentTableId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxTable
        PROPERTIES
          Name                #TaxTable
          Table               #TaxTable
          EntityRelationshipRole  #@SYS125973
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxTable
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxCode
            RelatedField        #TaxCode
            SourceEDT           #TaxCode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdAltVendorAccount
        PROPERTIES
          Name                #TaxWithholdAltVendorAccount
          Table               #VendTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdAltVendorAccount
          Role                #TaxWithholdAltVendorAccount
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxWithholdAlternateVendorAcct_TH
            RelatedField        #AccountNum
            SourceEDT           #TaxWithholdAlternateVendorAcct_TH
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdGroupHeading
        PROPERTIES
          Name                #TaxWithholdGroupHeading
          Table               #TaxWithholdGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxWithholdGroup
            RelatedField        #TaxWithholdGroup
            SourceEDT           #TaxWithholdGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdGroupHeadingTCS_IN
        PROPERTIES
          Name                #TaxWithholdGroupHeadingTCS_IN
          Table               #TaxWithholdGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdGroupHeading_2
          Role                #TaxWithholdGroupHeading_2_LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TCSGroup_IN
            RelatedField        #TaxWithholdGroup
            SourceEDT           #TaxWithholdGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdGroupHeadingTDS_IN
        PROPERTIES
          Name                #TaxWithholdGroupHeadingTDS_IN
          Table               #TaxWithholdGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdGroupHeading_1
          Role                #TaxWithholdGroupHeading_1_LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TDSGroup_IN
            RelatedField        #TaxWithholdGroup
            SourceEDT           #TaxWithholdGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdItemGroupHeading_TH
        PROPERTIES
          Name                #TaxWithholdItemGroupHeading_TH
          Table               #TaxWithholdItemGroupHeading_TH
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdItemGroupHeading_TH
          Role                #TaxWithholdItemGroupHeading_TH_LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxWithholdItemGroupHeading_TH
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdTable_IN
        PROPERTIES
          Name                #TaxWithholdTable_IN
          Table               #TaxWithholdTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxWithholdCode_IN
            RelatedField        #TaxWithholdCode
            SourceEDT           #TaxWithholdCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TransferCurrency_RU
        PROPERTIES
          Name                #TransferCurrency_RU
          Table               #Currency
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #TransferCurrency_RU
          Role                #LedgerJournalTrans
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TransferCurrency_RU
            RelatedField        #CurrencyCode
            SourceEDT           #CurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #UserInfo
        PROPERTIES
          Name                #UserInfo
          Table               #UserInfo
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TransferredBy
            RelatedField        #id
            SourceEDT           #UserId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VATOperationCodeTable_RU
        PROPERTIES
          Name                #VATOperationCodeTable_RU
          Table               #VATOperationCodeTable_RU
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #VATOperationCode_RU
            RelatedField        #OperationCode
            SourceEDT           #VATOperationCode_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VATTaxAgentVendAccount_RU
        PROPERTIES
          Name                #VATTaxAgentVendAccount_RU
          Table               #VendTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #VATTaxAgentVendAccount_RU
            RelatedField        #AccountNum
            SourceEDT           #VATTaxAgentVendAccount_RU
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #VendTable
            RelatedField        #VATTaxAgent_RU
            SourceEDT           #VATTaxAgentVendAccount_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendBankAccount_FK
        PROPERTIES
          Name                #VendBankAccount_FK
          Table               #VendBankAccount
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendBankAccount_FK
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #VendBankAccount
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendEPRemitInfo_BR
        PROPERTIES
          Name                #VendEPRemitInfo_BR
          Table               #VendEPRemitInfo_BR
          Validate            #No
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #LedgerJournalTrans
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPaymentMode
        PROPERTIES
          Name                #VendPaymentMode
          Table               #VendPaymModeTable
          EntityRelationshipRole  #@SYS125974
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPaymentMode
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPaymentModeCostJournal
        PROPERTIES
          Name                #VendPaymentModeCostJournal
          Table               #VendPaymModeTable
          EntityRelationshipRole  #@SYS125975
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPaymentModeCostJournal
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #3
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPaymentModeSpec
        PROPERTIES
          Name                #VendPaymentModeSpec
          Table               #VendPaymModeSpec
          EntityRelationshipRole  #@SYS125976
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPaymentModeSpec
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymSpec
            RelatedField        #Specification
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPaymentModeSpecCostJournal
        PROPERTIES
          Name                #VendPaymentModeSpecCostJournal
          Table               #VendPaymModeSpec
          EntityRelationshipRole  #@SYS125977
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPaymentModeSpecCostJournal
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #3
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymSpec
            RelatedField        #Specification
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPostingProfile
        PROPERTIES
          Name                #VendPostingProfile
          Table               #VendLedger
          EntityRelationshipRole  #@SYS125978
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPostingProfile
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPostingProfileCostJournal
        PROPERTIES
          Name                #VendPostingProfileCostJournal
          Table               #VendLedger
          EntityRelationshipRole  #@SYS125979
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendPostingProfileCostJournal
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #3
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #OffsetAccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendTable_RU
        PROPERTIES
          Name                #VendTable_RU
          Table               #VendTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendTable_RU
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #Company
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #AccountType
            Value               #2
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankPrintAccountNum_RU
            RelatedField        #AccountNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendTable_W
        PROPERTIES
          Name                #VendTable_W
          Table               #VendTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #VendTable_W
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RCashDocRepresPersonId
            RelatedField        #AccountNum
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #LedgerJournalTrans
            Field               #RCashDocRepresType
            Value               #2
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendTrans
        PROPERTIES
          Name                #VendTrans
          Table               #VendTrans
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #VendTransId
            RelatedField        #RecId
            SourceEDT           #VendTransRefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendTransCashDisc
        PROPERTIES
          Name                #VendTransCashDisc
          Table               #VendTransCashDisc
          Validate            #No
          EntityRelationshipRole  #@SYS125981
          RelationshipType    #Link
          RelatedTableRole    #VendTransCashDisc
          Role                #LedgerJournalTrans
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #MCRCustPaymTable(LedgerJournalTrans)
      PROPERTIES
        Table               #MCRCustPaymTable
        DeleteAction        #Cascade + Restricted
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #FBLedgerJournalTrans_FiscalBooks_BR(LedgerJournalTrans)
      PROPERTIES
        Table               #FBLedgerJournalTrans_FiscalBooks_BR
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #TAMDeductionUpdateHistory(LedgerJournalTrans)
      PROPERTIES
        Table               #TAMDeductionUpdateHistory
        DeleteAction        #Restricted
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #TAMDeduction(LedgerJournalTransRecId)
      PROPERTIES
        Table               #TAMDeduction
        DeleteAction        #Restricted
        Relation            #LedgerJournalTransRecId
      ENDPROPERTIES
      
      #TAMDeduction(LedgerJournalTrans)
      PROPERTIES
        Table               #TAMDeduction
        DeleteAction        #Restricted
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #MCRCustCreditTable(LedgerJournalTrans)
      PROPERTIES
        Table               #MCRCustCreditTable
        DeleteAction        #Restricted
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #MCRBrokerClaim(LedgerJournalTrans)
      PROPERTIES
        Table               #MCRBrokerClaim
        DeleteAction        #Restricted
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #RCashDestinationTrans
      PROPERTIES
        Table               #RCashDestinationTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #RAssetPurchTrans
      PROPERTIES
        Table               #RAssetPurchTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PaymentOrderBudgetTrans_RU
      PROPERTIES
        Table               #PaymentOrderBudgetTrans_RU
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerJournalTrans_RDeferrals
      PROPERTIES
        Table               #LedgerJournalTrans_RDeferrals
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerJournalTrans_RCash
      PROPERTIES
        Table               #LedgerJournalTrans_RCash
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerJournalTrans_RAsset(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTrans_RAsset
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #CashDueAnnouncementJournal_RU
      PROPERTIES
        Table               #CashDueAnnouncementJournal_RU
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CzCustAdvanceInvoiceLink(LedgerJournalTrans)
      PROPERTIES
        Table               #CzCustAdvanceInvoiceLink
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #CzVendAdvanceInvoiceLink(LedgerJournalTrans)
      PROPERTIES
        Table               #CzVendAdvanceInvoiceLink
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransPayment_BR
      PROPERTIES
        Table               #LedgerJournalTransPayment_BR
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerJournalTransPayment_LV
      PROPERTIES
        Table               #LedgerJournalTransPayment_LV
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #TaxServiceTariff(LedgerJournalTrans)
      PROPERTIES
        Table               #TaxServiceTariff
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #CustEPRemitInfo_BR(LedgerJournalTrans)
      PROPERTIES
        Table               #CustEPRemitInfo_BR
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #VendEPRemitInfo_BR(LedgerJournalTrans)
      PROPERTIES
        Table               #VendEPRemitInfo_BR
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransSymbol(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTransSymbol
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransTaxExtensionIN(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTransTaxExtensionIN
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransPaymTransCode(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTransPaymTransCode
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTrans_Asset
      PROPERTIES
        Table               #LedgerJournalTrans_Asset
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerJournalTrans_Project(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTrans_Project
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransExtensionTH(LedgerJournalTrans)
      PROPERTIES
        Table               #LedgerJournalTransExtensionTH
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #PlSADFinanceLedgerJournalRef
      PROPERTIES
        Table               #PlSADFinanceLedgerJournalRef
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #AssetBookTableDerivedJournal
      PROPERTIES
        Table               #AssetBookTableDerivedJournal
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #AssetDepBookTableDerivedJour
      PROPERTIES
        Table               #AssetDepBookTableDerivedJour
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustEgiroSegmentTrans
      PROPERTIES
        Table               #CustEgiroSegmentTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustTransCashDisc
      PROPERTIES
        Table               #CustTransCashDisc
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendCreditInvoicingTable
      PROPERTIES
        Table               #CustVendCreditInvoicingTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendNACHAIATInfoTable_US
      PROPERTIES
        Table               #CustVendNACHAIATInfoTable_US
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendPaymJournalFee
      PROPERTIES
        Table               #CustVendPaymJournalFee
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendPDCRegister
      PROPERTIES
        Table               #CustVendPDCRegister
      ENDPROPERTIES
      
      #DIOTAddlInfoForNoVendorLedger_MX(LedgerJournalTrans)
      PROPERTIES
        Table               #DIOTAddlInfoForNoVendorLedger_MX
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #EMSInvoiceRegisterFlowRelation(LedgerJournalTrans)
      PROPERTIES
        Table               #EMSInvoiceRegisterFlowRelation
        DeleteAction        #Cascade
        Relation            #LedgerJournalTrans
      ENDPROPERTIES
      
      #LedgerJournalTransBankLC
      PROPERTIES
        Table               #LedgerJournalTransBankLC
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #accountAgreementDocumentTitle_RU
        #/// <summary>
        #///     Displays document title of the current <c>LedgerJournalTrans</c> agreement.
        #/// </summary>
        #/// <returns>
        #///     The agreement document title.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute]
        #public display AgreementDocumentTitle accountAgreementDocumentTitle_RU()
        #{
        #    CompanyId company;
        #
        #    company = this.AgreementCompany_RU ?
        #                this.AgreementCompany_RU :
        #                curext();
        #
        #    if (xDataArea::exist(company))
        #    {
        #        changecompany(company)
        #        {
        #            return AgreementHeader::find(
        #                AgreementHeaderExt_RU::findByAgreementId(this.AccountAgreementId_RU).AgreementHeader).DocumentTitle;
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #accountDisplay
        #//BP Deviation Documented
        #display CustVendAC accountDisplay()
        #{
        #    return this.parmAccount();
        #}
      ENDSOURCE
      SOURCE #accountName
        #//BP Deviation Documented
        #display LedgerJournalAccountName accountName()
        #{
        #    if (this.LedgerDimension)
        #    {
        #        if (!this.Company)
        #        {
        #            return this.accountNameFind(this.AccountType, this.LedgerDimension, curext());
        #        }
        #        else
        #        {
        #            return this.accountNameFind(this.AccountType, this.LedgerDimension, this.Company);
        #        }
        #    }
        #
        #    return "";
        #}
      ENDSOURCE
      SOURCE #accountNameFind
        #public LedgerJournalAccountName accountNameFind(
        #    LedgerJournalACType     _accountType,
        #    DimensionDynamicAccount _dimensionDynamicAccount,
        #    SelectableDataArea      _company)
        #{
        #    if (xDataArea::exist(_company))
        #    {
        #        changecompany(_company)
        #        {
        #            switch(_accountType)
        #            {
        #                case LedgerJournalACType::Ledger :
        #                    return DimensionStorage::getMainAccountFromLedgerDimension(_dimensionDynamicAccount).localizedName();
        #                case LedgerJournalACType::Cust :
        #                    return CustTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).name();
        #                case LedgerJournalACType::Vend :
        #                    return VendTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).name();
        #                case LedgerJournalACType::Bank :
        #                    return BankAccountTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #                case LedgerJournalACType::Project :
        #                    return ProjTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #                case LedgerJournalACType::FixedAssets :
        #                    return AssetTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #                case LedgerJournalACType::FixedAssets_RU :
        #                    return RAssetTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #                case LedgerJournalACType::Employee_RU :
        #                    return EmployeeTable_RU::findByEmployeeId(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).employeeName();
        #                case LedgerJournalACType::RDeferrals :
        #                    return RDeferralsTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #                case LedgerJournalACType::RCash :
        #                    return RCashTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).Name;
        #            }
        #        }
        #    }
        #    return "";
        #}
      ENDSOURCE
      SOURCE #affectsOtherWithholdCalcs_BR
        #public boolean affectsOtherWithholdCalcs_BR()
        #{
        #    RecId               minId;
        #    RecId               maxId;
        #    date                periodEnd;
        #    date                periodStart;
        #    TaxWithholdTrans    taxCodes;
        #    TaxWithholdTrans    withhold;
        #    DirPartyNumber      partyId;
        #
        #    select firstonly crosscompany RecId, PartyId_BR
        #        from    withhold
        #        where   withhold.LedgerJourTransRecId_BR  == this.RecId
        #            &&  withhold.TaxWithholdBaseAmount != 0;
        #
        #    if (!withhold.RecId)
        #    {
        #        return false;
        #    }
        #
        #    partyId = withhold.PartyId_BR;
        #
        #    select crosscompany minof(RecId)
        #        from withhold where withhold.LedgerJourTransRecId_BR  == this.RecId;
        #    minId = withhold.RecId;
        #
        #    periodStart = Global::dateStartMth(this.TransDate);
        #    periodEnd   = Global::dateEndMth(periodStart);
        #
        #    while select crosscompany TaxWithholdCode
        #        from     taxCodes
        #        group by TaxWithholdCode
        #        where    taxCodes.LedgerJourTransRecId_BR  == this.RecId
        #            &&   taxCodes.TaxWithholdBaseAmount != 0
        #    {
        #        select firstonly crosscompany RecId
        #            from    withhold
        #            order by RecId
        #            where   withhold.LedgerJourTransRecId_BR       != this.RecId
        #                &&  withhold.PartyId_BR                 == partyId
        #                &&  withhold.TransDate                  >= periodStart
        #                &&  withhold.TransDate                  <= periodEnd
        #                &&  withhold.TaxWithholdCode            == taxCodes.TaxWithholdCode
        #                &&  withhold.TaxWithholdBaseAmount      != 0
        #                &&  withhold.RecId                      > minId
        #                &&  withhold.CanBeReversed_BR           == NoYes::Yes;
        #
        #        if (!withhold.RecId)
        #        {
        #            continue;
        #        }
        #
        #        maxId = withhold.RecId;
        #
        #        select firstonly crosscompany RecId
        #            from    withhold
        #            where   withhold.LedgerJourTransRecId_BR    != this.RecId
        #                &&  withhold.PartyId_BR                 == partyId
        #                &&  withhold.TransDate                  >= periodStart
        #                &&  withhold.TransDate                  <= periodEnd
        #                &&  withhold.TaxWithholdCode            == taxCodes.TaxWithholdCode
        #                &&  withhold.TaxWithholdBaseAmount      != 0
        #                &&  withhold.InvoiceTaxWithholdAmount   != 0
        #                &&  withhold.RecId                      < maxId
        #                &&  withhold.CanBeReversed_BR           == NoYes::Yes;
        #
        #        if (!withhold.RecId)
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #amount
        #//BP deviation documented
        #display Amount amount()
        #{
        #    return this.AmountCurDebit ? this.AmountCurDebit : -this.AmountCurCredit;
        #}
      ENDSOURCE
      SOURCE #amountCur2DebCred
        #public void amountCur2DebCred(
        #    AmountCur   _amountCur,
        #    boolean     _correction = false)
        #{
        #    this.AmountCurDebit     = 0;
        #    this.AmountCurCredit    = 0;
        #
        #    if (_correction)
        #    {
        #        if (_amountCur < 0)
        #            this.AmountCurDebit = _amountCur;
        #        else
        #            this.AmountCurCredit = -_amountCur;
        #    }
        #    else
        #    {
        #        if (_amountCur < 0)
        #            this.AmountCurCredit = -_amountCur;
        #        else
        #            this.AmountCurDebit = _amountCur;
        #    }
        #}
      ENDSOURCE
      SOURCE #amountCurPDC
        #//BP deviation documented
        #display Amount amountCurPDC()
        #{
        #    return this.AmountCurDebit ? this.AmountCurDebit : this.AmountCurCredit;
        #}
        #
        #
        #
        #
      ENDSOURCE
      SOURCE #amountMST_RU
        #//BP deviation documented
        #display AmountMST amountMST_RU()
        #{
        #    return this.calcAmountMST();
        #}
      ENDSOURCE
      SOURCE #areAccountsInSingleCompany
        #/// <summary>
        #/// Determines whether the primary account and offset account
        #/// are in a single company.
        #/// </summary>
        #/// <returns>
        #/// true if the primary account and offset account are in a single
        #/// company; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// When intercompany accounting configuration is not enabled, the
        #/// primary account and offset acccount must be in a single company.
        #/// </remarks>
        #public boolean areAccountsInSingleCompany()
        #{
        #    boolean isTheSame;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #    {
        #        isTheSame = true;
        #    }
        #    else
        #    {
        #        isTheSame = (this.Company == this.OffsetCompany);
        #    }
        #
        #    return isTheSame;
        #}
      ENDSOURCE
      SOURCE #bankAccount_BR
        #/// <summary>
        #///    Gets the account number of the bank.
        #/// </summary>
        #/// <returns>
        #///    Account number.
        #/// </returns>
        #display BankAccountNum_BR bankAccount_BR()
        #{
        #    return Bank_BR::parseAccount(BankAccountTable::find(this.parmOffsetAccount(),false).AccountNum);
        #}
      ENDSOURCE
      SOURCE #bankAgency_BR
        #/// <summary>
        #///    Gets the agency number of the bank.
        #/// </summary>
        #/// <returns>
        #///    Agency number.
        #/// </returns>
        #display BankAgency_BR bankAgency_BR()
        #{
        #    return Bank_BR::parseAgency(BankAccountTable::find(this.parmOffsetAccount(),false).AccountNum);
        #}
        #
        #
      ENDSOURCE
      SOURCE #bankDac_BR
        #/// <summary>
        #///    Gets the account control characters (DAC) of the bank.
        #/// </summary>
        #/// <returns>
        #///    Account control characters.
        #/// </returns>
        #display BankDAC_BR bankDac_BR()
        #{
        #    return Bank_BR::parseDAC(BankAccountTable::find(this.parmOffsetAccount(),false).AccountNum);
        #}
      ENDSOURCE
      SOURCE #bankPaymentOrderJour_RU
        #server public BankPaymentOrderJour_RU bankPaymentOrderJour_RU(boolean _forUpdate = false)
        #{
        #    ;
        #
        #    return BankPaymentOrderJour_RU::find(this.JournalNum,
        #                                         this.Voucher,
        #                                         this.LineNum,
        #                                         this.AccountType,
        #                                         this.TransDate,
        #                                         _forUpdate);
        #}
        #
      ENDSOURCE
      SOURCE #cacheAllowEdit
        #/// <summary>
        #/// Updates the performance validation caches that indicate when the <c>LedgerJournalTrans</c> table
        #/// can be edited.
        #/// </summary>
        #/// <remarks>
        #/// We have several scenarios when the database is queried by the
        #/// <c>LedgerJournalTrans.checkAllowEdit</c> method to determine whether the current row may be edited.
        #/// This method tracks the validation problems for the current row and caches the results. From a
        #/// service create operation point of view, we can track these scenarios as the rows are being added.
        #/// </remarks>
        #public void cacheAllowEdit()
        #{
        #    #macrolib.LedgerAIF
        #    container cacheKey;
        #    boolean errorCondition;
        #    SysGlobalCache          cache = classfactory.globalCache();
        #
        #    cacheKey = [this.JournalNum, this.Voucher];
        #
        #    //LedgerJournalTransCanNotBeChangedWhenCheckPrinted check
        #    errorCondition = false;
        #    if(this.PaymentStatus != CustVendPaymStatus::None && this.BankChequeNum != "")
        #    {
        #        errorCondition = true;
        #    }
        #    this.cacheAllowEditUpdate(#LedgerJournalTransCanNotBeChangedWhenCheckPrinted, cacheKey, errorCondition);
        #
        #    //LedgerJournalTransCanNotBeChangedForPromissoryNote
        #    errorCondition = false;
        #    if(this.BankPromissoryNoteNum != "")
        #    {
        #        errorCondition = true;
        #    }
        #    this.cacheAllowEditUpdate(#LedgerJournalTransCanNotBeChangedForPromissoryNote, cacheKey, errorCondition);
        #
        #    //LedgerJournalTransCanNotBeDeletedForPromissoryNote
        #    errorCondition = false;
        #    if(this.PaymentStatus != CustVendPaymStatus::None && this.BankPromissoryNoteNum  != "")
        #    {
        #        errorCondition = true;
        #    }
        #    this.cacheAllowEditUpdate(#LedgerJournalTransCanNotBeDeletedForPromissoryNote, cacheKey, errorCondition);
        #
        #}
      ENDSOURCE
      SOURCE #cacheAllowEditUpdate
        #private void cacheAllowEditUpdate(str _cacheOwner, container _cacheKey, boolean _errorCondition)
        #{
        #    boolean cacheValue;
        #    SysGlobalCache          cache = classfactory.globalCache();
        #
        #    // When the cache has not been set, the error condition will be set to true or false.  This cache
        #    // will be reset to true when the error condiditon exists.  After the error condition has been set,
        #    // it will not be reset to false until the cache has been flushed. This behavior is intentional because
        #    // we are tracking validation problems when a set of LedgerJournalLines (for a voucher) have been created
        #    // from a service.
        #    if(cache.isSet(_cacheOwner, _cacheKey))
        #    {
        #        cacheValue = cache.get(_cacheOwner, _cacheKey);
        #        if (cacheValue == false  && _errorCondition == true)
        #        {
        #            cache.set(_cacheOwner, _cacheKey, _errorCondition);
        #        }
        #    }
        #    else
        #    {
        #        cache.set(_cacheOwner, _cacheKey, _errorCondition);
        #    }
        #}
      ENDSOURCE
      SOURCE #calcAmountMST
        #/// <summary>
        #/// Calculates the net MST total amount for a <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <param name="_throwExceptions">
        #/// Throw exceptions; optional.
        #/// </param>
        #/// <returns>
        #/// An amount in MST currency.
        #/// </returns>
        #/// <remarks>
        #/// For intercompany transactions, currency conversions will use the exchange rate of the current
        #/// company for the transaction currency code and transaction date that is indicated on the transaction
        #/// regardless of the exchange rate on the transaction.
        #/// </remarks>
        #public AmountMST calcAmountMST(boolean _throwExceptions = true)
        #{
        #    AmountMST           amountMST;
        #    CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
        #            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
        #            this.exchRateDate_W());
        #
        #    if (!this.isCompanyIntercompany(this.company()))
        #    {
        #        // The exchange rate fields only apply to the account company and not the company of the
        #        // transaction, so only use them when there is not an intercompany transaction involved.
        #        currencyExchangeHelper.parmExchangeRate1(this.ExchRate);
        #        currencyExchangeHelper.parmExchangeRate2(this.ExchRateSecond);
        #    }
        #
        #    // if we are in the service context (non-interactive), we want to log any problems as faults and continue forward
        #    if (!_throwExceptions)
        #    {
        #        currencyExchangeHelper.parmErrorType(AifErrorType::Fault);
        #    }
        #
        #    amountMST = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, this.AmountCurDebit - this.AmountCurCredit, true);
        #
        #    return amountMST;
        #}
      ENDSOURCE
      SOURCE #calcAverageLinesExchRate_HU
        #/// <summary>
        #///     Calculates the exchange rate on the journal line using average method.
        #/// </summary>
        #server client public void calcAverageLinesExchRate_HU()
        #{
        #    RCashBalanceCur cashBalanceCur;
        #
        #    if (this.AmountCurCredit > 0)
        #    {
        #        cashBalanceCur  = new RCashBalanceCur(this.TransDate);
        #        cashBalanceCur.calc(this.parmAccount(), this.CurrencyCode);
        #
        #        if (cashBalanceCur.amountCur())
        #        {
        #            ttsbegin;
        #
        #            this.ExchRate   = cashBalanceCur.amountMST() * 100 / cashBalanceCur.amountCur();
        #            this.doUpdate();
        #
        #            ttscommit;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #calcBankAmount_RU
        #public AmountCur calcBankAmount_RU(CurrencyCode _currencyCode)
        #{
        #    return Currency::curAmount(this.calcAmountMST(),
        #                               _currencyCode,
        #                               this.TransDate);
        #}
      ENDSOURCE
      SOURCE #calcBaseAmountMSTIncTaxInCostPrice
        #public server AmountMST calcBaseAmountMSTIncTaxInCostPrice(TaxVoucherService taxVoucherService = null)
        #{
        #    AmountMST           amountMST;
        #    TaxAmount           taxInAmount;
        #    TaxAmount           taxInCostPriceAmount;
        #    AmountMST           cashDiscAmount = 0.0;
        #    TaxCalculation      taxCalculation;
        #
        #    if (this.TaxGroup || this.TaxCode)
        #    {
        #        if (taxVoucherService)
        #        {
        #            taxInCostPriceAmount = taxVoucherService.getTransactionalTaxInCostPriceForLine(this);
        #            if (this.AccountType == LedgerJournalACType::FixedAssets)
        #            {
        #                taxInAmount = taxVoucherService.taxAmountForAssetType(this);
        #            }
        #            else
        #            {
        #                taxInAmount = taxVoucherService.getTransactionalTaxAmountForLine(this);
        #            }
        #        }
        #        else
        #        {
        #            taxCalculation = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this);
        #
        #            taxInCostPriceAmount = taxCalculation.totalTaxInCostPrice(this.RecId);
        #            taxInAmount = taxCalculation.totalTaxAmountSingleLine(this.TableId, this.RecId, false, false);
        #        }
        #    }
        #    //
        #    //  If the cash discount is to be taken on the invoice
        #    //  and the cash discount must be applied to the fixed asset
        #    //  assign the ledgerJournalTrans.cashDiscAmountcheck to
        #    //  local cashDiscAmount property so it can be used
        #    //  in the calculation of the net transaction amount.
        #    //
        #    if (TaxParameters::canApplyCashDiscOnInvoice_ES()
        #    && AssetParameters::find().DeductCashDisc)
        #    {
        #        cashDiscAmount = this.CashDiscAmount;
        #    }
        #
        #    amountMST = (this.AmountCurDebit - this.AmountCurCredit) + taxInCostPriceAmount - taxInAmount - cashDiscAmount;
        #
        #    if (this.isCompanyIntercompany(this.company()))
        #    {
        #        // Need to calculate the MST amount for the dataAreaId company of the transaction
        #        // using the currency code and the transaction date.
        #        // The exchange rate fields should not be used because these are for the account company.
        #        return Currency::mstAmount(amountMST, this.CurrencyCode, this.TransDate);
        #    }
        #    else
        #    {
        #        return Currency::mstAmount(amountMST,
        #                                   this.CurrencyCode,
        #                                   this.TransDate,
        #                                   Currency::noYes2UnknownNoYes(this.Triangulation),
        #                                   this.ExchRate,
        #                                   this.ExchRateSecond);
        #    }
        #}
      ENDSOURCE
      SOURCE #calcCreditMST
        #/// <summary>
        #/// Calculates the MST amount for a <c>LedgerJournalTrans.amountCurCredit</c> value.
        #/// </summary>
        #/// <param name="_throwExceptions">
        #/// Throw exceptions; optional.
        #/// </param>
        #/// <param name="_ledgerJournalTable">
        #/// The corresponding <c>LedgerJournalTable</c> record; optional.
        #/// </param>
        #/// <returns>
        #/// An amount in MST currency.
        #/// </returns>
        #/// <remarks>
        #/// For intercompany transactions, currency conversions will use the exchange rate of the current
        #/// company for the transaction currency code and transaction date that is indicated on the transaction
        #/// if the transaction currency codes are different in the two companies.
        #/// Pass the corresponding <c>LedgerJournalTable</c> record so this method does not have to retrieve it.
        #/// </remarks>
        #public Amount calcCreditMST(boolean _throwExceptions = true, LedgerJournalTable _ledgerJournalTable = null)
        #{
        #    AmountMST           amountMST;
        #    LedgerJournalTable  ledgerJournalTable;
        #    CurrencyCode        currentCompanyAccountingCurrency = '';
        #    CurrencyCode        accountCompanyAccountingCurrency = '';
        #    boolean             isInterCompany = false;
        #
        #    CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
        #            Ledger::current(),
        #            this.exchRateDate_W());
        #
        #    if (this.isCompanyIntercompany(this.company()))
        #    {
        #        isInterCompany = true;
        #        currentCompanyAccountingCurrency = Ledger::accountingCurrency();
        #        changecompany(this.Company)
        #        {
        #            accountCompanyAccountingCurrency = Ledger::accountingCurrency();
        #        }
        #    }
        #
        #    if (isInterCompany)
        #    {
        #        if (_ledgerJournalTable == null)
        #        {
        #            ledgerJournalTable = this.ledgerJournalTable();
        #        }
        #        else
        #        {
        #            ledgerJournalTable = _ledgerJournalTable;
        #        }
        #
        #        if (currentCompanyAccountingCurrency == accountCompanyAccountingCurrency
        #            && (ledgerJournalTable.JournalType == LedgerJournalType::Daily
        #            || ledgerJournalTable.JournalType == LedgerJournalType::Approval
        #            || ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger
        #            || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister))
        #        {
        #            currencyExchHelper.parmExchangeRate1(this.ExchRate);
        #            currencyExchHelper.parmExchangeRate2(this.ExchRateSecond);
        #        }
        #    }
        #    else
        #    {
        #        currencyExchHelper.parmExchangeRate1(this.ExchRate);
        #        currencyExchHelper.parmExchangeRate2(this.ExchRateSecond);
        #    }
        #
        #    // if we are in the service context (non-interactive), we want to log any problems as faults and continue forward
        #    if (!_throwExceptions)
        #    {
        #        currencyExchHelper.parmErrorType(AifErrorType::Fault);
        #    }
        #
        #    amountMST = currencyExchHelper.calculateTransactionToAccounting(this.CurrencyCode, this.AmountCurCredit, true);
        #
        #    return amountMST;
        #}
      ENDSOURCE
      SOURCE #calcDebitMST
        #/// <summary>
        #/// Calculates the MST amount for a <c>LedgerJournalTrans.amountCurDebit</c> value.
        #/// </summary>
        #/// <param name="_throwExceptions">
        #/// Throw exceptions; optional.
        #/// </param>
        #/// <param name="_ledgerJournalTable">
        #/// The corresponding <c>LedgerJournalTable</c> record; optional.
        #/// </param>
        #/// <returns>
        #/// An amount in MST currency.
        #/// </returns>
        #/// <remarks>
        #/// For intercompany transactions, currency conversions will use the exchange rate of the current
        #/// company for the transaction currency code and transaction date that is indicated on the transaction
        #/// if the transaction currency codes are different in the two companies.
        #/// Pass the corresponding <c>LedgerJournalTable</c> record so this method does not have to retrieve it.
        #/// </remarks>
        #public Amount calcDebitMST(boolean _throwExceptions = true, LedgerJournalTable _ledgerJournalTable = null)
        #{
        #    AmountMST           amountMST;
        #    LedgerJournalTable  ledgerJournalTable;
        #    CurrencyCode        currentCompanyAccountingCurrency = '';
        #    CurrencyCode        accountCompanyAccountingCurrency = '';
        #    boolean             isInterCompany = false;
        #
        #    CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
        #            Ledger::current(),
        #            this.exchRateDate_W());
        #
        #    if (this.isCompanyIntercompany(this.company()))
        #    {
        #        isInterCompany = true;
        #        currentCompanyAccountingCurrency = Ledger::accountingCurrency();
        #        changecompany(this.Company)
        #        {
        #            accountCompanyAccountingCurrency = Ledger::accountingCurrency();
        #        }
        #    }
        #
        #    if (isInterCompany)
        #    {
        #        if (_ledgerJournalTable == null)
        #        {
        #            ledgerJournalTable = this.ledgerJournalTable();
        #        }
        #        else
        #        {
        #            ledgerJournalTable = _ledgerJournalTable;
        #        }
        #
        #        if (currentCompanyAccountingCurrency == accountCompanyAccountingCurrency
        #            && (ledgerJournalTable.JournalType == LedgerJournalType::Daily
        #            || ledgerJournalTable.JournalType == LedgerJournalType::Approval
        #            || ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger
        #            || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister))
        #        {
        #            currencyExchHelper.parmExchangeRate1(this.ExchRate);
        #            currencyExchHelper.parmExchangeRate2(this.ExchRateSecond);
        #        }
        #    }
        #    else
        #    {
        #        currencyExchHelper.parmExchangeRate1(this.ExchRate);
        #        currencyExchHelper.parmExchangeRate2(this.ExchRateSecond);
        #    }
        #
        #    // if we are in the service context (non-interactive), we want to log any problems as faults and continue forward
        #    if (!_throwExceptions)
        #    {
        #        currencyExchHelper.parmErrorType(AifErrorType::Fault);
        #    }
        #
        #    amountMST = currencyExchHelper.calculateTransactionToAccounting(this.CurrencyCode, this.AmountCurDebit, true);
        #
        #    return amountMST;
        #}
      ENDSOURCE
      SOURCE #calcFIFOLineExchRate_HU
        #/// <summary>
        #///     Calculates the exchange rate for the journal line using FIFO.
        #/// </summary>
        #server client public void calcFIFOLineExchRate_HU()
        #{
        #    RCashTrans rCashTransIn;
        #    AmountCur  outGoing, inComing, tempComing;
        #    AmountCur  transMSTAmount, transAmount, rCashTransInExchRate;
        #
        #    select forupdate rCashTransIn
        #        order by TransDate asc, Voucher asc
        #        where rCashTransIn.AccountNum   == this.parmAccount()  &&
        #              rCashTransIn.CurrencyCode == this.CurrencyCode &&
        #              rCashTransIn.Posted                            &&
        #              rCashTransIn.AmountCur    >  0.0               &&
        #              rCashTransIn.AmountCur    != rCashTransIn.SettleAmountCur_PL;
        #
        #    if (this.AmountCurDebit < 0.0)
        #    {
        #        outGoing = abs(this.AmountCurDebit);
        #    }
        #    else
        #    {
        #        outGoing = this.AmountCurCredit;
        #    }
        #
        #    while (rCashTransIn)
        #    {
        #        inComing                = rCashTransIn.AmountCur;
        #        rCashTransInExchRate    = LedgerJournalTrans::findRCashDocID_HU( rCashTransIn.DocId).ExchRate;
        #        tempComing  = inComing - rCashTransIn.SettleAmountCur_PL;
        #        if (outGoing > tempComing)
        #        {
        #            outGoing = outGoing - inComing + rCashTransIn.SettleAmountCur_PL;
        #            rCashTransIn.SettleAmountCur_PL = inComing;
        #            transAmount     += tempComing;
        #            transMSTAmount  += tempComing * rCashTransInExchRate;
        #            rCashTransIn.doUpdate();
        #        }
        #        else
        #        {
        #            rCashTransIn.SettleAmountCur_PL = outGoing + rCashTransIn.SettleAmountCur_PL;
        #            transAmount     += outGoing;
        #            transMSTAmount  += outGoing * rCashTransInExchRate;
        #            rCashTransIn.doUpdate();
        #            outGoing = outGoing - inComing;
        #            break;
        #        }
        #        next rCashTransIn;
        #    }
        #
        #    if (outGoing > 0 && (outGoing < this.AmountCurCredit))
        #    {
        #        this.AmountCurCredit = this.AmountCurCredit - outGoing;
        #        this.doUpdate();
        #    }
        #
        #    if (transAmount != 0.0)
        #    {
        #        this.ExchRate = transMSTAmount / transAmount;
        #        this.doUpdate();
        #    }
        #    transAmount     = 0.0;
        #    transMSTAmount  = 0.0;
        #}
      ENDSOURCE
      SOURCE #calcLineAmountExclTax_RU
        #server public Amount calcLineAmountExclTax_RU(boolean _taxInCostPrice = true)
        #{
        #    TaxCalculation      taxCalculation;
        #    Amount              lineAmount;
        #    Amount              taxAmount;
        #    LedgerJournalTable  ledgerJournalTable;
        #
        #    taxCalculation = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this);
        #    taxAmount      = taxCalculation.totalTaxAmountSingleLine(this.TableId, this.RecId, false, false);
        #
        #    lineAmount     = abs(this.amount());
        #    lineAmount    -= abs(taxAmount);
        #
        #    if (! _taxInCostPrice)
        #        return lineAmount;
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #
        #    if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice))
        #    {
        #        taxAmount = TaxUncommitted::getActualTaxInCostPriceForSourceLine(this.TableId, this.RecId);
        #    }
        #    else
        #    {
        #        taxCalculation = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this);
        #        taxAmount = taxCalculation.totalTaxInCostPrice(this.RecId);
        #    }
        #
        #    lineAmount += abs(taxAmount);
        #    return lineAmount;
        #}
      ENDSOURCE
      SOURCE #calcPaymentFee
        #private void calcPaymentFee()
        #{
        #    switch(this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            CustVendPaymJournalFee::createJournalFeeCust(this);
        #            break;
        #
        #        case LedgerJournalACType::Vend :
        #            CustVendPaymJournalFee::createJournalFeeCust(this);
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #calculateBankCurrencyAmount
        #/// <summary>
        #/// Calculates the bank currency amount.
        #/// </summary>
        #public void calculateBankCurrencyAmount()
        #{
        #    AmountCur       bankCurrencyamount;
        #    CurrencyCode    bankCurrencyCode;
        #    AmountCur       transactionCurrencyAmount;
        #
        #    transactionCurrencyAmount = this.getBankTransactionCurrencyAmount();
        #
        #    bankCurrencyCode = BankAccountTable::find(this.parmBankAccount()).CurrencyCode;
        #
        #    if (this.CurrencyCode == bankCurrencyCode)
        #    {
        #        bankCurrencyamount = transactionCurrencyAmount;
        #    }
        #    else
        #    {
        #        bankCurrencyamount = Currency::curAmount2CurAmount(
        #                transactionCurrencyAmount,
        #                this.CurrencyCode,
        #                bankCurrencyCode,
        #                this.TransDate);
        #    }
        #
        #    this.BankCurrencyAmount = bankCurrencyamount;
        #    this.BankCurrency       = bankCurrencyCode;
        #}
      ENDSOURCE
      SOURCE #calcUserTaxBase_PL
        #server public void calcUserTaxBase_PL()
        #{
        #    AmountCur     vatAmount;
        #    TaxBase_W     userTaxBase;
        #    TaxValue      taxValue;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        #    {
        #        vatAmount = this.AmountCurCredit ? this.AmountCurCredit : this.AmountCurDebit;
        #
        #        if (vatAmount && this.TaxCode && TaxTable::isTaxVat_PL(this.TaxCode) && (this.AccountType == LedgerJournalACType::Ledger || this.OffsetAccountType == LedgerJournalACType::Ledger))
        #        {
        #            taxValue = TaxData::find(this.TaxCode, this.TransDate, 0).TaxValue;
        #
        #            if (taxValue)
        #            {
        #                userTaxBase = Currency::amount(vatAmount * 100 / taxValue);
        #
        #                if ((this.TaxBase_W                                                                                        &&
        #                     Box::yesNo(strFmt("@GLS109587", this.TaxBase_W, userTaxBase), DialogButton::Yes) == DialogButton::Yes) ||
        #                    ! this.TaxBase_W)
        #                {
        #                    this.TaxBase_W = userTaxBase;
        #                }
        #            }
        #        }
        #        else
        #        {
        #            this.TaxBase_W = 0;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #canAccountTypeBeTaxed
        #/// <summary>
        #/// Determines whether the specified account type can be taxed by the tax engine.
        #/// </summary>
        #/// <param name="_accountType">
        #/// The account type to check.
        #/// </param>
        #/// <returns>
        #/// true if the specified account type is being used on the <c>LedgerJournalTrans</c> record and if it
        #/// is eligible to be taxed; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// A true value does not imply that the account type will be taxed. This only means that it could
        #/// potentially be taxed.
        #/// </remarks>
        #public boolean canAccountTypeBeTaxed(LedgerJournalACType _accountType)
        #{
        #    LedgerJournalTaxDocument ledgerJournalTaxDocument;
        #    LedgerJournalTaxLine ledgerJournalTaxLine;
        #
        #    ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(this.JournalNum, this.Voucher, this.Invoice, this);
        #    ledgerJournalTaxLine = ledgerJournalTaxDocument.getLineByLedgerJournalTrans(this, ledgerJournalTaxDocument.getTaxOnPrepayment()) as LedgerJournalTaxLine;
        #
        #    if (this.AccountType == _accountType)
        #    {
        #        if (ledgerJournalTaxLine.isPrimaryBeingCalculated())
        #        {
        #            return true;
        #        }
        #    }
        #
        #    if (this.OffsetAccountType == _accountType)
        #    {
        #        if (ledgerJournalTaxLine.isOffsetBeingCalculated())
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #cancelMandateLogRecord
        #private void cancelMandateLogRecord()
        #{
        #    SpecTrans specTrans;
        #    CustTransOpen custTransOpen;
        #    CustTrans custTrans;
        #    CustDirectDebitMandate custDirectDebitMandate;
        #    CustDirectDebitMandate custDirectDebitMandateUpdate;
        #    CustTrans              custTransInvoice;
        #    CustSettlement         custSettlementInvoice;
        #    CustTrans              custTransBillOfExchange;
        #
        #    ttsbegin;
        #    while select RecId from custDirectDebitMandate
        #        join TableId from custTrans
        #            where custTrans.DirectDebitMandate == custDirectDebitMandate.RecId
        #                && !custTrans.BillOfExchangeID
        #        exists join TableId from custTransOpen
        #            where custTransOpen.RefRecId == custTrans.RecId
        #        exists join TableId from specTrans
        #            where specTrans.RefRecId    == custTransOpen.RecId
        #               && specTrans.RefTableId  == custTransOpen.TableId
        #               && specTrans.RefCompany  == custTransOpen.DataAreaId
        #               && specTrans.SpecCompany == this.Company
        #               && specTrans.SpecRecId   == this.RecId
        #               && specTrans.SpecTableId == this.TableId
        #    {
        #        custDirectDebitMandateUpdate = CustDirectDebitMandate::find(custDirectDebitMandate.RecId, true);
        #        custDirectDebitMandateUpdate.decreaseUsageCount();
        #
        #        custDirectDebitMandateUpdate.update();
        #
        #        CustDirectDebitMandateLog::cancelRecord(custDirectDebitMandateUpdate.RecId, this.Voucher);
        #    }
        #
        #    while select RecId from custDirectDebitMandate
        #    join TableId from custTransInvoice
        #        where custTransInvoice.DirectDebitMandate == custDirectDebitMandate.RecId
        #    exists join TableId from custSettlementInvoice
        #        where custSettlementInvoice.OffsetRecid    == custTransInvoice.RecId
        #    exists join TableId from custTransBillOfExchange
        #        where custTransBillOfExchange.RecId          == custSettlementInvoice.TransRecId &&
        #            custTransBillOfExchange.BillOfExchangeID
        #    exists join TableId from custTrans
        #        where custTrans.BillOfExchangeID == custTransBillOfExchange.BillOfExchangeID &&
        #            custTrans.Voucher            == custTransBillOfExchange.Voucher
        #    exists join TableId from custTransOpen
        #        where custTransOpen.RefRecId == custTrans.RecId
        #    exists join TableId from specTrans
        #        where specTrans.RefRecId  == custTransOpen.RecId &&
        #            specTrans.RefTableId  == custTransOpen.TableId &&
        #            specTrans.SpecRecId   == this.RecId &&
        #            specTrans.SpecTableId == this.TableId
        #    {
        #        custDirectDebitMandateUpdate = CustDirectDebitMandate::find(custDirectDebitMandate.RecId, true);
        #        custDirectDebitMandateUpdate.decreaseUsageCount();
        #
        #        custDirectDebitMandateUpdate.update();
        #
        #        CustDirectDebitMandateLog::cancelRecord(custDirectDebitMandateUpdate.RecId, this.Voucher);
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #canCloseTaxWithholdEditStatus_BR
        #public boolean canCloseTaxWithholdEditStatus_BR()
        #{
        #    return this.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Opened;
        #}
      ENDSOURCE
      SOURCE #canCreateBankDocument
        #/// <summary>
        #/// Indicates whether a bank document can be created from the table in current status.
        #/// </summary>
        #/// <returns>
        #/// A bank document can be created from the table in current status.
        #/// </returns>
        #public boolean canCreateBankDocument()
        #{
        #    return (this.parmBankDocumentBookType() != BankDocumentBookType::None
        #        && this.PaymentStatus == CustVendPaymStatus::Sent);
        #}
      ENDSOURCE
      SOURCE #canCreateFixedAssetsSiblingRecord
        #/// <summary>
        #/// Indicates whether a <c>LedgerJournalTrans_Asset</c> sibling record can be created.
        #/// </summary>
        #/// <returns>
        #/// true if the <c>LedgerJournalTrans_Asset</c> sibling should be created; otherwise, false.
        #/// </returns>
        #public boolean canCreateFixedAssetsSiblingRecord()
        #{
        #    return this.RecId &&
        #          (this.AccountType == LedgerJournalACType::FixedAssets ||
        #          (this.OffsetAccountType == LedgerJournalACType::FixedAssets && this.OffsetLedgerDimension));
        #}
      ENDSOURCE
      SOURCE #canPrintNonNegotiableCheque
        #/// <summary>
        #/// Indicates whether non-negotiable checks can be printed against this transaction.
        #/// </summary>
        #/// <returns>
        #/// true if non-negotiable check printing is enabled; otherwise, false.
        #/// </returns>
        #public boolean canPrintNonNegotiableCheque()
        #{
        #    boolean ret;
        #    VendPaymModeTable vendPaymModeTable;
        #
        #    vendPaymModeTable = VendPaymModeTable::find(this.PaymMode);
        #
        #    if (BankParameters::find().AllowPaymentCopies
        #        && vendPaymModeTable.AllowPaymentCopies
        #        && vendPaymModeTable.AccountType == LedgerJournalACType::Bank
        #        && vendPaymModeTable.PaymentLedgerDimension != 0)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #canReopenTaxWithholdEditStatus_BR
        #public boolean canReopenTaxWithholdEditStatus_BR()
        #{
        #    return  this.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Closed
        #        &&  this.ledgerJournalTable().Posted    == NoYes::No;
        #}
      ENDSOURCE
      SOURCE #canSkipBlockedForManualEntryCheck
        #/// <summary>
        #/// Gets a value that indicates whether the current record can skip the
        #/// blocked for manual entry check.
        #/// </summary>
        #/// <returns>
        #/// A value that indicates whether the current record can skip the blocked for
        #/// manual entry check.
        #/// </returns>
        #/// <remarks>
        #/// This method uses the primary account.
        #/// </remarks>
        #public boolean canSkipBlockedForManualEntryCheck()
        #{
        #    return this.AccountType != LedgerJournalACType::Ledger
        #        || (this.Transferred && this.NoEdit); // Approval journals
        #}
        #
      ENDSOURCE
      SOURCE #cashDiscAmount_BR
        #//BP deviation documented
        #display AmountCur cashDiscAmount_BR()
        #{
        #    VendTransOpen       vendTransOpen;
        #    CustTransOpen       custTransOpen;
        #    LedgerJournalType   ledgerJournalType;
        #    AmountCur           amountCur;
        #    SpecTrans           foundSpecTrans;
        #
        #    ledgerJournalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #    switch(ledgerJournalType)
        #    {
        #        case LedgerJournalType::Payment:
        #
        #            this.checkFieldViewAccessLevel_BR(tableNum(VendTransCashDisc), fieldNum(VendTransCashDisc, CashDiscAmount));
        #
        #            while select crossCompany foundSpecTrans
        #                where foundSpecTrans.SpecCompany    == this.Company
        #                    && foundSpecTrans.SpecTableId   == this.TableId
        #                    && foundSpecTrans.SpecRecId     == this.RecId
        #            {
        #                vendTransOpen   = foundSpecTrans.vendTransOpen();
        #                if (vendTransOpen.UseCashDisc != UseCashDisc::Never)
        #                {
        #                    changecompany(vendTransOpen.company())
        #                    {
        #                        amountCur += VendTransCashDisc::findCashDisc(vendTransOpen.TableId, vendTransOpen.RecId).CashDiscAmount;
        #                    }
        #                }
        #            }
        #            break;
        #        case LedgerJournalType::CustPayment:
        #
        #            this.checkFieldViewAccessLevel_BR(tableNum(CustTransCashDisc), fieldNum(CustTransCashDisc, CashDiscAmount));
        #
        #            while select crossCompany foundSpecTrans
        #                where foundSpecTrans.SpecCompany    == this.Company
        #                    && foundSpecTrans.SpecTableId   == this.TableId
        #                    && foundSpecTrans.SpecRecId     == this.RecId
        #            {
        #                custTransOpen = foundSpecTrans.custTransOpen();
        #                if (custTransOpen.UseCashDisc != UseCashDisc::Never)
        #                {
        #                    changecompany(custTransOpen.company())
        #                    {
        #                        amountCur += CustTransCashDisc::findCashDisc(custTransOpen.TableId, custTransOpen.RecId).CashDiscAmount;
        #                    }
        #                }
        #            }
        #            break;
        #        default:
        #            amountCur = 0;
        #    }
        #
        #    return amountCur;
        #}
      ENDSOURCE
      SOURCE #checkAccountTypesProject
        #private boolean checkAccountTypesProject()
        #{
        #    return ((this.AccountType == LedgerJournalACType::Project) &&
        #            (this.OffsetAccountType == LedgerJournalACType::Project &&
        #             this.OffsetLedgerDimension));
        #}
      ENDSOURCE
      SOURCE #checkAgreement_RU
        #/// <summary>
        #///     Checks agreement of the current <c>LedgerJournalTrans</c> record depending on account type.
        #/// </summary>
        #/// <param name="_accountOffsetaccount">
        #///     Account type, account or offset account; optional.
        #/// </param>
        #/// <returns>
        #///     true if check is passed ok; otherwise, false.
        #/// </returns>
        #public boolean checkAgreement_RU(AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
        #{
        #    SalesAgreementHeader salesAgreementHeader;
        #    PurchAgreementHeader purchAgreementHeader;
        #    AgreementId_RU       agreementId;
        #    LedgerJournalACType  accountType;
        #    CustVendAC           custVendAC;
        #    CompanyId            companyId;
        #    boolean ok = true;
        #
        #    if(_accountOffsetaccount == AccountOffsetaccount::Account)
        #    {
        #        accountType = this.AccountType;
        #        custVendAC  = this.parmAccount();
        #        agreementId = this.AccountAgreementId_RU;
        #
        #        companyId = this.AgreementCompany_RU ? this.AgreementCompany_RU : curext();
        #    }
        #    else
        #    if (_accountOffsetaccount == AccountOffsetaccount::OffsetAccount)
        #    {
        #        accountType = this.OffsetAccountType;
        #        custVendAC  = this.parmOffsetAccount();
        #        agreementId = this.OffsetAccountAgreementId_RU;
        #
        #        companyId = this.OffsetAgreementCompany_RU ? this.OffsetAgreementCompany_RU : curext();
        #    }
        #
        #    if (agreementId)
        #    {
        #        if (!xDataArea::exist(companyId))
        #        {
        #            throw error(strFmt("@SYS10666", companyId));
        #        }
        #
        #        changecompany(companyId)
        #        {
        #            if (accountType == LedgerJournalACType::Cust)
        #            {
        #                salesAgreementHeader = SalesAgreementHeader::findAgreementId(agreementId);
        #
        #                if (!salesAgreementHeader.canReleaseAgreement(this.TransDate))
        #                {
        #                    ok = checkFailed("@SYS103075");
        #                }
        #
        #                if (salesAgreementHeader.CustAccount != custVendAC)
        #                {
        #                    ok = checkFailed(strFmt("@SYS112224",
        #                        salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
        #                }
        #            }
        #            else
        #            if (accountType == LedgerJournalACType::Vend)
        #            {
        #                purchAgreementHeader = PurchAgreementHeader::findAgreementId(agreementId);
        #
        #                if (!purchAgreementHeader.canReleaseAgreement(this.TransDate))
        #                {
        #                    ok = checkFailed("@SYS103075");
        #                }
        #
        #                if (purchAgreementHeader.VendAccount != custVendAC)
        #                {
        #                    ok = checkFailed(strFmt("@SYS112224",
        #                        purchAgreementHeader.PurchNumberSequence, "@SYS309960", tableId2pname(tableNum(PurchAgreementHeader))));
        #                }
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkAllowEdit
        #public server boolean checkAllowEdit(boolean _validateDelete = false)
        #{
        #    #macrolib.LedgerAIF
        #    SysGlobalCache      cache = classfactory.globalCache();
        #    container           cacheKey;
        #    boolean             newVoucher;
        #    LedgerJournalTrans  previousLedgerJournalTrans;
        #    boolean             ret = true;
        #
        #    cacheKey = [this.JournalNum, this.Voucher];
        #
        #    newVoucher = false;
        #    if (cache.isSet(#LedgerJournalTransPreviousLine, this.JournalNum))
        #    {
        #        previousLedgerJournalTrans = cache.get(#LedgerJournalTransPreviousLine, this.JournalNum);
        #        if (previousLedgerJournalTrans.Voucher != this.Voucher)
        #        {
        #            newVoucher = true;
        #        }
        #    }
        #
        #    ret = this.checkAllowEditWhenCheckPrinted(cacheKey, newVoucher);
        #
        #    if (ret)
        #    {
        #        ret = this.checkAllowEditPromissoryNote(cacheKey, newVoucher, _validateDelete);
        #    }
        #
        #    if (ret)
        #    {
        #        if (this.ledgerJournalTable().Posted)
        #        {
        #            ret = checkFailed("@SYS21497");
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkAllowEditPaymentOrder_RU
        #server public boolean checkAllowEditPaymentOrder_RU(boolean _orig)
        #{
        #    LedgerJournalTrans          ledgerJournalTrans_orig, ledgerJournalTransLocal;
        #    BankPaymentOrderJour_RU     bankPaymentOrderJour;
        #    CustVendPaymJournalFee      journalFee;
        #    ;
        #
        #    ledgerJournalTrans_orig.selectLocked(false);
        #
        #    select firstonly ledgerJournalTrans_orig
        #        index hint NumVoucherIdx
        #        where ledgerJournalTrans_orig.JournalNum    == this.JournalNum          &&
        #              ledgerJournalTrans_orig.Voucher       == this.Voucher             &&
        #              ledgerJournalTrans_orig.PaymentStatus != CustVendPaymStatus::None &&
        #              ledgerJournalTrans_orig.BankChequeNum;
        #
        #    if (ledgerJournalTrans_orig)
        #    {
        #        bankPaymentOrderJour = _orig ? ledgerJournalTrans_orig.bankPaymentOrderJour_RU() :
        #                                       this.bankPaymentOrderJour_RU();
        #
        #        if (! bankPaymentOrderJour) // it's not russian payment order
        #        {
        #            return false;
        #        }
        #        else
        #        {
        #            select count(RecId) from ledgerJournalTransLocal
        #                index hint NumVoucherIdx
        #                where ledgerJournalTransLocal.JournalNum == this.JournalNum &&
        #                      ledgerJournalTransLocal.Voucher    == this.Voucher
        #            notexists join journalFee
        #                where journalFee.FeeTransRecId == ledgerJournalTransLocal.RecId;
        #
        #            if (ledgerJournalTransLocal.RecId > 1)
        #            {
        #                return false;
        #            }
        #            if (ledgerJournalTrans_orig.TransDate != this.TransDate &&
        #                ledgerJournalTrans_orig.SettleVoucher == SettlementType::SelectedTransact)
        #            {
        #                return false;
        #            }
        #            if(this.TransDate < bankPaymentOrderJour.PaymentTransDate)
        #            {
        #                return checkFailed("@GLS108857");
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkAllowEditPromissoryNote
        #private server boolean checkAllowEditPromissoryNote(container _cacheKey, boolean _newVoucher, boolean _validateDelete = false)
        #{
        #    #macrolib.LedgerAIF
        #    SysGlobalCache              cache = classfactory.globalCache();
        #    boolean                     errorCondition = false;
        #    boolean                     ret = true;
        #    LedgerJournalTrans          ledgerJournalTrans_orig;
        #
        #    if(!_validateDelete)
        #    {
        #        if (cache.isSet(#LedgerJournalTransCanNotBeChangedForPromissoryNote, _cacheKey))
        #        {
        #            errorCondition = cache.get(#LedgerJournalTransCanNotBeChangedForPromissoryNote, _cacheKey);
        #        }
        #        else
        #        {
        #            if (_newVoucher == false)
        #            {
        #                select firstonly RecId from ledgerJournalTrans_orig
        #                index hint NumVoucherIdx
        #                where ledgerJournalTrans_orig.JournalNum == this.JournalNum &&
        #                      ledgerJournalTrans_orig.Voucher    == this.Voucher    &&
        #                      ledgerJournalTrans_orig.BankPromissoryNoteNum;
        #            }
        #            if (ledgerJournalTrans_orig.RecId)
        #            {
        #                errorCondition = true;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        if (cache.isSet(#LedgerJournalTransCanNotBeDeletedForPromissoryNote, _cacheKey))
        #        {
        #            errorCondition = cache.get(#LedgerJournalTransCanNotBeDeletedForPromissoryNote, _cacheKey);
        #        }
        #        else
        #        {
        #            if (_newVoucher == false)
        #            {
        #                //To delete a printed line in VendPromissryNoteRedraw, is allowed when CustVendPaymStatus::None
        #                select firstonly RecId from ledgerJournalTrans_orig
        #                index hint NumVoucherIdx
        #                where ledgerJournalTrans_orig.JournalNum == this.JournalNum &&
        #                      ledgerJournalTrans_orig.Voucher    == this.Voucher    &&
        #                      ledgerJournalTrans_orig.PaymentStatus != CustVendPaymStatus::None &&
        #                      ledgerJournalTrans_orig.BankPromissoryNoteNum;
        #            }
        #            if (ledgerJournalTrans_orig.RecId)
        #            {
        #                errorCondition = true;
        #            }
        #        }
        #    }
        #
        #
        #    if (errorCondition)
        #    {
        #        ret = checkFailed(strFmt("@SYS74147",this.Voucher));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkAllowEditWhenCheckPrinted
        #private server boolean  checkAllowEditWhenCheckPrinted(container _cacheKey, boolean _newVoucher)
        #{
        #    #macrolib.LedgerAIF
        #    SysGlobalCache              cache = classfactory.globalCache();
        #    boolean                     errorCondition = false;
        #    boolean                     ret = true;
        #    LedgerJournalTrans          ledgerJournalTrans_orig;
        #
        #    #ISOCountryRegionCodes
        #
        #    if (cache.isSet(#LedgerJournalTransCanNotBeChangedWhenCheckPrinted, _cacheKey))
        #    {
        #        errorCondition = cache.get(#LedgerJournalTransCanNotBeChangedWhenCheckPrinted, _cacheKey);
        #    }
        #    else
        #    {
        #        if (_newVoucher == false)
        #        {
        #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #            {
        #                ret = this.checkAllowEditPaymentOrder_RU(false);
        #                if (! ret)
        #                {
        #                    errorCondition = true;
        #                }
        #            }
        #            else
        #            {
        #                ledgerJournalTrans_orig.selectLocked(false);
        #
        #                select firstonly RecId from ledgerJournalTrans_orig
        #                index hint NumVoucherIdx
        #                where ledgerJournalTrans_orig.JournalNum    == this.JournalNum &&
        #                      ledgerJournalTrans_orig.Voucher       == this.Voucher    &&
        #                      ledgerJournalTrans_orig.PaymentStatus != CustVendPaymStatus::None &&
        #                      ledgerJournalTrans_orig.BankChequeNum;
        #
        #                if (ledgerJournalTrans_orig.RecId)
        #                {
        #                    errorCondition = true;
        #                }
        #            }
        #
        #        }
        #    }
        #    if (errorCondition)
        #    {
        #        ret = checkFailed(strFmt("@SYS53476",this.Voucher));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkAllowPosting
        #private boolean checkAllowPosting(
        #    DimensionDynamicAccount _dimensionDynamicAccount,
        #    LedgerJournalACType     _ledgerJournalACType,
        #    SelectableDataArea      _company = curext())
        #{
        #    CompanyId   companyId;
        #    TableId     tableId;
        #    FieldId     fieldId;
        #
        #    #LedgerJournalFaults
        #
        #    // The following block is needed for the case that intercompany transactions is disabled and someone passes
        #    // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
        #    // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        #    if (!_company)
        #    {
        #        companyId = curext();
        #    }
        #    else
        #    {
        #        companyId = _company;
        #        if (! xDataArea::exist(companyId))
        #        {
        #            // We have to stop processing because the company is invalid.  It is not
        #            // possible to continue.
        #            tableId = tableNum(LedgerJournalTrans);
        #            fieldId = fieldNum(LedgerJournalTrans, Company);
        #            AifFaultContext::setGlobalContextField(tableId, fieldId);
        #            AifFault::checkFailedLogFault(strFmt("@SYS10666", companyId), #CompanyAccountDoesNotExist);
        #            throw AifFault::faultList("@SYS98197", #ValidationFailed);
        #        }
        #
        #    }
        #
        #    if (_dimensionDynamicAccount)
        #    {
        #        changecompany(companyId)
        #        {
        #            switch(_ledgerJournalACType)
        #            {
        #                case LedgerJournalACType::Ledger  :
        #                    return MainAccount::checkAllowPosting(DimensionStorage::getMainAccountFromLedgerDimension(_dimensionDynamicAccount).MainAccountId,
        #                                                          LedgerPostingType::LedgerJournal);
        #
        #                case LedgerJournalACType::Cust    :
        #                    return CustTable::checkExistAndOpen(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount), this.amount());
        #
        #                case LedgerJournalACType::Vend    :
        #                    return VendTable::checkExistAndOpen(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount),
        #                                                        this.amount(),
        #                                                        this.TransactionType,
        #                                                        DateTimeUtil::newDateTime(this.TransDate,0),
        #                                                        this.ledgerJournalTable().JournalType);
        #
        #                case LedgerJournalACType::Bank    :
        #                    break;
        #
        #                case LedgerJournalACType::Project :
        #                    if (! ProjTable::find(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).status().activeInTree())
        #                    {
        #                        return checkFailed(strFmt("@SYS96612",DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)));
        #                    }
        #                    break;
        #
        #                case LedgerJournalACType::FixedAssets :
        #                    return AssetTable::checkExist(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount));
        #                case LedgerJournalACType::FixedAssets_RU :
        #                    return RAssetTable::checkExist(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount));
        #                case LedgerJournalACType::Employee_RU :
        #                    return EmployeeTable_RU::checkExist(EmployeeTable_RU::findByEmployeeId(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount)).RecId);
        #                case LedgerJournalACType::RDeferrals :
        #                    return RDeferralsTable::checkExist(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount));
        #                case LedgerJournalACType::RCash :
        #                    return RCashTable::checkExist(DimensionStorage::ledgerDimension2AccountNum(_dimensionDynamicAccount));
        #
        #                default :
        #                    return checkFailed(strFmt("@SYS26719",_ledgerJournalACType));
        #            }
        #        }
        #    }
        #    return true;
        #
        #}
      ENDSOURCE
      SOURCE #checkAmount
        #private void checkAmount()
        #{
        #    switch (this.ledgerJournalTable().JournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw:
        #            if (this.AmountCurDebit)
        #            {
        #                throw error("@SYS74480");
        #            }
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            if (this.AmountCurCredit)
        #            {
        #                throw error("@SYS75395");
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #checkApprovalActive
        #/// <summary>
        #/// Performs approval validation on the current record.
        #/// </summary>
        #/// <returns>
        #/// true if validation passes; otherwise, false.
        #/// </returns>
        #public boolean checkApprovalActive()
        #{
        #    LedgerJournalTable  ledgerJournalTable;
        #    LedgerJournalName   ledgerJournalName;
        #    #LedgerJournalFaults
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #    ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);
        #
        #    if (ledgerJournalName.ApproveActive && ledgerJournalTable.ReportedAsReadyBy != '' && ledgerJournalTable.RejectedBy == '')
        #    {
        #        if (UserInfoHelp::userInUserGroup(curUserId(), ledgerJournalName.ApproveGroupId))
        #        {
        #            return true;
        #        }
        #        else
        #        {
        #            return AifFault::checkFailedLogFault(strFmt("@SYS117895", ledgerJournalName.JournalName), #NotAuthorizedForJournal);
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkBankAccounts
        #/// <summary>
        #/// Indicates whether accounts of type bank are valid.
        #/// </summary>
        #/// <returns>
        #/// true if the bank accounts are valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Accounts of type bank are required to be in the current company, other than for a bank transfer.
        #/// </remarks>
        #public boolean checkBankAccounts()
        #{
        #    boolean isValid = true;
        #
        #    if (this.Company)
        #    {
        #        if ((this.AccountType == LedgerJournalACType::Bank &&
        #             this.OffsetAccountType != LedgerJournalACType::Bank) &&
        #            (this.Company != curext()))
        #        {
        #            isValid = checkFailed("@GLS222364");
        #        }
        #    }
        #
        #    if (isValid && this.OffsetCompany)
        #    {
        #        if ((this.OffsetAccountType == LedgerJournalACType::Bank &&
        #             this.AccountType != LedgerJournalACType::Bank) &&
        #            (this.OffsetCompany != curext()))
        #        {
        #            isValid = checkFailed("@GLS222364");
        #        }
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #checkBridgePosting_IN
        #/// <summary>
        #/// Returns true PDCClearingPosting is marked for the PaymMode; otherwise false.
        #/// </summary>
        #/// <returns>
        #/// Returns true PDCClearingPosting is marked for the PaymMode; otherwise false.
        #/// </returns>
        #public boolean checkBridgePosting_IN()
        #{
        #    boolean checkBridgePosting;
        #
        #    if ((this.AccountType == LedgerJournalACType::Vend
        #        && VendPaymModeTable::find(this.PaymMode).pdcClearingPosting
        #        && !this.BankChequeNum)
        #        || (this.AccountType == LedgerJournalACType::Cust
        #            && CustPaymModeTable::find(this.PaymMode).pdcClearingPosting))
        #    {
        #        checkBridgePosting = true;
        #    }
        #
        #    return checkBridgePosting;
        #}
      ENDSOURCE
      SOURCE #checkBudget
        #/// <summary>
        #/// Checks the availability of budget funds.
        #/// </summary>
        #public void checkBudget()
        #{
        #    if (this.RecId != 0)
        #    {
        #        // Perform budget check for journal lines.
        #        BudgetControlAccountingJournalProcessor::submitLedgerJournalVoucherToCheckBudget(
        #            this.ledgerJournalTable().JournalType,
        #            this.JournalNum,
        #            this.company(),
        #            this.Voucher);
        #    }
        #}
      ENDSOURCE
      SOURCE #checkCreditRemainAmountCur
        #/// <summary>
        #/// Checks the proposed settlements for possible overpayment.
        #/// </summary>
        #/// <param name="_ledgerPostingMessageCollection">
        #/// The posting messages collection; optional.
        #/// </param>
        #/// <returns>
        #/// true if the validation is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is design to be called from the <c>LedgerJournalCheckPost.checkJournal</c> method, not
        #/// as validation performed during posting.
        #/// </remarks>
        #public boolean checkCreditRemainAmountCur(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    #ISOCountryRegionCodes
        #    Amount              specAmount;
        #    boolean             ok = true;
        #    LedgerJournalType   ledgerJournalType = this.ledgerJournalTable().JournalType;
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    // The validation of the marked transaction balance is not appropriate for the bank reversal journal types.
        #    if (ledgerJournalType != LedgerJournalType::BankChequeReversal &&
        #        ledgerJournalType != LedgerJournalType::BankDepositPaymCancel
        #        && (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU
        #            , #isoPL, #isoCZ, #isoHU, #isoLT, #isoLV, #isoEE
        #            ]) ? ledgerJournalType != LedgerJournalType::RCash : true)
        #        )
        #    {
        #        specAmount = SpecTransManager::getTotalSettleAmountForSpecReference(
        #                        this.company(), this.TableId, this.RecId, this.CurrencyCode,
        #                        this.Company, this.TransDate,
        #                        exchangeRateHelper.prepareExchangeRateForStorage(this.crossrate()));
        #
        #        if ((this.amount() > 0 && specAmount > 0) ||
        #            (this.amount() < 0 && specAmount < 0))
        #        {
        #            if (_ledgerPostingMessageCollection)
        #            {
        #                ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS119352", this.Voucher));
        #            }
        #            else
        #            {
        #                ok = checkFailed(strFmt("@SYS119352", this.Voucher));
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkCurrency
        #public boolean checkCurrency(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    if (this.CurrencyCode && ! this.ExchRate)
        #    {
        #        if (_ledgerPostingMessageCollection)
        #        {
        #            return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS20792", this.CurrencyCode));
        #        }
        #        else
        #        {
        #            return checkFailed(strFmt("@SYS20792", this.CurrencyCode));
        #        }
        #    }
        #
        #    if (this.CurrencyCode && ! Currency::exist(this.CurrencyCode))
        #    {
        #        if (_ledgerPostingMessageCollection)
        #        {
        #            return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS1458", this.CurrencyCode));
        #        }
        #        else
        #        {
        #            return checkFailed(strFmt("@SYS1458", this.CurrencyCode));
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkCustomsTariffCode_IN
        #/// <summary>
        #/// Checks the customs tariff code to see if it is valid.
        #/// </summary>
        #/// <param name="_customsTariffCodeTableRecId">
        #/// The customs tariff code table record id.
        #/// </param>
        #/// <returns>
        #/// Returns true if the customs tariff code is valid; otherwise, false.
        #/// </returns>
        #public boolean  checkCustomsTariffCode_IN(RefRecId _customsTariffCodeTableRecId)
        #{
        #    return this.SalesPurchJournalLine_IN::checkCustomsTariffCode(_customsTariffCodeTableRecId, this.CustomsTariffDirection_IN, this.Company);
        #}
      ENDSOURCE
      SOURCE #checkDataAreaAccessible
        #boolean checkDataAreaAccessible(SelectableDataArea dataAreaId)
        #{
        #    #define.CheckDataAreaAccessible('CheckDataAreaAccessible')
        #    SysGlobalCache          cache = classfactory.globalCache();
        #    boolean                 isValid;
        #
        #    if(cache.isSet(#CheckDataAreaAccessible, dataAreaId))
        #    {
        #        isValid = cache.get(#CheckDataAreaAccessible, dataAreaId);
        #    }
        #    else
        #    {
        #        isValid = xDataArea::checkAccessible(dataAreaId);
        #        cache.set(#CheckDataAreaAccessible,dataAreaId, isValid);
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #checkEnvironmentFlowDataEntered
        #public server boolean checkEnvironmentFlowDataEntered()
        #{
        #    EMSFlow localFlowTable;
        #    EMSInvoiceRegisterFlowRelation localFlowRelation;
        #    boolean ok = true;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(EMS)) &&
        #                        this.AccountType == LedgerJournalACType::Vend &&
        #                        EMSActivation::isActive(this.parmAccount(), '' , ''))
        #    {
        #        select count(RecId) from localFlowTable exists join localFlowRelation
        #            where localFlowTable.FlowId == localFlowRelation.FlowId &&
        #              localFlowRelation.RefRecId == this.RecId;
        #
        #        if (localFlowTable.RecId == 0)
        #        {
        #            info(strFmt("@SYS132936", this.Voucher, this.parmAccount()));
        #            ok = false;
        #        }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkExchRate
        #private boolean checkExchRate()
        #{
        #    boolean ret = true;
        #    CurrencyCode companyCurrencyCode;
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    // This method is used to validate the Exch rate field.  Since the exchange rate
        #    // is for the account company need to use the account company currency code during validation
        #    // when this is an intercompany transaction.
        #
        #    if (this.isCompanyIntercompany(this.company()))
        #    {
        #        changecompany(this.Company)
        #        {
        #            companyCurrencyCode = CompanyInfo::standardCurrency();
        #        }
        #    }
        #    else
        #    {
        #        companyCurrencyCode = CompanyInfo::standardCurrency();
        #    }
        #
        #    if (this.ExchRate != 100.00 && this.CurrencyCode == companyCurrencyCode)
        #    {
        #        ret = checkFailed(strFmt("@SYS85793", exchangeRateHelper.displayStoredExchangeRate(100)));
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkFieldViewAccessLevel_BR
        #/// <summary>
        #/// This method will check if the column in the given table has proper field access.
        #/// </summary>
        #/// <param name="_tableId">
        #/// Table id of table for which the check will be done.
        #/// </param>
        #/// <param name="_fieldId">
        #/// Field id of table for which the check will be done.
        #/// </param>
        #/// <exception cref="Exception::Error">
        #/// If the field does not have proper access, the error meesage idicating of the insufficient rights will be thrown.
        #/// </exception>
        #private void checkFieldViewAccessLevel_BR(TableId _tableId, FieldId _fieldId)
        #{
        #    if (!hasFieldAccess(_tableId, _fieldId, AccessType::View))
        #    {
        #        throw error("@SYS57330");
        #    }
        #}
      ENDSOURCE
      SOURCE #checkInterCompany
        #public boolean checkInterCompany(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    boolean ok;
        #
        #    ok = this.isInterCompanySupportedByTransType();
        #
        #    if (ok && this.isCompanyIntercompany())
        #    {
        #        if (! LedgerInterCompany::find(this.Company).DebitLedgerDimension   ||
        #            ! LedgerInterCompany::find(this.Company).CreditLedgerDimension)
        #        {
        #            if (_ledgerPostingMessageCollection)
        #            {
        #                ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS21636", this.Company));
        #            }
        #            else
        #            {
        #                ok = checkFailed(strFmt("@SYS21636", this.Company));
        #            }
        #        }
        #    }
        #
        #    if (ok && this.OffsetLedgerDimension && this.isOffsetCompanyIntercompany())
        #    {
        #        if (! LedgerInterCompany::find(this.OffsetCompany).DebitLedgerDimension   ||
        #            ! LedgerInterCompany::find(this.OffsetCompany).CreditLedgerDimension)
        #        {
        #            if (_ledgerPostingMessageCollection)
        #            {
        #                ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS21636", this.OffsetCompany));
        #            }
        #            else
        #            {
        #                ok = checkFailed(strFmt("@SYS21636", this.OffsetCompany));
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkJournalAccountControl
        #/// <summary>
        #/// Performs journal control validation on the current record.
        #/// </summary>
        #/// <returns>
        #/// true if journal control validation passes; otherwise, false.
        #/// </returns>
        #public boolean checkJournalAccountControl()
        #{
        #    boolean isValid;
        #    LedgerJournalNameId journalName;
        #
        #    journalName = this.ledgerJournalTable().JournalName;
        #
        #    isValid = LedgerJournalControlHeader::validate(
        #        this.Company,
        #        this.AccountType,
        #        this.LedgerDimension,
        #        journalName,
        #        true);
        #
        #    // only validate the offset account when it has a value
        #    if (this.OffsetLedgerDimension != 0 && isValid)
        #    {
        #        isValid = LedgerJournalControlHeader::validate(
        #            this.getOffsetCompany(),
        #            this.OffsetAccountType,
        #            this.OffsetLedgerDimension,
        #            journalName,
        #            true);
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #checkMaximumRetailPrice_IN
        #/// <summary>
        #/// Checks whether maximum retail price is positive.
        #/// </summary>
        #/// <param name="_maximumRetailPrice">
        #/// The maximum retail price which has to be checked.
        #/// </param>
        #/// <returns>
        #/// Returns true if maximumretail price is greater than or equal to zero; otherwise false.
        #/// </returns>
        #public boolean checkMaximumRetailPrice_IN(Price  _maximumRetailPrice = this.MaximumRetailPrice_IN)
        #{
        #    return this.SalesPurchJournalLine_IN::checkMaximumRetailPrice(_maximumRetailPrice);
        #}
      ENDSOURCE
      SOURCE #checkNegInstPosting
        #public server boolean checkNegInstPosting(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    boolean                 ok = true;
        #    SpecTrans               specTransFieldList;
        #    CustTrans               markedCustTrans;
        #    CustBillOfExchangeTrans custBillOfExchangeTrans;
        #    VendTrans               markedVendTrans;
        #
        #    switch (this.ledgerJournalTable().JournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedCustTrans = specTransFieldList.custTrans();
        #
        #                custBillOfExchangeTrans =  CustBillOfExchangeTrans::findIdVoucherDate(
        #                                            markedCustTrans.BillOfExchangeID,
        #                                            markedCustTrans.Voucher,
        #                                            markedCustTrans.TransDate);
        #
        #                if (custBillOfExchangeTrans.RecId != 0)
        #                {
        #                    // The transaction cannot be marked from a draw BOE
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71530");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS71530");
        #                    }
        #                }
        #            }
        #
        #            if (this.SettleVoucher != SettlementType::SelectedTransact)
        #            {
        #                // Transaction(s) must be marked to settle from a draw BOE
        #                if (_ledgerPostingMessageCollection)
        #                {
        #                    ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS74480");
        #                }
        #                else
        #                {
        #                    ok = checkFailed("@SYS74480");
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::CustBillOfExchangeProtest :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedCustTrans = specTransFieldList.custTrans();
        #
        #                custBillOfExchangeTrans =  CustBillOfExchangeTrans::findIdVoucherDate(
        #                                            markedCustTrans.BillOfExchangeID,
        #                                            markedCustTrans.Voucher,
        #                                            markedCustTrans.TransDate);
        #
        #                if (custBillOfExchangeTrans.RecId == 0)
        #                {
        #                    // Only other BOE transactions can be protested
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71688");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS71688");
        #                    }
        #                }
        #                else
        #                {
        #                    if (custBillOfExchangeTrans.Status != CustVendNegInstStatus::Drawn      &&
        #                        custBillOfExchangeTrans.Status != CustVendNegInstStatus::Redrawn    &&
        #                        custBillOfExchangeTrans.Status != CustVendNegInstStatus::Remitted   &&
        #                        custBillOfExchangeTrans.Status != CustVendNegInstStatus::Honored)
        #                    {
        #                        // Only draw, redraw, remittance and settled BOE transactions can be protested
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71555");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71555");
        #                        }
        #                    }
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::CustBillOfExchangeRedraw :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedCustTrans = specTransFieldList.custTrans();
        #
        #                custBillOfExchangeTrans =  CustBillOfExchangeTrans::findIdVoucherDate(
        #                                            markedCustTrans.BillOfExchangeID,
        #                                            markedCustTrans.Voucher,
        #                                            markedCustTrans.TransDate);
        #
        #                if (custBillOfExchangeTrans.RecId == 0)
        #                {
        #                    // Only other BOE transactions can be redrawn
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71688");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS71688");
        #                    }
        #                }
        #                else
        #                {
        #                    if (custBillOfExchangeTrans.Status != CustVendNegInstStatus::Protested)
        #                    {
        #                        // Only protested BOE transactions can be redrawn
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71558");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71558");
        #                        }
        #                    }
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::CustPaymRemittance :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedCustTrans = specTransFieldList.custTrans();
        #
        #                custBillOfExchangeTrans =  CustBillOfExchangeTrans::findIdVoucherDate(
        #                                            markedCustTrans.BillOfExchangeID,
        #                                            markedCustTrans.Voucher,
        #                                            markedCustTrans.TransDate);
        #
        #                if (custBillOfExchangeTrans.RecId == 0)
        #                {
        #                    // Only other BOE transactions can be remitted
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71688");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS71688");
        #                    }
        #                }
        #                else
        #                {
        #                    if (custBillOfExchangeTrans.Status != CustVendNegInstStatus::Drawn      &&
        #                        custBillOfExchangeTrans.Status != CustVendNegInstStatus::Redrawn)
        #                    {
        #                        // Only drawn and redrawn BOE transactions can be remitted
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71567");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71567");
        #                        }
        #                    }
        #                }
        #
        #                if (!this.BankAccountId)
        #                {
        #                    // A bank account is required for a remittance BOE
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS74043");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS74043");
        #                    }
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::CustBillOfExchangeSettle :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedCustTrans = specTransFieldList.custTrans();
        #
        #                custBillOfExchangeTrans =  CustBillOfExchangeTrans::findIdVoucherDate(
        #                                            markedCustTrans.BillOfExchangeID,
        #                                            markedCustTrans.Voucher,
        #                                            markedCustTrans.TransDate);
        #
        #                if (custBillOfExchangeTrans.RecId == 0)
        #                {
        #                    // Only other BOE transactions can be settled
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71688");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS71688");
        #                    }
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedVendTrans = specTransFieldList.vendTrans();
        #
        #                switch (markedVendTrans.PromissoryNoteStatus)
        #                {
        #                    case CustVendNegInstStatus::None:
        #                    case CustVendNegInstStatus::Invoiced:
        #                        break;
        #                    default:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71711");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71711");
        #                        }
        #                }
        #            }
        #
        #            if (this.SettleVoucher != SettlementType::SelectedTransact)
        #            {
        #                if (_ledgerPostingMessageCollection)
        #                {
        #                    ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS75395");
        #                }
        #                else
        #                {
        #                    ok = checkFailed("@SYS75395");
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteRedraw :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedVendTrans = specTransFieldList.vendTrans();
        #
        #                switch (markedVendTrans.PromissoryNoteStatus)
        #                {
        #                    case CustVendNegInstStatus::None:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71692");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71692");
        #                        }
        #                        break;
        #                    case CustVendNegInstStatus::Honored:
        #                        break;
        #                    default:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71559");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71559");
        #                        }
        #                        break;
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::VendPaymRemittance :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedVendTrans = specTransFieldList.vendTrans();
        #
        #                switch (markedVendTrans.PromissoryNoteStatus)
        #                {
        #                    case CustVendNegInstStatus::None:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71692");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71692");
        #                        }
        #                        break;
        #                    case CustVendNegInstStatus::Drawn:
        #                    case CustVendNegInstStatus::Redrawn:
        #                    case CustVendNegInstStatus::Invoiced:
        #                        break;
        #                    default:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71568");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71568");
        #                        }
        #                }
        #            }
        #            if (!this.BankAccountId)
        #            {
        #                if (_ledgerPostingMessageCollection)
        #                {
        #                    ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS74043");
        #                }
        #                else
        #                {
        #                    ok = checkFailed("@SYS74043");
        #                }
        #            }
        #
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteSettle :
        #            while select crossCompany RefCompany, RefTableId, RefRecId from specTransFieldList
        #                where specTransFieldList.SpecCompany == this.company()
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecRecId == this.RecId
        #            {
        #                markedVendTrans = specTransFieldList.vendTrans();
        #
        #                switch (markedVendTrans.PromissoryNoteStatus)
        #                {
        #                    case CustVendNegInstStatus::None:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS71692");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS71692");
        #                        }
        #                        break;
        #
        #                    case CustVendNegInstStatus::Invoiced,
        #                         CustVendNegInstStatus::Protested:
        #                        if (_ledgerPostingMessageCollection)
        #                        {
        #                            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS73399");
        #                        }
        #                        else
        #                        {
        #                            ok = checkFailed("@SYS73399");
        #                        }
        #                        break;
        #                }
        #            }
        #
        #            break;
        #
        #        default :
        #            ok = true;
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkOpertaionType_MX
        #/// <summary>
        #/// Checks for the operation type if it is blank.
        #/// </summary>
        #/// <param name="_ledgerJournalType">
        #/// The value that is used to identify the journal.
        #/// </param>
        #/// <returns>
        #/// true if the operation type is not blank; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// The method is called to check whether the value of the operation type is available when the record
        #/// is saved.
        #/// </remarks>
        #public boolean checkOpertaionType_MX(LedgerJournalType  _ledgerJournalType)
        #{
        #    boolean isCommonTaxCodeMarked;
        #    boolean isVendorType;
        #    boolean otherTypeNotAllowed;
        #
        #    switch(_ledgerJournalType)
        #    {
        #        case LedgerJournalType::PurchaseLedger,
        #             LedgerJournalType::VendInvoicePoolNotPosted :
        #
        #            if (this.OperationType_MX == VendorOperationType_MX::Blank
        #                && (this.AccountType          == LedgerJournalACType::Vend
        #                    || this.OffsetAccountType == LedgerJournalACType::Vend))
        #            {
        #                return checkFailed("@SYS312596");
        #            }
        #            break;
        #
        #        case LedgerJournalType::Approval :
        #            if (this.OperationType_MX == VendorOperationType_MX::Blank)
        #            {
        #                return checkFailed("@SYS312596");
        #            }
        #            break;
        #
        #        case LedgerJournalType::Cost :
        #            if (this.OperationType_MX == VendorOperationType_MX::Blank)
        #            {
        #                isCommonTaxCodeMarked = DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(this.TaxGroup, this.TaxItemGroup);
        #                isVendorType          = DIOTAddlInfoForNoVendorLedger_MX::isOffsetTypeVend(this.OffsetAccountType);
        #                otherTypeNotAllowed   = DIOTAddlInfoForNoVendorLedger_MX::isOffsetTypeNotAllowed(this.OffsetAccountType);
        #
        #                if (isVendorType || (!otherTypeNotAllowed && isCommonTaxCodeMarked))
        #                {
        #                    return checkFailed("@SYS312596");
        #                }
        #            }
        #            break;
        #
        #        case LedgerJournalType::VendInvoiceRegister :
        #            if (this.OperationType_MX == VendorOperationType_MX::Blank)
        #            {
        #                isCommonTaxCodeMarked = DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(this.TaxGroup, this.TaxItemGroup);
        #                isVendorType          = DIOTAddlInfoForNoVendorLedger_MX::isVendType(this.AccountType, this.OffsetAccountType);
        #                otherTypeNotAllowed   = DIOTAddlInfoForNoVendorLedger_MX::isOtherTypeNotAllowed(this.AccountType, this.OffsetAccountType);
        #
        #                if (isVendorType || (!otherTypeNotAllowed && isCommonTaxCodeMarked))
        #                {
        #                    return checkFailed("@SYS312596");
        #                }
        #            }
        #            break;
        #
        #        default:
        #            break;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkPaymentFilledOk
        #public server boolean checkPaymentFilledOk(
        #    LedgerJournalTable  _ledgerJournalTable,
        #    Map                 _tmpVoucherMap = null)
        #{
        #    boolean ok = true;
        #
        #    switch (_ledgerJournalTable.JournalType)
        #    {
        #        case LedgerJournalType::CustPayment :
        #            if (this.AccountType == LedgerJournalACType::Cust)
        #            {
        #                ok = this.custPaymentFilledOk(_tmpVoucherMap);
        #            }
        #            break;
        #
        #        case LedgerJournalType::Payment :
        #            if (this.AccountType == LedgerJournalACType::Vend)
        #            {
        #                ok = this.vendPaymentFilledOk(_tmpVoucherMap);
        #            }
        #            break;
        #
        #        default :
        #            switch (this.AccountType)
        #            {
        #                case LedgerJournalACType::Cust :
        #                    if (this.AmountCurCredit)
        #                    {
        #                        ok = this.custPaymentFilledOk(_tmpVoucherMap);
        #                    }
        #                    break;
        #
        #                case LedgerJournalACType::Vend :
        #                    if (this.AmountCurDebit)
        #                    {
        #                        ok = this.vendPaymentFilledOk(_tmpVoucherMap);
        #                    }
        #                    break;
        #            }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkPaymentReferenceIS
        #/// <summary>
        #/// Verifies whether the payment reference is required for the transaction record.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans_Asset">
        #/// A table buffer representing the fix asset information related to the <c>LedgerJournalTrans</c>
        #/// record; optional.
        #/// </param>
        #/// <returns>
        #/// false if the general ledger account has the Mandatory Payment Reference option selected and the
        #/// Payment Reference field is empty; otherwise, true.
        #/// </returns>
        #/// <remarks>
        #/// A check for the payment reference is executed for ledger accounts only. However, this is a public
        #/// method and you can pass in a <c>LedgerJournalTrans</c> record together with a
        #/// <c>LedgerJournalTrans_Asset</c> instance that has not been committed to the database.
        #/// </remarks>
        #public boolean checkPaymentReferenceIS(LedgerJournalTrans_Asset _ledgerJournalTrans_Asset =
        #                                       this.findLedgerJournalTransAssetSibling())
        #{
        #    CompanyId                       companyId;
        #    boolean                         ok = true;
        #    LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        #    LedgerJournalEngine             ledgerJournalEngine = new LedgerJournalEngine();
        #    MainAccount                     mainAccount;
        #
        #    if (this.LedgerDimension && this.PaymReference == '')
        #    {
        #
        #        switch (this.AccountType)
        #        {
        #            case LedgerJournalACType::Ledger,
        #                 LedgerJournalACType::Project,
        #                 LedgerJournalACType::FixedAssets:
        #                ledgerDimensionDefaultAccount = LedgerJournalEngine::getDefaultAccount(this, _ledgerJournalTrans_Asset);
        #                break;
        #
        #            case LedgerJournalACType::Bank :
        #                ledgerDimensionDefaultAccount = BankAccountTable::findByLedgerDimension(this.LedgerDimension).LedgerDimension;
        #                break;
        #
        #            case LedgerJournalACType::Cust :
        #                ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(this.parmAccount(), CustParameters::find().PostingProfile);
        #                break;
        #
        #            case LedgerJournalACType::Vend :
        #                ledgerDimensionDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(this.parmAccount(), VendParameters::find().PostingProfile);
        #                break;
        #
        #            default :
        #                ledgerDimensionDefaultAccount = 0;
        #        }
        #
        #        // The following block is needed for the case that intercompany transactions is disabled
        #        // and someone passes in an empty string.
        #        companyId = this.Company;
        #        if (!companyId)
        #        {
        #            companyId = curext();
        #        }
        #        else
        #        {
        #            if (! xDataArea::exist(companyId))
        #            {
        #                throw error(strFmt("@SYS10666",companyId));
        #            }
        #        }
        #
        #        changecompany(companyId)
        #        {
        #            mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(ledgerDimensionDefaultAccount);
        #            if (mainAccount.MandatoryPaymentReference)
        #            {
        #                ok = checkFailed(strFmt("@SYS113268", this.Voucher, mainAccount.MainAccountId,
        #                                        this.accountNameFind(LedgerJournalACType::Ledger, ledgerDimensionDefaultAccount, companyId)));
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkPrepaymentTaxGroups
        #/// <summary>
        #/// Verifies the tax groups of a prepayment against any linked advance invoices.
        #/// </summary>
        #/// <param name="_ledgerPostingMessageCollection">
        #/// The posting messages collection; optional.
        #/// </param>
        #/// <remarks>
        #/// This method will only issue warnings, and therefore does not return a status.
        #/// </remarks>
        #public void checkPrepaymentTaxGroups(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    CzVendAdvanceInvoiceTable   vendAdvanceInvoiceTable;
        #    CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ, #isoHU]))
        #    {
        #        if (this.Prepayment && this.isTaxable())
        #        {
        #            // For taxable prepayments, warn of any linked advance invoices having different tax groups.
        #            if (this.AccountType == LedgerJournalACType::Vend)
        #            {
        #                vendAdvanceInvoiceTable = CzVendAdvanceInvoiceTable::findAllForPaymentDifferentTaxGroups(this);
        #                while (vendAdvanceInvoiceTable)
        #                {
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        _ledgerPostingMessageCollection.logAndThrowWarning(strFmt("@GLS223588", vendAdvanceInvoiceTable.InvoiceId, this.Voucher));
        #                    }
        #                    else
        #                    {
        #                        warning(strFmt("@GLS223588", vendAdvanceInvoiceTable.InvoiceId, this.Voucher));
        #                    }
        #                    next vendAdvanceInvoiceTable;
        #                }
        #            }
        #            else if (this.AccountType == LedgerJournalACType::Cust)
        #            {
        #                custAdvanceInvoiceTable = CzCustAdvanceInvoiceTable::findAllForPaymentDifferentTaxGroups(this);
        #                while (custAdvanceInvoiceTable)
        #                {
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        _ledgerPostingMessageCollection.logAndThrowWarning(strFmt("@GLS223588", custAdvanceInvoiceTable.InvoiceId, this.Voucher));
        #                    }
        #                    else
        #                    {
        #                        warning(strFmt("@GLS223588", custAdvanceInvoiceTable.InvoiceId, this.Voucher));
        #                    }
        #                    next custAdvanceInvoiceTable;
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkProjId
        #public boolean checkProjId()
        #{
        #    boolean ret = true;
        #
        #    if ( (this.AccountType == LedgerJournalACType::Project) && this.LedgerDimension)
        #    {
        #        if (!ProjTable::findByLedgerDimension(this.LedgerDimension).status().activeInTree())
        #        {
        #            ret = checkFailed("@SYS54705");
        #        }
        #    }
        #
        #    if (ret && (this.OffsetAccountType == LedgerJournalACType::Project) && this.OffsetLedgerDimension)
        #    {
        #        if (! ProjTable::findByLedgerDimension(this.OffsetLedgerDimension).status().activeInTree())
        #        {
        #            ret = checkFailed("@SYS54705");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkRDefferalsClosingDate_RU
        #public boolean checkRDefferalsClosingDate_RU()
        #{
        #    boolean                             allOk = true;
        #    LedgerJournalTrans_RDeferrals       ledgerJournalTrans_RDeferrals;
        #    PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        #    FromDate                            bookFromDate;
        #    ToDate                              bookToDate;
        #
        #    if (this.TransactionType == LedgerTransType::RDeferrals)
        #    {
        #        ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(this.RecId);
        #
        #        if (RDeferralsTable::find(ledgerJournalTrans_RDeferrals.DeferralsId).vatRefundingMethod == RDeferralsVATRefundingMethod::Proportional)
        #        {
        #            if (! PurchBookTable_RU::canProcessDate(this.TransDate))
        #            {
        #                allOk = checkFailed(strFmt("@GLS101156", this.TransDate));
        #            }
        #
        #            if (allOk && ledgerJournalTrans_RDeferrals.ToFromRecId)
        #            {
        #                [bookFromDate, bookToDate] = BookDataCalc_RU::datePeriodBook(this.TransDate);
        #
        #                select firstonly RecId, rDeferralsClosedAmount from processLogTransOper
        #                    where processLogTransOper.rDeferralsTransRecId  == ledgerJournalTrans_RDeferrals.ToFromRecId &&
        #                          processLogTransOper.CanceledRefRecId      == 0                                         &&
        #                          processLogTransOper.TransDate             >= bookFromDate                              &&
        #                          processLogTransOper.TransDate             <= bookToDate;
        #
        #                if (allOk && processLogTransOper.rDeferralsClosedAmount)
        #                {
        #                    allOk = checkFailed("@GLS114352");
        #                }
        #            }
        #        }
        #    }
        #    return allOk;
        #}
      ENDSOURCE
      SOURCE #checkReasonRefRecID
        #public boolean checkReasonRefRecID(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    ReasonCode          reasonCode;
        #    ReasonTable         reasonTable;
        #    boolean             isValid = true;
        #    LedgerJournalType   ledgerJournalType;
        #    LedgerJournalTable  ledgerJournalTable  = this.ledgerJournalTable();
        #
        #    ledgerJournalType = ledgerJournalTable.JournalType;
        #
        #    // isValidrieve the Reaon code from the reason reference table.
        #    reasonCode = ReasonTableRef::find(this.ReasonRefRecID).Reason;
        #
        #    if (isValid &&
        #        reasonCode)
        #    {
        #        reasonTable = ReasonTable::find(reasonCode);
        #        if (reasonTable.RecId == 0)
        #        {
        #            if (_ledgerPostingMessageCollection)
        #            {
        #                isValid = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
        #            }
        #            else
        #            {
        #                isValid = checkFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
        #            }
        #        }
        #    }
        #
        #    // Validate Reason code for these journals.
        #    if (isValid &&
        #       (ledgerJournalType == LedgerJournalType::BankChequeReversal ||
        #        ledgerJournalType == LedgerJournalType::BankDepositPaymCancel))
        #    {
        #        if (!reasonCode)
        #        {
        #            if ((ledgerJournalType == LedgerJournalType::BankChequeReversal &&
        #                 BankParameters::find().RequireChequeReversalReason) ||
        #                (ledgerJournalType == LedgerJournalType::BankDepositPaymCancel &&
        #                 BankParameters::find().RequireDepositCancelReason))
        #            {
        #                // The Reason code required.
        #                if (_ledgerPostingMessageCollection)
        #                {
        #                    isValid = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS26332", "@SYS111246"));
        #                }
        #                else
        #                {
        #                    isValid = checkFailed(strFmt("@SYS26332", "@SYS111246"));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            // If a Reason code is blank then these validations will not occur.
        #            if (reasonTable.Bank == NoYes::No)
        #            {
        #                // The Reason code is not active for 'Bank' transactions.
        #                if (_ledgerPostingMessageCollection)
        #                {
        #                    isValid = _ledgerPostingMessageCollection.logCheckFailed("@SYS115522");
        #                }
        #                else
        #                {
        #                    isValid = checkFailed("@SYS115522");
        #                }
        #            }
        #            else
        #            {
        #                switch (ledgerJournalType)
        #                {
        #                    case LedgerJournalType::BankChequeReversal:
        #                        if ((this.AccountType == LedgerJournalACType::Cust &&
        #                             reasonTable.Cust == NoYes::No) ||
        #                            (this.AccountType == LedgerJournalACType::Vend &&
        #                             reasonTable.Vend == NoYes::No))
        #                        {
        #                            // The Reason code is not active for 'Customer or Vendor' transactions.
        #                            if (_ledgerPostingMessageCollection)
        #                            {
        #                                isValid = _ledgerPostingMessageCollection.logCheckFailed("@SYS115522");
        #                            }
        #                            else
        #                            {
        #                                isValid = checkFailed("@SYS115522");
        #                            }
        #                        }
        #                        break;
        #
        #                    case LedgerJournalType::BankDepositPaymCancel:
        #                        if ((this.AccountType   == LedgerJournalACType::Cust &&
        #                             reasonTable.Cust   == NoYes::No) ||
        #                            (this.AccountType   == LedgerJournalACType::Ledger &&
        #                             reasonTable.Ledger == NoYes::No))
        #                        {
        #                            // The Reason code is not active for 'Customer or ledger' transactions.
        #                            if (_ledgerPostingMessageCollection)
        #                            {
        #                                isValid = _ledgerPostingMessageCollection.logCheckFailed("@SYS115522");
        #                            }
        #                            else
        #                            {
        #                                isValid = checkFailed("@SYS115522");
        #                            }
        #                        }
        #                        break;
        #                }
        #            }
        #        }
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #checkReleaseDate
        #/// <summary>
        #/// Checks the release date against the current date.
        #/// </summary>
        #/// <param name="_ledgerPostingMessageCollection">
        #/// The posting messages collection; optional.
        #/// </param>
        #/// <returns>
        #/// true if the release date is satisfied (in the past) and the transaction can be posted; otherwise,
        #/// false.
        #/// </returns>
        #public boolean checkReleaseDate(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    boolean ok = true;
        #    utcdatetime localUtc;
        #
        #    if (this.ReleaseDate != utcDateTimeNull() && this.ReleaseDate > DateTimeUtil::utcNow())
        #    {
        #        localUtc = DateTimeUtil::applyTimeZoneOffset(this.ReleaseDate, DateTimeUtil::getUserPreferredTimeZone());
        #
        #        if (_ledgerPostingMessageCollection)
        #        {
        #            ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS114593", datetime2str(localUtc, DateFlags::FormatAll)));
        #        }
        #        else
        #        {
        #            ok = checkFailed(strFmt("@SYS114593", datetime2str(localUtc, DateFlags::FormatAll)));
        #        }
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkServiceCode_IN
        #/// <summary>
        #/// This method is used to validate the user entry against the records in the master table for service codes.
        #/// </summary>
        #/// <param name="_serviceCode">
        #/// The service code that user selected/typed.
        #/// </param>
        #/// <returns>
        #/// true if the user entry is a valid one.
        #/// </returns>
        #
        #public boolean checkServiceCode_IN(ServiceCode_IN _serviceCode)
        #{
        #    boolean             isValid = true;
        #    ServiceCode_IN      serviceCode = _serviceCode;
        #    ServiceCodeTable_IN serviceCodeTable;
        #
        #    changecompany(this.Company)
        #    {
        #        serviceCodeTable = ServiceCodeTable_IN::findByServiceCode(serviceCode);
        #        if(serviceCode && serviceCodeTable.RecId == 0)
        #        {
        #            isValid = checkFailed(strFmt("@SYS316757", tablePName(ServiceCodeTable_IN)));
        #        }
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #checkSettledVendorAutority_IN
        #/// <summary>
        #/// Checks whether settled vendor authority.
        #/// </summary>
        #/// <param name="_checkStatus">
        #/// A boolean that indicates whether to throw error message.
        #/// </param>
        #/// <returns>
        #/// Returns true if transaction have been settled; otherwise false.
        #/// </returns>
        #public boolean checkSettledVendorAutority_IN(boolean _checkStatus = false)
        #{
        #    SpecTrans        specTrans;
        #    VendTransOpen    vendTransOpen;
        #    boolean          checkStatus;
        #    ;
        #    select firstonly RefRecId from specTrans
        #        where specTrans.SpecTableId == this.TableId
        #           && specTrans.SpecRecId   == this.RecId;
        #    select firstonly TaxWithholdStatus_IN from vendTransOpen
        #        where vendTransOpen.RecId   == specTrans.RefRecId;
        #    if (vendTransOpen.TaxWithholdStatus_IN)
        #    {
        #        checkStatus = true;
        #        if (_checkStatus)
        #        {
        #            throw error("@GLS223916");
        #        }
        #    }
        #
        #    return checkStatus;
        #}
      ENDSOURCE
      SOURCE #checkVATNumJournal
        #private boolean checkVATNumJournal()
        #{
        #    boolean     ret = true;
        #
        #    if (this.ledgerJournalTable().JournalType == LedgerJournalType::VendPaymRemittance       ||
        #       (this.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteSettle &&
        #        VendParameters::find().NotesJournalsValidations))
        #    {
        #        return true;
        #    }
        #
        #
        #    if (this.AccountType == LedgerJournalACType::Cust && this.Invoice)
        #    {
        #        if (TaxVATNumTable::isVATNumMandatory(CustParameters::find().MandatoryInvoiceVATNum, this))
        #        {
        #            ret = checkFailed("@SYS54494");
        #        }
        #    }
        #    else
        #    {
        #        if (this.AccountType == LedgerJournalACType::Vend && this.Invoice)
        #        {
        #            if (TaxVATNumTable::isVATNumMandatory(VendParameters::find().MandatoryInvoiceVATNum, this))
        #            {
        #                ret = checkFailed("@SYS54494");
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #checkVATPosting
        #public boolean checkVATPosting()
        #{
        #    boolean                 ok;
        #    TaxLedgerAccountGroup   taxLedgerAccountGroupFieldList;
        #    MainAccount             mainAccount;
        #    #ISOCountryRegionCodes
        #    LedgerDimensionDefaultAccount       defaultAccount;
        #    boolean                             countryRegion_RU;
        #    ok = true;
        #
        #
        #
        #    if (this.TaxCode == '' && this.AccountType == LedgerJournalACType::Ledger)
        #    {
        #        mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(this.LedgerDimension);
        #
        #        if (mainAccount &&
        #            MainAccount::existLedgerPostingType(mainAccount.RecId, LedgerPostingType::Tax))
        #        {
        #            defaultAccount = DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.LedgerDimension);
        #
        #            countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #            select firstonly RecId from taxLedgerAccountGroupFieldList
        #                where   taxLedgerAccountGroupFieldList.TaxReportLedgerDimension == defaultAccount
        #                        || (countryRegion_RU
        #                             && (
        #                                   taxLedgerAccountGroupFieldList.TaxDeferredLedgerDimension_RU         == defaultAccount
        #                                || taxLedgerAccountGroupFieldList.TaxOutgoingOffsetLedgerDimension_RU   == defaultAccount
        #                                || taxLedgerAccountGroupFieldList.TaxIncomingPaymentLedgerDimension_RU  == defaultAccount
        #                                || taxLedgerAccountGroupFieldList.TaxIncomingLedgerDimension            == defaultAccount
        #                                || taxLedgerAccountGroupFieldList.TaxOffsetUseTaxLedgerDimension        == defaultAccount
        #                                )
        #                             );
        #
        #            if (!taxLedgerAccountGroupFieldList.RecId)
        #            {
        #                return checkFailed(strFmt("@SYS27130"));
        #            }
        #        }
        #    }
        #
        #    ok = this.checkVatTransaction() && ok;
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkVatRegData_W
        #server public boolean checkVatRegData_W(Map _tmpVoucherMap = null)
        #{
        #    #ISOCountryregionCodes
        #    boolean            ok        = true;
        #    Voucher            voucher   = LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap);
        #    LedgerJournalTrans ledgerJournalTransMain;
        #    boolean            plEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        #    LedgerJournalTable ledgerJournalTable;
        #    boolean            isPayment;
        #
        #    if (((this.TaxGroup && this.TaxItemGroup) || this.TaxCode))
        #    {
        #        if (plEnabled)
        #        {
        #            if (! this.VatDueDate_W)
        #            {
        #                if (this.LedgerDimension && this.OffsetLedgerDimension)
        #                {
        #                    ledgerJournalTransMain = this;
        #                }
        #                else
        #                {
        #                    ledgerJournalTransMain = LedgerJournalTrans::mainAccount(this.JournalNum, voucher);
        #                    if (ledgerJournalTransMain.AccountType != LedgerJournalACType::Cust &&
        #                        ledgerJournalTransMain.AccountType != LedgerJournalACType::Vend)
        #                    {
        #                        ledgerJournalTransMain = this;
        #                    }
        #                }
        #
        #                if ((ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust && CustTable::find(DimensionStorage::ledgerDimension2AccountNum(this.LedgerDimension)).MandatoryVatDate_PL) ||
        #                    (ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend && VendTable::find(DimensionStorage::ledgerDimension2AccountNum(this.LedgerDimension)).MandatoryVatDate_PL) ||
        #                    (ledgerJournalTransMain.AccountType != LedgerJournalACType::Vend && this.AccountType != LedgerJournalACType::Cust))
        #                {
        #                    ok = checkFailed(strFmt("@GLS109269", voucher));
        #                }
        #            }
        #
        #            ledgerJournalTable = this.ledgerJournalTable();
        #            isPayment = (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment || ledgerJournalTable.JournalType == LedgerJournalType::Payment);
        #
        #            if (! this.vatNumJournal && !isPayment)
        #            {
        #                ok = checkFailed(strFmt("@GLS109854", voucher));
        #            }
        #            if (!this.Addressing_PL && !isPayment && !ledgerJournalTable.isBillOfExchangePromissoryOrRemittance())
        #            {
        #                ok = checkFailed(strFmt("@GLS109853", voucher));
        #            }
        #            if (!this.CustVendName_PL && !isPayment && !ledgerJournalTable.isBillOfExchangePromissoryOrRemittance())
        #            {
        #                ok = checkFailed(strFmt("@GLS109851", voucher));
        #            }
        #        }
        #
        #        if (! this.DocumentDate && (plEnabled || this.IntraComVATDueDate_W))
        #        {
        #            ok = checkFailed(strFmt("@GLS109925", voucher));
        #        }
        #
        #        if (this.IntraComVATDueDate_W &&
        #            this.DocumentDate > this.VatDueDate_W)
        #        {
        #            ok = checkFailed("@GLS110105");
        #        }
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkVatTransaction
        #private boolean checkVatTransaction()
        #{
        #    #ISOCountryRegionCodes
        #    RTax25LedgerAccountGroup    rTax25LedgerAccountGroup;
        #    boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #    TaxLedgerAccounts_IN        taxLedgerAccounts;
        #    TaxLedgerAccountGroup_IN    taxLedgerAccountGrp;
        #    TaxLedgerAccountSetup_IN    taxLedgerAccountSetup;
        #    boolean                     taxesMarked = TaxParameters::checkTaxParameters_IN();
        #    boolean                         ok = true;
        #    TaxLedgerAccountGroup           taxLedgerAccountGroup;
        #    LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        #
        #    if ((this.AccountType == LedgerJournalACType::Ledger || this.AccountType == LedgerJournalACType::Project)  && this.TaxCode)
        #    {
        #        taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::find(this.TaxCode).TaxAccountGroup);
        #
        #        if (countryRegion_RU)
        #        {
        #            rTax25LedgerAccountGroup = RTax25LedgerAccountGroup::find(taxLedgerAccountGroup.TaxAccountGroup);
        #        }
        #        if(taxesMarked)
        #        {
        #            taxLedgerAccountGrp   = TaxLedgerAccountGroup_IN::find(TaxTable::find(this.TaxCode).TaxLedgerAccountGroup_IN);
        #        }
        #
        #        ledgerDimensionDefaultAccount = DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.LedgerDimension);
        #        if (ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxIncomingLedgerDimension ||
        #            ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxOutgoingLedgerDimension ||
        #            ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxReportLedgerDimension   ||
        #            ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxUseTaxLedgerDimension   ||
        #            ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxOffsetUseTaxLedgerDimension ||
        #            (countryRegion_RU
        #                && (ledgerDimensionDefaultAccount    == taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU
        #                    || ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxDeferredLedgerDimension_RU
        #                    || ledgerDimensionDefaultAccount == taxLedgerAccountGroup.TaxIncomingPaymentLedgerDimension_RU
        #                    || ledgerDimensionDefaultAccount == rTax25LedgerAccountGroup.AssessedTaxLedgerDimension
        #                    || ledgerDimensionDefaultAccount == rTax25LedgerAccountGroup.ctaLedgerDimension
        #                    || ledgerDimensionDefaultAccount == rTax25LedgerAccountGroup.ctlLedgerDimension
        #                    || ledgerDimensionDefaultAccount == rTax25LedgerAccountGroup.dtaLedgerDimension
        #                    || ledgerDimensionDefaultAccount == rTax25LedgerAccountGroup.dtlLedgerDimension)))
        #        {
        #            ok = true;
        #        }
        #
        #        else if (taxLedgerAccountGrp)
        #        {
        #            select firstonly taxLedgerAccounts
        #                exists join taxLedgerAccountSetup
        #                where taxLedgerAccountSetup.RecId  == taxLedgerAccounts.TaxLedgerAccountSetup
        #                    && taxLedgerAccountSetup.TaxLedgerAccountGroup == taxLedgerAccountGrp.RecId;
        #
        #            if (taxLedgerAccounts)
        #            {
        #                ok = true;
        #            }
        #            else
        #            {
        #                return checkFailed(strFmt("@GLS5805", DimensionStorage::ledgerDimension2AccountNum(ledgerDimensionDefaultAccount), taxLedgerAccountGrp.TaxAccountGroup, this.TaxCode));
        #            }
        #        }
        #        else
        #        {
        #            if (taxesMarked && TaxTable::find(this.TaxCode).TaxType_IN != TaxType_IN::None)
        #            {
        #                return checkFailed(strFmt("@GLS5805", DimensionStorage::ledgerDimension2AccountNum(ledgerDimensionDefaultAccount), taxLedgerAccountGrp.TaxAccountGroup, this.TaxCode));
        #            }
        #            else
        #            {
        #            ok = checkFailed(strFmt("@SYS323550",
        #                                    DimensionStorage::ledgerDimension2AccountNum(ledgerDimensionDefaultAccount),
        #                                    taxLedgerAccountGroup.TaxAccountGroup,
        #                                    this.TaxCode));
        #            }
        #        }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkVendPrepayment_CZ
        #public boolean checkVendPrepayment_CZ(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    VendParameters vendParameters;
        #
        #    boolean ret = true;
        #
        #    if ((this.AccountType       == LedgerJournalACType::Vend ||
        #         this.OffsetAccountType == LedgerJournalACType::Vend) &&
        #        this.Prepayment                                       &&
        #        this.TaxGroup                                         &&
        #        this.TaxItemGroup)
        #    {
        #        vendParameters = VendParameters::find();
        #
        #        if (vendParameters.TaxOnPrepayment &&
        #            vendParameters.ProhibitVATinVendJournal_CZ)
        #        {
        #            if (_ledgerPostingMessageCollection)
        #            {
        #                ret = _ledgerPostingMessageCollection.logCheckFailed("@GLS111782");
        #            }
        #            else
        #            {
        #                ret = checkFailed("@GLS111782");
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkVoucherNotUsed
        #private server boolean checkVoucherNotUsed(LedgerJournalTable _ledgerJournalTable,
        #                                           Voucher            _voucher = this.Voucher)
        #{
        #    LedgerJournalTrans      ledgerJournalTransLocal;
        #    LedgerJournalTable      ledgerJournalTableLocal;
        #
        #    ledgerJournalTransLocal.selectLocked(false);
        #
        #    select firstonly RecId from ledgerJournalTransLocal
        #        where ledgerJournalTransLocal.Voucher == _voucher &&
        #                ledgerJournalTransLocal.JournalNum != this.JournalNum
        #        exists join ledgerJournalTableLocal
        #            where ledgerJournalTableLocal.JournalNum == ledgerJournalTransLocal.JournalNum &&
        #                ledgerJournalTableLocal.NumberSequenceTable == _ledgerJournalTable.NumberSequenceTable;
        #
        #    if (ledgerJournalTransLocal)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkVoucherNotUsedDataSource
        #/// <summary>
        #/// Determines if the voucher is being used by a different <c>ledgerJournalTrans</c> row on a form's datasource that is not in the database.
        #/// </summary>
        #/// <param name="_voucher">
        #/// The voucher number in use; optional.
        #/// </param>
        #/// <returns>
        #/// False if the voucher is in use; otherwise, true.
        #/// </returns>
        #public client boolean checkVoucherNotUsedDataSource(Voucher _voucher = this.Voucher)
        #{
        #    FormDataSource      formDataSource;
        #    LedgerJournalTrans  ledgerJournalTransLocal;
        #    LedgerJournalTrans  ledgerJournalTransEmpty;
        #
        #    if (this.isFormDataSource())
        #    {
        #        ledgerJournalTransEmpty.clear();
        #        formDataSource = this.dataSource();
        #        // The getFirst method must have false specified so only the records currently in memory are read since the upsaved record can only exist in memory
        #        ledgerJournalTransLocal = formDataSource.getFirst(0, false) as LedgerJournalTrans;
        #        while (!ledgerJournalTransLocal.equal(ledgerJournalTransEmpty))
        #        {
        #            if (!ledgerJournalTransLocal.RecId &&
        #                ledgerJournalTransLocal.LineNum     != this.LineNum    &&
        #                ledgerJournalTransLocal.JournalNum  == this.JournalNum &&
        #                ledgerJournalTransLocal.Voucher     == _voucher)
        #            {
        #                return false;
        #            }
        #            ledgerJournalTransLocal = formDataSource.getNext() as LedgerJournalTrans;
        #        }
        #    }
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkVoucherSeries
        #public boolean checkVoucherSeries(LedgerJournalTable _ledgerJournalTable)
        #{
        #    boolean                 voucherOk = true;
        #    NumberSequenceTable     numberSequenceTable;
        #    RefRecId                voucherSeries;
        #    NumberSequenceFormat    format;
        #    Integer                 voucherNumber;
        #
        #    voucherSeries = _ledgerJournalTable.NumberSequenceTable;
        #    if (!voucherSeries)
        #        voucherSeries = LedgerJournalName::find(_ledgerJournalTable.JournalName).NumberSequenceTable;
        #
        #    format = NumberSequenceTable::find(voucherSeries).Format;
        #
        #    voucherNumber = NumberSeq::numRemoveFormat(this.Voucher, format);
        #
        #    numberSequenceTable = NumberSequenceTable::find(voucherSeries);
        #    if (any2int(voucherNumber) < numberSequenceTable.Lowest ||
        #        any2int(voucherNumber) > numberSequenceTable.Highest)
        #        voucherOk = checkFailed(strFmt("@SYS18410", this.Voucher));
        #
        #    return voucherOk;
        #}
      ENDSOURCE
      SOURCE #checkZeroAmount
        #public boolean checkZeroAmount(AssetTransTypeJournal _assetTransType, LedgerPostingMessageLog _ledgerPostingMessageCollection = null
        #    ,boolean _isAssembling = false
        #    )
        #{
        #    boolean ok = true;
        #    // <GBR>
        #    boolean acceptZeroAmount;
        #
        #    if(BrazilParameters::isEnabled())
        #    {
        #        if(this.AccountType != LedgerJournalACType::Bank)
        #        {
        #            if(this.AccountType == LedgerJournalACType::Vend)
        #            {
        #                acceptZeroAmount = TaxWithhold::hasWithhold_BR(this.findVendTransOpen_BR(), this);
        #            }
        #            else if(this.AccountType == LedgerJournalACType::Cust)
        #            {
        #                acceptZeroAmount = TaxWithhold::hasWithhold_BR(this.findCustTransOpen_BR(), this);
        #            }
        #        }
        #        else
        #        {
        #            acceptZeroAmount = true;
        #        }
        #    }
        #    // </GBR>
        #
        #    if (_assetTransType   != AssetTransTypeJournal::DisposalSale  &&
        #        _assetTransType   != AssetTransTypeJournal::DisposalScrap &&
        #        !_isAssembling                                            &&
        #        this.TransactionType  != LedgerTransType::Allocation          &&
        #        this.AmountCurCredit  == 0                                    &&
        #        this.AmountCurDebit   == 0                                    &&
        #        this.Qty              == 0
        #        // <GBR>
        #        && ((BrazilParameters::isEnabled() && !acceptZeroAmount) || !BrazilParameters::isEnabled())
        #        // </GBR>
        #        )
        #    {
        #        if (_ledgerPostingMessageCollection)
        #        {
        #            ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS25624");
        #        }
        #        else
        #        {
        #            ok = checkFailed("@SYS25624");
        #        }
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #clearAgreementDimension_RU
        #/// <summary>
        #///     Clears agreement dimension of the current <c>LedgerJournalTrans</c> record depending on account type.
        #/// </summary>
        #/// <param name="_accountOffsetaccount">
        #///     Account type, account or offset account; optional.
        #/// </param>
        #public void clearAgreementDimension_RU(AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
        #{
        #    DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        #    DimensionDefault defaultDimension;
        #    RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        #
        #    void clearDefaultDimension(AccountOffsetaccount _accountOffsetaccountLocal)
        #    {
        #        if (_accountOffsetaccountLocal == AccountOffsetaccount::Account)
        #        {
        #            if (this.DefaultDimension)
        #            {
        #                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(this.DefaultDimension);
        #                dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
        #                this.DefaultDimension = dimAttrValueSetStorage.save();
        #            }
        #        }
        #        else
        #        if (_accountOffsetaccountLocal == AccountOffsetaccount::OffsetAccount)
        #        {
        #            if (this.OffsetDefaultDimension)
        #            {
        #                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(this.OffsetDefaultDimension);
        #                dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
        #                this.OffsetDefaultDimension = dimAttrValueSetStorage.save();
        #            }
        #        }
        #    }
        #
        #    void clearOffsetLedgerDimension()
        #    {
        #        defaultDimension = DimensionStorage::getDefaultDimensionFromLedgerDimension(this.OffsetLedgerDimension);
        #        if (defaultDimension)
        #        {
        #            dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
        #            dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
        #            defaultDimension = dimAttrValueSetStorage.save();
        #
        #            this.OffsetLedgerDimension = DimensionDefaultingService::serviceCreateLedgerDimension(
        #                DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.OffsetLedgerDimension),
        #                defaultDimension);
        #        }
        #    }
        #
        #    if (dimAttrRecId)
        #    {
        #        clearDefaultDimension(_accountOffsetaccount);
        #
        #        if (_accountOffsetaccount == AccountOffsetaccount::Account)
        #        {
        #            if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #            {
        #                clearOffsetLedgerDimension();
        #            }
        #            else
        #            if (this.OffsetAccountType != LedgerJournalACType::Cust
        #            && this.OffsetAccountType != LedgerJournalACType::Vend
        #            && this.OffsetAccountType != LedgerJournalACType::Project)
        #            {
        #                clearDefaultDimension(AccountOffsetaccount::OffsetAccount);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #clearBankCurrencyAmount
        #/// <summary>
        #/// Clears the bank currency amount.
        #/// </summary>
        #public void clearBankCurrencyAmount()
        #{
        #    this.BankCurrencyAmount = 0;
        #    this.BankCurrency       = '';
        #}
      ENDSOURCE
      SOURCE #closeTaxWithholdEditStatus_BR
        #public void closeTaxWithholdEditStatus_BR()
        #{
        #    LedgerJournalTransPayment_BR ledgerJournalTransPaym = this.getPaymentExtension_BR();
        #    ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Closed;
        #    this.packExtensionTable(ledgerJournalTransPaym);
        #}
      ENDSOURCE
      SOURCE #compAddressComplement_BR
        #/// <summary>
        #///    Gets the building name of the company.
        #/// </summary>
        #/// <returns>
        #///    Company BuildingCompliment.
        #/// </returns>
        #display LogisticsAddressBuildingCompliment compAddressComplement_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).BuildingCompliment;
        #}
      ENDSOURCE
      SOURCE #companyInfo
        #/// <summary>
        #/// Retrieves the <c>CompanyInfo</c> record associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>CompanyInfo</c> record.
        #/// </returns>
        #public CompanyInfo companyInfo()
        #{
        #    return CompanyInfo::findDataArea(this.company());
        #}
      ENDSOURCE
      SOURCE #companyName_BR
        #/// <summary>
        #/// Retrieves the journal line company's name.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's name.
        #/// </returns>
        #display CompanyName companyName_BR()
        #{
        #    return CompanyInfo::findDataArea(this.DataAreaId).Name;
        #}
      ENDSOURCE
      SOURCE #compCityName_BR
        #/// <summary>
        #/// Retrieves the journal line company's primary address city.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's primary address city.
        #/// </returns>
        #display LogisticsAddressCity compCityName_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).City;
        #}
      ENDSOURCE
      SOURCE #compCNPJCPFNum_BR
        #/// <summary>
        #/// Retrieves the journal line company's CNPJ/CPF number.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's CNPJ/CPF number.
        #/// </returns>
        #display CNPJNum_BR compCNPJCPFNum_BR()
        #{
        #    return CompanyInfo::findDataArea(this.DataAreaId).cnpjCPFNum_BR();
        #}
      ENDSOURCE
      SOURCE #compDistrictName_BR
        #/// <summary>
        #/// Retrieves the journal line company's address district name.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's address district name.
        #/// </returns>
        #display LogisticsAddressStreet compDistrictName_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).DistrictName;
        #}
      ENDSOURCE
      SOURCE #compStateName_BR
        #/// <summary>
        #/// Retrieves the journal line company's address state name.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's address state name.
        #/// </returns>
        #display AddressStatename compStateName_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).State;
        #}
      ENDSOURCE
      SOURCE #compStreetName_BR
        #/// <summary>
        #/// Retrieves the journal line company's address street.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's address street.
        #/// </returns>
        #display LogisticsAddressStreet compStreetName_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).Street;
        #}
      ENDSOURCE
      SOURCE #compStreetNumber_BR
        #/// <summary>
        #///    Gets the StreetNumber of the company.
        #/// </summary>
        #/// <returns>
        #///    Company StreetNumber.
        #/// </returns>
        #display LogisticsAddressStreetNumber compStreetNumber_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).StreetNumber;
        #}
      ENDSOURCE
      SOURCE #compZipCode_BR
        #/// <summary>
        #/// Retrieves the journal line company's address zip code.
        #/// </summary>
        #/// <returns>
        #/// The journal line company's address zip code.
        #/// </returns>
        #display LogisticsAddressZipCodeId compZipCode_BR()
        #{
        #    return DirParty::primaryPostalAddress(
        #        DirPartyTable::findRec(CompanyInfo::findDataArea(this.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
        #        ).ZipCode;
        #}
      ENDSOURCE
      SOURCE #convertCustPaymAmountCurToDebitCredit
        #/// <summary>
        #/// Converts the specified customer payment amount into the appropriate debit or credit.
        #/// </summary>
        #/// <param name="_custPaymAmountCur">
        #/// The customer payment amount to be converted.
        #/// </param>
        #/// <remarks>
        #/// The <c>displayCustPaymAmount</c> method is the complement of this method.
        #/// </remarks>
        #public void convertCustPaymAmountCurToDebitCredit(AmountCur _custPaymAmountCur)
        #{
        #    if (_custPaymAmountCur > 0)
        #    {
        #        this.AmountCurCredit = _custPaymAmountCur;
        #        this.AmountCurDebit = 0;
        #    }
        #    else
        #    {
        #        this.AmountCurDebit = -_custPaymAmountCur;
        #        this.AmountCurCredit = 0;
        #    }
        #}
      ENDSOURCE
      SOURCE #copyDimension
        #/// <summary>
        #/// Copies a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </summary>
        #/// <param name="_defaultDimension">
        #/// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_dimensionCopy">
        #/// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that can be applied to the <c>defaultDimension</c> field on the current record.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten.
        #/// </remarks>
        #public DimensionDefault copyDimension(
        #    DimensionDefault _defaultDimension,
        #    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        #    )
        #{
        #    return _dimensionCopy.copy(_defaultDimension);
        #}
        #
      ENDSOURCE
      SOURCE #copyTo
        #/// <summary>
        #/// Copies the nonsystem fields from this buffer to the destination buffer.
        #/// </summary>
        #/// <param name="_destination">
        #/// The buffer to which to copy the nonsystem fields.
        #/// </param>
        #/// <remarks>
        #/// The <c>Common.data</c> method forces the system fields to be copied across. Some scenarios, such as
        #/// in-memory rollbacks of buffers, should not have those fields copied across.
        #/// </remarks>
        #public void copyTo(LedgerJournalTrans _destination)
        #{
        #    SysDictField field;
        #    FieldId fieldId;
        #    SysDictTable sysDictTable = new SysDictTable(tableNum(LedgerJournalTrans));
        #    Set fieldsSet;
        #    Set systemFieldIds = new Set(Types::Integer);
        #    SetEnumerator fieldSetEnumerator;
        #
        #    // Generate the list of system fields contained by this table.
        #    systemFieldIds.add(fieldNum(LedgerJournalTrans, RecId));
        #    systemFieldIds.add(fieldNum(LedgerJournalTrans, RecVersion));
        #    systemFieldIds.add(fieldNum(LedgerJournalTrans, DataAreaId));
        #
        #
        #    // Copy the non-system fields from this buffer to the destination buffer.
        #    fieldsSet = sysDictTable.fields();
        #    fieldSetEnumerator = fieldsSet.getEnumerator();
        #    while(fieldSetEnumerator.moveNext())
        #    {
        #        field = fieldSetEnumerator.current();
        #        fieldId = field.id();
        #        if (!systemFieldIds.in(fieldId))
        #        {
        #            // This is not a system field, so copy the value across.
        #            _destination.(fieldId) = this.(fieldId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #correct
        #public boolean correct()
        #{
        #    return ((this.AmountCurCredit < 0) || (this.AmountCurDebit < 0));
        #}
      ENDSOURCE
      SOURCE #createNewPayment
        #public server void createNewPayment(
        #    SpecTrans     _specTrans,
        #    CustVendTrans _custVendTrans)
        #{
        #    LedgerJournalTrans      newLedgerJournalTrans = this.data();
        #    LedgerJournalTrans      existLedgerJournalTrans;
        #    VendTransOpen           vendTransOpenCur;
        #    CustTransOpen           custTransOpenCur;
        #    LedgerJournalType       journalType;
        #    AmountCur               fineInterestAmountCur;
        #    AmountCur               fineAmountCur;
        #    LedgerJournalTransPayment_BR existTransPayment_BR;
        #    LedgerJournalTransPayment_BR newTransPayment_BR;
        #    LedgerJournalTransPayment_BR thisPayment_BR;
        #    TaxWithholdTrans        withholdTransData;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        #    {
        #        newLedgerJournalTrans.SysExtensionSerializerMap::copyExtensionTableData(this);
        #    }
        #
        #    ttsbegin;
        #
        #    if (SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId) > 1)
        #    {
        #        if (CustVendPaymModeTable::findCommon(_custVendTrans).PaymSumBy != PaymSumBy::Invoice)
        #        {
        #            if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        #
        #            {
        #            _custVendTrans.DefaultDimension = newLedgerJournalTrans.DefaultDimension;
        #            select forupdate firstonly existLedgerJournalTrans
        #                where existLedgerJournalTrans.JournalNum            == newLedgerJournalTrans.JournalNum
        #                   && existLedgerJournalTrans.AccountType           == newLedgerJournalTrans.AccountType
        #                   && existLedgerJournalTrans.LedgerDimension       == newLedgerJournalTrans.LedgerDimension
        #                   && existLedgerJournalTrans.PaymMode              == _custVendTrans.PaymMode
        #                   && existLedgerJournalTrans.PaymSpec              == newLedgerJournalTrans.PaymSpec
        #                   && existLedgerJournalTrans.CurrencyCode          == newLedgerJournalTrans.CurrencyCode
        #                   && existLedgerJournalTrans.PostingProfile        == newLedgerJournalTrans.PostingProfile
        #                   && existLedgerJournalTrans.DefaultDimension      == newLedgerJournalTrans.DefaultDimension
        #                   && existLedgerJournalTrans.CustVendBankAccountId == newLedgerJournalTrans.CustVendBankAccountId
        #                   && existLedgerJournalTrans.OffsetAccountType     == newLedgerJournalTrans.OffsetAccountType
        #                   && existLedgerJournalTrans.OffsetLedgerDimension == newLedgerJournalTrans.OffsetLedgerDimension
        #                   && existLedgerJournalTrans.PaymentStatus         == newLedgerJournalTrans.PaymentStatus
        #                   && existLedgerJournalTrans.PaymId                == newLedgerJournalTrans.PaymId;
        #            }
        #            else
        #            {
        #            select forupdate firstonly existLedgerJournalTrans
        #                where existLedgerJournalTrans.JournalNum        == newLedgerJournalTrans.JournalNum
        #                   && existLedgerJournalTrans.AccountType       == newLedgerJournalTrans.AccountType
        #                   && existLedgerJournalTrans.LedgerDimension   == newLedgerJournalTrans.LedgerDimension
        #                   && existLedgerJournalTrans.PaymMode          == _custVendTrans.PaymMode
        #                   && existLedgerJournalTrans.PaymSpec          == newLedgerJournalTrans.PaymSpec
        #                   && existLedgerJournalTrans.CurrencyCode      == newLedgerJournalTrans.CurrencyCode
        #                   && existLedgerJournalTrans.PaymId            == newLedgerJournalTrans.PaymId;
        #
        #            }
        #        }
        #
        #        if (existLedgerJournalTrans.RecId)
        #        {
        #            existLedgerJournalTrans.amountCur2DebCred(existLedgerJournalTrans.amount() - _specTrans.Balance01);
        #            this.amountCur2DebCred(this.amount() + _specTrans.Balance01);
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                journalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #                if (journalType == LedgerJournalType::Payment)
        #                {
        #                    vendTransOpenCur = VendTransOpen::find(_specTrans.RefRecId);
        #
        #                    fineInterestAmountCur  = vendTransOpenCur.InterestAmountPaymCur_BR;
        #                    fineAmountCur          = vendTransOpenCur.FineAmountPaymCur_BR;
        #
        #                    existLedgerJournalTrans.amountCur2DebCred(existLedgerJournalTrans.amount()
        #                                                              - (fineInterestAmountCur + fineAmountCur));
        #
        #                    existTransPayment_BR = existLedgerJournalTrans.getPaymentExtension_BR();
        #                    existTransPayment_BR.FinInterestAmountCur_BR -= fineInterestAmountCur;
        #                    existTransPayment_BR.FineAmountCur_BR        -= fineAmountCur;
        #                    existLedgerJournalTrans.packExtensionTable(existTransPayment_BR);
        #
        #                    this.amountCur2DebCred(this.amount() + (fineInterestAmountCur + fineAmountCur));
        #
        #                    thisPayment_BR = this.getPaymentExtension_BR();
        #                    thisPayment_BR.FinInterestAmountCur_BR += fineInterestAmountCur;
        #                    thisPayment_BR.FineAmountCur_BR        += fineAmountCur;
        #                    this.packExtensionTable(thisPayment_BR);
        #                }
        #                else if (journalType == LedgerJournalType::CustPayment)
        #                {
        #                    custTransOpenCur = CustTransOpen::find(_specTrans.RefRecId);
        #
        #                    fineInterestAmountCur  = custTransOpenCur.InterestAmountPaymCur_BR;
        #                    fineAmountCur          = custTransOpenCur.FineAmountPaymCur_BR;
        #
        #                    existLedgerJournalTrans.amountCur2DebCred(existLedgerJournalTrans.amount()
        #                                                              - (fineInterestAmountCur + fineAmountCur));
        #
        #                    existTransPayment_BR = existLedgerJournalTrans.getPaymentExtension_BR();
        #                    existTransPayment_BR.FinInterestAmountCur_BR += fineInterestAmountCur;
        #                    existTransPayment_BR.FineAmountCur_BR        += fineAmountCur;
        #                    existLedgerJournalTrans.packExtensionTable(existTransPayment_BR);
        #
        #                    this.amountCur2DebCred(this.amount() + fineInterestAmountCur + fineAmountCur);
        #
        #                    thisPayment_BR = this.getPaymentExtension_BR();
        #                    thisPayment_BR.FinInterestAmountCur_BR -= fineInterestAmountCur;
        #                    thisPayment_BR.FineAmountCur_BR        -= fineAmountCur;
        #                    this.packExtensionTable(thisPayment_BR);
        #                }
        #            }
        #
        #            _specTrans.SpecRecId = existLedgerJournalTrans.RecId;
        #            changecompany(_specTrans.RefCompany)
        #            {
        #                _specTrans.update();
        #            }
        #            existLedgerJournalTrans.fillPaymentNotes();
        #            existLedgerJournalTrans.update();
        #        }
        #        else
        #        {
        #            newLedgerJournalTrans.PaymentNotes = '';
        #            newLedgerJournalTrans.amountCur2DebCred(-_specTrans.Balance01);
        #            this.amountCur2DebCred(this.amount() + _specTrans.Balance01);
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::Payment)
        #                {
        #                    vendTransOpenCur = VendTransOpen::find(_specTrans.RefRecId);
        #
        #                    select sum(PaymTaxWithholdAmount) from withholdTransData where withholdTransData.SpecTransId == _specTrans.RecId;
        #
        #                    newLedgerJournalTrans.amountCur2DebCred(newLedgerJournalTrans.amount() - (vendTransOpenCur.InterestAmount_BR+ vendTransOpenCur.FineAmount_BR + withholdTransData.PaymTaxWithholdAmount));
        #
        #                    newTransPayment_BR = newLedgerJournalTrans.getPaymentExtension_BR();
        #                    newTransPayment_BR.FinInterestAmountCur_BR = abs(vendTransOpenCur.InterestAmountPaymCur_BR);
        #                    newTransPayment_BR.FineAmountCur_BR = abs(vendTransOpenCur.FineAmountPaymCur_BR);
        #                    newLedgerJournalTrans.packExtensionTable(newTransPayment_BR);
        #
        #                    this.amountCur2DebCred(this.amount() + (vendTransOpenCur.InterestAmount_BR+ vendTransOpenCur.FineAmount_BR+ withholdTransData.PaymTaxWithholdAmount));
        #
        #                    thisPayment_BR = this.getPaymentExtension_BR();
        #                    thisPayment_BR.FinInterestAmountCur_BR += vendTransOpenCur.InterestAmountPaymCur_BR;
        #                    thisPayment_BR.FineAmountCur_BR += vendTransOpenCur.FineAmountPaymCur_BR;
        #                    this.packExtensionTable(thisPayment_BR);
        #                }
        #                else if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::CustPayment)
        #                {
        #                    custTransOpenCur = CustTransOpen::find(_specTrans.RefRecId);
        #
        #                    newLedgerJournalTrans.amountCur2DebCred(newLedgerJournalTrans.amount() - (custTransOpenCur.InterestAmount_BR + custTransOpenCur.FineAmount_BR));
        #                    newTransPayment_BR = newLedgerJournalTrans.getPaymentExtension_BR();
        #                    newTransPayment_BR.FinInterestAmountCur_BR = custTransOpenCur.InterestAmountPaymCur_BR;
        #                    newTransPayment_BR.FineAmountCur_BR = custTransOpenCur.FineAmountPaymCur_BR;
        #                    newLedgerJournalTrans.packExtensionTable(newTransPayment_BR);
        #
        #                    this.amountCur2DebCred(this.amount() + (custTransOpenCur.InterestAmountPaymCur_BR + custTransOpenCur.FineAmountPaymCur_BR));
        #                    thisPayment_BR = this.getPaymentExtension_BR();
        #                    thisPayment_BR.FinInterestAmountCur_BR -= custTransOpenCur.FineAmountPaymCur_BR;
        #                    thisPayment_BR.FineAmountCur_BR -= custTransOpenCur.FineAmountPaymCur_BR;
        #                    this.packExtensionTable(thisPayment_BR);
        #                }
        #            }
        #
        #            newLedgerJournalTrans.PaymMode = _custVendTrans.PaymMode;
        #            newLedgerJournalTrans.paymModeModified();
        #            if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        #            {
        #
        #                newLedgerJournalTrans.PaymSpec = _custVendTrans.PaymSpec;
        #            }
        #
        #            newLedgerJournalTrans.insert();
        #            _specTrans.SpecRecId = newLedgerJournalTrans.RecId;
        #            changecompany(_specTrans.RefCompany)
        #            {
        #                _specTrans.update();
        #            }
        #            newLedgerJournalTrans.fillPaymentNotes();
        #        }
        #    }
        #    else
        #    {
        #        if (this.PaymMode != _custVendTrans.PaymMode)
        #        {
        #            this.PaymMode = _custVendTrans.PaymMode;
        #            this.paymModeModified();
        #            this.update();
        #        }
        #    }
        #    this.fillPaymentNotes();
        #
        #    ttscommit;
        #}
        #
        #
      ENDSOURCE
      SOURCE #createTransferTrans
        #public server void createTransferTrans(
        #    LedgerJournalTrans  _ledgerJournalOld,
        #    LedgerJournalId     _ledgerJournalId)
        #{
        #    LedgerJournalTrans                  ledgerJournalNew = _ledgerJournalOld.data();
        #    LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        #    {
        #        ledgerJournalNew.SysExtensionSerializerMap::copyExtensionTableData(_ledgerJournalOld);
        #    }
        #
        #    ledgerJournalNew.JournalNum         = _ledgerJournalId;
        #
        #    if (LedgerParameters::isStornoEnabledEE()
        #         && _ledgerJournalOld.Cancel)
        #    {
        #        ledgerJournalNew.AmountCurCredit    = -_ledgerJournalOld.AmountCurCredit;
        #        ledgerJournalNew.AmountCurDebit     = -_ledgerJournalOld.AmountCurDebit;
        #    }
        #    else
        #    {
        #        ledgerJournalNew.AmountCurCredit    = _ledgerJournalOld.AmountCurDebit;
        #        ledgerJournalNew.AmountCurDebit     = _ledgerJournalOld.AmountCurCredit;
        #    }
        #    ledgerJournalNew.insert();
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        ledgerJournalTransTaxExtensionIN.TaxModelDocLineExtensionIN::initFromBaseTable(ledgerJournalNew);
        #        ledgerJournalTransTaxExtensionIN.TaxModelDocLineExtensionIN::initFromExtensionTable(LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(_ledgerJournalOld.RecId));
        #        ledgerJournalTransTaxExtensionIN.insert();
        #    }
        #}
      ENDSOURCE
      SOURCE #crossrate
        #//BP Deviation Documented
        #display ExchrateSecondary crossrate()
        #{
        #    ExchrateSecondary crossrate;
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    if (! this.ExchRateSecond)
        #    {
        #        crossrate = this.ExchRate;
        #    }
        #    else
        #    {
        #        crossrate = this.ExchRate ? (this.ExchRateSecond / this.ExchRate)*100 : 0;
        #    }
        #    return exchangeRateHelper.displayStoredExchangeRate(crossrate);
        #}
      ENDSOURCE
      SOURCE #custPaymentFilledOk
        #private server boolean custPaymentFilledOk(Map _tmpVoucherMap = null)
        #{
        #    LedgerJournalType   ledgerJournalType;
        #    CustPaymMethodVal   custPaymMethodValFieldList;
        #    boolean             ok = true;
        #
        #    if (this.PaymMode)
        #    {
        #        ledgerJournalType = this.ledgerJournalTable().JournalType;
        #
        #        if (ledgerJournalType == LedgerJournalType::CustPayment ||
        #            (ledgerJournalType == LedgerJournalType::Daily      && !this.Invoice))
        #        {
        #            while select CustPaymValidate from custPaymMethodValFieldList
        #                where custPaymMethodValFieldList.CustPaymMode == this.PaymMode
        #            {
        #                switch (custPaymMethodValFieldList.CustPaymValidate)
        #                {
        #                    case CustPaymentValidate::PaymReference :
        #                        if (!this.PaymReference)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54960", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case CustPaymentValidate::BankPostType :
        #                        if (!this.BankTransType)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54961", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case CustPaymentValidate::OffsetAccountIsBank :
        #                        if (this.OffsetAccountType != LedgerJournalACType::Bank)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54962", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case CustPaymentValidate::DepositSlip :
        #                        if (!this.BankDepositVoucher)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54963", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case CustPaymentValidate::CheckNo :
        #                        if (!this.BankChequeNum)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54964", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #                }
        #            }
        #        }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #debitCreditDifferenceCur
        #//BP Deviation Documented
        #display AmountCur debitCreditDifferenceCur()
        #{
        #    return this.AmountCurDebit - this.AmountCurCredit;
        #}
        #
      ENDSOURCE
      SOURCE #defaultDimensionDisplay_RU
        #/// <summary>
        #///     Displays dimensions of the current <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #///     <c>DimensionDisplayValue</c> filled with dimensions of the current <c>LedgerJournalTrans</c> record.
        #/// </returns>
        #display DimensionDisplayValue defaultDimensionDisplay_RU()
        #{
        #    DimensionDisplayValue           ret;
        #    DimensionAttributeValueSetItem  dimensionAttrValueSetItem;
        #    str                             accountDelimiter = SystemParameters::getChartOfAccountsDelimiter();
        #
        #    switch (this.AccountType)
        #    {
        #        case LedgerJournalACType::Ledger:
        #            ret = DimensionAttributeValueCombination::getDisplayValue(this.LedgerDimension);
        #            break;
        #        default:
        #            while select DisplayValue from dimensionAttrValueSetItem
        #                where dimensionAttrValueSetItem.DimensionAttributeValueSet == this.DefaultDimension
        #            {
        #                ret += (ret ? accountDelimiter : '') + dimensionAttrValueSetItem.DisplayValue;
        #            }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultField
        #/// <summary>
        #/// Sets the value of a field to the default value.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// The ID of the field you want to set to its default value.
        #/// </param>
        #/// <param name="_axLedgerJournalTrans">
        #/// The <c>AxLedgerJournalTrans</c> record associated with the field; optional.
        #/// </param>
        #public void defaultField(FieldId _fieldId, AxLedgerJournalTrans _axLedgerJournalTrans = null)
        #{
        #    LedgerJournalTransType  ledgerJournalTransType;
        #    List                    ledgerJournalTransTypeList;
        #    ListEnumerator          enumerator;
        #
        #    // The LedgerJournalTrans.AccountType represents one logical line and
        #    // LedgerJournalTrans.OffsetAccountType represents another logical line.
        #    // Therefore, a set is used to encapsulate the polymorphic business logic.
        #    ledgerJournalTransTypeList = this.type(_axLedgerJournalTrans);
        #    if (ledgerJournalTransTypeList)
        #    {
        #        enumerator = ledgerJournalTransTypeList.getEnumerator();
        #        while (enumerator.moveNext())
        #        {
        #            ledgerJournalTransType = enumerator.current();
        #            ledgerJournalTransType.defaultField(_fieldId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #defaultingTax1099Amount
        #[SysObsoleteAttribute('Method is not called anymore', true)]
        #public void defaultingTax1099Amount()
        #{
        #    #ISOCountryRegionCodes
        #    if (((this.orig().AmountCurCredit != this.AmountCurCredit) || (this.orig().AmountCurDebit != this.AmountCurDebit))
        #        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        #    {
        #        if (VendTable::findByLedgerDimension(this.LedgerDimension).Tax1099Reports)
        #        {
        #            this.Tax1099Amount = this.AmountCurDebit - this.AmountCurCredit;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #defaultRow
        #/// <summary>
        #/// Sets the values of the fields in a particular <c>LedgerJournalTrans</c> table row to their default
        #/// values.
        #/// </summary>
        #/// <param name="_axLedgerJournalTrans">
        #/// The <c>AxLedgerJournalTrans</c> record associated with the row; optional.
        #/// </param>
        #public server void defaultRow(AxLedgerJournalTrans _axLedgerJournalTrans = null)
        #{
        #    LedgerJournalTransType  ledgerJournalTransType;
        #    List                    ledgerJournalTransTypeList;
        #    ListEnumerator          enumerator;
        #
        #    // The LedgerJournalTrans.AccountType represents one logical line and
        #    // LedgerJournalTrans.OffsetAccountType represents another logical line.
        #    // Therefore, a set is used to encapsulate the polymorphic business logic.
        #    ledgerJournalTransTypeList = this.type(_axLedgerJournalTrans);
        #    if (ledgerJournalTransTypeList)
        #    {
        #        enumerator = ledgerJournalTransTypeList.getEnumerator();
        #        while (enumerator.moveNext())
        #        {
        #            ledgerJournalTransType = enumerator.current();
        #            ledgerJournalTransType.defaultRow();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete(boolean _deleteVoucher = true)
        #{
        #    LedgerJournalType               ledgerJournalType;
        #    CustBillOfExchangeJour          custBillOfExchangeJour;
        #    VendPromissoryNoteJour          vendPromissoryNoteJour;
        #    BankPromissoryNoteTable         bankPromissoryNoteTable;
        #    Voucher                         voucher = this.orig().Voucher;
        #    SpecTransManager                specTransManager;
        #    InvoiceId                       origInvoice = this.orig().Invoice;
        #
        #    FactureTrans_RU                 factureTrans;
        #    FactureJour_RU                  factureJour;
        #    FactureDelete_RU                factureDelete;
        #    LedgerJournalTrans_RAsset       ljTransDeleted_RAsset, ljTransLinked_RAsset;
        #    #ISOCountryRegionCodes
        #    LedgerJournalTable              ledgerJournalTable;
        #    HuExchOutflowType               exchOutflowType = RCashParameters::find().ExchOutflowType_HU;
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #    ledgerJournalType = ledgerJournalTable.JournalType;
        #
        #    ttsbegin;
        #
        #    if (this.rCashPayTransType != RCashPayLedgerTransType::None)
        #    {
        #        this.paySheetTransDeleteLink_RU();
        #    }
        #
        #    // Delete related existing bank document.
        #    if (this.isBankDocumentPayment())
        #    {
        #        BankDocumentProcessor::deleteBankDocument(this.TableId, this.RecId);
        #    }
        #
        #
        #    if (this.AccountType == LedgerJournalACType::RCash &&
        #        exchOutflowType == HuExchOutflowType::FIFO &&
        #        this.amount()   < 0.0)
        #    {
        #        this.rollbackFIFOLineExchRate_HU();
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        switch(this.AccountType)
        #        {
        #            case LedgerJournalACType::Vend:
        #            case LedgerJournalACType::Cust:
        #                TaxWithhold::uncheckWithholdTrans_BR(this);
        #                break;
        #            default :
        #        }
        #    }
        #    if (this.AccountType == LedgerJournalACType::FixedAssets_RU)
        #    {
        #        ljTransDeleted_RAsset = LedgerJournalTrans_RAsset::find(this.RecId);
        #        if (! ljTransDeleted_RAsset.BudgetModel &&
        #            ljTransDeleted_RAsset.TransType != RAssetTransType::PartialTakeDown &&
        #            (ljTransDeleted_RAsset.CanDisposal || ! ljTransDeleted_RAsset.ToFromRecId))
        #        {
        #            ljTransLinked_RAsset = ljTransDeleted_RAsset.madeDisposable(this.orig());
        #        }
        #        ljTransDeleted_RAsset.deleteTaxGroupDepreciations();
        #    }
        #
        #    super();
        #    if (ljTransLinked_RAsset)
        #    {
        #        ljTransLinked_RAsset.updateGainLoss();
        #    }
        #
        #    if (this.AccountType == LedgerJournalACType::RCash && this.amount())
        #    {
        #        switch(exchOutflowType)
        #        {
        #            case HuExchOutflowType::FIFO :
        #                this.updateFIFOLineExchRate_HU();
        #                break;
        #
        #            case HuExchOutflowType::AverageRate :
        #                this.calcAverageLinesExchRate_HU();
        #                break;
        #        }
        #    }
        #
        #    // Tax lines are out of date so delete them.
        #    TaxUncommitted::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, origInvoice);
        #
        #    if (!ledgerJournalTable.Posted && !this.DelayTaxCalculation)
        #    {
        #        LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, true
        #                                            , null, false, this.TransDate//Service tax
        #                                            );
        #    }
        #
        #    if (TaxWithholdParameters_IN::checkTaxParameters())
        #    {
        #        // delete the cache for the document header if the threshold is not exceeded.
        #        // because this will impact the tax calculation for other journal lines.
        #        if (!TaxWithholdCalculation_IN::checkRecoverableAccount(this)
        #            && TaxWithholdTrans_IN::isThresholdExceededForAccount(this.parmAccount(),
        #                                                                  this.tdsGroup_IN? this.tdsGroup_IN : this.tcsGroup_IN,
        #                                                                  this.TransDate))
        #        {
        #            if (TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        #            {
        #                TaxWithholdUncommitted_IN::deleteForDocumentHeader(ledgerJournalTable.TableId, ledgerJournalTable.RecId);
        #            }
        #            if (!ledgerJournalTable.Posted)
        #            {
        #                TaxVoucherService::calculateWithholdTaxForJournal_IN(this.JournalNum);
        #            }
        #        }
        #        else
        #        {
        #            TaxWithholdUncommitted_IN::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, origInvoice);
        #            if (!ledgerJournalTable.Posted)
        #            {
        #                LedgerJournalTrans::getTaxWithholdInstance_IN(this.JournalNum, this.Voucher, this.Invoice, true);
        #            }
        #        }
        #    }
        #
        #    // Delete the SpecTrans records associated with the LedgerJournalTrans.  This
        #    // is needed because the cascading delete action will not remove the SpecTrans
        #    // records that might exist in a different company from the LedgerJournalTrans.
        #    specTransManager = SpecTransManager::construct(this, false);
        #    specTransManager.deleteAll();
        #
        #    if (_deleteVoucher                                      &&
        #        ledgerJournalType != LedgerJournalType::Periodic    &&
        #        ledgerJournalType != LedgerJournalType::VendInvoicePool &&
        #        ledgerJournalType != LedgerJournalType::VendInvoicePoolNotPosted)
        #    {
        #        this.deleteVoucher(voucher);
        #    }
        #
        #    switch (ledgerJournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw:
        #            if (CustBillOfExchangeJour::find(this.NegInstId).Status == CustVendNegInstStatus::None)
        #            {
        #                delete_from custBillOfExchangeJour
        #                    where custBillOfExchangeJour.BillOfExchangeId == this.NegInstId;
        #            }
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            if (VendPromissoryNoteJour::find(this.NegInstId).Status == CustVendNegInstStatus::None)
        #            {
        #                delete_from vendPromissoryNoteJour
        #                    where vendPromissoryNoteJour.PromissoryNoteId == this.NegInstId;
        #            }
        #            break;
        #        case LedgerJournalType::VendPromissoryNoteRedraw:
        #            if(this.BankPromissoryNoteNum)
        #            {
        #                bankPromissoryNoteTable = BankPromissoryNoteTable::findBankPNDocStatus(this.BankAccountId,this.BankPromissoryNoteNum,BankPromissoryNoteStatus::Printed,true);
        #                bankPromissoryNoteTable.DocumentStatus = BankPromissoryNoteStatus::Posted;
        #                bankPromissoryNoteTable.update();
        #            }
        #            break;
        #
        #        case LedgerJournalType::BankChequeReversal:
        #            if (this.ledgerJournalTable().Posted == NoYes::No)
        #            {
        #                this.revertBankAccountTrans(ledgerJournalType);
        #                this.revertBankChequeTable();
        #            }
        #            break;
        #
        #        case LedgerJournalType::BankDepositPaymCancel:
        #            if (this.ledgerJournalTable().Posted == NoYes::No)
        #            {
        #                this.revertBankAccountTrans(ledgerJournalType);
        #                this.revertBankDeposit();
        #            }
        #            break;
        #
        #        case LedgerJournalType::Payment:
        #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #            {
        #                if (this.AccountType == LedgerJournalACType::Vend    &&
        #                   this.Prepayment                                  &&
        #                   SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        #                {
        #                    factureTrans = FactureTrans_RU::findLedgerJournalTrans('', 0.0, this.RecId, false);
        #                    factureJour = FactureJour_RU::find(factureTrans.FactureId, factureTrans.Module, true);
        #                    if(factureJour)
        #                    {
        #                        factureDelete = FactureDelete_RU::construct(factureJour);
        #                        factureDelete.run();
        #                    }
        #                }
        #            }
        #            break;
        #    }
        #
        #    // Remove the referenced reason code and comment if the journal has not been posted.
        #    if (this.ledgerJournalTable().Posted == NoYes::No && this.ReasonRefRecID != 0)
        #    {
        #        ReasonTableRef::deleteByReference(this.ReasonRefRecID);
        #
        #    }
        #
        #    // Remove any accrual records
        #    this.removeAccruals(true);
        #
        #    // delete the related intrastat line from VendInvoiceIntrastat table.
        #    if (_deleteVoucher
        #        && this.ledgerJournalTable().Posted == NoYes::No
        #        && this.Transferred == NoYes::No)
        #    {
        #        VendInvoiceIntrastatType::deleteLine(this.Voucher, this.TransDate);
        #    }
        #
        #    TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::LedgerJournalTrans);
        #    TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::InvoiceRegister);
        #
        #    BankClientPayment_RU::updateOnTransDelete(this);
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
        #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
        #        !LedgerJournalTrans::existTransMinusThis(this.JournalNum, this.Voucher, this.RecId))
        #    {
        #        ExportSalesInvoiceDomesticTaxVoucher::deleteUnpostedDomesticSalesTaxVoucher(this.JournalNum, this.Voucher);
        #    }
        #
        #    ttscommit;
        #
        #    // Remove the journalNum cache that was set on \Classes\LedgerJournalTaxDocument\doTaxGroupExistsForDocument,
        #    // but only if taxes previously existed on this buffer since having no taxes on this line would
        #    // not impact the caching of whether or not taxes existed for the journal
        #    if ((this.TaxGroup && this.TaxItemGroup) || this.TaxCode)
        #    {
        #        LedgerJournalTaxDocument::clearCachedTaxExistenceCheck(this.JournalNum);
        #    }
        #}
      ENDSOURCE
      SOURCE #deleteForHeader
        #/// <summary>
        #/// Deletes the compositional records related to the <c>LedgerJournalTable</c> record.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> table buffer.
        #/// </param>
        #public void deleteForHeader(LedgerJournalTable _ledgerJournalTable)
        #{
        #    AssetBookTableDerivedJournal    assetBookTableDerivedJournal;
        #    AssetDepBookTableDerivedJour    assetDepBookTableDerivedJour;
        #    BankPromissoryNoteTable         bankPromissoryNoteTable;
        #    CustBillOfExchangeJour          custBillOfExchangeJour;
        #    CustTransCashDisc               custTransCashDisc;
        #    CustVendCreditInvoicingTable    custVendCreditInvoicingTable;
        #    CustVendNACHAIATInfoTable_US    custVendNACHAIATInfoTable_US;
        #    CustVendPaymJournalFee          custVendPaymJournalFee;
        #    EMSInvoiceRegisterFlowRelation  emsInvoiceRegisterFlowRelation;
        #    LedgerJournalTable              ledgerJournalTable;
        #    LedgerJournalTransAccrual       ledgerJournalTransAccrual;
        #    LedgerJournalTransBankLC        ledgerJournalTransBankLC;
        #    VendPromissoryNoteJour          vendPromissoryNoteJour;
        #    SpecTransManager                specTransManager;
        #    LedgerJournalType               ledgerJournalType;
        #
        #    TradeBLWIJournalPurposeCodes    tradeBLWIJournalPurposeCodes;
        #
        #    CustEPRemitInfo_BR              custEPRemitInfo_BR;
        #    LedgerJournalTransPayment_BR    ledgerJournalTransPayment_BR;
        #    VendEPRemitInfo_BR              vendEPRemitInfo_BR;
        #
        #    LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN;
        #
        #    LedgerJournalTransSymbol        ledgerJournalTransSymbol;
        #
        #    LedgerJournalTransPayment_LV    ledgerJournalTransPayment_LV;
        #    LedgerJournalTransPaymTransCode ledgerJournalTransPaymTransCode;
        #
        #    CustEgiroSegmentTrans           custEgiroSegmentTrans;
        #
        #    DIOTAdditionalInfoForNoVendor_MX diotAdditionalInfoForNoVendor_MX;
        #
        #    FactureTrans_RU                 factureTrans_RU;
        #    FactureJour_RU                  factureJour_RU;
        #    FactureDelete_RU                factureDelete_RU;
        #    LedgerJournalTrans_RAsset       ljTransDeleted_RAsset, ljTransLinked_RAsset;
        #    LedgerJournalTrans_RCash        ledgerJournalTrans_RCash;
        #    LedgerJournalTrans_RDeferrals   ledgerJournalTrans_RDeferrals;
        #    RAssetPurchTrans                rAssetPurchTrans;
        #    RCashDestinationTrans           rCashDestinationTrans;
        #
        #    LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        #    HuExchOutflowType               exchOutflowType;
        #
        #    #ISOCountryRegionCodes
        #
        #    ledgerJournalTable = _ledgerJournalTable;
        #    ledgerJournalType = ledgerJournalTable.JournalType;
        #
        #    // Delete related existing bank document.
        #    if (this.isBankDocumentPayment())
        #    {
        #        BankDocumentProcessor::deleteBankDocument(tableNum(LedgerJournalTrans), this.RecId);
        #    }
        #
        #    if (this.AccountType == LedgerJournalACType::RCash)
        #    {
        #        exchOutflowType = RCashParameters::find().ExchOutflowType_HU;
        #
        #        if (exchOutflowType == HuExchOutflowType::FIFO && this.amount() < 0.0)
        #        {
        #            this.rollbackFIFOLineExchRate_HU();
        #        }
        #    }
        #
        #    if (BrazilParameters::isEnabled()
        #        && (this.AccountType == LedgerJournalACType::Vend
        #        || this.AccountType == LedgerJournalACType::Cust))
        #    {
        #        TaxWithhold::uncheckWithholdTrans_BR(this);
        #    }
        #
        #    if (this.AccountType == LedgerJournalACType::FixedAssets_RU)
        #    {
        #        ljTransDeleted_RAsset = LedgerJournalTrans_RAsset::find(this.RecId);
        #        if (!ljTransDeleted_RAsset.BudgetModel &&
        #            ljTransDeleted_RAsset.TransType != RAssetTransType::PartialTakeDown &&
        #            (ljTransDeleted_RAsset.CanDisposal || ! ljTransDeleted_RAsset.ToFromRecId))
        #        {
        #            ljTransLinked_RAsset = ljTransDeleted_RAsset.madeDisposable(this.orig());
        #        }
        #        ljTransDeleted_RAsset.deleteTaxGroupDepreciations();
        #    }
        #
        #    if (ljTransLinked_RAsset)
        #    {
        #        ljTransLinked_RAsset.updateGainLoss();
        #    }
        #
        #    if (this.AccountType == LedgerJournalACType::RCash && this.amount())
        #    {
        #        switch (exchOutflowType)
        #        {
        #            case HuExchOutflowType::FIFO :
        #                this.updateFIFOLineExchRate_HU();
        #                break;
        #
        #            case HuExchOutflowType::AverageRate :
        #                this.calcAverageLinesExchRate_HU();
        #                break;
        #        }
        #    }
        #
        #    // Delete the SpecTrans records associated with the LedgerJournalTrans.  This
        #    // is needed because the cascading delete action will not remove the SpecTrans
        #    // records that might exist in a different company from the LedgerJournalTrans.
        #    specTransManager = SpecTransManager::construct(this, false);
        #    specTransManager.deleteAll();
        #
        #    switch (ledgerJournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw:
        #            if (CustBillOfExchangeJour::find(this.NegInstId).Status == CustVendNegInstStatus::None)
        #            {
        #                delete_from custBillOfExchangeJour
        #                    where custBillOfExchangeJour.BillOfExchangeId == this.NegInstId;
        #            }
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            if (VendPromissoryNoteJour::find(this.NegInstId).Status == CustVendNegInstStatus::None)
        #            {
        #                delete_from vendPromissoryNoteJour
        #                    where vendPromissoryNoteJour.PromissoryNoteId == this.NegInstId;
        #            }
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteRedraw:
        #            if(this.BankPromissoryNoteNum)
        #            {
        #                bankPromissoryNoteTable = BankPromissoryNoteTable::findBankPNDocStatus(this.BankAccountId,this.BankPromissoryNoteNum,BankPromissoryNoteStatus::Printed,true);
        #                bankPromissoryNoteTable.DocumentStatus = BankPromissoryNoteStatus::Posted;
        #                bankPromissoryNoteTable.update();
        #            }
        #            break;
        #
        #        case LedgerJournalType::BankChequeReversal:
        #            if (ledgerJournalTable.Posted == NoYes::No)
        #            {
        #                this.revertBankAccountTrans(ledgerJournalType);
        #                this.revertBankChequeTable();
        #            }
        #            break;
        #
        #        case LedgerJournalType::BankDepositPaymCancel:
        #            if (ledgerJournalTable.Posted == NoYes::No)
        #            {
        #                this.revertBankAccountTrans(ledgerJournalType);
        #                this.revertBankDeposit();
        #            }
        #            break;
        #
        #        case LedgerJournalType::Payment:
        #            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #            {
        #                if (this.AccountType == LedgerJournalACType::Vend && this.Prepayment)
        #                {
        #                    factureTrans_RU = FactureTrans_RU::findLedgerJournalTrans('', 0.0, this.RecId, false);
        #                    factureJour_RU = FactureJour_RU::find(factureTrans_RU.FactureId, factureTrans_RU.Module, true);
        #                    if (factureJour_RU)
        #                    {
        #                        factureDelete_RU = FactureDelete_RU::construct(factureJour_RU);
        #                        factureDelete_RU.run();
        #                    }
        #                }
        #            }
        #            break;
        #    }
        #
        #    // Remove the referenced reason code and comment if the journal has not been posted.
        #    if (ledgerJournalTable.Posted == NoYes::No && this.ReasonRefRecID != 0)
        #    {
        #        ReasonTableRef::deleteByReference(this.ReasonRefRecID);
        #    }
        #
        #    // delete action manual deletes
        #    delete_from assetBookTableDerivedJournal
        #        where assetBookTableDerivedJournal.RefRecId == this.RecId;
        #
        #    delete_from assetDepBookTableDerivedJour
        #        where assetDepBookTableDerivedJour.RefRecId == this.RecId;
        #
        #    delete_from custTransCashDisc
        #        where custTransCashDisc.RefTableId == tableNum(LedgerJournalTrans)
        #            && custTransCashDisc.RefRecId == this.RecId;
        #
        #    delete_from custVendCreditInvoicingTable
        #        where custVendCreditInvoicingTable.RefTableId == tableNum(LedgerJournalTrans)
        #            && custVendCreditInvoicingTable.RefRecId == this.RecId;
        #
        #    delete_from custVendNACHAIATInfoTable_US
        #        where custVendNACHAIATInfoTable_US.LedgerJournalTransRecId == this.RecId;
        #
        #    delete_from custVendPaymJournalFee
        #        where custVendPaymJournalFee.RefRecId == this.RecId;
        #
        #    delete_from emsInvoiceRegisterFlowRelation
        #        where emsInvoiceRegisterFlowRelation.RefRecId == this.RecId;
        #
        #    delete_from ledgerJournalTransAccrual
        #        where ledgerJournalTransAccrual.RefTableid == tableNum(LedgerJournalTrans)
        #            && ledgerJournalTransAccrual.RefRecid == this.RecId;
        #
        #    delete_from ledgerJournalTransBankLC
        #        where ledgerJournalTransBankLC.LedgerJournalTrans == this.RecId;
        #
        #    TaxServiceTariff::deleteByParent(tableNum(LedgerJournalTrans), this.RecId);
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        #    {
        #        delete_from tradeBLWIJournalPurposeCodes
        #            where tradeBLWIJournalPurposeCodes.RefRecId == this.RecId
        #                && tradeBLWIJournalPurposeCodes.TypeOfForm == TradeBLWITypeOfForm::InvoiceRegister;
        #
        #        delete_from tradeBLWIJournalPurposeCodes
        #            where tradeBLWIJournalPurposeCodes.RefRecId == this.RecId
        #                && tradeBLWIJournalPurposeCodes.TypeOfForm == TradeBLWITypeOfForm::LedgerJournalTrans;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        #    {
        #        delete_from custEPRemitInfo_BR
        #            where custEPRemitInfo_BR.LedgerJournalTrans == this.RecId;
        #
        #        delete_from ledgerJournalTransPayment_BR
        #            where ledgerJournalTransPayment_BR.RefRecId == this.RecId;
        #
        #        delete_from vendEPRemitInfo_BR
        #            where vendEPRemitInfo_BR.LedgerJournalTrans == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        delete_from ledgerJournalTransTaxExtensionIN
        #            where ledgerJournalTransTaxExtensionIN.LedgerJournalTrans == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        #    {
        #        delete_from ledgerJournalTransSymbol
        #            where ledgerJournalTransSymbol.LedgerJournalTrans == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        #    {
        #        delete_from ledgerJournalTransPayment_LV
        #            where ledgerJournalTransPayment_LV.LedgerJournalTrans == this.RecId;
        #
        #        delete_from ledgerJournalTransPaymTransCode
        #            where ledgerJournalTransPaymTransCode.LedgerJournalTrans == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        #    {
        #        delete_from diotAdditionalInfoForNoVendor_MX
        #            where diotAdditionalInfoForNoVendor_MX.InstanceRelationType == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        #    {
        #        delete_from custEgiroSegmentTrans
        #            where custEgiroSegmentTrans.TransRecId == this.RecId;
        #    }
        #
        #    PlSADFinanceLedgerJournalRef::clearReference(this.RecId);
        #
        #    if (RCashParameters::isCashModuleEnabled())
        #    {
        #        delete_from ledgerJournalTrans_RCash
        #            where ledgerJournalTrans_RCash.RefRecId == this.RecId;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        BankClientPayment_RU::updateOnTransDelete(this);
        #
        #        delete_from ledgerJournalTrans_RDeferrals
        #            where ledgerJournalTrans_RDeferrals.RefRecId == this.RecId;
        #
        #        delete_from rAssetPurchTrans
        #            where rAssetPurchTrans.TableTableId == tableNum(LedgerJournalTrans)
        #                && rAssetPurchTrans.TableRecId == this.RecId;
        #
        #        delete_from rCashDestinationTrans
        #            where rCashDestinationTrans.LedgerJournalTransRecId == this.RecId;
        #    }
        #
        #    if (LedgerJournalTransExtensionTH::isExtensionEnabled())
        #    {
        #        delete_from ledgerJournalTransExtensionTH
        #            where ledgerJournalTransExtensionTH.LedgerJournalTrans == this.RecId;
        #    }
        #}
      ENDSOURCE
      SOURCE #deleteTaxUncommitted
        #/// <summary>
        #/// Deletes the <c>TaxUncommitted</c> records if a field that affects tax has changed.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> record for the <c>LedgerJournalTrans</c> record.
        #/// </param>
        #/// <returns>
        #/// true if the <c>TaxUncommitted</c> records were deleted; otherwise, false.
        #/// </returns>
        #private boolean deleteTaxUncommitted(LedgerJournalTable _ledgerJournalTable)
        #{
        #    LedgerJournalTrans originalLedgerJournalTrans;
        #    #ISOCountryRegionCodes
        #    boolean                 isoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        #
        #    originalLedgerJournalTrans = this.orig();
        #
        #    if (this.Invoice != originalLedgerJournalTrans.Invoice ||
        #        this.Voucher != originalLedgerJournalTrans.Voucher ||
        #        this.CashDiscAmount != originalLedgerJournalTrans.CashDiscAmount ||
        #        this.CashDiscPercent != originalLedgerJournalTrans.CashDiscPercent ||
        #        this.CashDiscCode != originalLedgerJournalTrans.CashDiscCode ||
        #        this.TransDate != originalLedgerJournalTrans.TransDate ||
        #        this.DocumentDate != originalLedgerJournalTrans.DocumentDate ||
        #        this.ExchRateSecond != originalLedgerJournalTrans.ExchRateSecond ||
        #        this.ExchRate != originalLedgerJournalTrans.ExchRate ||
        #        this.Triangulation != originalLedgerJournalTrans.Triangulation ||
        #        this.CurrencyCode != originalLedgerJournalTrans.CurrencyCode ||
        #        this.AccountType != originalLedgerJournalTrans.AccountType ||
        #        this.Company != originalLedgerJournalTrans.Company ||
        #        this.OffsetCompany != originalLedgerJournalTrans.OffsetCompany ||
        #        this.LedgerDimension != originalLedgerJournalTrans.LedgerDimension ||
        #        this.OffsetAccountType != originalLedgerJournalTrans.OffsetAccountType ||
        #        this.OffsetLedgerDimension != originalLedgerJournalTrans.OffsetLedgerDimension ||
        #        this.DefaultDimension != originalLedgerJournalTrans.DefaultDimension ||
        #        this.OffsetDefaultDimension != originalLedgerJournalTrans.OffsetDefaultDimension ||
        #        this.Qty != originalLedgerJournalTrans.Qty ||
        #        this.TaxCode != originalLedgerJournalTrans.TaxCode ||
        #        this.TaxGroup != originalLedgerJournalTrans.TaxGroup ||
        #        this.TaxItemGroup != originalLedgerJournalTrans.TaxItemGroup ||
        #        this.AmountCurDebit != originalLedgerJournalTrans.AmountCurDebit ||
        #        this.AmountCurCredit != originalLedgerJournalTrans.AmountCurCredit ||
        #        this.Txt != originalLedgerJournalTrans.Txt ||
        #        this.Prepayment != originalLedgerJournalTrans.Prepayment ||
        #        this.Company != originalLedgerJournalTrans.Company ||
        #        this.OffsetCompany != originalLedgerJournalTrans.OffsetCompany ||
        #        this.VatDueDate_W != originalLedgerJournalTrans.VatDueDate_W ||
        #        this.vatOperationCode_RU != originalLedgerJournalTrans.vatOperationCode_RU ||
        #        this.TaxBase_W != originalLedgerJournalTrans.TaxBase_W ||
        #        this.TaxDirectionControl != originalLedgerJournalTrans.TaxDirectionControl
        #        || this.hasIndirectTaxFieldChanged_IN()
        #        )
        #
        #    {
        #        if (TaxUncommitted::existByDocumentAndInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, originalLedgerJournalTrans.Invoice))
        #        {
        #            TaxUncommitted::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, originalLedgerJournalTrans.Invoice);
        #        }
        #
        #        if(isoIN
        #           && TaxItemGroupHeading::find(originalLedgerJournalTrans.TaxItemGroup).ServiceTaxBasis_IN != ServiceTaxBasis_IN::None
        #           && originalLedgerJournalTrans.isPaymentJournal_IN())
        #        {
        #            TaxUncommitted_IN::deleteByMainVoucher(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher);
        #        }
        #
        #        // if the invoice # changed then since taxes are calculated per voucher per invoice we need to also remove the
        #        // TaxUncommitted records from the new invoice so that taxes get recalculated on the new invoice.
        #        if (this.Invoice != originalLedgerJournalTrans.Invoice)
        #        {
        #            TaxUncommitted::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, this.Invoice);
        #        }
        #
        #        // if the voucher changed then since taxes are calculated per voucher per invoice we need to also remove the
        #        // TaxUncommitted records from the new voucher so that taxes get recalculated on the new voucher.
        #        if (this.Voucher != originalLedgerJournalTrans.Voucher)
        #        {
        #            TaxUncommitted::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, this.Voucher, this.Invoice);
        #        }
        #
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #deleteTaxWitholdUncommitted_IN
        #/// <summary>
        #/// Deletes the <c>TaxWithholdUncommitted_IN</c> records if a field that affects tax has changed.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> record for the <c>LedgerJournalTrans</c> record.
        #/// </param>
        #/// <param name="_recalculateTax">
        #/// boolean value if withhold taxes needs to be recalculated.
        #/// </param>
        #/// <returns>
        #/// true if the <c>TaxWithholdUncommitted_IN</c> records were deleted; otherwise, false.
        #/// </returns>
        #private boolean deleteTaxWitholdUncommitted_IN(LedgerJournalTable _ledgerJournalTable, boolean _recalculateTax)
        #{
        #    LedgerJournalTrans originalLedgerJournalTrans;
        #
        #    originalLedgerJournalTrans = this.orig();
        #
        #    if (_recalculateTax
        #        || this.tdsGroup_IN != originalLedgerJournalTrans.tdsGroup_IN
        #        || this.tcsGroup_IN != originalLedgerJournalTrans.tcsGroup_IN)
        #
        #    {
        #        if (TaxWithholdUncommitted_IN::existByDocumentAndInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, originalLedgerJournalTrans.Invoice))
        #        {
        #            TaxWithholdUncommitted_IN::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, originalLedgerJournalTrans.Invoice);
        #        }
        #
        #        // if the invoice # changed then since taxes are calculated per voucher per invoice we need to also remove the
        #        // TaxUncommitted records from the new invoice so that taxes get recalculated on the new invoice.
        #        if (this.Invoice != originalLedgerJournalTrans.Invoice)
        #        {
        #            TaxWithholdUncommitted_IN::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, originalLedgerJournalTrans.Voucher, this.Invoice);
        #        }
        #
        #        // if the voucher changed then since taxes are calculated per voucher per invoice we need to also remove the
        #        // TaxUncommitted records from the new voucher so that taxes get recalculated on the new voucher.
        #        if (this.Voucher != originalLedgerJournalTrans.Voucher)
        #        {
        #            TaxWithholdUncommitted_IN::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, this.Voucher, this.Invoice);
        #        }
        #
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #deleteVoucher
        #public server void deleteVoucher(Voucher _voucher = this.Voucher)
        #{
        #    LedgerJournalTable  ledgerJournalTable = LedgerJournalTable::find(this.JournalNum);
        #
        #    if (! ledgerJournalTable.Posted && !this.Transferred)
        #    {
        #        if (_voucher && ! LedgerJournalTrans::existTransMinusThis(this.JournalNum, _voucher, this.RecId))
        #        {
        #            if (this.checkVoucherNotUsed(ledgerJournalTable, _voucher))
        #            {
        #                if (this.checkVoucherNotUsedDataSource(_voucher))
        #                {
        #                    // replace the voucher number so it can be re-used  except journals types which do not default
        #                    if (ledgerJournalTable.JournalType != LedgerJournalType::Periodic)
        #                    {
        #                        NumberSeq::releaseNumber(ledgerJournalTable.NumberSequenceTable, _voucher);
        #                    }
        #                    if (this.Voucher == _voucher)
        #                    {
        #                        // delete voucher template record if exists and the voucher on the line is not being changed
        #                        LedgerJournalTransVoucherTemplate::deleteForJournalOrVoucher(this.JournalNum, _voucher);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #determineVendBankDirection_IN
        #/// <summary>
        #/// Determines vend bank direction.
        #/// </summary>
        #/// <param name="_taxDirection">
        #/// The tax direction.
        #/// </param>
        #/// <returns>
        #/// The instance of the <c>TaxDirection</c> class.
        #/// </returns>
        #public TaxDirection determineVendBankDirection_IN(TaxDirection _taxDirection)
        #{
        #    TaxDirection taxDirection;
        #    TaxItemGroupHeading taxItemGroupHeadingRev = TaxItemGroupHeading::find(this.TaxItemGroup);
        #
        #    taxDirection = _taxDirection;
        #
        #    if ((this.AccountType == LedgerJournalACType::Bank ||
        #        this.OffsetAccountType == LedgerJournalACType::Bank) &&
        #        (this.AccountType == LedgerJournalACType::Vend ||
        #        this.OffsetAccountType == LedgerJournalACType::Vend))
        #    {
        #        if (this.AccountType == LedgerJournalACType::Vend)
        #        {
        #            if (VendTable::find(this.parmAccount()).isGTA()
        #                || taxItemGroupHeadingRev.ReverseChargePercentage_IN != 0)
        #            {
        #                taxDirection = TaxDirection::OutgoingTax;
        #            }
        #        }
        #        else if (this.OffsetAccountType == LedgerJournalACType::Vend)
        #        {
        #            if (VendTable::find(this.parmOffsetAccount()).isGTA()
        #                || taxItemGroupHeadingRev.ReverseChargePercentage_IN != 0)
        #            {
        #                taxDirection = TaxDirection::OutgoingTax;
        #            }
        #
        #        }
        #    }
        #
        #    return taxDirection;
        #}
      ENDSOURCE
      SOURCE #displayAddress_IN
        #/// <summary>
        #/// Display the logistics address information.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// The ledger journal trans information.
        #/// </param>
        #/// <returns>
        #/// The logistics addressing information.
        #/// </returns>
        #// BP Deviation documented
        #display LogisticsAddressing displayAddress_IN(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    LogisticsPostalAddress  logisticsPostalAddress;
        #
        #    logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_ledgerJournalTrans.CompanyLocation_IN, DateTimeUtil::getSystemDateTime(), true);
        #
        #    return logisticsPostalAddress.Address;
        #}
      ENDSOURCE
      SOURCE #displayBankLCLineNum
        #/// <summary>
        #/// Displays the <c>BankLCShipmentLineNum</c> object of the letter of credit that is related to the
        #/// <c>CustVendTransOpen</c> record, which is settled using the <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #/// The <c>BankLCShipmentLineNum</c> object of the letter of credit.
        #/// </returns>
        #//BP Deviation Documented
        #display BankLCShipmentLineNum displayBankLCLineNum()
        #{
        #    BankLCShipmentLineNum       bankLCShipmentLineNum;
        #    LedgerJournalTransBankLC    ledgerJournalTransBankLC;
        #
        #    ledgerJournalTransBankLC = this.getLedgerJournalTransBankLC();
        #    if (ledgerJournalTransBankLC.RecId != 0)
        #    {
        #        bankLCShipmentLineNum = ledgerJournalTransBankLC.getBankLCLine().LineNum;
        #    }
        #
        #    return bankLCShipmentLineNum;
        #}
      ENDSOURCE
      SOURCE #displayBankLCNumber
        #/// <summary>
        #/// Displays the <c>BankLCNumber</c> object of the letter of credit that is related to the
        #/// <c>CustVendTransOpen</c> record, which is settled using the <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #/// The <c>BankLCNumber</c> object of the letter of credit.
        #/// </returns>
        #//BP Deviation Documented
        #display BankLCNumber displayBankLCNumber()
        #{
        #    BankLCNumber                bankLCNumber;
        #    LedgerJournalTransBankLC    ledgerJournalTransBankLC;
        #
        #    ledgerJournalTransBankLC = this.getLedgerJournalTransBankLC();
        #    if (ledgerJournalTransBankLC.RecId != 0)
        #    {
        #        bankLCNumber = ledgerJournalTransBankLC.getBankLC().BankLCNumber;
        #    }
        #
        #    return bankLCNumber;
        #}
      ENDSOURCE
      SOURCE #displayCurrencyCode
        #//BP Deviation Documented
        #display CurrencyCode displayCurrencyCode()
        #{
        #    return this.CurrencyCode;
        #}
        #
      ENDSOURCE
      SOURCE #displayCustPaymAmount
        #/// <summary>
        #/// Gets the customer payment amount from the debit or credit of the transaction.
        #/// </summary>
        #/// <returns>
        #/// The customer payment amount of the transaction.
        #/// </returns>
        #/// <remarks>
        #/// The <c>convertCustPaymAmountToDebitCredit</c> method is the complement of this method.
        #/// </remarks>
        #
        #//BP deviation documented
        #public display Amount displayCustPaymAmount()
        #{
        #    Amount paymAmount;
        #
        #    if (this.AmountCurCredit > 0)
        #    {
        #        paymAmount = this.AmountCurCredit;
        #    }
        #    else
        #    {
        #        paymAmount = -this.AmountCurDebit;
        #    }
        #
        #    return paymAmount;
        #}
      ENDSOURCE
      SOURCE #displayExchRate
        #//BP Deviation Documented
        #display ExchRate displayExchRate()
        #{
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        #}
      ENDSOURCE
      SOURCE #displayExchRateSecond
        #//BP Deviation Documented
        #display ExchrateSecondary displayExchRateSecond()
        #{
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    return exchangeRateHelper.displayStoredExchangeRate(this.ExchRateSecond);
        #}
      ENDSOURCE
      SOURCE #displayMainAccountType
        #/// <summary>
        #/// Gets the main account type of the voucher.
        #/// </summary>
        #/// <returns>
        #/// The main account type of the voucher.
        #/// </returns>
        #/// <remarks>
        #/// If more than one account is of type Cust, the main account is considered a ledger account.The
        #/// project account type is considered the most important type, and overrules the other accounts.
        #/// </remarks>
        #
        #//BP Deviation Documented
        #display server LedgerJournalACType displayMainAccountType()
        #{
        #    #IsoCountryRegionCodes
        #    LedgerJournalACType accountType;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoPL]))
        #    {
        #        // In Poland, use the account type from the actual transaction if possible.
        #        accountType = this.mainAccountType_PL();
        #        if (accountType != LedgerJournalACType::Ledger)
        #        {
        #            return accountType;
        #        }
        #    }
        #
        #    if (this.MainAccountType != conNull())
        #    {
        #        [accountType] = this.MainAccountType;
        #        return accountType;
        #    }
        #
        #    return this.ledgerJournalTable().mainAccountType(this.Voucher);
        #}
      ENDSOURCE
      SOURCE #displayTaxBranchDimension
        #/// <summary>
        #/// Displays the tax branch code depending on the ledger dimension.
        #/// </summary>
        #/// <returns>
        #/// Returns tax branch code getted by ledger dimension.
        #/// </returns>
        #display TaxBranchCode displayTaxBranchDimension()
        #{
        #    return TaxBranchType::getTBDisplayValueByLedgerDimension(this.LedgerDimension);
        #}
      ENDSOURCE
      SOURCE #displayTCSGroupForWHTTaxJournal_IN
        #/// <summary>
        #/// Display the TCS group for WHT tax journal.
        #/// </summary>
        #/// <returns>
        #/// The instance of the <c>TaxWithholdGroup</c> class.
        #/// </returns>
        #//BP Deviation Documented
        #display TaxWithholdGroup displayTCSGroupForWHTTaxJournal_IN()
        #{
        #    TaxWithholdTaxJournalTrans_IN   taxWithholdTaxJournalTransloc;
        #    TaxWithholdGroup                taxWithholdGroup;
        #
        #    taxWithholdTaxJournalTransloc = TaxWithholdTaxJournalTrans_IN::findByLedgerJournalTrans(this.RecId);
        #    if (taxWithholdTaxJournalTransloc.RecId != 0
        #        && taxWithholdTaxJournalTransloc.TaxWithholdType == TaxWithholdType_IN::TCS)
        #    {
        #        taxWithholdGroup = taxWithholdTaxJournalTransloc.TaxWithholdGroup;
        #    }
        #
        #    return taxWithholdGroup;
        #}
      ENDSOURCE
      SOURCE #displayTDSGroupForWHTTaxJournal_IN
        #/// <summary>
        #/// Display TDS group for WHT tax journal.
        #/// </summary>
        #/// <returns>
        #/// The instance of the <c>TaxWithholdGroup</c> class.
        #/// </returns>
        #//BP Deviation Documented
        #display TaxWithholdGroup displayTDSGroupForWHTTaxJournal_IN()
        #{
        #    TaxWithholdTaxJournalTrans_IN   taxWithholdTaxJournalTransloc;
        #    TaxWithholdGroup                taxWithholdGroup;
        #
        #    taxWithholdTaxJournalTransloc = TaxWithholdTaxJournalTrans_IN::findByLedgerJournalTrans(this.RecId);
        #    if (taxWithholdTaxJournalTransloc.RecId != 0
        #        && taxWithholdTaxJournalTransloc.TaxWithholdType == TaxWithholdType_IN::TDS)
        #    {
        #        taxWithholdGroup = taxWithholdTaxJournalTransloc.TaxWithholdGroup;
        #    }
        #
        #    return taxWithholdGroup;
        #}
      ENDSOURCE
      SOURCE #editExchRate
        #//BP Deviation Documented
        #public edit ExchRate editExchRate(boolean set, ExchRate _exchRate)
        #{
        #    ExchRate            exchRate = _exchRate;
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #    if (set)
        #    {
        #        this.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        #        if (!this.checkExchRate())
        #        {
        #            this.ExchRate = this.orig().ExchRate;
        #            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        #        }
        #    }
        #    else
        #    {
        #        exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        #    }
        #
        #    return exchRate;
        #}
      ENDSOURCE
      SOURCE #editExchRateSecond
        #//BP Deviation Documented
        #public edit ExchrateSecondary editExchRateSecond(boolean set, ExchRate _exchRate)
        #{
        #    ExchRate            exchRate = _exchRate;
        #    ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId), this.CurrencyCode);
        #
        #    if (set)
        #    {
        #        this.ExchRateSecond = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        #    }
        #    else
        #    {
        #        exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRateSecond);
        #    }
        #
        #    return exchRate;
        #}
      ENDSOURCE
      SOURCE #editReasonCode
        #/// <summary>
        #/// Gets and sets the reason code.
        #/// </summary>
        #/// <param name="set">
        #/// A Boolean value that determines whether the reason code is set.
        #/// </param>
        #/// <param name="_reasonCode">
        #/// The new reason code when <paramref name="set" /> is true.
        #/// </param>
        #/// <returns>
        #/// The reason code of the record in the <c>ReasonTableRef</c> table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
        #{
        #    ReasonCode      reasonCode = strLRTrim(_reasonCode);
        #
        #    if (set)
        #    {
        #        if (this.ReasonRefRecID == 0)
        #        {
        #            this.ReasonRefRecID = ReasonTableRef::createFromCode(reasonCode);
        #        }
        #        else
        #        {
        #            this.ReasonRefRecID = ReasonTableRef::updateCode(reasonCode, this.ReasonRefRecID);
        #        }
        #
        #        //
        #        // Update the reason comment with the default comment value for the updated reason code.
        #        // A blank reasonCode will result in a blank comment because a blank reasonCode
        #        // will return an empty reasonTable buffer.
        #        //
        #        this.editReasonComment(true, ReasonTable::find(reasonCode).Description);
        #
        #    }
        #    else
        #    {
        #        reasonCode = ReasonTableRef::find(this.ReasonRefRecID).Reason;
        #    }
        #
        #    return reasonCode;
        #}
      ENDSOURCE
      SOURCE #editReasonComment
        #/// <summary>
        #/// Gets and sets the reason comment.
        #/// </summary>
        #/// <param name="set">
        #/// A Boolean value that specifies whether to set if the reason comment.
        #/// </param>
        #/// <param name="_reasonComment">
        #/// The new reason comment when <paramref name="set" /> is true.
        #/// </param>
        #/// <returns>
        #/// The reason comment of the record in the <c>ReasonTableRef</c> table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
        #{
        #    ReasonComment   reasonComment = _reasonComment;
        #
        #    if (set)
        #    {
        #        // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
        #        // otherwise, update the existing record.
        #        if (this.ReasonRefRecID == 0)
        #        {
        #            this.ReasonRefRecID = ReasonTableRef::createFromComment(reasonComment);
        #        }
        #        else
        #        {
        #            this.ReasonRefRecID = ReasonTableRef::updateComment(reasonComment, this.ReasonRefRecID);
        #        }
        #    }
        #    else
        #    {
        #        reasonComment = ReasonTableRef::find(this.ReasonRefRecID).ReasonComment;
        #    }
        #
        #    return reasonComment;
        #}
      ENDSOURCE
      SOURCE #editServiceCode_IN
        #/// <summary>
        #/// The ServiceCode field in the TaxInformation tab of journals is an edit method now. This will set or get the service codes accordingly.
        #/// </summary>
        #/// <param name="_set">
        #/// The boolean that tells the value needs to be set.
        #/// </param>
        #/// <param name="_ledgerJournalTrans">
        #/// Current order line buffer active.
        #/// </param>
        #/// <param name="_serviceCode">
        #/// The user eneterd Service code.
        #/// </param>
        #/// <returns>
        #/// The service code.
        #/// </returns>
        #
        #//BP Deviation Documented
        #public edit ServiceCode_IN editServiceCode_IN(
        #    boolean _set,
        #    LedgerJournalTrans _ledgerJournalTrans,
        #    ServiceCode_IN     _serviceCode)
        #{
        #    ServiceCode_IN     serviceCode = _serviceCode;
        #    LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;
        #    if (_set)
        #    {
        #        changecompany(_ledgerJournalTrans.Company)
        #        {
        #            ledgerJournalTrans.ServiceCodeTable_IN = ServiceCodeTable_IN::findByServiceCode(_serviceCode).RecId;
        #        }
        #    }
        #    else
        #    {
        #        changecompany(_ledgerJournalTrans.Company)
        #        {
        #            serviceCode = ServiceCodeTable_IN::find(_ledgerJournalTrans.ServiceCodeTable_IN).ServiceCode;
        #        }
        #    }
        #
        #    return serviceCode;
        #}
      ENDSOURCE
      SOURCE #exchRateDate_W
        #public TransDate exchRateDate_W()
        #{
        #    TransDate exchRateDate;
        #    LedgerJournalType journalType;
        #
        #    #ISOCountryRegionCodes
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL]))
        #    {
        #        journalType = this.ledgerJournalTable().JournalType;
        #        if(journalType == LedgerJournalType::VendInvoiceRegister ||
        #                journalType == LedgerJournalType::PurchaseLedger ||
        #                journalType == LedgerJournalType::VendInvoicePool ||
        #                journalType == LedgerJournalType::VendInvoicePoolNotPosted)
        #        {
        #            switch(PurchParameters::find().DateOfExchRate_W)
        #            {
        #            case DateOfExchRate_W::DateOfVATRegister:
        #                exchRateDate = this.VatDueDate_W;
        #                break;
        #            case DateOfExchRate_W::DocumentDate:
        #                exchRateDate = this.DocumentDate;
        #                break;
        #            case DateOfExchRate_W::DocumentDateEU:
        #                if(TaxGroupHeading::find(this.TaxGroup).euTrade_W)
        #                {
        #                    exchRateDate = this.DocumentDate;
        #                }
        #                break;
        #            }
        #        }
        #    }
        #    return exchRateDate ? exchRateDate : this.TransDate;
        #}
      ENDSOURCE
      SOURCE #exchRateTxt
        #//BP Deviation Documented
        #display ExchRateSecondTxt exchRateTxt()
        #{
        #    return Currency::exchRateTxt(
        #        Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId),
        #        this.CurrencyCode,
        #        this.ExchRateSecond);
        #}
      ENDSOURCE
      SOURCE #exciseManufacture_IN
        #/// <summary>
        #/// Gets or sets the manufacture excise record type for the customer free text invoice lines.
        #/// </summary>
        #/// <param name="_set">
        #/// A boolean to determine whether the value is being defined or not.
        #/// </param>
        #/// <param name="_exciseManufacture_IN">
        #/// The manufacture excise record type.
        #/// </param>
        #/// <returns>
        #/// The manufacture excise record type.
        #/// </returns>
        #//BP Deviation documented
        #edit ExciseManufacture_IN exciseManufacture_IN(
        #    boolean              _set,
        #    ExciseManufacture_IN _exciseManufacture_IN)
        #{
        #    ExciseRecordType_IN     exciseRecordType_IN;
        #    ExciseManufacture_IN    exciseManufacture_IN;
        #
        #    if (_set)
        #    {
        #        switch (_exciseManufacture_IN)
        #        {
        #            case ExciseManufacture_IN::None:
        #                exciseRecordType_IN = ExciseRecordType_IN::None;
        #                break;
        #
        #            case ExciseManufacture_IN::RG23A:
        #                exciseRecordType_IN = ExciseRecordType_IN::RG23A;
        #                break;
        #
        #            case ExciseManufacture_IN::RG23C:
        #                exciseRecordType_IN = ExciseRecordType_IN::RG23C;
        #                break;
        #
        #            default :
        #                break;
        #        }
        #    }
        #
        #    if (_set && this.ExciseRecordType_IN != exciseRecordType_IN)
        #    {
        #        this.ExciseRecordType_IN = exciseRecordType_IN;
        #    }
        #
        #    switch (this.ExciseRecordType_IN)
        #    {
        #        case ExciseRecordType_IN::None:
        #            exciseManufacture_IN = ExciseManufacture_IN::None;
        #            break;
        #        case ExciseRecordType_IN::RG23A:
        #            exciseManufacture_IN = ExciseManufacture_IN::RG23A;
        #            break;
        #        case ExciseRecordType_IN::RG23C:
        #            exciseManufacture_IN = ExciseManufacture_IN::RG23C;
        #            break;
        #        default :
        #            break;
        #    }
        #
        #    return exciseManufacture_IN;
        #}
        #
      ENDSOURCE
      SOURCE #exciseNone_IN
        #/// <summary>
        #/// Gets or sets the excise record type for the customer free text invoice lines.
        #/// </summary>
        #/// <param name="_set">
        #/// A boolean to determine whether the value is being defined or not.
        #/// </param>
        #/// <param name="_exciseNone_IN">
        #/// The excise record type.
        #/// </param>
        #/// <returns>
        #/// The excise record type.
        #/// </returns>
        #//BP Deviation documented
        #edit ExciseNone_IN exciseNone_IN(
        #    boolean       _set,
        #    ExciseNone_IN _exciseNone_IN)
        #{
        #    ExciseRecordType_IN exciseRecordType_IN;
        #    ExciseNone_IN       exciseNone_IN;
        #
        #    if (_set)
        #    {
        #        switch (_exciseNone_IN)
        #        {
        #            case ExciseNone_IN::None:
        #                 exciseRecordType_IN = ExciseRecordType_IN::None;
        #                 break;
        #
        #            case ExciseNone_IN::RG23A:
        #                 exciseRecordType_IN = ExciseRecordType_IN::RG23A;
        #                 break;
        #
        #            case ExciseNone_IN::RG23C:
        #                 exciseRecordType_IN = ExciseRecordType_IN::RG23C;
        #                 break;
        #
        #            case ExciseNone_IN::RG23D:
        #                 exciseRecordType_IN = ExciseRecordType_IN::RG23D;
        #                 break;
        #
        #            default :
        #                 break;
        #        }
        #    }
        #
        #
        #    if (_set && this.ExciseRecordType_IN != exciseRecordType_IN)
        #    {
        #        this.ExciseRecordType_IN = exciseRecordType_IN;
        #    }
        #
        #    switch (this.ExciseRecordType_IN)
        #    {
        #        case ExciseRecordType_IN::None:
        #             exciseNone_IN = ExciseNone_IN::None;
        #             break;
        #        case ExciseRecordType_IN::RG23A:
        #             exciseNone_IN = ExciseNone_IN::RG23A;
        #             break;
        #        case ExciseRecordType_IN::RG23C:
        #             exciseNone_IN = ExciseNone_IN::RG23C;
        #             break;
        #        case ExciseRecordType_IN::RG23D:
        #             exciseNone_IN = ExciseNone_IN::RG23D;
        #             break;
        #        default :
        #            break;
        #    }
        #
        #    return exciseNone_IN;
        #}
        #
      ENDSOURCE
      SOURCE #exciseTraders_IN
        #/// <summary>
        #/// Gets or sets the traders excise record type for the customer free text invoice lines.
        #/// </summary>
        #/// <param name="_set">
        #/// A boolean to determine whether the value is being defined or not.
        #/// </param>
        #/// <param name="_exciseTraders">
        #/// The traders excise record type.
        #/// </param>
        #/// <returns>
        #/// The traders excise record type.
        #/// </returns>
        #//BP Deviation documented
        #edit ExciseTraders_IN exciseTraders_IN(
        #    boolean          _set,
        #    ExciseTraders_IN _exciseTraders)
        #{
        #    ExciseRecordType_IN exciseRecordType;
        #    ExciseTraders_IN    exciseTraders;
        #
        #    if (_set)
        #    {
        #        switch (_exciseTraders)
        #        {
        #            case ExciseTraders_IN::None:
        #                exciseRecordType = ExciseRecordType_IN::None;
        #                break;
        #
        #            case ExciseTraders_IN::RG23D:
        #                exciseRecordType = ExciseRecordType_IN::RG23D;
        #                break;
        #            default :
        #                break;
        #        }
        #    }
        #
        #    if (_set && this.ExciseRecordType_IN != exciseRecordType)
        #    {
        #        this.ExciseRecordType_IN = exciseRecordType;
        #    }
        #
        #    switch (this.ExciseRecordType_IN)
        #    {
        #        case ExciseRecordType_IN::None:
        #            exciseTraders = ExciseTraders_IN::None;
        #            break;
        #        case ExciseRecordType_IN::RG23D:
        #            exciseTraders = ExciseTraders_IN::RG23D;
        #            break;
        #
        #        default :
        #            break;
        #    }
        #
        #    return exciseTraders;
        #}
        #
      ENDSOURCE
      SOURCE #existBankPaymentOrderJour_RU
        #server public boolean existBankPaymentOrderJour_RU()
        #{
        #    return (this.bankPaymentOrderJour_RU().RecId != 0);
        #}
      ENDSOURCE
      SOURCE #factureModule_RU
        #server public FactureModule_RU factureModule_RU()
        #{
        #    return FactureTrans_RU::findLedgerJournalTrans(this.JournalNum,
        #                                                   this.LineNum,
        #                                                   this.RecId,
        #                                                   false).Module;
        #}
      ENDSOURCE
      SOURCE #fillPaymentNotes
        #//insert info from marked transactions into the field PaymentNotes in ledgerJournalTrans
        #public server void fillPaymentNotes()
        #{
        #    CustVendTransStatic custVendTransStatic;
        #    CustVendPaymNote    custVendPaymNote;
        #
        #    this.PaymentNotes = '';
        #
        #    if (this.SettleVoucher == SettlementType::SelectedTransact)
        #    {
        #        // create the custVendTransStatic instance in the company of the payment
        #        changecompany(this.Company)
        #        {
        #            switch (this.AccountType)
        #            {
        #                case LedgerJournalACType::Vend :
        #                    custVendTransStatic = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Vend);
        #                    break;
        #
        #                case LedgerJournalACType::Cust :
        #                    custVendTransStatic = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Cust);
        #                    break;
        #            }
        #        }
        #
        #        if (custVendTransStatic)
        #        {
        #            custVendPaymNote = CustVendPaymNote::newCustVendTransStatic(custVendTransStatic);
        #            this.PaymentNotes = custVendPaymNote.buildPaymNote(this.company(), this.TableId, this.RecId);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #findAssetTable
        #public AssetTable findAssetTable()
        #{
        #    AssetTable  assetTable;
        #
        #    if (!this.isCompanyIntercompany())
        #    {
        #        assetTable = AssetTable::findByLedgerDimension(this.LedgerDimension);
        #    }
        #    else
        #    {
        #        if (! xDataArea::exist(this.Company))
        #        {
        #            throw error(strFmt("@SYS10666", this.Company));
        #        }
        #
        #        changecompany(this.Company)
        #        {
        #            assetTable = AssetTable::findByLedgerDimension(this.LedgerDimension);
        #        }
        #    }
        #    return assetTable;
        #}
      ENDSOURCE
      SOURCE #findBankAccountTable
        #/// <summary>
        #/// Finds a <c>BankAccountTable</c> record that corresponds to the bank account.
        #/// </summary>
        #/// <returns>
        #/// A <c>BankAccountTable</c> record; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The account company does not exist.
        #/// </exception>
        #public BankAccountTable findBankAccountTable()
        #{
        #    BankAccountTable   bankAccountTable;
        #
        #    Debug::assert(this.AccountType == LedgerJournalACType::Bank);
        #
        #    if (this.isCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.Company))
        #        {
        #            throw error(strFmt("@SYS10666", this.Company));
        #        }
        #
        #        bankAccountTable = BankAccountTable::findByCompany(this.Company, this.parmAccount());
        #    }
        #    else
        #    {
        #        bankAccountTable = BankAccountTable::findByLedgerDimension(this.LedgerDimension);
        #    }
        #
        #    return bankAccountTable;
        #}
      ENDSOURCE
      SOURCE #findBankAccountTableForOffset
        #/// <summary>
        #/// Finds a <c>BankAccountTable</c> record that corresponds to the offset bank account.
        #/// </summary>
        #/// <returns>
        #/// A <c>BankAccountTable</c> record; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The offset account company does not exist.
        #/// </exception>
        #public BankAccountTable findBankAccountTableForOffset()
        #{
        #    BankAccountTable   bankAccountTable;
        #
        #    Debug::assert(this.OffsetAccountType == LedgerJournalACType::Bank);
        #
        #    if (this.isOffsetCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.OffsetCompany))
        #        {
        #            throw error(strFmt("@SYS10666", this.OffsetCompany));
        #        }
        #
        #        bankAccountTable = BankAccountTable::findByCompany(this.OffsetCompany, this.parmOffsetAccount());
        #    }
        #    else
        #    {
        #        bankAccountTable = BankAccountTable::findByLedgerDimension(this.OffsetLedgerDimension);
        #    }
        #
        #    return bankAccountTable;
        #}
      ENDSOURCE
      SOURCE #findCustForOffset
        #/// <summary>
        #/// Finds the <c>CustTable</c> record corresponding to the offset account.
        #/// </summary>
        #/// <returns>
        #/// A record from the <c>CustTable</c> table; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The offset company does not exist.
        #/// </exception>
        #public CustTable findCustForOffset()
        #{
        #    CustTable cust;
        #
        #    Debug::assert(this.OffsetAccountType == LedgerJournalACType::Cust);
        #
        #
        #    if (this.isOffsetCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.OffsetCompany))
        #        {
        #            throw error(strFmt("@SYS10666", this.OffsetCompany));
        #        }
        #
        #        cust = CustTable::findByCompany(this.OffsetCompany, this.parmOffsetAccount());
        #    }
        #    else
        #    {
        #        cust = CustTable::findByLedgerDimension(this.OffsetLedgerDimension);
        #    }
        #
        #    return cust;
        #}
      ENDSOURCE
      SOURCE #findCustTable
        #/// <summary>
        #/// Finds the <c>CustTable</c> record corresponding to the account.
        #/// </summary>
        #/// <returns>
        #/// A record from the <c>CustTable</c> table; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The account company does not exist.
        #/// </exception>
        #public CustTable findCustTable()
        #{
        #    CustTable cust;
        #
        #    if (this.isCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.Company))
        #        {
        #            throw error(strFmt("@SYS10666", this.Company));
        #        }
        #
        #        cust = CustTable::findByCompany(this.Company, this.parmAccount());
        #    }
        #    else
        #    {
        #        cust = CustTable::findByLedgerDimension(this.LedgerDimension);
        #    }
        #
        #    return cust;
        #}
      ENDSOURCE
      SOURCE #findCustTransOpen_BR
        #/// <summary>
        #/// Finds the CustTransOpen record assigned to this journal record.
        #/// </summary>
        #/// <returns>
        #/// A record in the CustTransOpen table; otherwise, an empty record.
        #/// </returns>
        #public CustTransOpen findCustTransOpen_BR()
        #{
        #    SpecTrans specTrans;
        #    CustTransOpen custTransOpen;
        #    ;
        #
        #    specTrans = SpecTrans::findBySpec(this.company(), this.TableId, this.RecId);
        #
        #    if (specTrans)
        #    {
        #        custTransOpen = specTrans.custTransOpen();
        #    }
        #
        #    return custTransOpen;
        #}
      ENDSOURCE
      SOURCE #findLedgerJournalTransAssetSibling
        #/// <summary>
        #/// Performs a company-safe lookup of a <c>LedgerJournalTrans_Asset</c> sibling record of the
        #/// transaction.
        #/// </summary>
        #/// <returns>
        #/// The <c>LedgerJournalTrans_Asset</c> sibling record of the record.
        #/// </returns>
        #/// <remarks>
        #/// This method should be used to retrieve the <c>LedgerJournalTrans_Asset</c> sibling of a
        #/// <c>LedgerJournalTrans</c>. If the find method of the <c>LedgerJournalTrans_Asset</c> is used
        #/// directly, the find may be performed in the wrong company.
        #/// </remarks>
        #public LedgerJournalTrans_Asset findLedgerJournalTransAssetSibling()
        #{
        #    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        #
        #    if (this.isFixedAssetsTransaction())
        #    {
        #        // This is a fixed assets transaction and should have a sibling record.
        #
        #        // This LedgerJournalTrans buffer and its sibling always exist in the same company, but the active company might have
        #        // changed since this buffer was selected. Perform a company-safe lookup.
        #        // Changecompany is smart enough to know to not make a switch when we are already in the correct company.
        #        changecompany (
        #                       this.company()
        #                       )
        #        {
        #            // Switch to the company the transaction exists in and find the record.
        #            ledgerJournalTrans_Asset = LedgerJournalTrans_Asset::find(this.RecId);
        #        }
        #    }
        #
        #    return ledgerJournalTrans_Asset;
        #}
      ENDSOURCE
      SOURCE #findMainAccount
        #/// <summary>
        #/// Finds the <c>MainAccount</c> record that corresponds to the account.
        #/// </summary>
        #/// <returns>
        #/// A record in the <c>MainAccount</c> table; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The company does not exist.
        #/// </exception>
        #public MainAccount findMainAccount()
        #{
        #    MainAccount mainAccount;
        #
        #    Debug::assert(this.AccountType == LedgerJournalACType::Ledger);
        #
        #    if (!this.isCompanyIntercompany())
        #    {
        #        mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(this.LedgerDimension);
        #    }
        #    else
        #    {
        #        if (! xDataArea::exist(this.Company))
        #        {
        #            throw error(strFmt("@SYS10666",this.Company));
        #        }
        #
        #        changecompany(this.Company)
        #        {
        #            mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(this.LedgerDimension);
        #        }
        #    }
        #    return mainAccount;
        #}
      ENDSOURCE
      SOURCE #findMainAccountForOffset
        #/// <summary>
        #/// Finds the <c>MainAccount</c> record that corresponds to the offset account.
        #/// </summary>
        #/// <returns>
        #/// A record in the <c>MainAccount</c> table; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The offset company does not exist.
        #/// </exception>
        #public MainAccount findMainAccountForOffset()
        #{
        #    MainAccount mainAccount;
        #
        #    Debug::assert(this.OffsetAccountType == LedgerJournalACType::Ledger);
        #
        #    if (this.isOffsetCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.OffsetCompany))
        #        {
        #            throw error(strFmt("@SYS10666", this.OffsetCompany));
        #        }
        #
        #        changecompany(this.OffsetCompany)
        #        {
        #           mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(this.OffsetLedgerDimension);
        #        }
        #    }
        #    else
        #    {
        #        mainAccount = DimensionStorage::getMainAccountFromLedgerDimension(this.OffsetLedgerDimension);
        #    }
        #
        #    return mainAccount;
        #}
      ENDSOURCE
      SOURCE #findProjTable
        #public ProjTable findProjTable(boolean _offsetAccount = false)
        #{
        #    ProjTable   projTable;
        #    ProjId      projId;
        #
        #    if (_offsetAccount)
        #    {
        #        projId = this.parmOffsetAccount();
        #    }
        #    else
        #    {
        #        projId = this.AccountType == LedgerJournalACType::Project ? this.parmAccount() : this.parmOffsetAccount();
        #    }
        #
        #    projTable = ProjTable::find(projId);
        #    return projTable;
        #
        #}
      ENDSOURCE
      SOURCE #findVendForOffset
        #/// <summary>
        #/// Finds the <c>VendTable</c> record corresponding to the offset account.
        #/// </summary>
        #/// <returns>
        #/// A record from the <c>VendTable</c> table; otherwise, an empty record.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// The offset company does not exist.
        #/// </exception>
        #public VendTable findVendForOffset()
        #{
        #    VendTable vend;
        #
        #    Debug::assert(this.OffsetAccountType == LedgerJournalACType::Vend);
        #
        #
        #    if (this.isOffsetCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.OffsetCompany))
        #        {
        #            throw error(strFmt("@SYS10666", this.OffsetCompany));
        #        }
        #
        #        vend = VendTable::findByCompany(this.OffsetCompany, this.parmOffsetAccount());
        #    }
        #    else
        #    {
        #        vend = VendTable::findByLedgerDimension(this.OffsetLedgerDimension);
        #    }
        #
        #    return vend;
        #}
        #
      ENDSOURCE
      SOURCE #findVendTable
        #public VendTable findVendTable()
        #{
        #    VendTable   vendTable;
        #    VendAccount vendAccount = this.AccountType == LedgerJournalACType::Vend ? this.parmAccount() : this.parmOffsetAccount();
        #
        #    if (this.isCompanyIntercompany())
        #    {
        #        if (!xDataArea::exist(this.Company))
        #        {
        #            throw error(strFmt("@SYS10666", this.Company));
        #        }
        #
        #        vendTable = VendTable::findByCompany(this.Company, vendAccount);
        #    }
        #    else
        #    {
        #        vendTable = VendTable::find(vendAccount);
        #    }
        #
        #    return vendTable;
        #}
      ENDSOURCE
      SOURCE #findVendTransOpen_BR
        #/// <summary>
        #/// Finds the VendTransOpen record assigned to this journal record.
        #/// </summary>
        #/// <returns>
        #/// A record in the VendTransOpen table; otherwise, an empty record.
        #/// </returns>
        #private VendTransOpen findVendTransOpen_BR()
        #{
        #    SpecTrans specTrans;
        #    VendTransOpen vendTransOpen;
        #    ;
        #
        #    specTrans = SpecTrans::findBySpec(this.company(), this.TableId, this.RecId);
        #
        #    if (specTrans)
        #    {
        #        vendTransOpen = specTrans.vendTransOpen();
        #    }
        #
        #    return vendTransOpen;
        #}
      ENDSOURCE
      SOURCE #flushAllowEditCaches
        #public void flushAllowEditCaches()
        #{
        #    #macrolib.LedgerAIF
        #    container cacheKey;
        #    SysGlobalCache      cache = classfactory.globalCache();
        #
        #    cacheKey = [this.JournalNum, this.Voucher];
        #
        #    if (cache.isSet(#LedgerJournalTransCanNotBeChangedWhenCheckPrinted, cacheKey) == true)
        #    {
        #        cache.remove(#LedgerJournalTransCanNotBeChangedWhenCheckPrinted, cacheKey);
        #    }
        #    if (cache.isSet(#LedgerJournalTransCanNotBeChangedForPromissoryNote, cacheKey) == true)
        #    {
        #        cache.remove(#LedgerJournalTransCanNotBeChangedForPromissoryNote, cacheKey);
        #    }
        #    if (cache.isSet(#LedgerJournalTransCanNotBeDeletedForPromissoryNote, cacheKey) == true)
        #    {
        #        cache.remove(#LedgerJournalTransCanNotBeDeletedForPromissoryNote, cacheKey);
        #    }
        #}
      ENDSOURCE
      SOURCE #formatTransactionText_BR
        #private void formatTransactionText_BR()
        #{
        #    TransactionTxt     transactionTxt;
        #
        #    transactionTxt = new TransactionTxt();
        #    transactionTxt.setDate(this.TransDate);
        #    transactionTxt.setVoucher(this.Voucher);
        #    transactionTxt.setKey1(this.accountDisplay());
        #    transactionTxt.setName_BR(this.accountName());
        #
        #    this.Txt = transactionTxt.txt(this.Txt);
        #}
      ENDSOURCE
      SOURCE #formSelectSettledNegInst
        #public client boolean formSelectSettledNegInst(LedgerJournalEngine _ledgerJournalEngine)
        #{
        #    FormRun         formRun;
        #    Args            args = new Args();
        #    boolean         end  = false;
        #
        #    if (!this.LedgerDimension)
        #    {
        #        throw error("@SYS25989");
        #    }
        #
        #    args.record(this);
        #    args.parmObject(_ledgerJournalEngine);
        #
        #    switch (this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            formRun = new MenuFunction(menuitemDisplayStr(CustBillOfExchangeProtestSettledSelect), MenuItemType::Display).create(args);
        #            break;
        #
        #        case LedgerJournalACType::Vend :
        #            formRun = new MenuFunction(menuitemDisplayStr(VendPromissoryNoteRedrawSettledSelect), MenuItemType::Display).create(args);
        #            break;
        #
        #        default:
        #            end  = true;
        #    }
        #    if (! end)
        #    {
        #        if (formRun)
        #        {
        #            formRun.run();
        #            formRun.wait();
        #        }
        #    }
        #    return end;
        #}
      ENDSOURCE
      SOURCE #fullyFactured_RU
        #public boolean fullyFactured_RU(boolean        _skipTaxCorrectionCheck = false,
        #                                FactureBook_RU _book                   = FactureBook_RU::Any)
        #{
        #    boolean ret = _skipTaxCorrectionCheck || this.isTaxCorrection_RU(false, _book);
        #
        #    return  ret && FactureTrans_RU::findLedgerJournalTrans(this.JournalNum,
        #                                                           this.LineNum,
        #                                                           this.RecId);
        #}
      ENDSOURCE
      SOURCE #generateRemittanceFeeTrans
        #public server void generateRemittanceFeeTrans()
        #{
        #    LedgerJournalTable                  ledgerJournalTable;
        #    BankAccountTable                    bankAccountTable;
        #    CustVendPaymJournalFee              journalFee;
        #    LedgerJournalTrans                  ledgerJournalTransFieldList;
        #    LedgerJournalTrans                  ledgerJournalTrans;
        #    LedgerDimensionDefaultAccount       defaultAccount;
        #    AmountCur                           amountCur;
        #    DimensionAttributeValueCombination  dimAttrValueCombo;
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #
        #    if (ledgerJournalTable.JournalType != LedgerJournalType::CustPaymRemittance &&
        #        ledgerJournalTable.JournalType != LedgerJournalType::VendPaymRemittance)
        #    {
        #        return;
        #    }
        #
        #    bankAccountTable = BankAccountTable::find(this.BankAccountId);
        #    switch (this.BankRemittanceType)
        #    {
        #        case BankRemittanceType::Discount :
        #            amountCur       = bankAccountTable.RemitDiscountAmount;
        #            defaultAccount  = bankAccountTable.RemittanceDiscountLedgerDimension;
        #            break;
        #
        #        case BankRemittanceType::Collection :
        #            if (ledgerJournalTable.JournalType != LedgerJournalType::VendPaymRemittance)
        #            {
        #                amountCur       = bankAccountTable.RemitCollectionAmount;
        #                defaultAccount  = bankAccountTable.RemittanceCollectionLedgerDimension;
        #                break;
        #            }
        #        case BankRemittanceType::None:
        #            if (ledgerJournalTable.JournalType != LedgerJournalType::VendPaymRemittance)
        #                return;
        #            amountCur       = bankAccountTable.InvoiceRemitAmount;
        #            defaultAccount  = bankAccountTable.InvoiceRemittanceLedgerDimension;
        #            break;
        #        default:
        #            return;
        #    }
        #
        #    if (!amountCur)
        #    {
        #        return;
        #    }
        #
        #    select firstonly journalFee
        #        where journalFee.RefRecId               == 0
        #           && journalFee.LedgerJournalACType    == LedgerJournalACType::Bank
        #    join RecId from dimAttrValueCombo
        #        where dimAttrValueCombo.RecId == journalFee.LedgerDimension
        #           && dimAttrValueCombo.DisplayValue == this.BankAccountId
        #    join RecId from ledgerJournalTransFieldList
        #        where ledgerJournalTransFieldList.JournalNum            == ledgerJournalTable.JournalNum
        #           && ledgerJournalTransFieldList.RecId                 == journalFee.FeeTransRecId
        #           && ledgerJournalTransFieldList.BankRemittanceFileId  == this.BankRemittanceFileId;
        #
        #    if (journalFee)
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #
        #    ledgerJournalTrans.data(this);
        #
        #    ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
        #    ledgerJournalTrans.LedgerDimension = ledgerJournalTrans.getLedgerDimensionForLedgerType(defaultAccount, ledgerJournalTrans.Company);
        #    ledgerJournalTrans.DefaultDimension = 0;
        #
        #    ledgerJournalTrans.parmOffsetAccount(this.BankAccountId, LedgerJournalACType::Bank);
        #    ledgerJournalTrans.CurrencyCode         = bankAccountTable.CurrencyCode;
        #    ledgerJournalTrans.amountCur2DebCred(amountCur);
        #    ledgerJournalTrans.PaymentStatus        = CustVendPaymStatus::None;
        #
        #    if (ledgerJournalTable.ledgerJournalName().NewVoucher != NewVoucher::OneVoucher)
        #    {
        #        ledgerJournalTrans.Voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        #    }
        #    ledgerJournalTrans.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTrans.JournalNum) + 1;
        #    ledgerJournalTrans.insert();
        #
        #    journalFee.clear();
        #    journalFee.FeeTransRecId        = ledgerJournalTrans.RecId;
        #    journalFee.LedgerJournalACType  = ledgerJournalTrans.OffsetAccountType;
        #    journalFee.parmCustVendAccount(ledgerJournalTrans.parmOffsetAccount());
        #    journalFee.FeeCurrency          = ledgerJournalTrans.CurrencyCode;
        #    journalFee.FeeId                = '-';
        #    journalFee.insert(true);
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #getActualAndCalculatedTaxForSingleLine
        #/// <summary>
        #/// Gets the total actual and calculated tax amount for the current line.
        #/// </summary>
        #/// <param name="_includeUseTax">
        #/// A value that indicates whether the use tax is included in the tax amount; optional.
        #/// </param>
        #/// <returns>
        #/// The actual and calculated tax amount for the current line.
        #/// </returns>
        #public server container getActualAndCalculatedTaxForSingleLine(boolean _includeUseTax)
        #{
        #    TaxAmountCur            actualTax, calculatedTax;
        #    XppILExecutePermission  xppILExecutePermission;
        #
        #    // Since tax calculation calls cost around 40ms minimum, ensure transition to Xpp IL before calculating
        #    xppILExecutePermission = new XppILExecutePermission();
        #    xppILExecutePermission.assert();
        #
        #    [actualTax, calculatedTax] = runTableMethodIL(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, getActualAndCalculatedTaxForSingleLineIL), [this, _includeUseTax]);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return [actualTax, calculatedTax];
        #}
      ENDSOURCE
      SOURCE #getAssetCompany
        #/// <summary>
        #/// Returns the company that the fixed asset transaction belongs to.
        #/// </summary>
        #/// <returns>
        #/// The company that the fixed asset transaction belongs to.
        #/// </returns>
        #public CompanyId getAssetCompany()
        #{
        #    if (this.AccountType == LedgerJournalACType::FixedAssets)
        #    {
        #        if (this.Company)
        #        {
        #            // The primary fixed asset account's company has been specified.
        #            return this.Company;
        #        }
        #    }
        #    else if (this.OffsetAccountType == LedgerJournalACType::FixedAssets)
        #    {
        #        if (this.OffsetCompany)
        #        {
        #            // The primary account isn't of type fixed asset, but the offset is and its
        #            // company has been specified.
        #            return this.OffsetCompany;
        #        }
        #    }
        #    else
        #    {
        #        // This isn't a fixed asset transaction, so throw an error.
        #        throw error("@SYS112955");
        #    }
        #
        #    // No company has been specified, so we need to return the current one in order to support
        #    // the case that intercompany has been disabled (that is, companies can't be specified).
        #    return curext();
        #}
      ENDSOURCE
      SOURCE #getAssetId
        #// This method returns the assetId. AssetId is specified as account or offset account.
        #// If the account type is FixedAssets, then account number needs to be returned.
        #// If the account type is not FA, but offset account type is FA, then offsetAccount is returned.
        #
        #AssetId getAssetId()
        #{
        #    AssetId assetId;
        #
        #    if(this.AccountType == LedgerJournalACType::FixedAssets)
        #    {
        #        assetId = this.parmAccount();
        #    }
        #    else if(this.OffsetAccountType == LedgerJournalACType::FixedAssets)
        #    {
        #        assetId = this.parmOffsetAccount();
        #    }
        #
        #    return assetId;
        #}
      ENDSOURCE
      SOURCE #getAssetId_RU
        #public RAssetId getAssetId_RU()
        #{
        #    RAssetId rAssetId;
        #    ;
        #
        #    if(this.AccountType == LedgerJournalACType::FixedAssets_RU)
        #    {
        #        rAssetId = this.parmAccount();
        #    }
        #    else if(this.OffsetAccountType == LedgerJournalACType::FixedAssets_RU)
        #    {
        #        rAssetId = this.parmOffsetAccount();
        #    }
        #
        #    return rAssetId;
        #}
      ENDSOURCE
      SOURCE #getBankLCLine
        #/// <summary>
        #/// Gets the <c>BankLCLine</c> record that is related to the <c>CustVendTransOpen</c> record, which is
        #/// settled by using the <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// The <c>BankLCLine</c> record.
        #/// </returns>
        #public BankLCLine getBankLCLine(boolean _forUpdate = false)
        #{
        #    BankLCLine bankLCLineLocal;
        #    LedgerJournalTransBankLC ledgerJournalTransBankLCLocal;
        #
        #    ledgerJournalTransBankLCLocal = this.getLedgerJournalTransBankLC();
        #
        #    if (ledgerJournalTransBankLCLocal.BankLCLine != 0)
        #    {
        #        bankLCLineLocal = BankLCLine::find(ledgerJournalTransBankLCLocal.BankLCLine, _forUpdate);
        #    }
        #
        #    return bankLCLineLocal;
        #}
      ENDSOURCE
      SOURCE #getBankTransactionCurrencyAmount
        #/// <summary>
        #/// Gets the bank transaction currency amount.
        #/// </summary>
        #/// <returns>
        #/// The bank transaction currency amount.
        #/// </returns>
        #/// <remarks>
        #/// Only return valid value when the line is related to bank account.
        #/// </remarks>
        #public AmountCur getBankTransactionCurrencyAmount()
        #{
        #    AmountCur       amountCur;
        #
        #    if (this.parmBankAccount())
        #    {
        #        amountCur = this.amount();
        #
        #        if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #        {
        #            amountCur = -amountCur;
        #        }
        #    }
        #
        #    return amountCur;
        #}
      ENDSOURCE
      SOURCE #getBudgetCheckResult
        #/// <summary>
        #/// Gets the <c>BudgetCheckResult</c> value for the specified <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #/// The <c>BudgetCheckResult</c> value for the specified <c>LedgerJournalTrans</c> record.
        #/// </returns>
        #public BudgetCheckResult getBudgetCheckResult()
        #{
        #    BudgetCheckResult budgetCheckResult;
        #
        #    if (this.RecId != 0 &&
        #        isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl)) &&
        #        hasTableAccess(tableNum(BudgetSource)) &&
        #        hasTableAccess(tableNum(LedgerJournalTrans)) &&
        #        hasTableAccess(tableNum(CompanyInfo)) &&
        #        hasTableAccess(tableNum(GeneralJournalEntry)) &&
        #        hasTableAccess(tableNum(LedgerEntryJournal)))
        #    {
        #        budgetCheckResult = BudgetSourceLedgerJournalTrans::findBudgetCheckResult(this.company(), this.JournalNum, this.Voucher);
        #    }
        #
        #    return budgetCheckResult;
        #}
      ENDSOURCE
      SOURCE #getCashDocId_RU
        #public RCashDocId getCashDocId_RU()
        #{
        #    RCashDocId rCashDocId;
        #    ;
        #
        #    if(this.AccountType == LedgerJournalACType::RCash)
        #    {
        #        rCashDocId = this.parmAccount();
        #    }
        #    else if(this.OffsetAccountType == LedgerJournalACType::RCash)
        #    {
        #        rCashDocId = this.parmOffsetAccount();
        #    }
        #
        #    return rCashDocId;
        #}
      ENDSOURCE
      SOURCE #getDeferralsId_RU
        #public RDeferralsId getDeferralsId_RU()
        #{
        #    RDeferralsId rDeferralsId;
        #    ;
        #
        #    if(this.AccountType == LedgerJournalACType::RDeferrals)
        #    {
        #        rDeferralsId = this.parmAccount();
        #    }
        #    else if(this.OffsetAccountType == LedgerJournalACType::RDeferrals)
        #    {
        #        rDeferralsId = this.parmOffsetAccount();
        #    }
        #
        #    return rDeferralsId;
        #}
      ENDSOURCE
      SOURCE #getIndirectExclusiveTaxAmountCur_IN
        #/// <summary>
        #/// Gets Indirect exclusive tax amount
        #/// </summary>
        #/// <returns>
        #/// Sales tax amount
        #/// </returns>
        #public TaxAmountCur getIndirectExclusiveTaxAmountCur_IN()
        #{
        #    TaxUncommitted      taxUncommitted;
        #    FormulaDesigner_IN  formularDesign;
        #
        #    select sum(SourceRegulateAmountCur) from taxUncommitted
        #        where taxUncommitted.SourceTableId == this.TableId
        #            && taxUncommitted.SourceRecId   == this.RecId
        #        exists join RecId from formularDesign
        #            where formularDesign.TaxItemGroup == this.TaxItemGroup
        #                && formularDesign.TaxCode == taxUncommitted.TaxCode
        #                && formularDesign.PriceInclTax == NoYes::No;
        #
        #    return taxUncommitted.SourceRegulateAmountCur;
        #}
      ENDSOURCE
      SOURCE #getLedgerAccountForAccount
        #/// <summary>
        #/// Gets the dispaly value of the ledger dimension to be posted to based on the account and account type.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> table.
        #/// </param>
        #/// <param name="_isOffsetTrans">
        #/// A boolean value that indicates whether it is an offset transaction.
        #/// </param>
        #/// <returns>
        #/// The display value for the account that will be posted to.
        #/// </returns>
        #public DimensionDisplayValue getLedgerAccountForAccount(LedgerJournalTable _ledgerJournalTable, boolean _isOffsetTrans = false)
        #{
        #    DimensionDisplayValue ledgerDimensionDisplayValue;
        #    LedgerDimensionAccount ledgerDimension;
        #
        #    if (this.AccountType != LedgerJournalACType::Ledger)
        #    {
        #        ledgerDimension = this.getLedgerDimensionForJournalAccount(_ledgerJournalTable, _isOffsetTrans);
        #        ledgerDimensionDisplayValue = DimensionAttributeValueCombination::find(ledgerDimension).DisplayValue;
        #    }
        #    else
        #    {
        #        ledgerDimensionDisplayValue = DimensionAttributeValueCombination::getDisplayValue(this.LedgerDimension);
        #    }
        #
        #    return ledgerDimensionDisplayValue;
        #}
      ENDSOURCE
      SOURCE #getLedgerDimensionForJournalAccount
        #/// <summary>
        #/// Gets the ledger dimension to be posted to based on the account and account type.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> table.
        #/// </param>
        #/// <param name="_isOffsetTrans">
        #/// A boolean value that indicates whether it is an offset transaction.
        #/// </param>
        #/// <returns>
        #/// The ledger dimension for the account that will be posted to.
        #/// </returns>
        #public LedgerDimensionAccount getLedgerDimensionForJournalAccount(LedgerJournalTable _ledgerJournalTable, boolean _isOffsetTrans = false)
        #{
        #    DimensionDynamicAccount ledgerDimension;
        #    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        #    AssetPostingProfile postingProfile;
        #    DimensionDisplayValue ledgerDimensionDisplayValue;
        #    RAssetStandards rAssetStandards;
        #    LedgerDimensionAccount mainAccountLedgerDimension;
        #
        #    LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        #    LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;
        #
        #    ledgerDimensionDisplayValue = DimensionAttributeValueCombination::getDisplayValue(this.LedgerDimension);
        #    mainAccountLedgerDimension = this.LedgerDimension;
        #
        #    if (this.AccountType != LedgerJournalACType::Ledger)
        #    {
        #        if (this.Company == curext())
        #        {
        #            switch (this.AccountType)
        #            {
        #                case LedgerJournalACType::Cust:
        #                    ledgerDimension = CustLedgerAccounts::summaryLedgerDimension(
        #                        ledgerDimensionDisplayValue,
        #                        this.getPostingProfileForCustVend(_ledgerJournalTable, _isOffsetTrans));
        #                    break;
        #
        #                case LedgerJournalACType::Vend:
        #                    ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(
        #                        ledgerDimensionDisplayValue,
        #                        this.getPostingProfileForCustVend(_ledgerJournalTable, _isOffsetTrans));
        #                    break;
        #
        #                case LedgerJournalACType::Project:
        #                    ledgerDimension = ProjTrans::newLedgerJournalTrans(this).journalReportLedgerDimension(0);
        #                    break;
        #
        #                case LedgerJournalACType::FixedAssets:
        #                    ledgerJournalTrans_Asset = this.findLedgerJournalTransAssetSibling();
        #                    postingProfile = AssetTable::find(ledgerJournalTrans_Asset.AssetId).postingProfile(ledgerJournalTrans_Asset.BookId);
        #
        #                    if (postingProfile)
        #                    {
        #                        ledgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(
        #                            ledgerDimensionDisplayValue,
        #                            ledgerJournalTrans_Asset.BookId,
        #                            AssetPost::assetTransTypeJournal2AssetTransType(ledgerJournalTrans_Asset.TransType),
        #                            true,
        #                            postingProfile);
        #                    }
        #                    else
        #                    {
        #                        ledgerDimension = AssetLedgerAccounts::findAssetLedgerDimension(
        #                            ledgerDimensionDisplayValue,
        #                            ledgerJournalTrans_Asset.BookId,
        #                            AssetPost::assetTransTypeJournal2AssetTransType(ledgerJournalTrans_Asset.TransType));
        #                    }
        #                    break;
        #
        #                case LedgerJournalACType::Bank:
        #                    ledgerDimension = BankAccountTable::findLedgerDimension(ledgerDimensionDisplayValue);
        #                    break;
        #
        #                case LedgerJournalACType::Employee_RU:
        #                    ledgerDimension = EmplLedgerAccounts_RU::summaryLedgerDimension(ledgerDimensionDisplayValue, this.PostingProfile);
        #                    break;
        #
        #                case LedgerJournalACType::RCash:
        #                    ledgerDimension = RCashLedgerAccount::summaryLedgerDimension(ledgerDimensionDisplayValue, this.PostingProfile);
        #                    break;
        #
        #                case LedgerJournalACType::FixedAssets_RU:
        #                    ledgerJournalTrans_RAsset =  LedgerJournalTrans_RAsset::find(this.RecId);
        #
        #                    if (ledgerJournalTrans_RAsset.DebLedgerDimension)
        #                    {
        #                        ledgerDimension = ledgerJournalTrans_RAsset.DebLedgerDimension;
        #                    }
        #                    else
        #                    {
        #                        rAssetStandards = RAssetStandards::find(ledgerDimensionDisplayValue,
        #                            ledgerJournalTrans_RAsset.StandardId ? ledgerJournalTrans_RAsset.StandardId : RAssetParameters::standardIdDefault());
        #
        #                        ledgerDimension = rAssetStandards.assetLedgerDimension(ledgerJournalTrans_RAsset.StandardId,
        #                            this.PostingProfile, ledgerJournalTrans_RAsset.TransType);
        #                    }
        #                    break;
        #
        #                case LedgerJournalACType::RDeferrals:
        #                    ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(this.RecId);
        #
        #                    if (ledgerJournalTrans_RDeferrals.LedgerDimension)
        #                    {
        #                        ledgerDimension = ledgerJournalTrans_RDeferrals.LedgerDimension;
        #                    }
        #                    else
        #                    {
        #                        ledgerDimension = RDeferralsLedgerAccounts::deferralsLedgerDim(DimensionAttributeValueCombination::getDisplayValue(this.LedgerDimension),
        #                            ledgerJournalTrans_RDeferrals.TransType,
        #                            ledgerJournalTrans_RDeferrals.BookId);
        #                    }
        #                    break;
        #
        #                default :
        #                    ledgerDimension = 0;
        #            }
        #
        #            mainAccountLedgerDimension = DimensionDefaultingService::serviceCreateLedgerDimension(ledgerDimension, this.DefaultDimension);
        #        }
        #        else
        #        {
        #            ledgerDimension = LedgerInterCompany::findLedgerDimensionWithJournalTrans(this);
        #            mainAccountLedgerDimension = DimensionDefaultingService::serviceCreateLedgerDimension(ledgerDimension, this.DefaultDimension);
        #        }
        #    }
        #
        #    return mainAccountLedgerDimension;
        #}
      ENDSOURCE
      SOURCE #getLedgerDimensionForLedgerType
        #/// <summary>
        #/// Gets the ledger account for the default account.
        #/// </summary>
        #/// <param name="_ledgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_company">
        #/// The company ID of the default account.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// This method combines the default account together with the pertinent default dimensions to create a
        #/// ledger account.
        #/// </remarks>
        #public LedgerDimensionAccount getLedgerDimensionForLedgerType(
        #    LedgerDimensionDefaultAccount _ledgerDimension,
        #    CompanyId _company)
        #{
        #    if (_ledgerDimension == 0)
        #    {
        #        return 0;
        #    }
        #
        #    return LedgerJournalTrans::getLedgerDimensionForLedgerTypeServer(_ledgerDimension, _company, this.ledgerJournalTable());
        #}
      ENDSOURCE
      SOURCE #getLedgerJournalTransBankLC
        #public LedgerJournalTransBankLC getLedgerJournalTransBankLC()
        #{
        #    return LedgerJournalTransBankLC::findByLedgerJournalTrans(this.RecId);
        #}
      ENDSOURCE
      SOURCE #getOffsetCompany
        #public CompanyId getOffsetCompany()
        #{
        #    if (this.OffsetCompany == '')
        #    {
        #        return curext();
        #    }
        #    else
        #    {
        #        return this.OffsetCompany;
        #    }
        #}
      ENDSOURCE
      SOURCE #getOffsetLedgerDimensionForLedgerType
        #/// <summary>
        #/// Gets the offset ledger account for the default account.
        #/// </summary>
        #/// <param name="_defaultLedgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_offsetCompany">
        #/// The company ID of the default account.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// This method combines the default account and the pertinent default dimensions
        #/// to create a ledger account.
        #/// </remarks>
        #public LedgerDimensionAccount getOffsetLedgerDimensionForLedgerType(
        #    LedgerDimensionDefaultAccount   _defaultLedgerDimension,
        #    CompanyId                       _offsetCompany)
        #{
        #    if (_defaultLedgerDimension == 0)
        #    {
        #        return 0;
        #    }
        #
        #    return LedgerJournalTrans::getOffsetLedgerDimForLedgerTypeServer(_defaultLedgerDimension, _offsetCompany, this);
        #}
      ENDSOURCE
      SOURCE #getOffsetLedgerDimensionForProposal
        #/// <summary>
        #/// Gets the offset ledger account for the default account for a proposal.
        #/// </summary>
        #/// <param name="_defaultLedgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_accountNumber">
        #/// The account number of the entity.
        #/// </param>
        #/// <param name="_accountType">
        #/// The account type of the entity.
        #/// </param>
        #/// <param name="_assetBookId">
        #/// The asset book ID; optional.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// Proposals are never intercompany. The primary and offset companies are the same, and these also
        #/// match the company on the journal header. The company is assumed to be the current company.This
        #/// method combines the default account together with the pertinent default dimensions to create a
        #/// ledger account.
        #/// </remarks>
        #public LedgerDimensionAccount getOffsetLedgerDimensionForProposal(
        #    LedgerDimensionDefaultAccount   _defaultLedgerDimension,
        #    LedgerJournalAC                 _accountNumber,
        #    LedgerJournalACType             _accountType,
        #    AssetBookIdPurchSalesInvent     _assetBookId = '')
        #{
        #    if (_defaultLedgerDimension == 0)
        #    {
        #        return 0;
        #    }
        #
        #    return LedgerJournalTrans::getOffsetLedgerDimForProposalServer(_defaultLedgerDimension, _accountNumber, _accountType, _assetBookId, this.ledgerJournalTable());
        #}
      ENDSOURCE
      SOURCE #getPaymentExtension_BR
        #/// <summary>
        #/// Retrieves the <c>LedgerJournalTransPayment_BR</c> object
        #/// </summary>
        #/// <param name="_packNewExtensionTable">
        #/// A boolean value; optional
        #/// </param>
        #/// <returns>
        #/// A <c>LedgerJournalTransPayment_BR</c> object
        #/// </returns>
        #public LedgerJournalTransPayment_BR getPaymentExtension_BR(boolean _packNewExtensionTable = true)
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(LedgerJournalTransPayment_BR), _packNewExtensionTable);
        #}
        #
        #
      ENDSOURCE
      SOURCE #getPostingProfileForCustVend
        #private PostingProfile getPostingProfileForCustVend(LedgerJournalTable _ledgerJournalTable, boolean _isOffsetTrans)
        #{
        #    #EECountryRegionCodes
        #    if (_isOffsetTrans)
        #    {
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll) && this.OffsetPostingProfile_RU)
        #        {
        #            return this.OffsetPostingProfile_RU;
        #        }
        #        else
        #        {
        #            // Offset transaction: get the posting profile from the current set according to the journal type
        #            return CustVendNegInstPost::getPostingProfile(_ledgerJournalTable.JournalType, this.BankRemittanceType);
        #        }
        #    }
        #    else
        #    {
        #        // Current transaction: get the posting profile directly from the ledgerJournalTrans
        #        return this.PostingProfile;
        #    }
        #}
      ENDSOURCE
      SOURCE #getProjectId
        #/// <summary>
        #/// Gets the project ID for this transaction.
        #/// </summary>
        #/// <returns>
        #/// The <c>ProjId</c> of the primary project that is used by this transaction.
        #/// </returns>
        #/// <remarks>
        #/// If this is not a project transaction, an empty ID is returned.
        #/// </remarks>
        #public ProjId getProjectId()
        #{
        #    ProjId projId;
        #
        #    if(this.AccountType == LedgerJournalACType::Project)
        #    {
        #        projId = this.parmAccount();
        #    }
        #    else if(this.OffsetAccountType == LedgerJournalACType::Project)
        #    {
        #        projId = this.parmOffsetAccount();
        #    }
        #
        #    return projId;
        #}
      ENDSOURCE
      SOURCE #getRFC_MX
        #/// <summary>
        #/// Gets the customer or vendor's rfc code related to this journal line
        #/// </summary>
        #/// <returns>
        #/// The RFC code
        #/// </returns>
        #public RFC_MX getRFC_MX()
        #{
        #    RFC_MX rfc;
        #
        #    if (this.CustTransId)
        #    {
        #        rfc = this.findCustTable().CustVendTable::rfc_MX();
        #    }
        #    else if (this.VendTransId)
        #    {
        #        rfc = this.findVendTable().CustVendTable::rfc_MX();
        #    }
        #
        #    return rfc;
        #}
      ENDSOURCE
      SOURCE #getTaxSetOffVoucher_IN
        #/// <summary>
        #/// Retrieves the specified TaxSetoffVoucher record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <returns>
        #/// Returns the specified TaxSetoffVoucher record.
        #/// </returns>
        #
        #public Voucher getTaxSetOffVoucher_IN()
        #{
        #    LedgerJournalTrans  ledgerJournalTransloc;
        #
        #    select firstonly TaxSetoffVoucher_IN from ledgerJournalTransloc
        #        where ledgerJournalTransloc.Voucher   == this.Voucher
        #           && ledgerJournalTransloc.TransDate == this.TransDate
        #           && ledgerJournalTransloc.TaxSetoffVoucher_IN;
        #
        #    return ledgerJournalTransloc.TaxSetoffVoucher_IN;
        #}
      ENDSOURCE
      SOURCE #getVendTransOpen_BR
        #/// <summary>
        #/// Finds the VendTransOpen record assigned to this journal record.
        #/// </summary>
        #/// <returns>
        #/// A record in the VendTransOpen table; otherwise, an empty record.
        #/// </returns>
        #// <GBR>
        #public VendTransOpen getVendTransOpen_BR()
        #{
        #    SpecTrans specTrans;
        #    VendTransOpen vendTransOpen;
        #    ;
        #
        #    specTrans = SpecTrans::findBySpec(this.company(), this.TableId, this.RecId);
        #
        #    if (specTrans)
        #    {
        #        vendTransOpen = specTrans.vendTransOpen();
        #    }
        #
        #    return vendTransOpen;
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #getWithholdTaxTypeForJournalLine
        #/// <summary>
        #/// Gets India withholding tax type for current journal line.
        #/// </summary>
        #/// <returns>
        #/// returns India withholding tax type.
        #/// </returns>
        #public TaxWithholdCodeType_IN getWithholdTaxTypeForJournalLine()
        #{
        #    if (this.tdsGroup_IN)
        #    {
        #        return TaxWithholdCodeType_IN::TDS;
        #    }
        #    else if (this.tcsGroup_IN)
        #    {
        #        return TaxWithholdCodeType_IN::TCS;
        #    }
        #    else
        #    {
        #        return TaxWithholdCodeType_IN::None;
        #    }
        #}
      ENDSOURCE
      SOURCE #handleDeleteTaxWithholdEditStatus_BR
        #private void handleDeleteTaxWithholdEditStatus_BR()
        #{
        #    if (this.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Closed
        #        && this.hasTaxWithholdingTransactions_BR())
        #    {
        #        throw error("@GLS2070");
        #    }
        #}
      ENDSOURCE
      SOURCE #handleWriteTaxWithholdEditStatus_BR
        #public boolean handleWriteTaxWithholdEditStatus_BR()
        #{
        #    boolean ok = true;
        #
        #    this.setTaxWithholdEditStatus_BR();
        #
        #    if (this.hasConflictingTaxWithholdEditStatus_BR())
        #    {
        #        ok  = checkFailed("@GLS2071");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #hasCashDiscChanged
        #/// <summary>
        #/// Determines if the cash discount has been changed.
        #/// </summary>
        #/// <returns>
        #/// true if the cash discount has changed; otherwise false.
        #/// </returns>
        #public boolean hasCashDiscChanged()
        #{
        #    return (this.CashDiscAmount != this.orig().CashDiscAmount || this.DateCashDisc != this.orig().DateCashDisc);
        #}
      ENDSOURCE
      SOURCE #hasConflictingTaxWithholdEditStatus_BR
        #/// <summary>
        #///     Returns true when there's another payment line in the same month, with the same LedgerTransTaxWithholdEditStatus_BR::Opened for the current party.
        #/// </summary>
        #/// <returns>
        #///     True when another payment line is found, for the current party number in the same month with the same TaxWithholdEditStatus_BR
        #///     Otherwise returns false
        #/// </returns>
        #/// <remarks>
        #///     Used to prevent a new payment line subject to withholding tax be created when there is another payment line with the open state.
        #/// </remarks>
        #
        #private boolean hasConflictingTaxWithholdEditStatus_BR()
        #{
        #    Query q;
        #    QueryRun qr;
        #    QueryBuildDataSource taxWithholdTransDS;
        #    QueryBuildFieldList qbfields;
        #
        #    TaxWithholdTrans taxWithholdTrans;
        #    LedgerJournalTrans ledgerJournalTrans;
        #    LedgerJournalTransPayment_BR ledgerJournalTransPaym;
        #
        #    DirPartyNumber       partyNumber;
        #
        #    date                        periodStart;
        #    date                        periodEnd;
        #
        #    if (this.getPaymentExtension_BR().TaxWithholdEditStatus_BR != LedgerTransTaxWithholdEditStatus_BR::Opened)
        #    {
        #        return false;
        #    }
        #
        #    periodStart = dateStartMth(this.TransDate);
        #    periodEnd   = dateEndMth(periodStart);
        #
        #    switch(this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            partyNumber = DirPartyTable::findRec(CustTable::find(this.parmAccount()).Party).PartyNumber;
        #            break;
        #
        #        case LedgerJournalACType::Vend :
        #            partyNumber = DirPartyTable::findRec(VendTable::find(this.parmAccount()).Party).PartyNumber;
        #            break;
        #    }
        #
        #    q = new Query();
        #
        #    switch(this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            q.allowCrossCompany(SalesParameters::find().TaxWithholdCalculateCrossCompany_BR);
        #
        #            break;
        #
        #        case LedgerJournalACType::Vend :
        #            q.allowCrossCompany(PurchParameters::find().TaxWithholdCalculateCrossCompany_BR);
        #            break;
        #
        #        default :
        #            q.allowCrossCompany(false);
        #            break;
        #    }
        #
        #    taxWithholdTransDS = q.addDataSource(tableNum(TaxWithholdTrans));
        #    taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, PartyId_BR)).value(partyNumber);
        #    taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, Posted)).value(queryValue(NoYes::No));
        #    taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, LedgerJourTransRecId_BR)).value(queryNotValue(this.RecId));
        #    taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans,TransDate)).value(queryRange(periodStart,periodEnd));
        #    qbfields = taxWithholdTransDS.fields();
        #    qbfields.dynamic(false);
        #    taxWithholdTransDS.addGroupByField(fieldNum(TaxWithholdTrans, LedgerJourTransRecId_BR));
        #
        #    qr = new QueryRun(q);
        #
        #    while (qr.next())
        #    {
        #        taxWithholdTrans = qr.get(tableNum(TaxWithholdTrans));
        #
        #        select crossCompany ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == taxWithholdTrans.LedgerJourTransRecId_BR
        #                && ledgerJournalTrans.AccountType == this.AccountType
        #            join RecId from ledgerJournalTransPaym
        #                where ledgerJournalTransPaym.RefRecId == ledgerJournalTrans.RecId
        #                    && ledgerJournalTransPaym.TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Opened;
        #
        #        if (ledgerJournalTrans)
        #            return true;
        #
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #hasCustVendTransOpen_BR
        #/// <summary>
        #/// Determines if the current journal transaction has a related open transaction.
        #/// </summary>
        #/// <returns>
        #/// true if there is an open transaction related to the journal line; otherwise, false.
        #/// </returns>
        #public boolean hasCustVendTransOpen_BR()
        #{
        #    SpecTrans           specTrans;
        #    CustVendTransOpen   custVendTransOpen;
        #    CustTransOpen       custTransOpen;
        #    VendTransOpen       vendTransOpen;
        #
        #    switch (this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            custVendTransOpen   = custTransOpen;
        #            break;
        #        case LedgerJournalACType::Vend :
        #            custVendTransOpen   = vendTransOpen;
        #            break;
        #        default :
        #            return false;
        #    }
        #
        #    select firstonly crossCompany RecId from specTrans
        #        where specTrans.SpecRecId     == this.RecId
        #            && specTrans.SpecTableId   == this.TableId
        #            && specTrans.SpecCompany   == this.company()
        #    join RecId from custVendTransOpen
        #        where custVendTransOpen.TableId == specTrans.RefTableId
        #            && custVendTransOpen.RecId   == specTrans.RefRecId
        #            && custVendTransOpen.DataAreaId == specTrans.RefCompany;
        #
        #    return specTrans.RecId;
        #}
      ENDSOURCE
      SOURCE #hasIndirectTaxFieldChanged_IN
        #/// <summary>
        #/// Check if india fields change affects tax changed.
        #/// </summary>
        #/// <returns>
        #/// true if the <c>TaxUncommitted</c> records were deleted; otherwise, false.
        #/// </returns>
        #private boolean hasIndirectTaxFieldChanged_IN()
        #{
        #    LedgerJournalTrans                  originalLedgerJournalTrans;
        #    boolean                             deleteTaxUncommitted = false;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        originalLedgerJournalTrans = this.orig();
        #        deleteTaxUncommitted =     this.AssessableValue_IN          != originalLedgerJournalTrans.AssessableValue_IN
        #                                || this.CompanyLocation_IN          != originalLedgerJournalTrans.CompanyLocation_IN
        #                                || this.ConsignmentNoteNum_IN       != originalLedgerJournalTrans.ConsignmentNoteNum_IN
        #                                || this.CustomsTariffCodeTable_IN   != originalLedgerJournalTrans.CustomsTariffCodeTable_IN
        #                                || this.CustomsTariffDirection_IN   != originalLedgerJournalTrans.CustomsTariffDirection_IN
        #                                || this.ExciseTariffCodes_IN        != originalLedgerJournalTrans.ExciseTariffCodes_IN
        #                                || this.ExciseRecordType_IN         != originalLedgerJournalTrans.ExciseRecordType_IN
        #                                || this.ExciseType_IN               != originalLedgerJournalTrans.ExciseType_IN
        #                                || this.gtaServiceCategory_IN       != originalLedgerJournalTrans.gtaServiceCategory_IN
        #                                || this.MaximumRetailPrice_IN       != originalLedgerJournalTrans.MaximumRetailPrice_IN
        #                                || this.NonRecoverablePercent_IN    != originalLedgerJournalTrans.NonRecoverablePercent_IN
        #                                || this.SalesTaxFormTypes_IN        != originalLedgerJournalTrans.SalesTaxFormTypes_IN
        #                                || this.ServiceCodeTable_IN         != originalLedgerJournalTrans.ServiceCodeTable_IN
        #                                || this.vatGoodsType_IN             != originalLedgerJournalTrans.vatGoodsType_IN
        #                                || this.SettleVoucher               != originalLedgerJournalTrans.SettleVoucher;
        #    }
        #    return deleteTaxUncommitted;
        #}
      ENDSOURCE
      SOURCE #hasPendingInvoice
        #/// <summary>
        #/// Determines whether a pending invoice exists for a <c>LedgerJournalTrans</c> table record.
        #/// </summary>
        #/// <returns>
        #/// true if a pending invoice exists for the <c>LedgerJournalTrans</c> table record; otherwise, false.
        #/// </returns>
        #//BP deviation documented
        #public display boolean hasPendingInvoice()
        #{
        #    LedgerJournalTrans localLedgerJournalTrans;
        #    VendInvoiceInfoTable localVendInvoiceInfoTable;
        #
        #    localLedgerJournalTrans = LedgerJournalTrans::ledgerJournalTransPool(this);
        #
        #    if (localLedgerJournalTrans.RecId != 0)
        #    {
        #        select RecId from localVendInvoiceInfoTable
        #            where localVendInvoiceInfoTable.PoolRecId == localLedgerJournalTrans.RecId &&
        #                localVendInvoiceInfoTable.ParmId == ''; // only saved invoices
        #    }
        #
        #    return localVendInvoiceInfoTable.RecId != 0;
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #hasRelatedTaxWithholdTrans
        #/// <summary>
        #/// Determines whether a <c>TaxWithholdTrans</c> table record exists for a <c>LedgerJournalTrans</c> table record.
        #/// </summary>
        #/// <returns>
        #/// true if a <c>TaxWithholdTrans</c> table record exists for the <c>LedgerJournalTrans</c> table record; otherwise, false.
        #/// </returns>
        #public boolean hasRelatedTaxWithholdTrans()
        #{
        #    TaxWithholdTrans    taxWithholdTrans;
        #    SpecTrans           specTrans;
        #
        #    if (this.RecId)
        #    {
        #        select firstonly RecId
        #            from taxWithholdTrans
        #            exists join specTrans
        #                where specTrans.RecId           == taxWithholdTrans.SpecTransId
        #                    && specTrans.SpecRecId      == this.RecId
        #                    && specTrans.SpecTableId    == this.TableId
        #                    && specTrans.SpecCompany    == this.DataAreaId;
        #    }
        #
        #    return taxWithholdTrans.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasTaxWithholdingTransactions_BR
        #public boolean hasTaxWithholdingTransactions_BR()
        #{
        #    TaxWithholdTrans    withhold;
        #
        #    select firstonly RecId
        #    from    withhold
        #    where   withhold.LedgerJourTransRecId_BR == this.RecId
        #        &&  withhold.TaxWithholdBaseAmount  != 0;
        #
        #    return withhold.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasTaxWithholdSetting_BR
        #private boolean hasTaxWithholdSetting_BR()
        #{
        #    TaxWithholdGroupData    taxWithholdGroup;
        #    TaxWithholdTable        taxWithholdTable;
        #
        #    if (!this.TaxWithholdGroup)
        #    {
        #        return false;
        #    }
        #
        #    select firstonly RecId
        #        from taxWithholdGroup
        #        exists join taxWithholdTable
        #        where   taxWithholdGroup.TaxWithholdGroup    == this.TaxWithholdGroup
        #            &&  taxWithholdGroup.TaxWithholdCode     == taxWithholdTable.TaxWithholdCode
        #            &&  taxWithholdTable.TaxWithholdBaseType == TaxWithholdBaseType::PctGrsAmtMonth;
        #
        #    return taxWithholdGroup.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #initAgreementDimension_RU
        #/// <summary>
        #///     Inits agreement dimension of the current <c>LedgerJournalTrans</c> record from <c>AgreementHeaderExt_RU</c> record depending on account type.
        #/// </summary>
        #/// <param name="_agreementHeaderExt">
        #///     The <c>AgreementHeaderExt_RU</c> record.
        #/// </param>
        #/// <param name="_accountOffsetaccount">
        #///     Account type, account or offset account; optional.
        #/// </param>
        #/// <param name="_onlyAgreementDimension">
        #///     Init only agreement dimension.
        #/// </param>
        #public void initAgreementDimension_RU(AgreementHeaderExt_RU _agreementHeaderExt,
        #    AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account,
        #    boolean _onlyAgreementDimension = false)
        #{
        #    void initDefaultDimension(AccountOffsetaccount _accountOffsetAccountLocal)
        #    {
        #        if (_accountOffsetAccountLocal == AccountOffsetaccount::Account)
        #        {
        #            if (_onlyAgreementDimension)
        #            {
        #                this.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId, this.DefaultDimension);
        #            }
        #            else
        #            {
        #                this.DefaultDimension = AgreementHeaderExt_RU::agreementHeader(_agreementHeaderExt.RecId).DefaultDimension;
        #            }
        #        }
        #        else
        #        if (_accountOffsetAccountLocal == AccountOffsetaccount::OffsetAccount)
        #        {
        #            if (_onlyAgreementDimension)
        #            {
        #                this.OffsetDefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId, this.OffsetDefaultDimension);
        #            }
        #            else
        #            {
        #                this.OffsetDefaultDimension = AgreementHeaderExt_RU::agreementHeader(_agreementHeaderExt.RecId).DefaultDimension;
        #            }
        #        }
        #    }
        #
        #    void initOffsetLedgerDimension()
        #    {
        #        this.OffsetDefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId,
        #            DimensionStorage::getDefaultDimensionFromLedgerDimension(this.OffsetLedgerDimension));
        #
        #        this.OffsetLedgerDimension = DimensionDefaultingService::serviceCreateLedgerDimension(
        #            DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.OffsetLedgerDimension),
        #            this.OffsetDefaultDimension);
        #    }
        #
        #    if(_agreementHeaderExt)
        #    {
        #        initDefaultDimension(_accountOffsetaccount);
        #
        #        if (_accountOffsetaccount == AccountOffsetaccount::Account)
        #        {
        #            if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #            {
        #                initOffsetLedgerDimension();
        #            }
        #            else
        #            if (this.OffsetAccountType != LedgerJournalACType::Cust
        #            && this.OffsetAccountType != LedgerJournalACType::Vend
        #            && this.OffsetAccountType != LedgerJournalACType::Project)
        #            {
        #                initDefaultDimension(AccountOffsetaccount::OffsetAccount);
        #            }
        #        }
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #initForCurrency
        #/// <summary>
        #/// Initializes the current record for a new currency.
        #/// </summary>
        #/// <param name="_parentLedgerJournalTable">
        #/// The <c>LedgerJournalTable</c> record that corresponds to the current record.
        #/// </param>
        #/// <remarks>
        #/// The new currency should already be set. This method supports multicompany.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #/// Triangulation is enabled and the Euro currency is not defined.
        #/// </exception>
        #public void initForCurrency(LedgerJournalTable _parentLedgerJournalTable)
        #{
        #    ExchangeRateHelper helper;
        #
        #    Debug::assert(this.company() == _parentLedgerJournalTable.company());
        #
        #
        #    if (this.CurrencyCode == '')
        #    {
        #        // nothing to do
        #        return;
        #    }
        #
        #    if ((_parentLedgerJournalTable.FixedExchRate != 0) &&
        #        (_parentLedgerJournalTable.CurrencyCode == this.CurrencyCode))
        #    {
        #        this.ExchRate = _parentLedgerJournalTable.ExchRate;
        #        this.ExchRateSecond = _parentLedgerJournalTable.ExchrateSecondary;
        #        this.Triangulation = _parentLedgerJournalTable.euroTriangulation;
        #    }
        #    else
        #    {
        #        helper = ExchangeRateHelper::newExchangeDate(
        #            Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId),
        #            this.CurrencyCode,
        #            this.TransDate);
        #
        #        this.ExchRate = helper.getExchangeRate1();
        #        this.ExchRateSecond = helper.getExchangeRate2();
        #        this.Triangulation = this.ExchRateSecond != 0 ? true : false;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initFromBankClientPayment_RU
        # void initFromBankClientPayment_RU(BankClientPayment_RU _paymentTable)
        #{
        #    this.parmAccount(_paymentTable.CustVendAC, _paymentTable.ledgerJournalACType());
        #    this.TransDate                    = _paymentTable.TransDate;
        #    this.Txt                          = _paymentTable.PaymentPurpose;
        #    this.PaymentNotes                 = _paymentTable.PaymentPurpose;
        #    if (_paymentTable.PaymentDirection == BankClientPaymentDirection_RU::Incoming)
        #    {
        #        this.AmountCurCredit          = _paymentTable.AmountCur;
        #    }
        #    else
        #    {
        #        this.AmountCurDebit           = _paymentTable.AmountCur;
        #    }
        #    this.parmOffsetAccount(_paymentTable.AccountID, LedgerJournalACType::Bank);
        #    this.DefaultDimension             = _paymentTable.DefaultDimension;
        #    this.CurrencyCode                 = _paymentTable.CurrencyCode;
        #    this.BankCurrencyDealCourse_RU    = _paymentTable.BankCurrencyDealCourse;
        #    this.TransactionType              = LedgerTransType::Payment;
        #    this.BankTransType                = _paymentTable.BankTransactionType;
        #    this.TransferCurrency_RU          = _paymentTable.TransferCurrencyCode;
        #    this.Prepayment                   = _paymentTable.Prepayment;
        #
        #    if (this.Prepayment)
        #    {
        #        this.TaxGroup                     = _paymentTable.TaxGroup;
        #        this.TaxItemGroup                 = _paymentTable.TaxItemGroup;
        #
        #        if (_paymentTable.ledgerJournalACType() == LedgerJournalACType::Cust)
        #        {
        #            this.CustFactureAutoCreate_RU = CustParameters::find().PrepaymentFactureAutoCreate_RU;
        #        }
        #    }
        #
        #    if (_paymentTable.ExchRate == 0.0)
        #    {
        #        this.ExchRate = Currency::exchRate(_paymentTable.CurrencyCode);
        #    }
        #    else
        #    {
        #        this.ExchRate        = _paymentTable.ExchRate;
        #    }
        #
        #    this.PaymentStatus       = CustVendPaymStatus::Confirmed;
        #
        #    if (_paymentTable.PostingProfile)
        #    {
        #        this.PostingProfile      = _paymentTable.PostingProfile;
        #    }
        #
        #    this.AccountAgreementId_RU = AgreementHeaderExt_RU::find(_paymentTable.AgreementHeaderExt).AgreementId;
        #    this.DocumentDate          = _paymentTable.DocumentDate;
        #    this.DocumentNum           = _paymentTable.DocumentNumber;
        #
        #}
        #
      ENDSOURCE
      SOURCE #initFromCustPaymModeTable
        #/// <summary>
        #/// Performs initialization by using the specified payment method.
        #/// </summary>
        #/// <param name="_paymMode">
        #/// The payment method to use for initialization.
        #/// </param>
        #/// <remarks>
        #/// This method supports multi-company by verifying the values before they are set.
        #/// </remarks>
        #public void initFromCustPaymModeTable(CustPaymModeTable _paymMode)
        #{
        #    Debug::assert(_paymMode.RecId != 0);
        #
        #
        #    if (this.BankDepositVoucher)
        #    {
        #        // bank is required for deposit
        #        this.OffsetAccountType = LedgerJournalACType::Bank;
        #
        #        if (_paymMode.AccountType == LedgerJournalACType::Bank)
        #        {
        #            if (BankAccountTable::existByCompany(this.getOffsetCompany(), _paymMode.parmPaymAccount()))
        #            {
        #                // default is deposit compatible
        #                this.parmOffsetAccount(_paymMode.parmPaymAccount());
        #            }
        #        }
        #    }
        #    else if (_paymMode.paymACType() == LedgerJournalACType::Bank ||
        #        _paymMode.paymACType() == LedgerJournalACType::Ledger)
        #    {
        #        // normal default
        #        this.OffsetAccountType = _paymMode.paymACType();
        #
        #        if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #        {
        #            if (BankAccountTable::existByCompany(this.getOffsetCompany(), _paymMode.parmPaymAccount()))
        #            {
        #                this.parmOffsetAccount(_paymMode.parmPaymAccount());
        #            }
        #        }
        #        else if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #        {
        #            changecompany(this.getOffsetCompany())
        #            {
        #                if (DimensionStorage::getMainAccountIdFromLedgerDimension(_paymMode.offsetLedgerDimension()) != 0)
        #                {
        #                    this.OffsetLedgerDimension = this.getOffsetLedgerDimensionForLedgerType(_paymMode.offsetLedgerDimension(), this.getOffsetCompany());
        #                }
        #                else
        #                {
        #                    this.OffsetLedgerDimension = 0;
        #                }
        #            }
        #        }
        #    }
        #    else if (this.OffsetAccountType != LedgerJournalACType::Ledger)
        #    {
        #        // final fallback
        #        this.OffsetAccountType = LedgerJournalACType::Ledger;
        #        this.OffsetLedgerDimension = 0;
        #    }
        #    if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #    {
        #        this.BankClientDocumentTypeId_RU = _paymMode.BankClientDocumentTypeId_RU;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initFromCustTable
        #/// <summary>
        #/// Performs initialization using the specified customer.
        #/// </summary>
        #/// <param name="_cust">
        #/// The customer to use for initialization.
        #/// </param>
        #/// <remarks>
        #/// This method supports multicompany.
        #/// </remarks>
        #public void initFromCustTable(CustTable _cust)
        #{
        #    CustParameters parms;
        #    CustPaymModeTable paymMode;
        #
        #    if (Debug::debugMode())
        #    {
        #        Debug::assert(this.AccountType == LedgerJournalACType::Cust);
        #        Debug::assert(this.Company == _cust.company());
        #        Debug::assert(this.parmAccount() == _cust.AccountNum);
        #        Debug::assert(this.company() == curext());
        #    }
        #
        #    this.Due = this.TransDate;
        #
        #    this.CurrencyCode = _cust.Currency;
        #
        #    parms = CustParameters::findByCompany(this.Company);
        #    this.PostingProfile = parms.PostingProfile;
        #
        #    this.CustVendBankAccountId = _cust.BankAccount;
        #
        #    paymMode = CustPaymModeTable::find(_cust.PaymMode);
        #    if (paymMode.RecId != 0)
        #    {
        #        this.PaymMode = _cust.PaymMode;
        #
        #        this.initFromCustPaymModeTable(paymMode);
        #    }
        #
        #    this.PaymSpec = _cust.PaymSpec;
        #    this.BankTransType = paymMode.BankTransType;
        #    this.Payment = _cust.PaymTermId;
        #    this.SettleVoucher = parms.AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        #    this.BankCentralBankPurposeCode = _cust.BankCentralBankPurposeCode;
        #    this.BankCentralBankPurposeText = _cust.BankCentralBankPurposeText;
        #}
        #
      ENDSOURCE
      SOURCE #initFromCustVendVatRegNums_PL
        #public void initFromCustVendVatRegNums_PL()
        #{
        #    PlCustVendVatRegNums custVendVatRegNums;
        #
        #    if (this.CustVendAccount_PL)
        #    {
        #        custVendVatRegNums = PlCustVendVatRegNums::find(this.CustVendAccount_PL);
        #
        #        this.vatNumJournal   = custVendVatRegNums.vatNum;
        #        this.Addressing_PL   = custVendVatRegNums.Addressing;
        #        this.CustVendName_PL = custVendVatRegNums.AccountName;
        #    }
        #    else
        #    {
        #        this.vatNumJournal   = "";
        #        this.Addressing_PL   = "";
        #        this.CustVendName_PL = "";
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromGeneralJournal
        #public void initFromGeneralJournal(
        #    GeneralJournalAccountEntry  _generalJournalAccountEntry,
        #    GeneralJournalEntry         _generalJournalEntry,
        #    LedgerEntry                 _ledgerEntry)
        #{
        #    BankChequeTable bankChequeTable;
        #    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        #
        #    this.AccountType = LedgerJournalACType::Ledger;
        #
        #    this.LedgerDimension = _generalJournalAccountEntry.LedgerDimension;
        #
        #    this.FurtherPostingRecId = _ledgerEntry.RecId;
        #
        #    if (_generalJournalAccountEntry.AccountingCurrencyAmount > 0)
        #    {
        #        this.AmountCurCredit = _generalJournalAccountEntry.AccountingCurrencyAmount;
        #        this.AmountCurDebit = 0;
        #    }
        #    else
        #    {
        #        this.AmountCurDebit = -_generalJournalAccountEntry.AccountingCurrencyAmount;
        #        this.AmountCurCredit = 0;
        #    }
        #
        #    // get the voucher assoicated with the generalJournalEntry. There should only be one in this case.
        #    select firstonly * from subledgerVoucherGeneralJournalEntry
        #        where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == _generalJournalEntry.RecId;
        #    Debug::assert(subledgerVoucherGeneralJournalEntry != null);
        #
        #    this.PaymReference  = _generalJournalAccountEntry.PaymentReference;
        #
        #    this.TransDate              = _generalJournalEntry.AccountingDate;
        #    this.Voucher                = subledgerVoucherGeneralJournalEntry.Voucher;
        #    this.AcknowledgementDate    = _generalJournalEntry.AcknowledgementDate;
        #    this.DocumentDate           = _generalJournalEntry.DocumentDate;
        #    this.DocumentNum            = _generalJournalEntry.DocumentNumber;
        #
        #    this.Qty                = _generalJournalAccountEntry.Quantity;
        #    this.Txt                = _generalJournalAccountEntry.Text;
        #    this.PaymMode           = _ledgerEntry.PaymentMode;
        #    this.FurtherPostingType = _ledgerEntry.IsBridgingPosting;
        #
        #    if (_generalJournalAccountEntry.PaymentReference != '')
        #    {
        #        select firstonly bankChequeTable
        #            where bankChequeTable.Voucher == subledgerVoucherGeneralJournalEntry.Voucher &&
        #                  bankChequeTable.TransDate == _generalJournalEntry.AccountingDate &&
        #                  bankChequeTable.ChequeNum == _generalJournalAccountEntry.PaymentReference;
        #
        #        if (bankChequeTable != null)
        #        {
        #            this.BankChequeNum = bankChequeTable.ChequeNum;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromLedgerJournalTable_LT
        #void initFromLedgerJournalTable_LT(LedgerJournalTable _journal)
        #{
        #    LedgerJournalTable_W ledgerJournalTable_W = _journal.ledgerJournalTable_W();
        #
        #    this.PaymentPriority_LT   = ledgerJournalTable_W.PaymentPriority_LT;
        #    this.ForeignBankFee_LT    = ledgerJournalTable_W.ForeignBankFee_LT;
        #    this.InformByPhone_LT     = ledgerJournalTable_W.InformByPhone_LT;
        #    this.InformByTelex_LT     = ledgerJournalTable_W.InformByTelex_LT;
        #    this.DebitCurrencyCode_LT = ledgerJournalTable_W.DebitCurrencyCode_LT;
        #}
      ENDSOURCE
      SOURCE #initFromTAMDeduction
        #/// <summary>
        #/// Initializes a <c>LedgerJournalTrans</c> record from current record.
        #/// </summary>
        #/// <param name="_tamDeduction">
        #/// The <c>TamDedution</c> record to use in the initialization.
        #/// </param>
        #/// <param name="_tamDeductionUpdateType">
        #/// The update type.
        #/// </param>
        #/// <param name="_amountCur">
        #/// The amount to use to initialize the <c>LedgerJournalTrans</c>.
        #/// </param>
        #void initFromTAMDeduction(
        #    TAMDeduction            _tamDeduction,
        #    TAMDeductionUpdateType  _tamDeductionUpdateType,
        #    AmountCur               _amountCur)
        #{
        #    LedgerJournalTrans  ledgerJournalTransParent;
        #    NumberSeq           numberSeq;
        #
        #    this.initValue();
        #
        #    MCRLedgerJournalTransInit::setApproval(this);
        #
        #    this.BankTransType      = '';
        #    this.Company            = curext();
        #    this.CurrencyCode       = _tamDeduction.CurrencyCode;
        #    this.Due                = systemDateGet();
        #    this.ExchRate           = Currency::exchRate(this.CurrencyCode);
        #    this.OffsetLedgerDimension = _tamDeduction.DeductOffLedgerDimension;
        #    this.OffsetAccountType  = LedgerJournalACType::Ledger;
        #    this.PaymentStatus      = CustVendPaymStatus::None;
        #    this.PaymId             = '';
        #    this.PaymMode           = '';
        #    this.PostingProfile     = CustParameters::find().PostingProfile;
        #    this.TransDate          = systemDateGet();
        #    this.TransactionType    = LedgerTransType::Payment;
        #
        #    ledgerJournalTransParent = _tamDeduction.ledgerJournalTransParent();
        #
        #    // Default dimensions from parent
        #    if (!this.DefaultDimension
        #        && ledgerJournalTransParent.DefaultDimension)
        #    {
        #        this.DefaultDimension = ledgerJournalTransParent.DefaultDimension;
        #    }
        #    if (_tamDeductionUpdateType == TAMDeductionUpdateType::Create)
        #    {
        #        // Posting negative amount (credit to customer)
        #        this.amountCur2DebCred(- _tamDeduction.AmountCur);
        #    }
        #    else
        #    {
        #        this.amountCur2DebCred(_amountCur);
        #    }
        #    switch (_tamDeductionUpdateType)
        #    {
        #        case TAMDeductionUpdateType::Create              :
        #            this.LedgerDimension=DimensionStorage::getDynamicAccount(_tamDeduction.AccountNum,enum2int(LedgerJournalACType::Cust));
        #            this.AccountType    = LedgerJournalACType::Cust;
        #
        #            // Copy from parent
        #            this.JournalNum      = ledgerJournalTransParent.JournalNum;
        #            this.TransactionType = LedgerTransType::Payment;
        #            this.Txt = "@SYS14364" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #
        #            // Get new voucher based on journal of parent
        #            numberSeq = NumberSeq::newGetVoucherFromId(
        #                ledgerJournalTransParent.ledgerJournalTable().NumberSequenceTable);
        #            this.Voucher = numberSeq.voucher();
        #            break;
        #        case TAMDeductionUpdateType::Match               :
        #            this.LedgerDimension = DimensionStorage::accountNum2LedgerDimension(_tamDeduction.AccountNum,LedgerJournalACType::Cust);
        #            this.AccountType = LedgerJournalACType::Cust;
        #            this.Txt = "@MCR27625" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #        case TAMDeductionUpdateType::ReverseMatch        :
        #            this.LedgerDimension = DimensionStorage::accountNum2LedgerDimension(_tamDeduction.AccountNum,LedgerJournalACType::Cust);
        #            this.AccountType = LedgerJournalACType::Cust;
        #            this.Txt = "@MCR27660" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #        case TAMDeductionUpdateType::Deny                :
        #            this.LedgerDimension = DimensionStorage::accountNum2LedgerDimension(_tamDeduction.AccountNum,LedgerJournalACType::Cust);
        #            this.AccountType = LedgerJournalACType::Cust;
        #            this.Txt = "@MCR27606" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #        case TAMDeductionUpdateType::ReverseDenial       :
        #            this.LedgerDimension = DimensionStorage::accountNum2LedgerDimension(_tamDeduction.AccountNum,LedgerJournalACType::Cust);
        #            this.AccountType = LedgerJournalACType::Cust;
        #            this.Txt = "@MCR27654" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #        case TAMDeductionUpdateType::WriteOff            :
        #            // AccountNum specified elsewhere
        #            this.AccountType = LedgerJournalACType::Ledger;
        #            this.Txt = "@SYS99195" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #        case TAMDeductionUpdateType::ReverseWriteOff    :
        #            this.LedgerDimension  = MCRAssistantLedgerDimension::mergeAccountAndDimension(
        #                                                                                    DimensionStorage::getMainAccountIdFromLedgerDimension(
        #                                                                                    _tamDeduction.DeductWriteOffLedgerDimension), 0);
        #            this.AccountType = LedgerJournalACType::Ledger;
        #            this.Txt = "@MCR27649" + ' ' + "@SYS32341" + ' ' + _tamDeduction.tamDeductionID;
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #initTaxInfomation_IN
        #/// <summary>
        #/// Initializes the <c> TaxInformation_IN </c> field of <c> LedgerJournalTrans </c> table.
        #/// </summary>
        #/// <param name="_companyId">
        #/// Company Id from which <c> TaxInformation_IN </c> field will copy the value.
        #/// </param>
        #private void initTaxInfomation_IN(CompanyId _companyId)
        #{
        #    CompanyInfo             companyInfoLoc;
        #    DirPartyLocation        dirPartyLocation;
        #    LogisticsLocation       logisticsLocation;
        #    TaxInformation_IN       taxInformation;
        #
        #    companyInfoLoc = CompanyInfo::findByCompany_IN(_companyId);
        #
        #    dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);
        #
        #    if (dirPartyLocation)
        #    {
        #        logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        #
        #        select firstonly RecId from taxInformation
        #            where taxInformation.RegistrationLocation == logisticsLocation.RecId;
        #
        #        this.CompanyLocation_IN = logisticsLocation.RecId;
        #    }
        #}
      ENDSOURCE
      SOURCE #initValue
        #public void initValue()
        #{
        #    #ISOCountryRegionCodes
        #    CompanyInfo companyInfo;
        #
        #    super();
        #
        #    if (! this.CurrencyCode)
        #    {
        #        this.CurrencyCode = CompanyInfo::standardCurrency();
        #    }
        #
        #    if (!this.ExchRate)
        #    {
        #        this.ExchRate = Currency::exchRate(this.CurrencyCode);
        #    }
        #
        #    this.Company        = curext();
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        this.AgreementCompany_RU = curext();
        #        this.OffsetAgreementCompany_RU = curext();
        #    }
        #
        #    if(isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #    {
        #        // Only initialize the OffsetCompany if the Intercompany config key is
        #        // enabled.
        #        this.OffsetCompany = curext();
        #    }
        #    this.NoEdit         = NoYes::No;
        #
        #    companyInfo = CompanyInfo::find();
        #    this.PaymInstruction1 = companyInfo.PaymInstruction1;
        #    this.PaymInstruction2 = companyInfo.PaymInstruction2;
        #    this.PaymInstruction3 = companyInfo.PaymInstruction3;
        #    this.PaymInstruction4 = companyInfo.PaymInstruction4;
        #
        #    // Determine if the tax direction is required.
        #    if (TaxParameters::find().MandatoryTaxDirection)
        #    {
        #        this.TaxDirectionControl = NoYes::Yes;
        #    }
        #
        #    if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        #    {
        #        this.SalesPurchJournalLine_IN::initFromCompanyInformation();
        #    }
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    // Comments to make sure there is diffence between sys and syp layer
        #    AifFaultContext     serviceContext;
        #    CustPaymModeTable   custPaymModeTable;
        #    LedgerJournalTable  ledgerJournalTable;
        #
        #    Object              object;
        #    #ISOCountryRegionCodes
        #
        #    HuExchOutflowType exchOutflowType;
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #    if (! this.Company)
        #    {
        #        this.Company = curext();
        #    }
        #
        #    if (! this.OffsetCompany && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #    {
        #        // Only initialize the OffsetCompany if the Intercompany config key is
        #        // enabled and it has not been previously set.
        #        this.OffsetCompany = curext();
        #    }
        #
        #    if (this.Transfer)
        #    {
        #        this.TransactionType = LedgerTransType::Transfer;
        #    }
        #
        #    if (! this.CurrencyCode)
        #    {
        #        throw error("@SYS23229");
        #    }
        #
        #    if (this.TaxCode)
        #    {
        #        if(TaxParameters::checkTaxParameters_IN() && TaxTable::find(this.TaxCode).TaxType_IN != TaxType_IN::None)
        #        {
        #            this.TaxCode = this.TaxCode;
        #        }
        #        else
        #        {
        #            if (!TaxVoucherService::ledgerAccountIsVATAccount(this.AccountType, this.LedgerDimension))
        #            {
        #                this.TaxCode = '';
        #            }
        #        }
        #
        #    }
        #
        #    this.negotiableInstrumentPreInsert();
        #
        #    custPaymModeTable = CustPaymModeTable::find(this.PaymMode);
        #
        #    if (custPaymModeTable
        #        && custPaymModeTable.ClassId == classNum(CustOutPaym_NLClieOp03)
        #        && this.AccountType       == LedgerJournalACType::Cust
        #        && this.OffsetAccountType == LedgerJournalACType::Bank)
        #    {
        #        this.BankAccountId = custPaymModeTable.parmPaymAccount();
        #    }
        #
        #    if (! this.LineNum)
        #    {
        #        this.LineNum = LedgerJournalTrans::lastLineNum(this.JournalNum) + 1;
        #    }
        #
        #    if (!this.AcknowledgementDate)
        #    {
        #        this.AcknowledgementDate = this.TransDate;
        #    }
        #
        #    this.checkAmount();
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ, #isoHU, #isoEE, #isoLT, #isoLV]))
        #    {
        #        this.modifyVatDueDate_W();
        #    }
        #
        #    if (this.AccountType != LedgerJournalACType::Vend && this.AccountType != LedgerJournalACType::Cust)
        #    {
        #        this.CustBankAccount = 0;
        #        this.VendBankAccount = 0;
        #        this.CustVendBankAccountId = "";
        #    }
        #    else
        #    {
        #        if (this.CustVendBankAccountId != "")
        #        {
        #            if (this.CustBankAccount == 0 && this.VendBankAccount == 0)
        #            {
        #                this.updateCustVendBankAccount();
        #            }
        #        }
        #        else
        #        {
        #            this.CustBankAccount = 0;
        #            this.VendBankAccount = 0;
        #        }
        #    }
        #
        #    ttsbegin;
        #    super();
        #    this.SysExtensionSerializerMap::postInsert();
        #    ttscommit;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        if (this.isFormDataSource())
        #        {
        #            object = this.dataSource();
        #
        #            if (formDataSourceHasMethod(object, identifierStr(insertIntoLedgerJournalTransTaxExt_IN)))
        #            {
        #                object.insertIntoLedgerJournalTransTaxExt_IN();
        #            }
        #        }
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        this.SysExtensionSerializerMap::postInsert();
        #    }
        #
        #    serviceContext = AifFaultContext::getGlobalContext(false);
        #    if (!this.DelayTaxCalculation && serviceContext == null && !(this.isFixedAssetsTransaction() || this.isProjectTransaction()))
        #    {
        #        // Do not calculate taxes for fixed assets or project transactions, they will get calculated when the
        #        // LedgerJournalTrans_Asset and LedgerJournalTrans_Project records get inserted since those records are
        #        // required to successfully calculate taxes.
        #
        #        if ((this.TaxGroup && this.TaxItemGroup) || this.TaxCode)
        #        {
        #            // tax information is out of date so delete and recalculate taxes.
        #            if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice))
        #            {
        #                TaxUncommitted::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice);
        #            }
        #
        #            // don't calculate taxes if this is marked as posted.  Also, records in the invoice pool don't
        #            // get Taxes calculated since they have already been posted to TaxTrans.
        #            // documents in the invoice pool are already posted and should not have taxes calculated.
        #            if (!ledgerJournalTable.Posted && !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool))
        #            {
        #                LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, true
        #                , null, false, this.TransDate
        #                );
        #            }
        #        }
        #
        #        if(TaxWithholdParameters_IN::checkTaxParameters())
        #        {
        #            if (this.tdsGroup_IN || this.tcsGroup_IN)
        #            {
        #                // delete the cache for the document header if the threshold is not exceeded.
        #                // because this will impact the tax calculation for other journal lines.
        #                if (!TaxWithholdCalculation_IN::checkRecoverableAccount(this)
        #                    && TaxWithholdTrans_IN::isThresholdExceededForAccount(this.parmAccount(),
        #                                                                          this.tdsGroup_IN? this.tdsGroup_IN : this.tcsGroup_IN,
        #                                                                          this.TransDate))
        #                {
        #                    if (TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        #                    {
        #                        TaxWithholdUncommitted_IN::deleteForDocumentHeader(ledgerJournalTable.TableId, ledgerJournalTable.RecId);
        #                    }
        #                    if (!ledgerJournalTable.Posted)
        #                    {
        #                        TaxVoucherService::calculateWithholdTaxForJournal_IN(this.JournalNum);
        #                    }
        #                }
        #                else
        #                {
        #                    if (TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        #                    {
        #                        TaxWithholdUncommitted_IN::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice);
        #                    }
        #
        #                    if (!ledgerJournalTable.Posted)
        #                    {
        #                        LedgerJournalTrans::getTaxWithholdInstance_IN(this.JournalNum, this.Voucher, this.Invoice, true);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #    this.negotiableInstrumentPostInsert();
        #    if (this.VendTransId > 0)
        #    {
        #        TradeBLWIJournalPurposeCodes::createRecord(
        #            TradeBLWICustVend::Vendor,
        #            this.RecId,
        #            this.parmAccount(),
        #            TradeBLWITypeOfForm::LedgerJournalTrans,
        #            0,
        #            TradeBLWIJournalPurposeCodes::findByTypeOfFormRefRecId(this.VendTransId, TradeBLWITypeOfForm::VendTrans).PurposeCode);
        #    }
        #    if (this.AccountType == LedgerJournalACType::RCash &&
        #        this.amount()    <  0)
        #    {
        #        exchOutflowType = RCashParameters::find().ExchOutflowType_HU;
        #        switch (exchOutflowType)
        #        {
        #            case HuExchOutflowType::FIFO :
        #                this.calcFIFOLineExchRate_HU();
        #                break;
        #
        #            case HuExchOutflowType::AverageRate :
        #                this.calcAverageLinesExchRate_HU();
        #                break;
        #        }
        #    }
        #
        #    // Remove the journalNum cache that was set on \Classes\LedgerJournalTaxDocument\doTaxGroupExistsForDocument,
        #    // but only if taxes exist on this buffer since having no taxes on this line would
        #    // not impact the caching of whether or not taxes existed for the journal
        #    if ((this.TaxGroup && this.TaxItemGroup) || this.TaxCode)
        #    {
        #        LedgerJournalTaxDocument::clearCachedTaxExistenceCheck(this.JournalNum);
        #    }
        #}
      ENDSOURCE
      SOURCE #insertPost_BR
        #/// <summary>
        #///     Runs after the insert() method of <c>LedgerJournalTrans</c> table in order to create
        #///     extension tables for Brazil.
        #/// </summary>
        #public void insertPost_BR()
        #{
        #    if (!this.RecId)
        #    {
        #        return;
        #    }
        #
        #    if (this.parmAccount())
        #    {
        #        if (this.AccountType == LedgerJournalACType::Cust)
        #        {
        #            CustEPRemitInfo_BR::setEPRemitInfo(this);
        #        }
        #        else if (this.AccountType == LedgerJournalACType::Vend)
        #        {
        #           VendEPRemitInfo_BR::setEPRemitInfo(this);
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #inventProfileType_RU
        #public InventProfileType_RU inventProfileType_RU()
        #{
        #    return CustVendTrans::inventProfileType_RU(this.CommProfileType_RU);
        #}
      ENDSOURCE
      SOURCE #invoiceAmount_BR
        #//BP deviation documented
        #display AmountCur invoiceAmount_BR()
        #{
        #    LedgerJournalType   ledgerJournalType;
        #    AmountCur amountCur;
        #    SpecTrans           foundSpecTrans;
        #
        #    ledgerJournalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #    switch(ledgerJournalType)
        #    {
        #        case LedgerJournalType::Payment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, AmountCur));
        #
        #            while select crossCompany foundSpecTrans
        #                where foundSpecTrans.SpecCompany    == this.company()
        #                    && foundSpecTrans.SpecTableId   == this.TableId
        #                    && foundSpecTrans.SpecRecId     == this.RecId
        #            {
        #                amountCur += foundSpecTrans.vendTransOpen().AmountCur;
        #            }
        #            break;
        #
        #        case LedgerJournalType::CustPayment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, AmountCur));
        #
        #            while select crossCompany foundSpecTrans
        #                where foundSpecTrans.SpecCompany    == this.company()
        #                    && foundSpecTrans.SpecTableId   == this.TableId
        #                    && foundSpecTrans.SpecRecId     == this.RecId
        #            {
        #                amountCur += foundSpecTrans.custTransOpen().AmountCur;
        #            }
        #            break;
        #
        #        default:
        #            amountCur = 0;
        #    }
        #    return abs(amountCur);
        #}
      ENDSOURCE
      SOURCE #invoiceDueDate_BR
        #//BP deviation documented
        #display DueDate invoiceDueDate_BR()
        #{
        #    DueDate dueDate;
        #    LedgerJournalType   ledgerJournalType;
        #
        #    ledgerJournalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #    switch(ledgerJournalType)
        #    {
        #        case LedgerJournalType::Payment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, DueDate));
        #            dueDate = this.findVendTransOpen_BR().DueDate;
        #            break;
        #
        #        case LedgerJournalType::CustPayment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, DueDate));
        #            dueDate = this.findCustTransOpen_BR().DueDate;
        #            break;
        #
        #        default:
        #            dueDate = dateNull();
        #    }
        #    return dueDate;
        #}
      ENDSOURCE
      SOURCE #invoiceIssueDate_BR
        #//BP deviation documented
        #display TransDate invoiceIssueDate_BR()
        #{
        #    TransDate   transDate;
        #    LedgerJournalType   ledgerJournalType;
        #
        #    ledgerJournalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #    switch(ledgerJournalType)
        #    {
        #        case LedgerJournalType::Payment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, TransDate));
        #            transDate = this.findVendTransOpen_BR().TransDate;
        #            break;
        #
        #        case LedgerJournalType::CustPayment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, TransDate));
        #            transDate = this.findCustTransOpen_BR().TransDate;
        #            break;
        #
        #        default:
        #            transDate = dateNull();
        #    }
        #
        #    return transDate;
        #}
      ENDSOURCE
      SOURCE #invoiceNumber_BR
        #//BP deviation documented
        #display InvoiceId invoiceNumber_BR()
        #{
        #    LedgerJournalType   ledgerJournalType;
        #    InvoiceId           invoiceId;
        #    VendTransOpen       vendTransOpen;
        #    CustTransOpen       custTransOpen;
        #
        #    ledgerJournalType = LedgerJournalTable::find(this.JournalNum).JournalType;
        #
        #    switch(ledgerJournalType)
        #    {
        #        case LedgerJournalType::Payment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(VendTrans), fieldNum(VendTrans, Invoice));
        #            vendTransOpen = this.findVendTransOpen_BR();
        #            invoiceId = VendTrans::findByCompany(vendTransOpen.company(), vendTransOpen.RefRecId).Invoice;
        #            break;
        #
        #        case LedgerJournalType::CustPayment:
        #            this.checkFieldViewAccessLevel_BR(tableNum(CustTrans), fieldNum(CustTrans, Invoice));
        #            custTransOpen = this.findCustTransOpen_BR();
        #            invoiceId = CustTrans::findByCompany(custTransOpen.company(), custTransOpen.RefRecId).Invoice;
        #            break;
        #
        #        default:
        #            invoiceId = '';
        #    }
        #    return invoiceId;
        #}
      ENDSOURCE
      SOURCE #isBankDocumentPayment
        #/// <summary>
        #/// Indicates whether the journal line is linked to a payment bank document.
        #/// </summary>
        #/// <returns>
        #/// A value that indicates whether the journal line is linked to a payment bank document.
        #/// </returns>
        #public boolean isBankDocumentPayment()
        #{
        #    boolean result;
        #
        #    if (this.isBankDocumentPaymentProcessNeeded()
        #        &&  BankDocumentTable::findBySource(tableNum(LedgerJournalTrans), this.RecId))
        #    {
        #        result = true;
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #isBankDocumentPaymentProcessNeeded
        #/// <summary>
        #/// Checks whether the bank document processing logic is needed.
        #/// </summary>
        #/// <returns>
        #/// Whether the bank document processing logic is needed.
        #/// </returns>
        #private boolean isBankDocumentPaymentProcessNeeded()
        #{
        #    CompanyBankAccountId    bankAccount;
        #    boolean                 result;
        #    BankDocumentBookType    bankDocumentBookType;
        #
        #    //This method will not introduce extra RPC call since every field it accesses is cached.
        #    //It can avoid unecessary RPC call when the bank document processing logic is not needed to run.
        #    bankDocumentBookType = this.parmBankDocumentBookType();
        #    if (bankDocumentBookType == BankDocumentBookType::CustPayment
        #        || bankDocumentBookType == BankDocumentBookType::VendPayment)
        #    {
        #        bankAccount = this.parmBankAccount();
        #        if (BankAccountTable::isAdvancedBankReconciliationEnabled(bankAccount))
        #        {
        #            result = true;
        #        }
        #
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #isBudgetCheckRequiredForUpdate
        #/// <summary>
        #/// Indicates whether the check for available budget funds is required for the update on the
        #/// <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <param name="_originalLedgerJournalTrans">
        #/// The original <c>LedgerJournalTrans</c> record before the update.
        #/// </param>
        #/// <returns>
        #/// true if the check for available budget funds is required for the update on the
        #/// <c>LedgerJournalTrans</c> record; otherwise, false.
        #/// </returns>
        #public boolean isBudgetCheckRequiredForUpdate(LedgerJournalTrans _originalLedgerJournalTrans)
        #{
        #    return (_originalLedgerJournalTrans.AccountType != this.AccountType ||
        #        _originalLedgerJournalTrans.Company != this.Company ||
        #        _originalLedgerJournalTrans.AmountCurDebit != this.AmountCurDebit ||
        #        _originalLedgerJournalTrans.CurrencyCode != this.CurrencyCode ||
        #        _originalLedgerJournalTrans.AmountCurCredit != this.AmountCurCredit ||
        #        _originalLedgerJournalTrans.OffsetAccountType != this.OffsetAccountType ||
        #        _originalLedgerJournalTrans.OffsetCompany != this.OffsetCompany ||
        #        _originalLedgerJournalTrans.TransDate != this.TransDate ||
        #        _originalLedgerJournalTrans.LedgerDimension != this.LedgerDimension ||
        #        _originalLedgerJournalTrans.OffsetLedgerDimension != this.OffsetLedgerDimension ||
        #        _originalLedgerJournalTrans.JournalNum != this.JournalNum ||
        #        _originalLedgerJournalTrans.Voucher != this.Voucher);
        #}
      ENDSOURCE
      SOURCE #isCashTransaction_RU
        #public boolean isCashTransaction_RU()
        #{
        #    ;
        #
        #    if (this.AccountType == LedgerJournalACType::RCash ||
        #        this.OffsetAccountType == LedgerJournalACType::RCash)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isCompanyIntercompany
        #/// <summary>
        #///    Identifies whether a company account is intercompany.
        #/// </summary>
        #/// <param name="_currentCompany">
        #///    The current company; optional.
        #/// </param>
        #/// <returns>
        #///    true if the company account differs from the current company; otherwise, false.
        #/// </returns>
        #public boolean isCompanyIntercompany(DataAreaId _currentCompany = curext())
        #{
        #    return (this.Company && this.Company != _currentCompany);
        #}
      ENDSOURCE
      SOURCE #isDeferralsTransaction_RU
        #public boolean isDeferralsTransaction_RU()
        #{
        #    ;
        #
        #    if (this.AccountType == LedgerJournalACType::RDeferrals ||
        #        this.OffsetAccountType == LedgerJournalACType::RDeferrals)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isDependantOnSettlement
        #/// <summary>
        #/// Determines whether journal amounts and dates depend on transactions marked for settlement with the
        #/// journal line.
        #/// </summary>
        #/// <returns>
        #/// true if journal amounts and dates depend on transactions marked for settlement with the journal
        #/// line; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// This dependency pertains to transaction date, cash discount, and exchange rates. It is used to
        #/// determine whether the user should be able to change the transaction date of a journal line.
        #/// </remarks>
        #public boolean isDependantOnSettlement()
        #{
        #    SpecTrans           specTrans;
        #    CustVendTrans       custVendTrans;
        #    CustVendTransOpen   custVendTransOpen;
        #
        #    CustTrans           custTrans;
        #    CustTransOpen       custTransOpen;
        #
        #    VendTrans           vendTrans;
        #    VendTransOpen       vendTransOpen;
        #
        #    if (this.SettleVoucher != SettlementType::SelectedTransact)
        #    {
        #        return false;
        #    }
        #
        #    switch (this.AccountType)
        #    {
        #        case LedgerJournalACType::Cust :
        #            custVendTrans       = custTrans;
        #            custVendTransOpen   = custTransOpen;
        #            break;
        #
        #
        #        case LedgerJournalACType::Vend :
        #            custVendTrans       = vendTrans;
        #            custVendTransOpen   = vendTransOpen;
        #            break;
        #
        #        default :
        #            return false;
        #    }
        #
        #    custVendTrans.skipPostLoad(true);
        #    select firstonly crossCompany RecId from specTrans
        #        where specTrans.SpecRecId     == this.RecId
        #           && specTrans.SpecTableId   == this.TableId
        #           && specTrans.SpecCompany   == this.company()
        #    join RecId from custVendTransOpen
        #        where custVendTransOpen.TableId == specTrans.RefTableId
        #           && custVendTransOpen.RecId   == specTrans.RefRecId
        #           && custVendTransOpen.DataAreaId == specTrans.RefCompany
        #    join RecId from custVendTrans
        #        where custVendTrans.AccountNum  == custVendTransOpen.AccountNum
        #           && custVendTrans.RecId       == custVendTransOpen.RefRecId
        #           && (custVendTrans.CurrencyCode != this.CurrencyCode || custVendTrans.CashDiscCode);
        #
        #    if (specTrans.RecId != 0)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isDirectSettleForCP_IN
        #/// <summary>
        #/// Indicates whether this <c>LedgerJournalTrans</c> is for centralized payment.
        #/// </summary>
        #/// <returns>
        #/// Returns true if this <c>LedgerJournalTrans</c> is for centralized payment; 
        #/// </returns>
        #public boolean isDirectSettleForCP_IN()
        #{
        #    SpecTrans specTrans;
        #
        #    select firstonly RecId from specTrans
        #        where specTrans.SpecRecId    == this.RecId
        #            && specTrans.SpecTableId == this.TableId
        #            && specTrans.RefCompany  != this.Company;
        #    return specTrans.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #isFixedAssetsTransaction
        #/// <summary>
        #/// Indicates whether a transaction is a fixed assets transaction.
        #/// </summary>
        #/// <returns>
        #/// true if the transaction is a fixed assets transaction; otherwise, false.
        #/// </returns>
        #public boolean isFixedAssetsTransaction()
        #{
        #    if (this.AccountType == LedgerJournalACType::FixedAssets ||
        #        this.OffsetAccountType == LedgerJournalACType::FixedAssets)
        #    {
        #        // This is a fixed assets transaction.
        #        return true;
        #    }
        #
        #    // This is not a fixed assets transaction.
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isFixedAssetsTransaction_RU
        #public boolean isFixedAssetsTransaction_RU()
        #{
        #    ;
        #
        #    if (this.AccountType == LedgerJournalACType::FixedAssets_RU ||
        #        this.OffsetAccountType == LedgerJournalACType::FixedAssets_RU)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isForeignVendorAccount_IN
        #/// <summary>
        #/// Checks if the transaction is foreign vendor account.
        #/// </summary>
        #/// <returns>
        #/// Returns true if the transaction is foreign vendor account.
        #/// </returns>
        #public boolean isForeignVendorAccount_IN()
        #{
        #    VendTable  vendTable;
        #    boolean    ret;
        #
        #    if (this.orig().AccountType == LedgerJournalACType::Vend)
        #    {
        #        vendTable = VendTable::find(this.orig().parmAccount());
        #    }
        #    else if (this.orig().OffsetAccountType == LedgerJournalACType::Vend)
        #    {
        #        vendTable = VendTable::find(this.orig().parmOffsetAccount());
        #    }
        #
        #    if (vendTable && vendTable.isForeign())
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isGTAVendorAccount_IN
        #/// <summary>
        #/// Checks if the transaction is GTA vendor account.
        #/// </summary>
        #/// <returns>
        #/// Returns true if the transaction is GTA vendor account.
        #/// </returns>
        #public boolean isGTAVendorAccount_IN()
        #{
        #    VendTable vendTable;
        #
        #    if (this.orig().AccountType == LedgerJournalACType::Vend)
        #    {
        #        vendTable = VendTable::find(this.orig().parmAccount());
        #    }
        #    else if (this.orig().OffsetAccountType == LedgerJournalACType::Vend)
        #    {
        #        vendTable = VendTable::find(this.orig().parmOffsetAccount());
        #    }
        #
        #    if (vendTable && vendTable.isGTA())
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isInterCompanySupportedByTransType
        #/// <summary>
        #/// Determines if intercompany is supported by the account type or offset account type.
        #/// </summary>
        #/// <returns>
        #/// true if intercompany is supported; otherwise, false.
        #/// </returns>
        #private boolean isInterCompanySupportedByTransType()
        #{
        #    boolean ok = true;
        #
        #    if (this.isProjectTransaction() && (this.isCompanyIntercompany() || this.isOffsetCompanyIntercompany()))
        #    {
        #        ok = checkFailed(strFmt("@SYS75337", "@SYS80304"));
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #isLedgerBankJournal_IN
        #/// <summary>
        #/// True if its a Ledger-Bank scenario.
        #/// </summary>
        #/// <returns>
        #/// True if its a Ledger-Bank scenario.
        #/// </returns>
        #
        #public boolean isLedgerBankJournal_IN()
        #{
        #    return (
        #                (this.AccountType ==  LedgerJournalACType::Bank
        #                    &&
        #                    (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #                )
        #                                        ||
        #                (this.OffsetAccountType == LedgerJournalACType::Bank
        #                    &&
        #                    (this.AccountType == LedgerJournalACType::Ledger)
        #                )
        #           );
        #}
      ENDSOURCE
      SOURCE #isNonTaxablePrepayment_RU
        #public boolean isNonTaxablePrepayment_RU()
        #{
        #    return this.Prepayment &&
        #          (this.CommProfileType_RU == CommProfileType_RU::CommissionAgent ||
        #           this.CommProfileType_RU == CommProfileType_RU::CommissionPrincipalAgent);
        #}
      ENDSOURCE
      SOURCE #iso20022EndToEndId
        #/// <summary>
        #/// Gets ISO20022 end to end identifier as composed value from voucher, separator and last symbols of
        #/// the recId value for the current record.
        #/// </summary>
        #/// <returns>
        #/// The identifier value.
        #/// </returns>
        ##define.MaxLength(35)
        ##define.Separator('-')
        #public str iso20022EndToEndId()
        #{
        #    int         separatorLength = strLen(#Separator);
        #    int         voucherLength = strLen(this.Voucher);
        #    str         res;
        #
        #    res   = int642str(this.RecId);
        #
        #    res   = this.Voucher + #Separator +
        #            substr(
        #                res,
        #                strLen(res),
        #                voucherLength + separatorLength - #MaxLength);
        #
        #    return res;
        #}
      ENDSOURCE
      SOURCE #isOffsetCompanyIntercompany
        #/// <summary>
        #///    Checks to see whether the offset company account is intercompany.
        #/// </summary>
        #/// <param name="_currentCompany">
        #///    The current company; optional.
        #/// </param>
        #/// <returns>
        #///    true if the offset company is entered and differs from the current company; otherwise, false.
        #/// </returns>
        #public boolean isOffsetCompanyIntercompany(DataAreaId _currentCompany = curext())
        #{
        #    return (this.OffsetCompany &&
        #            this.OffsetCompany != _currentCompany &&
        #            isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)));
        #}
      ENDSOURCE
      SOURCE #isOffsetTaxable
        #/// <summary>
        #/// Determines whether the primary account type is taxable.
        #/// </summary>
        #/// <returns>
        #/// true if the primary account type is taxable; otherwise, false.
        #/// </returns>
        #public boolean isOffsetTaxable()
        #{
        #    LedgerJournalTaxDocument ledgerJournalTaxDocument;
        #    LedgerJournalTaxLine ledgerJournalTaxLine;
        #
        #    ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(this.JournalNum, this.Voucher, this.Invoice, this);
        #    ledgerJournalTaxLine = ledgerJournalTaxDocument.getLineByLedgerJournalTrans(this, ledgerJournalTaxDocument.getTaxOnPrepayment()) as LedgerJournalTaxLine;
        #
        #    return ledgerJournalTaxLine.isOffsetBeingCalculated();
        #}
        #
      ENDSOURCE
      SOURCE #isPaymentJournal_IN
        #/// <summary>
        #/// True if payment journal.
        #/// </summary>
        #/// <returns>
        #/// True if payment journal.
        #/// </returns>
        #public boolean isPaymentJournal_IN()
        #{
        #    return (
        #                (this.AccountType ==  LedgerJournalACType::Bank
        #                 &&
        #                  (this.OffsetAccountType == LedgerJournalACType::Cust || this.OffsetAccountType == LedgerJournalACType::Vend)
        #                )
        #                                        ||
        #                (this.OffsetAccountType == LedgerJournalACType::Bank
        #                 &&
        #                  (this.AccountType == LedgerJournalACType::Cust || this.AccountType == LedgerJournalACType::Vend)
        #                )
        #                                       ||
        #                // Vendor/Customer & Ledger A/C of marked PostingType = PurchaseCash, will also be considered as a Payment.
        #                this.isPurchaseCashAccount_IN()
        #           );
        #}
      ENDSOURCE
      SOURCE #isPaymentJournal_MX
        #/// <summary>
        #/// True if payment journal.
        #/// </summary>
        #/// <returns>
        #/// A boolean value.
        #/// </returns>
        #public boolean isPaymentJournal_MX()
        #{
        #    return  !this.CFDIUUID_MX
        #                            &&
        #            !this.ReverseEntry
        #                            &&
        #            (
        #            (this.AccountType ==  LedgerJournalACType::Bank &&
        #            (this.OffsetAccountType == LedgerJournalACType::Cust || this.OffsetAccountType == LedgerJournalACType::Vend))
        #                            ||
        #            (this.OffsetAccountType == LedgerJournalACType::Bank &&
        #            (this.AccountType == LedgerJournalACType::Cust || this.AccountType == LedgerJournalACType::Vend))
        #            );
        #}
      ENDSOURCE
      SOURCE #isPrimaryTaxable
        #/// <summary>
        #/// Determines whether the primary account type is taxable.
        #/// </summary>
        #/// <returns>
        #/// true if the primary account type is taxable; otherwise, false.
        #/// </returns>
        #public boolean isPrimaryTaxable()
        #{
        #    LedgerJournalTaxDocument ledgerJournalTaxDocument;
        #    LedgerJournalTaxLine ledgerJournalTaxLine;
        #
        #    ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(this.JournalNum, this.Voucher, this.Invoice, this);
        #    ledgerJournalTaxLine = ledgerJournalTaxDocument.getLineByLedgerJournalTrans(this, ledgerJournalTaxDocument.getTaxOnPrepayment()) as LedgerJournalTaxLine;
        #
        #    return ledgerJournalTaxLine.isPrimaryBeingCalculated();
        #}
        #
      ENDSOURCE
      SOURCE #isProjectTransaction
        #/// <summary>
        #/// Determines whether this is a project transaction.
        #/// </summary>
        #/// <returns>
        #/// true if this is a project transaction; otherwise, false.
        #/// </returns>
        #public boolean isProjectTransaction()
        #{
        #    if (this.AccountType == LedgerJournalACType::Project ||
        #        this.OffsetAccountType == LedgerJournalACType::Project)
        #    {
        #        // This is a project transaction.
        #        return true;
        #    }
        #
        #    // This is not a project transaction.
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isPurchaseCashAccount_IN
        #/// <summary>
        #/// True if the main AC or offset AC is a purchase cash one.
        #/// </summary>
        #/// <returns>
        #/// True if the main AC or offset AC is a purchase cash one.
        #/// </returns>
        #
        #public boolean isPurchaseCashAccount_IN()
        #{
        #    LedgerDimensionAccount              ledgerDimensionAccount;
        #    DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        #    boolean                             isPurchaseCash;
        #
        #    if (
        #        this.AccountType ==  LedgerJournalACType::Ledger
        #            &&
        #            (this.OffsetAccountType ==  LedgerJournalACType::Vend
        #             ||
        #             this.OffsetAccountType ==  LedgerJournalACType::Cust)
        #       )
        #    {
        #        ledgerDimensionAccount = this.LedgerDimension;
        #    }
        #    else if (
        #             this.OffsetAccountType ==  LedgerJournalACType::Ledger
        #                 &&
        #                 (this.AccountType ==  LedgerJournalACType::Vend
        #                  ||
        #                  this.AccountType ==  LedgerJournalACType::Cust)
        #            )
        #    {
        #        ledgerDimensionAccount = this.OffsetLedgerDimension;
        #    }
        #
        #    if (ledgerDimensionAccount)
        #    {
        #        select firstonly MainAccount from dimensionAttributeValueCombination
        #           where dimensionAttributeValueCombination.RecId == ledgerDimensionAccount;
        #
        #        if (MainAccount::find(dimensionAttributeValueCombination.MainAccount).PostingType == LedgerPostingType::PurchCash)
        #        {
        #            isPurchaseCash = true;
        #        }
        #    }
        #
        #    return isPurchaseCash;
        #}
        #
      ENDSOURCE
      SOURCE #isSEPAPaymentRejected
        #private boolean isSEPAPaymentRejected(CustPaymModeTable _custPaymModeTable = CustPaymModeTable::find(this.PaymMode), LedgerJournalTrans _ledgerJournalTrans_orig = this.orig())
        #{
        #    boolean result = false;
        #
        #    if (_custPaymModeTable.IsSEPA &&
        #        (_ledgerJournalTrans_orig.PaymentStatus == CustVendPaymStatus::Sent ||
        #        _ledgerJournalTrans_orig.PaymentStatus  == CustVendPaymStatus::Confirmed ||
        #        _ledgerJournalTrans_orig.PaymentStatus  == CustVendPaymStatus::Recieved) &&
        #        (this.PaymentStatus == CustVendPaymStatus::Rejected ||
        #        this.PaymentStatus == CustVendPaymStatus::None))
        #    {
        #        result = true;
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #isServiceApplicable_IN
        #/// <summary>
        #/// Checks if the service is applicable.
        #/// </summary>
        #/// <returns>
        #/// Returns true if the service is applicable.
        #/// </returns>
        #public boolean isServiceApplicable_IN()
        #{
        #    TaxGroupData    taxGroupData;
        #    TaxOnItem       taxOnItem;
        #    TaxTable        taxTable;
        #    boolean         ret = false;
        #
        #    changecompany(this.Company ? this.Company : curext())
        #    {
        #        select firstonly TaxCode from taxGroupData
        #            where taxGroupData.TaxGroup == this.TaxGroup
        #                join TaxCode from taxTable
        #                    where taxTable.TaxCode == taxGroupData.TaxCode
        #                        && taxTable.TaxType_IN == TaxType_IN::ServiceTax
        #                            join RecId, TaxItemGroup, TaxCode from taxOnItem
        #                                where taxOnItem.TaxItemGroup == this.TaxItemGroup
        #                                    && taxOnItem.TaxCode == taxTable.TaxCode;
        #    }
        #
        #    return taxTable.TaxCode != '';
        #}
      ENDSOURCE
      SOURCE #isServiceTax_IN
        #/// <summary>
        #/// Checks if the service tax is available.
        #/// </summary>
        #/// <returns>
        #/// Returns true if the service tax is available.
        #/// </returns>
        #public boolean isServiceTax_IN()
        #{
        #    boolean ret = false;
        #
        #    boolean accountCombinationIsTaxable_IN()
        #    {
        #        return ((this.AccountType       ==  LedgerJournalACType::Bank       &&
        #                (this.OffsetAccountType ==  LedgerJournalACType::Cust       ||
        #                 this.OffsetAccountType ==  LedgerJournalACType::Vend))     ||
        #                (this.OffsetAccountType ==  LedgerJournalACType::Bank       &&
        #                (this.AccountType       ==  LedgerJournalACType::Cust       ||
        #                 this.AccountType       ==  LedgerJournalACType::Vend)));
        #    }
        #
        #    if (TaxParameters::isServiceTaxEnable_IN()
        #        && accountCombinationIsTaxable_IN()
        #        && this.isServiceApplicable_IN())
        #    {
        #        ret = true;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isTax1099DetailTransaction
        #/// <summary>
        #/// Indicates whether this is a 1099 transaction that requires Tax1099Details.
        #/// </summary>
        #/// <returns>
        #/// true if this is a 1099 transaction; otherwise, false .
        #/// </returns>
        #public boolean isTax1099DetailTransaction()
        #{
        #    Tax1099Box  tax1099Box = Tax1099Fields::find(this.Tax1099Fields).Tax1099Box;
        #    #Tax1099
        #
        #
        #    if (tax1099Box == #G_1 || tax1099Box == #G_2 || tax1099Box == #S_2)
        #    {
        #        // This is a 1099 transaction.
        #        return true;
        #    }
        #    // This is not a 1099 transaction.
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isTaxable
        #/// <summary>
        #///    Checks to see whether tax should be calculated for the journal line.
        #/// </summary>
        #/// <returns>
        #///    true if tax should be calculated for the journal line; otherwise, false.
        #/// </returns>
        #public boolean isTaxable()
        #{
        #    #ISOCountryRegionCodes
        #    boolean ret;
        #
        #    boolean countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
        #    boolean countryRegion_IN    = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoIN ]);
        #    TaxItemGroupHeading taxItemGroupHeadingPOT;
        #    boolean isCashModuleEnabled = RCashParameters::isCashModuleEnabled();
        #
        #    boolean accountTypeIsTaxable()
        #    {
        #        return (this.AccountType    == LedgerJournalACType::Ledger  ||
        #                this.AccountType    == LedgerJournalACType::Project ||
        #                this.AccountType    == LedgerJournalACType::FixedAssets ||
        #                (countryRegion_RU
        #                    && (this.AccountType    == LedgerJournalACType::FixedAssets_RU
        #                        || this.AccountType == LedgerJournalACType::RDeferrals)));
        #    }
        #
        #    boolean offsetAccountTypeIsTaxable()
        #    {
        #        return (this.OffsetLedgerDimension &&
        #                (this.OffsetAccountType  == LedgerJournalACType::Ledger  ||
        #                 this.OffsetAccountType  == LedgerJournalACType::Project ||
        #                 this.OffsetAccountType  == LedgerJournalACType::FixedAssets ||
        #                 (countryRegion_RU
        #                    && (this.OffsetAccountType    == LedgerJournalACType::FixedAssets_RU
        #                        || this.OffsetAccountType == LedgerJournalACType::RDeferrals))));
        #    }
        #
        #    boolean prePaymentIsTaxAble(
        #        LedgerJournalACType _accountType = this.AccountType
        #    )
        #    {
        #        switch (_accountType)
        #        {
        #            case LedgerJournalACType::Cust:
        #                return this.Prepayment && CustParameters::find().TaxOnPrepayment;
        #
        #            case LedgerJournalACType::Vend:
        #                return this.Prepayment && (VendParameters::find().TaxOnPrepayment || this.isVatTaxAgentPrepayment_RU());
        #        }
        #        return false;
        #    }
        #    if (countryRegion_IN)
        #    {
        #        taxItemGroupHeadingPOT = TaxItemGroupHeading::find(this.TaxItemGroup);
        #    }
        #    ret = this.amount() != 0;
        #
        #    ret = ret && ((this.TaxGroup && this.TaxItemGroup) || this.TaxCode);
        #    if (ret
        #        && countryRegion_IN
        #        && this.isServiceTax_IN())
        #    {
        #        ret = LedgerJournalTrans::existsAdvancePaymentForServiceTax_IN(this);
        #    }
        #    else
        #    {
        #        ret = ret && (accountTypeIsTaxable() || offsetAccountTypeIsTaxable() || prePaymentIsTaxAble());
        #    }
        #    // As per new POT change, Vendor payment on Legacy POT has no tax associated. Legacy POT is identified by ZERO reverse charge %.
        #    if (ret
        #        && this.isPaymentJournal_IN()
        #        && (this.AccountType == LedgerJournalACType::Vend
        #            || this.OffsetAccountType == LedgerJournalACType::Vend)
        #        && taxItemGroupHeadingPOT.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
        #        && taxItemGroupHeadingPOT.ReverseChargePercentage_IN == 0)
        #    {
        #        ret = false;
        #    }
        #
        #    if (isCashModuleEnabled
        #        && this.AccountType == LedgerJournalACType::RCash
        #        && !ret)
        #    {
        #        ret = prePaymentIsTaxAble(this.OffsetAccountType);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isTaxCorrection_RU
        #//Tax Correction Factures
        #public boolean isTaxCorrection_RU(boolean        _withInfo = true,
        #                                  FactureBook_RU _book     = FactureBook_RU::Any)
        #{
        #    TaxTable                        taxTable;
        #    TaxLedgerAccountGroup           ledgerGroup;
        #    LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount, offsetLedgerDimensionDefaultAccount;
        #
        #    boolean     ret = true;
        #
        #    if (this.AccountType != LedgerJournalACType::Ledger)
        #    {
        #        ret = _withInfo ? checkFailed(strFmt("@GLS104454", LedgerJournalACType::Ledger)) : false;
        #    }
        #
        #    if (! this.TaxCode || ! TaxTable::exist(this.TaxCode))
        #    {
        #        ret = _withInfo ? checkFailed("@GLS102565") : false;
        #    }
        #
        #    if (ret)
        #    {
        #        taxTable = TaxTable::find(this.TaxCode);
        #        switch (taxTable.TaxType_W)
        #        {
        #            case TaxType_W::VAT        :
        #            case TaxType_W::VATReduced :
        #            case TaxType_W::VATZero    :
        #                break;
        #            default                     :
        #                ret = _withInfo ? checkFailed("@GLS102568") : false;
        #        }
        #    }
        #
        #    if (ret)
        #    {
        #        ledgerGroup = TaxLedgerAccountGroup::find(taxTable.TaxAccountGroup);
        #
        #        ledgerDimensionDefaultAccount       = DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.LedgerDimension);
        #        offsetLedgerDimensionDefaultAccount = DimensionStorage::getLedgerDefaultAccountFromLedgerDim(this.OffsetLedgerDimension);
        #
        #        switch (ledgerDimensionDefaultAccount)
        #        {
        #            case ledgerGroup.TaxOutgoingLedgerDimension           :
        #            case ledgerGroup.TaxIncomingLedgerDimension           :
        #            case ledgerGroup.TaxIncomingPaymentLedgerDimension_RU :
        #                break;
        #            case ledgerGroup.TaxOutgoingOffsetLedgerDimension_RU :
        #                if (offsetLedgerDimensionDefaultAccount == ledgerGroup.TaxOutgoingLedgerDimension)
        #                {
        #                    break;
        #                }
        #            default                                :
        #                ret = _withInfo ? checkFailed("@GLS102567") : false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isTaxTypeApplicable_IN
        #/// <summary>
        #/// Checks if the tax type is applicable.
        #/// </summary>
        #/// <returns>
        #/// Returns true if the tax type is applicable.
        #/// </returns>
        #public boolean isTaxTypeApplicable_IN()
        #{
        #    TaxGroupData    taxGroupData;
        #    TaxOnItem       taxOnItem;
        #    TaxTable        taxTable;
        #    boolean         ret = false;
        #
        #    if (TaxParameters::checkTaxParameters_IN())
        #    {
        #        select firstonly RecId, TaxGroup, TaxCode from taxGroupData
        #            where taxGroupData.TaxGroup == this.TaxGroup
        #                join TaxItemGroup, TaxCode from taxOnItem
        #                    where taxOnItem.TaxItemGroup == this.TaxItemGroup &&
        #                        taxOnItem.TaxCode == taxGroupData.TaxCode
        #                            join TaxCode, TaxType_IN from taxTable
        #                                where taxTable.TaxCode == taxOnItem.TaxCode
        #                                    && taxTable.TaxType_IN != TaxType_IN::None;
        #    }
        #    return taxGroupData.RecId != 0;
        #
        #}
      ENDSOURCE
      SOURCE #isTransferred
        #//BP Deviation Documented
        #display boolean isTransferred()
        #{
        #    LedgerJournalTrans  transferredTrans;
        #
        #    if (this.RecId)
        #    {
        #        select firstonly RecId from transferredTrans
        #            index PoolRecId
        #            where transferredTrans.PoolRecId == this.RecId;
        #    }
        #
        #    return transferredTrans.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #isTransForGTAVendor_IN
        #/// <summary>
        #/// Indicates whether transaction is for GTA vendor.
        #/// </summary>
        #/// <returns>
        #/// Returns true if transaction is related with GTA vendor; 
        #/// </returns>
        #public boolean isTransForGTAVendor_IN()
        #{
        #    boolean ret;
        #
        #    if ((this.AccountType == LedgerJournalACType::Vend           ||
        #        this.OffsetAccountType == LedgerJournalACType::Vend)
        #        && VendTable::find(this.parmAccount()).isGTA())
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isTransIntercompany
        #public boolean isTransIntercompany(DataAreaId _currentCompany = curext())
        #{
        #    return (this.isCompanyIntercompany(_currentCompany) || this.isOffsetCompanyIntercompany(_currentCompany));
        #}
      ENDSOURCE
      SOURCE #isVatTaxAgentAuthorityPayment_RU
        #public boolean isVatTaxAgentAuthorityPayment_RU()
        #{
        #    return (this.vatTaxAgentVendAccount_RU && this.TaxCode &&
        #            this.AccountType == LedgerJournalACType::Vend);
        #}
      ENDSOURCE
      SOURCE #isVATTaxAgentPaymentFromVendorFunds_RU
        #public boolean isVATTaxAgentPaymentFromVendorFunds_RU()
        #{
        #    TaxCode taxCode;
        #
        #    if (this.AccountType == LedgerJournalACType::Vend &&
        #        this.isVatTaxAgentPrepayment_RU()             &&
        #        this.TaxGroup                                 &&
        #        this.TaxItemGroup)
        #    {
        #        taxCode = TaxTable::vatCode_RU(this.TaxGroup, this.TaxItemGroup);
        #
        #        if (taxCode && TaxTable::find(taxCode).vatChargeSource_RU == VATChargeSource_RU::VendorFunds)
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isVatTaxAgentPrepayment_RU
        #public boolean isVatTaxAgentPrepayment_RU()
        #{
        #    return this.Prepayment && VendTable::find(this.parmAccount()).vatTaxAgent_RU;
        #}
      ENDSOURCE
      SOURCE #ledgerJournalTable
        #/// <summary>
        #/// Finds the journal record that is the parent of this <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #/// The <c>LedgerJournalTable</c> record that is the parent of this record.
        #/// </returns>
        #public LedgerJournalTable ledgerJournalTable()
        #{
        #    #ISOCountryRegionCodes
        #    LedgerJournalTable ledgerJournalTable;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoHU, #isoPL])
        #        && this.isTmp())
        #    {
        #        ledgerJournalTable = CustVendPrepaymentHandling_W::ledgerJournalTable();
        #    }
        #    else
        #    {
        #        changecompany (this.company())
        #        {
        #            ledgerJournalTable = LedgerJournalTable::find(this.JournalNum);
        #        }
        #
        #    }
        #    return ledgerJournalTable;
        #}
      ENDSOURCE
      SOURCE #ledgerJournalTransExtensionTH
        #/// <summary>
        #/// Get the <c>LedgerJournalTransExtensionTH</c> table.
        #/// </summary>
        #/// <returns>
        #/// The table <c>LedgerJournalTransExtensionTH</c> associated with the current record.
        #/// </returns>
        #public LedgerJournalTransExtensionTH ledgerJournalTransExtensionTH()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(LedgerJournalTransExtensionTH));
        #}
      ENDSOURCE
      SOURCE #ledgerJournalTransTaxExtensionIN
        #/// <summary>
        #/// Get the <c>LedgerJournalTransTaxExtensionIN</c> table.
        #/// </summary>
        #/// <returns>
        #/// The table <c>LedgerJournalTransTaxExtensionIN</c> associated with the current record.
        #/// </returns>
        #public LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN()
        #{
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(LedgerJournalTransTaxExtensionIN));
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #linesQty_PL
        #server public boolean linesQty_PL(LedgerJournalId _journalNum   = this.JournalNum,
        #                                  Voucher         _voucher      = this.Voucher,
        #                                  RecId           _currentRecId = this.RecId)
        #{
        #    return (select count(RecId) from ledgerJournalTrans
        #                where ledgerJournalTrans.JournalNum == _journalNum &&
        #                      ledgerJournalTrans.Voucher    == _voucher    &&
        #                      ledgerJournalTrans.RecId      != _currentRecId).RecId > 0;
        #}
      ENDSOURCE
      SOURCE #listCodeAllowed
        #/// <summary>
        #/// Determines whether the list code field is available.
        #/// </summary>
        #/// <returns>
        #/// true if the list code is available; otherwise, false.
        #/// </returns>
        #public boolean listCodeAllowed()
        #{
        #    return (this.AccountType == LedgerJournalACType::Cust
        #        || (this.AccountType == LedgerJournalACType::Vend && IntrastatParameters::find().euSalesListTransferPurchases));
        #
        #}
        #
      ENDSOURCE
      SOURCE #lookupServiceCode_IN
        #/// <summary>
        #/// The lookup logic used to display the service codes from the company selected in the general tab.
        #/// </summary>
        #/// <param name="_lookupCtrl">
        #/// The control name passed against which the lookup logic works.
        #/// </param>
        #
        #public void lookupServiceCode_IN(FormStringControl _lookupCtrl)
        #{
        #    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ServiceCodeTable_IN), _lookupCtrl);
        #    Query          query = new Query();
        #
        #    query.allowCrossCompany(true);
        #    query.addCompanyRange(this.Company);
        #
        #    query.addDataSource(tableNum(ServiceCodeTable_IN));
        #
        #    sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, ServiceCode), true);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mainAccountType_PL
        #/// <summary>
        #/// Gets the main account type of the current transaction.
        #/// </summary>
        #/// <returns>
        #/// The main account type of the current transaction is on.
        #/// </returns>
        #/// <remarks>
        #/// Under Polish country/region context, the main account type is determined per transaction when possible, according to the following rules:
        #/// 1. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>Project</c>, then that is returned.
        #/// 2. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>Cust</c> or <c>Vend</c>, but both <c>Cust</c> and <c>Vend</c> are not present, then that is returned.
        #/// 3. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>RCash</c> then that is returned.
        #/// 4. In all other cases, <c>Ledger</c> is returned.
        #/// </remarks>
        #public LedgerJournalACType mainAccountType_PL()
        #{
        #    LedgerJournalACType accountType;
        #    Counter             counter;
        #
        #    accountType = LedgerJournalACType::Ledger;
        #
        #    if (this.AccountType       == LedgerJournalACType::Project ||
        #        this.OffsetAccountType == LedgerJournalACType::Project)
        #    {
        #        return LedgerJournalACType::Project;
        #    }
        #
        #    if (accountType             != this.AccountType           &&
        #        (this.AccountType       == LedgerJournalACType::Cust  ||
        #         this.AccountType       == LedgerJournalACType::Vend  ||
        #        (this.AccountType       == LedgerJournalACType::RCash &&
        #         this.OffsetAccountType != LedgerJournalACType::Cust  &&
        #         this.OffsetAccountType != LedgerJournalACType::Vend)))
        #    {
        #        accountType = this.AccountType;
        #        counter++;
        #    }
        #
        #    if (accountType            != this.OffsetAccountType     &&
        #       (this.OffsetAccountType == LedgerJournalACType::Cust  ||
        #        this.OffsetAccountType == LedgerJournalACType::Vend  ||
        #       (this.OffsetAccountType == LedgerJournalACType::RCash &&
        #        this.AccountType       != LedgerJournalACType::Cust  &&
        #        this.AccountType       != LedgerJournalACType::Vend)))
        #    {
        #        accountType = this.OffsetAccountType;
        #        counter++;
        #    }
        #
        #    if (counter > 1)
        #    {
        #        return LedgerJournalACType::Ledger;
        #    }
        #
        #    return accountType;
        #}
      ENDSOURCE
      SOURCE #markedForSettlementError
        #private boolean markedForSettlementError()
        #{
        #    boolean                     ret = true;
        #    AmountCur                   totalSettleAmountForSpecReference;
        #    LedgerJournalTransPayment_BR payment_BR;
        #
        #    totalSettleAmountForSpecReference = SpecTransManager::getTotalSettleAmountForSpecReference(this.company(),
        #                                                                                            this.TableId,
        #                                                                                            this.RecId,
        #                                                                                            this.CurrencyCode,
        #                                                                                            this.Company,
        #                                                                                            this.TransDate,
        #                                                                                            this.crossrate());
        #
        #    // The settlement amount is always in the opposite sign of the LedgerJournalTrans amount.
        #    // For example, if an Accounts Payable payment journal has debit balance of 100 (+100), it
        #    // would settle some invoices of credit balance (-100).
        #    if (
        #        // <GBR>
        #        (!BrazilParameters::isEnabled() || this.TaxWithholdCalculate_TH) &&
        #        // </GBR>
        #        this.TaxWithholdGroup && this.amount() != -totalSettleAmountForSpecReference)
        #    {
        #        ret = checkFailed(strFmt("@SYS99308"));
        #    }
        #
        #    if (ret &&
        #        BrazilParameters::isEnabled())
        #
        #    {
        #        payment_BR = this.getPaymentExtension_BR();
        #        if ((payment_BR.FineAmountCur_BR != 0 || payment_BR.FinInterestAmountCur_BR != 0)
        #             && this.amount() != -totalSettleAmountForSpecReference)
        #        {
        #            ret = checkFailed(strFmt("@GLS60592"));
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #markedForSettlementMaxDueDate
        #public server DueDate markedForSettlementMaxDueDate()
        #{
        #    SpecTrans           specTransFieldList;
        #    CustTransOpen       custTransOpen;
        #    VendTransOpen       vendTransOpen;
        #    DueDate             dueDate = dateNull();
        #
        #    if (this.AccountType == LedgerJournalACType::Cust || this.OffsetAccountType == LedgerJournalACType::Cust)
        #    {
        #        while select crossCompany DueDate, TransDate from custTransOpen
        #        join RecId from specTransFieldList
        #            where specTransFieldList.RefTableId     == custTransOpen.TableId
        #              &&  specTransFieldList.RefRecId       == custTransOpen.RecId
        #              &&  specTransFieldList.RefCompany     == custTransOpen.DataAreaId
        #              &&  specTransFieldList.SpecTableId    == this.TableId
        #              &&  specTransFieldList.SpecRecId      == this.RecId
        #              &&  specTransFieldList.SpecCompany    == this.company()
        #
        #        {
        #            if (dueDate == dateNull())
        #            {
        #                dueDate = custTransOpen.DueDate ? custTransOpen.DueDate : custTransOpen.TransDate;
        #            }
        #            else
        #            {
        #                if (dueDate < (custTransOpen.DueDate ? custTransOpen.DueDate : custTransOpen.TransDate))
        #                {
        #                    dueDate = custTransOpen.DueDate ? custTransOpen.DueDate : custTransOpen.TransDate;
        #                }
        #            }
        #        }
        #    }
        #    else
        #    {
        #        if (this.AccountType == LedgerJournalACType::Vend || this.OffsetAccountType == LedgerJournalACType::Vend)
        #        {
        #            while select crossCompany DueDate, TransDate from vendTransOpen
        #            join RecId from specTransFieldList
        #                where specTransFieldList.RefTableId     == vendTransOpen.TableId
        #                   && specTransFieldList.RefRecId       == vendTransOpen.RecId
        #                   && specTransFieldList.RefCompany     == vendTransOpen.DataAreaId
        #                   && specTransFieldList.SpecTableId    == this.TableId
        #                   && specTransFieldList.SpecRecId      == this.RecId
        #                   && specTransFieldList.SpecCompany    == this.company()
        #            {
        #                if (dueDate == dateNull())
        #                {
        #                    dueDate = vendTransOpen.DueDate ? vendTransOpen.DueDate : vendTransOpen.TransDate;
        #                }
        #                else
        #                {
        #                    if (dueDate < (vendTransOpen.DueDate ? vendTransOpen.DueDate : vendTransOpen.TransDate))
        #                    {
        #                        dueDate = vendTransOpen.DueDate ? vendTransOpen.DueDate : vendTransOpen.TransDate;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return dueDate;
        #}
      ENDSOURCE
      SOURCE #markedForSettlementWarning
        #private boolean markedForSettlementWarning()
        #{
        #    boolean                     ret = true;
        #    AmountCur                   totalSettleAmountForSpecReference;
        #
        #    if (SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId) > 0)
        #    {
        #        totalSettleAmountForSpecReference = SpecTransManager::getTotalSettleAmountForSpecReference(this.company(),
        #                                                                                                this.TableId,
        #                                                                                                this.RecId,
        #                                                                                                this.CurrencyCode,
        #                                                                                                this.Company,
        #                                                                                                this.TransDate,
        #                                                                                                this.crossrate());
        #
        #        // The settlement amount is always in the opposite sign of the LedgerJournalTrans amount.
        #        // For example, if an Accounts Payable payment journal has debit balance of 100 (+100), it
        #        // would settle some invoices of credit balance (-100).
        #        if (this.amount() != -totalSettleAmountForSpecReference)
        #        {
        #            if (Box::okCancel(strFmt("@SYS59380"), DialogButton::Cancel,'') == DialogButton::Cancel)
        #            {
        #                ret = false;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #markedForSettlementWarnMixedDueDate
        #public server void markedForSettlementWarnMixedDueDate()
        #{
        #    SpecTrans           specTransFieldList;
        #    CustVendTransOpen   custVendTransOpenFieldList;
        #    CustTransOpen       custTransOpenFieldList;
        #    VendTransOpen       vendTransOpenFieldList;
        #    CustVendTrans       custVendTransFieldList;
        #    CustTrans           custTransFieldList;
        #    VendTrans           vendTransFieldList;
        #    DueDate             dueDate               = dateNull();
        #    boolean             warningIssuedDueDate  = false;
        #
        #    if (!LedgerJournalName::isNegotiableInstrumentJournal(this.ledgerJournalTable().JournalType))
        #    {
        #        return;
        #    }
        #
        #    if (this.AccountType == LedgerJournalACType::Cust)
        #    {
        #        custVendTransOpenFieldList = custTransOpenFieldList;
        #        custVendTransFieldList     = custTransFieldList;
        #    }
        #    else
        #    {
        #        custVendTransOpenFieldList = vendTransOpenFieldList;
        #        custVendTransFieldList     = vendTransFieldList;
        #    }
        #
        #    while select crossCompany RecId from specTransFieldList
        #        where specTransFieldList.SpecCompany    == this.DataAreaId
        #           && specTransFieldList.SpecTableId    == this.TableId
        #           && specTransFieldList.SpecRecId      == this.RecId
        #    join DueDate from custVendTransOpenFieldList
        #        where custVendTransOpenFieldList.DataAreaId == specTransFieldList.RefCompany
        #           && custVendTransOpenFieldList.TableId    == specTransFieldList.RefTableId
        #           && custVendTransOpenFieldList.RecId      == specTransFieldList.RefRecId
        #    join RecId from custVendTransFieldList
        #        where custVendTransFieldList.RecId      == custVendTransOpenFieldList.RefRecId
        #           && custVendTransFieldList.AccountNum == custVendTransOpenFieldList.AccountNum
        #    {
        #        if (!warningIssuedDueDate                   &&
        #            dueDate != dateNull()                   &&
        #            dueDate != custVendTransOpenFieldList.DueDate)
        #        {
        #            warningIssuedDueDate = !checkFailed("@SYS73746");
        #        }
        #        dueDate = max(dueDate, custVendTransOpenFieldList.DueDate);
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrCurrencyCode
        #/// <summary>
        #/// Displays the currency code for the <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #/// The currency code of the <c>LedgerJournalTrans</c> record.
        #/// </returns>
        #display CurrencyCode mcrCurrencyCode()
        #{
        #    return this.CurrencyCode;
        #}
      ENDSOURCE
      SOURCE #mcrIsDeduction
        #/// <summary>
        #/// Finds the specified record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <returns>
        #/// true if this <c>LedgerJournalTrans</c> record is a deduction.; 
        #/// </returns>
        #/// <remarks>
        #/// Only customer payment journal lines may have deductions.  There are many other journal lines that will be related
        #/// to deductions (for matching, write-offs etc.) but these are not considered to "be" a
        #/// deduction.  A journal line is a deduction when it is used to short pay invoices.
        #/// See TAMDeduction table method ledgerJournalTransParent for more relation of deduction and
        #/// LedgerJournalTrans.
        #/// </remarks>
        #public boolean mcrIsDeduction()
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #    TAMDeduction        tamDeduction;
        #    boolean             isDeduction;
        #
        #    if (this.AccountType        == LedgerJournalACType::Cust
        #        && this.TransactionType == LedgerTransType::Payment
        #        && this.RecId)
        #    {
        #        // Find parent journal line of deduction that has this record as its LedgerJournalTrans
        #        // Deduction has parent RecId as index.
        #        select firstonly RecId from ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum == this.JournalNum
        #            join TableId from tamDeduction
        #                where ledgerJournalTrans.RecId == tamDeduction.LedgerJournalTransParentRecId
        #                   && tamDeduction.LedgerJournalTransRecId == this.RecId;
        #        if (ledgerJournalTrans.RecId)
        #        {
        #            isDeduction = true;
        #        }
        #    }
        #    return isDeduction;
        #}
      ENDSOURCE
      SOURCE #mcrIsDeductionParent
        #/// <summary>
        #/// Finds the specified record in the <c>TAMDeduction</c> table.
        #/// </summary>
        #/// <returns>
        #/// true if this <c>LedgerJournalTrans</c> record is parent of at least one deduction (a
        #/// deduction is being added to the payment); 
        #/// </returns>
        #/// <remarks>
        #/// See TAMDeduction table method ledgerJournalTransParent for more on the parent relationship.
        #/// </remarks>
        #public boolean mcrIsDeductionParent()
        #{
        #    TAMDeduction    tamDeduction;
        #    boolean         hasDeduction;
        #
        #    if (this.AccountType        == LedgerJournalACType::Cust
        #        && this.TransactionType == LedgerTransType::Payment
        #        && this.RecId)
        #    {
        #        select firstonly RecId from tamDeduction
        #            where tamDeduction.LedgerJournalTransParentRecId == this.RecId;
        #        if (tamDeduction.RecId)
        #        {
        #            hasDeduction = true;
        #        }
        #    }
        #    return hasDeduction;
        #}
      ENDSOURCE
      SOURCE #mcrUpdateRelatedPayment
        #/// <summary>
        #/// Updates the related payment record if one exists.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// ID of the field being modified.
        #/// </param>
        #/// <remarks>
        #/// Called from the modifiedField method.
        #/// </remarks>
        #/// <exception cref="Exception::Error">
        #/// Validation failure when updating the <c>MCRCustPaymTable</c> record.
        #/// </exception>
        #private void mcrUpdateRelatedPayment(FieldId _fieldId)
        #{
        #    MCRCustPaymTable mcrCustPaymTable;
        #    CustAccount      custAccount;
        #
        #    if (this.RecId
        #        && this.AccountType == LedgerJournalACType::Cust
        #        && isConfigurationkeyEnabled(configurationKeyNum(MCRPayment)))
        #    {
        #        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId,
        #                                                                      this.TableId,
        #                                                                      true);
        #        if (mcrCustPaymTable)
        #        {
        #            ttsbegin;
        #
        #            switch (_fieldId)
        #            {
        #                case fieldNum(LedgerJournalTrans, AmountCurDebit):
        #                case fieldNum(LedgerJournalTrans, AmountCurCredit):
        #                    mcrCustPaymTable.Amount = this.AmountCurCredit ? this.AmountCurCredit : -this.AmountCurDebit;
        #                break;
        #                case fieldNum(LedgerJournalTrans, CurrencyCode):
        #                    if (this.CurrencyCode != mcrCustPaymTable.CurrencyCode)
        #                    {
        #                        mcrCustPaymTable.CurrencyCode = this.CurrencyCode;
        #                    }
        #                break;
        #                case fieldNum(LedgerJournalTrans, LedgerDimension):
        #                    custAccount = DimensionStorage::ledgerDimension2AccountNum(this.LedgerDimension);
        #                    if (custAccount != mcrCustPaymTable.CustAccount)
        #                    {
        #                        mcrCustPaymTable.CustAccount = custAccount;
        #                    }
        #                break;
        #            }
        #            if (mcrCustPaymTable.validateWrite())
        #            {
        #                mcrCustPaymTable.update();
        #            }
        #            else
        #            {
        #                throw error("@SYS104318");
        #            }
        #            ttscommit;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #mergeDimension
        #/// <summary>
        #/// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
        #/// field on this table and the provided dimension set.
        #/// </summary>
        #/// <param name="_primaryDefaultDimension">
        #/// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_secondaryDefaultDimension">
        #/// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
        #/// optional.
        #/// </param>
        #/// <param name="_dimensionMerge">
        #/// A <c>dimensionMerge</c> object that was previously instantiated with the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
        #/// this table and the provided dimension set.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten when merging.
        #/// Additionally, the entity specifier defaulting will be considered.
        #/// </remarks>
        #
        #public DimensionDefault mergeDimension(
        #    DimensionDefault _primaryDefaultDimension,
        #    DimensionDefault _secondaryDefaultDimension = 0,
        #    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
        #                                                                    this.companyInfo().RecId
        #                                                                    )
        #    )
        #{
        #    return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public server void modifiedField(FieldId _fieldId)
        #{
        #
        #    #ISOCountryRegionCodes
        #    boolean             countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #    LedgerJournalTxt    ledgerJournalTxt;
        #    ProjJournalTxt      projJournalTxt;
        #    LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
        #
        #    super(_fieldId);
        #
        #    switch (_fieldId)
        #    {
        #// General fields
        #        case fieldNum(LedgerJournalTrans, AccountType):
        #            ledgerJournalEngine.accountTypeModified(this);
        #            this.updateCustVendBankAccount(true);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, OffsetAccountType):
        #            ledgerJournalEngine.offsetAccountTypeModified(this);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, LedgerDimension):
        #            ledgerJournalEngine.accountNumModified(this);
        #            this.updateCustVendBankAccount();
        #            this.mcrUpdateRelatedPayment(_fieldId);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, OffsetLedgerDimension):
        #            ledgerJournalEngine.offsetAccountModified(this);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, Company):
        #            this.LedgerDimension = 0;
        #            this.TaxGroup           = '';
        #            this.TaxItemGroup       = '';
        #            this.DefaultDimension = 0;
        #            this.updateCustVendBankAccount(true);
        #            if (TaxParameters::checkTaxParameters_IN())
        #            {
        #                this.initTaxInfomation_IN(this.Company ? this.Company : curext());
        #            }
        #            if (countryRegion_RU)
        #            {
        #                this.AgreementCompany_RU = this.Company;
        #
        #                this.setAgreementEmptyValues_RU(AccountOffsetaccount::Account);
        #            }
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, OffsetCompany):
        #            this.OffsetLedgerDimension = 0;
        #            this.OffsetDefaultDimension = 0;
        #            if (countryRegion_RU)
        #            {
        #                this.OffsetAgreementCompany_RU = this.OffsetCompany;
        #
        #                this.setAgreementEmptyValues_RU(AccountOffsetaccount::OffsetAccount);
        #            }
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, AgreementCompany_RU):
        #            this.setAgreementEmptyValues_RU(AccountOffsetaccount::Account);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, OffsetAgreementCompany_RU):
        #            this.setAgreementEmptyValues_RU(AccountOffsetaccount::OffsetAccount);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, Txt):
        #            if (this.AccountType == LedgerJournalACType::Project)
        #                projJournalTxt = ProjJournalTxt::findTxt(this.Txt);
        #            else
        #                ledgerJournalTxt = LedgerJournalTxt::findTxt(this.Txt);
        #
        #            if (projJournalTxt.Txt)
        #                this.Txt = projJournalTxt.Txt;
        #
        #            if (ledgerJournalTxt.Txt)
        #                this.Txt = ledgerJournalTxt.Txt;
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                this.formatTransactionText_BR();
        #            }
        #
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, OffsetTxt):
        #            if (this.OffsetAccountType == LedgerJournalACType::Project)
        #                projJournalTxt = ProjJournalTxt::findTxt(this.OffsetTxt);
        #            else
        #                ledgerJournalTxt = LedgerJournalTxt::findTxt(this.OffsetTxt);
        #
        #            if (projJournalTxt.Txt)
        #                this.OffsetTxt = projJournalTxt.Txt;
        #
        #            if (ledgerJournalTxt.Txt)
        #                this.OffsetTxt = ledgerJournalTxt.Txt;
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, AmountCurDebit):
        #            if(TaxParameters::checkTaxParameters_IN())
        #            {
        #                this.setAssessableValue_IN();
        #            }
        #            if (TaxWithholdParameters_IN::isTDSActivate())
        #            {
        #                this.updateTDSGroup_IN();
        #            }
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                this.setInterestAndFine_BR(_fieldId);
        #            }
        #
        #            ledgerJournalEngine.amountCurDebitModified(this);
        #
        #            this.mcrUpdateRelatedPayment(_fieldId);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, AmountCurCredit):
        #            if(TaxParameters::checkTaxParameters_IN())
        #            {
        #                this.setAssessableValue_IN();
        #            }
        #            if (TaxWithholdParameters_IN::isTCSActivate())
        #            {
        #                this.updateTCSGroup_IN();
        #            }
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                this.setInterestAndFine_BR(_fieldId);
        #            }
        #
        #            ledgerJournalEngine.amountCurCreditModified(this);
        #
        #            this.mcrUpdateRelatedPayment(_fieldId);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, TransDate) :
        #            this.AcknowledgementDate = this.TransDate;
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, ReverseEntry):
        #            if (!this.ReverseEntry)
        #            {
        #                this.ReverseDate = dateNull();
        #            }
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, Approver):
        #            if (this.Approver == 0)
        #            {
        #                this.InvoiceReleaseDate = utcDateTimeNull();
        #                this.ReleaseDateComment = '';
        #            }
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, RemittanceLocation) :
        #            this.RemittanceAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(this.RemittanceLocation);
        #            break;
        #
        #// Customer/vendor fields
        #        case fieldNum(LedgerJournalTrans, PaymMode):
        #            this.paymModeModified();
        #            if (BrazilParameters::isEnabled())
        #            {
        #                this.setEPRemitInfo_BR();
        #            }
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, Prepayment):
        #            ledgerJournalEngine.prepaymentModified(this);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, Invoice):
        #            ledgerJournalEngine.invoiceModified(this);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, BankDepositVoucher):
        #            ledgerJournalEngine.bankDepositVoucherModified(this);
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, PaymentStatus):
        #            if (this.isSEPAPaymentRejected())
        #            {
        #                this.cancelMandateLogRecord();
        #            }
        #            break;
        #
        #// Banking fields
        #        case fieldNum(LedgerJournalTrans, BankCentralBankPurposeCode):
        #            this.BankCentralBankPurposeText = BankCentralBankPurpose::find(this.BankCentralBankPurposeCode).Text;
        #            break;
        #
        #        case fieldNum(LedgerJournalTrans, CustVendBankAccountId):
        #            this.updateCustVendBankAccount();
        #            break;
        #        case fieldNum(LedgerJournalTrans, CustomsTariffDirection_IN):
        #            if (TaxParameters::checkTaxParameters_IN())
        #            {
        #                this.CustomsTariffCodeTable_IN = 0;
        #            }
        #            break;
        #        case fieldNum(LedgerJournalTrans, tdsGroup_IN):
        #            if (TaxWithholdParameters_IN::checkTaxParameters())
        #            {
        #                this.SoftwareDeclReceived_IN = NoYes::No;
        #            }
        #            break;
        #        // <GEERU>
        #        case fieldNum(LedgerJournalTrans, rCashDocRepresType):
        #            if (RCashParameters::isCashModuleEnabled())
        #            {
        #                this.rCashDocRepresPersonId = '';
        #                this.setRepresPersonValues_W();
        #            }
        #            break;
        #        case fieldNum(LedgerJournalTrans, RCashDocRepresPersonId):
        #            if (RCashParameters::isCashModuleEnabled())
        #            {
        #                this.setRepresPersonValues_W();
        #            }
        #            break;
        #        // </GEERU>
        #        case fieldNum(LedgerJournalTrans, CurrencyCode):
        #            this.mcrUpdateRelatedPayment(_fieldId);
        #            break;
        #    }
        #
        #    if (this.modifiedFieldRemovesAccruals(_fieldId))
        #        this.removeAccruals();
        #
        #    this.modifyVatDueDate_W();
        #}
      ENDSOURCE
      SOURCE #modifiedFieldRemovesAccruals
        #public client server boolean modifiedFieldRemovesAccruals(
        #    FieldId _fieldId)
        #{
        #    switch (_fieldId)
        #    {
        #        case fieldNum(LedgerJournalTrans, Company),
        #             fieldNum(LedgerJournalTrans, AccountType),
        #             fieldNum(LedgerJournalTrans, LedgerDimension),
        #             fieldNum(LedgerJournalTrans, OffsetCompany),
        #             fieldNum(LedgerJournalTrans, OffsetAccountType),
        #             fieldNum(LedgerJournalTrans, OffsetLedgerDimension),
        #             fieldNum(LedgerJournalTrans, AmountCurDebit),
        #             fieldNum(LedgerJournalTrans, AmountCurCredit):
        #            return true;
        #
        #        case fieldNum(LedgerJournalTrans, TaxGroup),
        #              fieldNum(LedgerJournalTrans, TaxItemGroup):
        #            if (this.TaxGroup     != this.orig().TaxGroup ||
        #                this.TaxItemGroup != this.orig().TaxItemGroup)
        #                return true;
        #
        #        default :
        #            return false;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #modifiedFieldValue
        #/// <summary>
        #/// Modifies the field value.
        #/// </summary>
        #/// <param name="_fieldName">
        #/// The field name.
        #/// </param>
        #/// <param name="_arrayIndex">
        #/// The array index.
        #/// </param>
        #public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
        #{
        #    super(_fieldName, _arrayIndex);
        #
        #    switch(_fieldName)
        #    {
        #        case fieldStr(LedgerJournalTrans, CompanyLocation_IN):
        #            if (TaxParameters::isExciseEnable_IN())
        #            {
        #                this.ExciseRecordType_IN = ExciseRecordType_IN::None;
        #            }
        #            break;
        #    }
        #
        #    // Reset the TaxWithholdCode_IN field for Tax adjustment journal feature.
        #    if (TaxWithholdParameters_IN::checkTaxParameters()
        #        && this.TaxWithholdCode_IN)
        #    {
        #        switch (_fieldName)
        #        {
        #            case fieldStr(LedgerJournalTrans, AmountCurCredit) :
        #            case fieldStr(LedgerJournalTrans, AmountCurDebit) :
        #            case fieldStr(LedgerJournalTrans, OffsetAccountType) :
        #            case fieldStr(LedgerJournalTrans, OffsetCompany) :
        #            case fieldStr(LedgerJournalTrans, OffsetDefaultDimension) :
        #            case fieldStr(LedgerJournalTrans, OffsetLedgerDimension) :
        #            case fieldStr(LedgerJournalTrans, TransDate) :
        #                break;
        #
        #            default :
        #                this.TaxWithholdCode_IN = '';
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #modifyVatDueDate_W
        #public void modifyVatDueDate_W()
        #{
        #    #ISOCountryRegionCodes
        #    LedgerJournalTrans  ledgerJournalTrans;
        #    LedgerJournalACType accountType;
        #    boolean             offset;
        #    CustTable           custTable;
        #    VendTable           vendTable;
        #    boolean             mandatoryVatDate     = true;
        #    boolean             vatDateIsPaymentDate = false;
        #
        #    void findMandatoryVatDate(LedgerJournalTrans _ledgerJournalTrans)
        #    {
        #        if (_ledgerJournalTrans.LedgerDimension)
        #                {
        #                    accountType = _ledgerJournalTrans.AccountType;
        #                }
        #                else
        #                {
        #                    accountType = _ledgerJournalTrans.OffsetAccountType;
        #                    offset      = true;
        #                }
        #
        #                switch (accountType)
        #                {
        #                    case LedgerJournalACType::Cust :
        #                        custTable = CustTable::findByCompany(offset                           ?
        #                                                             _ledgerJournalTrans.OffsetCompany :
        #                                                             _ledgerJournalTrans.Company,
        #                                                             offset                           ?
        #                                                             DimensionStorage::ledgerDimension2AccountNum(this.OffsetLedgerDimension) :
        #                                                             DimensionStorage::ledgerDimension2AccountNum(this.LedgerDimension));
        #                        mandatoryVatDate     = custTable.MandatoryVatDate_PL;
        #                        vatDateIsPaymentDate = PlTaxDueTable::find(custTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate;
        #                        break;
        #                    case LedgerJournalACType::Vend :
        #                        vendTable = VendTable::findByCompany(offset                           ?
        #                                                             _ledgerJournalTrans.OffsetCompany :
        #                                                             _ledgerJournalTrans.Company,
        #                                                             offset                           ?
        #                                                             DimensionStorage::ledgerDimension2AccountNum(this.OffsetLedgerDimension) :
        #                                                             DimensionStorage::ledgerDimension2AccountNum(this.LedgerDimension));
        #                        mandatoryVatDate     = vendTable.MandatoryVatDate_PL;
        #                        vatDateIsPaymentDate = PlTaxDueTable::find(vendTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate;
        #                        break;
        #                }
        #
        #                if (vatDateIsPaymentDate)
        #                {
        #                    this.VatDueDate_W = this.Due;
        #                }
        #            }
        #
        #    if ((this.TaxItemGroup && this.TaxGroup) || this.TaxCode)
        #    {
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        #        {
        #            select firstonly ledgerJournalTrans
        #                where   ledgerJournalTrans.JournalNum        == this.JournalNum
        #                   &&   ledgerJournalTrans.Voucher           == this.Voucher
        #                   &&   ledgerJournalTrans.TransDate         == this.TransDate
        #                   && ((ledgerJournalTrans.LedgerDimension
        #                   &&   ledgerJournalTrans.Company
        #                   &&  (ledgerJournalTrans.AccountType       == LedgerJournalACType::Cust
        #                   ||   ledgerJournalTrans.AccountType       == LedgerJournalACType::Vend))
        #                   ||  (ledgerJournalTrans.OffsetLedgerDimension
        #                   &&   ledgerJournalTrans.OffsetCompany
        #                   &&  (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
        #                   ||   ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)));
        #
        #            if (ledgerJournalTrans)
        #            {
        #                findMandatoryVatDate(ledgerJournalTrans);
        #
        #            }
        #            else
        #            {
        #                findMandatoryVatDate(this);
        #            }
        #
        #        }
        #
        #        if (! this.VatDueDate_W && mandatoryVatDate)
        #        {
        #            this.VatDueDate_W = this.TransDate;
        #        }
        #    }
        #    else
        #    {
        #        if (this.ledgerJournalTable().JournalType != LedgerJournalType::Approval)
        #        {
        #            if(PurchParameters::find().DateOfExchRate_W != DateOfExchRate_W::DateOfVATRegister)
        #            {
        #                this.VatDueDate_W = dateNull();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #negotiableInstrumentPostInsert
        #private void negotiableInstrumentPostInsert()
        #{
        #    switch (this.ledgerJournalTable().JournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw:
        #            CustBillOfExchangeJour::setLedgerJournalTransRecId(this.NegInstId, this.RecId);
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            VendPromissoryNoteJour::setLedgerJournalTransRecId(this.NegInstId, this.RecId);
        #            break;
        #
        #        default:
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #negotiableInstrumentPreInsert
        #private void negotiableInstrumentPreInsert()
        #{
        #    switch (this.ledgerJournalTable().JournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw:
        #            this.NegInstId = CustBillOfExchangeJour::createNewBillOfExhange(this.parmAccount(),CustVendNegInstStatus::None,this.Due).BillOfExchangeId;
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            this.NegInstId = VendPromissoryNoteJour::createNewPromissoryNote(this.parmAccount(),CustVendNegInstStatus::None,this.Due).PromissoryNoteId;
        #            break;
        #
        #        default:
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #negotiableInstrumentUpdate
        #private void negotiableInstrumentUpdate()
        #{
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        switch (this.ledgerJournalTable().JournalType)
        #        {
        #            case LedgerJournalType::CustBillOfExchangeDraw:
        #                break;
        #
        #            case LedgerJournalType::VendPromissoryNoteDraw:
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #notExistsPostedWHTForCP_IN
        #/// <summary>
        #/// Indicates whether current <c>LedgerJournalTrans</c> settles an invoice which has posted withholding tax.
        #/// </summary>
        #/// <returns>
        #/// Returns true if current <c>LedgerJournalTrans</c> does not settle an invoice which has posted withholding tax;
        #/// Otherwise, returns false.
        #/// </returns>
        #public boolean notExistsPostedWHTForCP_IN()
        #{
        #    SpecTrans           specTrans;
        #    TaxWithholdTrans_IN taxWithholdTrans;
        #    CustTrans           custTrans;
        #    VendTrans           vendTrans;
        #    CustVendTrans       custVendTrans;
        #    CustTransOpen       custTransOpen;
        #    VendTransOpen       vendTransOpen;
        #    CustVendTransOpen   custVendTransOpen;
        #
        #    boolean             ret = true;
        #
        #    while select RefCompany, RefTableId, RefRecId from specTrans
        #        where specTrans.SpecTableId == this.TableId
        #            && specTrans.SpecRecId  == this.RecId
        #    {
        #        changecompany(specTrans.RefCompany)
        #        {
        #            if (specTrans.RefTableId == tableNum(CustTransOpen))
        #            {
        #                custVendTrans = custTrans;
        #                custVendTransOpen = custTransOpen;
        #            }
        #            else
        #            {
        #                custVendTrans = vendTrans;
        #                custVendTransOpen = vendTransOpen;
        #            }
        #
        #            taxWithholdTrans.clear();
        #            custVendTrans.clear();
        #            custVendTransOpen.clear();
        #
        #            select firstonly RecId from taxWithholdTrans
        #                exists join custVendTrans
        #                    where taxWithholdTrans.Voucher     == custVendTrans.Voucher
        #                        && taxWithholdTrans.TransDate  == custVendTrans.TransDate
        #                exists join custVendTransOpen
        #                    where custVendTransOpen.AccountNum == custVendTrans.AccountNum
        #                        && custVendTransOpen.RefRecId  == custVendTrans.RecId
        #                        && custVendTransOpen.TableId   == specTrans.RefTableId
        #                        && custVendTransOpen.RecId     == specTrans.RefRecId;
        #            if (taxWithholdTrans.RecId)
        #            {
        #                ret = false;
        #                break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #offsetAccountAgreementDocumentTitle_RU
        #/// <summary>
        #///     Displays document title of the current <c>LedgerJournalTrans</c> offset agreement.
        #/// </summary>
        #/// <returns>
        #///     The offset agreement document title.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute]
        #public display AgreementDocumentTitle offsetAccountAgreementDocumentTitle_RU()
        #{
        #    CompanyId company;
        #
        #    company = this.OffsetAgreementCompany_RU ?
        #                this.OffsetAgreementCompany_RU :
        #                curext();
        #
        #    if (xDataArea::exist(company))
        #    {
        #        changecompany(company)
        #        {
        #            return AgreementHeader::find(
        #                AgreementHeaderExt_RU::findByAgreementId(this.OffsetAccountAgreementId_RU).AgreementHeader).DocumentTitle;
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #offsetAccountName
        #//BP Deviation Documented
        #display LedgerJournalOffsetAccountName offsetAccountName()
        #{
        #    if (this.OffsetLedgerDimension)
        #    {
        #        if (!this.OffsetCompany)
        #        {
        #            return this.accountNameFind(this.OffsetAccountType, this.OffsetLedgerDimension, curext());
        #        }
        #        else
        #        {
        #            return this.accountNameFind(this.OffsetAccountType, this.OffsetLedgerDimension, this.OffsetCompany);
        #        }
        #    }
        #
        #    return "";
        #}
      ENDSOURCE
      SOURCE #offsetDefaultDimensionDisplay_RU
        #/// <summary>
        #///     Displays offset dimensions of the current <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <returns>
        #///     <c>DimensionDisplayValue</c> filled with offset dimensions of the current <c>LedgerJournalTrans</c> record.
        #/// </returns>
        #display DimensionDisplayValueCorr_RU offsetDefaultDimensionDisplay_RU()
        #{
        #    DimensionDisplayValue           ret;
        #    DimensionAttributeValueSetItem  dimensionAttrValueSetItem;
        #    str                             accountDelimiter = SystemParameters::getChartOfAccountsDelimiter();
        #
        #    switch (this.OffsetAccountType)
        #    {
        #        case LedgerJournalACType::Ledger:
        #            ret = DimensionAttributeValueCombination::getDisplayValue(this.OffsetLedgerDimension);
        #            break;
        #        default:
        #            while select DisplayValue from dimensionAttrValueSetItem
        #                where dimensionAttrValueSetItem.DimensionAttributeValueSet == this.OffsetDefaultDimension
        #            {
        #                ret += (ret ? accountDelimiter : '') + dimensionAttrValueSetItem.DisplayValue;
        #            }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #openTaxWithholdEditStatus_BR
        #public void openTaxWithholdEditStatus_BR()
        #{
        #    LedgerJournalTransPayment_BR ledgerJournalTransPaym = this.getPaymentExtension_BR();
        #
        #    ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Opened;
        #    this.packExtensionTable(ledgerJournalTransPaym);
        #}
      ENDSOURCE
      SOURCE #operationTax_RU
        #public CurrentOperationsTax operationTax_RU()
        #{
        #    if (LedgerJournalTrans_RAsset::find(this.RecId).StandardId)
        #    {
        #        return RAssetStandardTable::find(LedgerJournalTrans_RAsset::find(this.RecId).StandardId).CurrentOperationsTax;
        #    }
        #    else if (LedgerJournalTrans_RDeferrals::find(this.RecId).BookId)
        #    {
        #        return RDeferralsBookTable::find(LedgerJournalTrans_RDeferrals::find(this.RecId).BookId).CurrentOperationsTax;
        #    }
        #
        #    return this.ledgerJournalTable().CurrentOperationsTax;
        #}
      ENDSOURCE
      SOURCE #packExtensionTable
        #/// <summary>
        #/// Packs a <c>SysExtensionSerializerExtensionMap</c> extension table's buffer inside the
        #/// record's internal cache.
        #/// </summary>
        #/// <param name="_sysExtensionSerializerExtensionTableMap">
        #/// <c>SysExtensionSerializerExtensionMap</c> to be packed.
        #/// </param>
        #public void packExtensionTable(SysExtensionSerializerExtensionMap _sysExtensionSerializerExtensionTableMap)
        #{
        #    this.SysExtensionSerializerMap::packExtensionTable(_sysExtensionSerializerExtensionTableMap.data());
        #}
        #
      ENDSOURCE
      SOURCE #packledgerJournalTransTaxExtensionIN
        #/// <summary>
        #/// Packs the <c>LedgerJournalTransTaxExtensionIN</c> table
        #/// </summary>
        #/// <param name="_ledgerJournalTransTaxExtensionIN">
        #/// LedgerJournalTransTaxExtensionIN is packed.
        #/// </param>
        #public void packledgerJournalTransTaxExtensionIN(LedgerJournalTransTaxExtensionIN _ledgerJournalTransTaxExtensionIN)
        #{
        #    _ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = this.RecId;
        #
        #    this.SysExtensionSerializerMap::packExtensionTable(_ledgerJournalTransTaxExtensionIN);
        #}
      ENDSOURCE
      SOURCE #parmAccount
        #public LedgerJournalAC parmAccount(LedgerJournalAC _account = '', LedgerJournalACType _accountType = this.AccountType, SelectableDataArea _currentCompany = this.Company)
        #{
        #    DimensionAttributeValueCombination  ledgerDimension;
        #    LedgerJournalAC                     account;
        #
        #    if (!prmisDefault(_accountType))
        #    {
        #        this.AccountType = _accountType;
        #    }
        #    if (!prmisDefault(_currentCompany))
        #    {
        #        this.Company = _currentCompany;
        #    }
        #
        #    // If company has not been specified, use the current company
        #    if (!_currentCompany || !xDataArea::exist(_currentCompany))
        #    {
        #        _currentCompany = curext();
        #    }
        #
        #    changecompany(_currentCompany)
        #    {
        #        // If account has been changed, update the backing ledger dimension value
        #        if (!prmisDefault(_account))
        #        {
        #            if (_account)
        #            {
        #                this.LedgerDimension = DimensionStorage::getDynamicAccount(_account, _accountType);
        #                account = _account;
        #            }
        #            else
        #            {
        #                account = '';
        #                this.LedgerDimension = 0;
        #            }
        #        }
        #        else if (this.LedgerDimension)
        #        {
        #            // If the account has not been changed, then pull the value from ledger dimension as the master
        #            select DisplayValue from ledgerDimension where ledgerDimension.RecId == this.LedgerDimension;
        #            account = ledgerDimension.DisplayValue;
        #        }
        #    }
        #
        #    return account;
        #}
      ENDSOURCE
      SOURCE #parmBankAccount
        #/// <summary>
        #/// Gets the bank account ID.
        #/// </summary>
        #/// <returns>
        #/// The bank account ID.
        #/// </returns>
        #public CompanyBankAccountId parmBankAccount()
        #{
        #    CompanyBankAccountId bankAccount;
        #
        #    if (this.AccountType == LedgerJournalACType::Bank)
        #    {
        #        bankAccount = this.parmAccount();
        #    }
        #    else if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #    {
        #        bankAccount = this.parmOffsetAccount();
        #    }
        #
        #    return bankAccount;
        #}
      ENDSOURCE
      SOURCE #parmBankCurrencyAmount
        #/// <summary>
        #/// Gets the bank currency amount.
        #/// </summary>
        #/// <returns>
        #/// The bank currency amount.
        #/// </returns>
        #public AmountCur parmBankCurrencyAmount()
        #{
        #    return this.BankCurrencyAmount;
        #}
      ENDSOURCE
      SOURCE #parmBankDocumentBookType
        #/// <summary>
        #/// Gets the bank document type.
        #/// </summary>
        #/// <returns>
        #/// The bank document type.
        #/// </returns>
        #public BankDocumentBookType parmBankDocumentBookType()
        #{
        #    BankDocumentBookType bankDocumentBookType = BankDocumentBookType::None;
        #
        #    if ((this.OffsetAccountType     == LedgerJournalACType::Bank
        #            &&  this.AccountType    == LedgerJournalACType::Cust)
        #        || (this.OffsetAccountType  == LedgerJournalACType::Cust
        #            &&  this.AccountType    == LedgerJournalACType::Bank))
        #    {
        #        if (this.BankDepositNum == ''
        #            && this.BankDepositVoucher == NoYes::No
        #            && this.BankChequeNum == '')
        #        {
        #            bankDocumentBookType = BankDocumentBookType::CustPayment;
        #        }
        #    }
        #    else if ((this.OffsetAccountType    == LedgerJournalACType::Bank
        #                &&  this.AccountType    == LedgerJournalACType::Vend)
        #            || (this.OffsetAccountType   == LedgerJournalACType::Vend
        #                &&  this.AccountType    == LedgerJournalACType::Bank))
        #    {
        #        if (this.BankDepositNum == ''
        #            && this.BankDepositVoucher == NoYes::No
        #            && this.BankChequeNum == '')
        #        {
        #            bankDocumentBookType = BankDocumentBookType::VendPayment;
        #        }
        #    }
        #
        #    return bankDocumentBookType;
        #}
      ENDSOURCE
      SOURCE #parmDefaultDimension
        #public DimensionDefault parmDefaultDimension(DimensionDefault  _defaultDimension = this.DefaultDimension)
        #{
        #    if (!prmisDefault(_defaultDimension))
        #    {
        #        this.DefaultDimension = _defaultDimension;
        #    }
        #
        #    return this.DefaultDimension;
        #}
        #
      ENDSOURCE
      SOURCE #parmLedgerDimension
        #public DimensionDynamicAccount parmLedgerDimension(LedgerDimensionAccount _ledgerDimension = this.LedgerDimension, SelectableDataArea _currentCompany = this.Company)
        #{
        #    if (!prmisDefault(_currentCompany))
        #    {
        #        this.Company = _currentCompany;
        #    }
        #
        #    if (!prmisDefault(_ledgerDimension))
        #    {
        #        this.LedgerDimension = _ledgerDimension;
        #    }
        #
        #    return this.LedgerDimension;
        #}
        #
      ENDSOURCE
      SOURCE #parmOffsetAccount
        #public LedgerJournalAC parmOffsetAccount(LedgerJournalAC _offsetAccount = '', LedgerJournalACType _offsetAccountType = this.OffsetAccountType, SelectableDataArea _offsetCompany = this.getOffsetCompany())
        #{
        #    DimensionAttributeValueCombination  ledgerDimension;
        #    LedgerJournalAC                     offsetAccount;
        #
        #    if (!prmisDefault(_offsetAccountType))
        #    {
        #        this.OffsetAccountType = _offsetAccountType;
        #    }
        #    if (!prmisDefault(_offsetCompany))
        #    {
        #        this.OffsetCompany = _offsetCompany;
        #    }
        #
        #    // If offset company has not been specified, use the current company
        #    if (!_offsetCompany || !xDataArea::exist(_offsetCompany))
        #    {
        #        _offsetCompany = curext();
        #    }
        #
        #    changecompany(_offsetCompany)
        #    {
        #        // If account has been changed, update the backing ledger dimension value
        #        if (!prmisDefault(_offsetAccount))
        #        {
        #            if (_offsetAccount)
        #            {
        #                this.OffsetLedgerDimension = DimensionStorage::getDynamicAccount(_offsetAccount, _offsetAccountType);
        #                offsetAccount = _offsetAccount;
        #            }
        #            else
        #            {
        #                offsetAccount = '';
        #                this.OffsetLedgerDimension = 0;
        #            }
        #        }
        #        else if (this.OffsetLedgerDimension)
        #        {
        #            // If the account has not been changed, then pull the value from ledger dimension as the master
        #            select DisplayValue from ledgerDimension where ledgerDimension.RecId == this.OffsetLedgerDimension;
        #            offsetAccount = ledgerDimension.DisplayValue;
        #        }
        #    }
        #
        #    return offsetAccount;
        #}
      ENDSOURCE
      SOURCE #parmOffsetDefaultDimension
        #public DimensionDefault parmOffsetDefaultDimension(DimensionDefault  _offsetDefaultDimension = this.OffsetDefaultDimension)
        #{
        #    if (!prmisDefault(_offsetDefaultDimension))
        #    {
        #        this.OffsetDefaultDimension = _offsetDefaultDimension;
        #    }
        #
        #    return this.OffsetDefaultDimension;
        #}
        #
      ENDSOURCE
      SOURCE #parmOffsetLedgerDimension
        #public DimensionDynamicAccount parmOffsetLedgerDimension(
        #    LedgerDimensionAccount _offsetLedgerDimension = this.OffsetLedgerDimension,
        #    SelectableDataArea _currentCompany = this.getOffsetCompany())
        #{
        #    if (!prmisDefault(_currentCompany))
        #    {
        #        this.OffsetCompany = _currentCompany;
        #    }
        #
        #    if (!prmisDefault(_offsetLedgerDimension))
        #    {
        #        this.OffsetLedgerDimension = _offsetLedgerDimension;
        #    }
        #
        #    return this.OffsetLedgerDimension;
        #}
      ENDSOURCE
      SOURCE #paymentAmount_BR
        #//BP deviation documented
        #display AmountCur paymentAmount_BR()
        #{
        #    if (!(hasFieldAccess(this.TableId, fieldNum(LedgerJournalTrans, AmountCurDebit))
        #        && hasFieldAccess(this.TableId, fieldNum(LedgerJournalTrans, AmountCurCredit))))
        #    {
        #        throw error("@SYS57330");
        #    }
        #
        #    return this.AmountCurDebit ? abs(this.AmountCurDebit) : abs(this.AmountCurCredit);
        #}
      ENDSOURCE
      SOURCE #paymentDocumentName_RU
        #//BP Deviation documented
        #public display Name paymentDocumentName_RU()
        #{
        #    return BankClientDocumentType_RU::find(this.BankClientDocumentTypeId_RU).Name;
        #}
        #
      ENDSOURCE
      SOURCE #paymentOrderBudgetTrans_RU
        #server public PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans_RU(boolean _forUpdate = false)
        #{
        #    return PaymentOrderBudgetTrans_RU::find(this.JournalNum,
        #                                            this.LineNum,
        #                                            this.Voucher,
        #                                            this.AccountType,
        #                                            this.TransDate,
        #                                            _forUpdate);
        #}
      ENDSOURCE
      SOURCE #paymModeModified
        #public void paymModeModified()
        #{
        #    LedgerJournalTable              ledgerJournalTable = this.ledgerJournalTable();
        #    CustVendPaymModeTable           custVendPaymModeTable;
        #    boolean                         searchedForCustVendPaymModeTable;
        #    LedgerJournalACType             accountType;
        #    DimensionDynamicDefaultAccount  custVendOffsetLedgerDimension;
        #
        #    // Setting the offset account according to the payment mode if appropriate
        #    switch (ledgerJournalTable.JournalType)
        #    {
        #        case LedgerJournalType::PurchaseLedger,
        #             LedgerJournalType::VendInvoiceRegister,
        #             LedgerJournalType::VendInvoicePoolNotPosted :
        #             break;
        #
        #        case LedgerJournalType::Payment,
        #             LedgerJournalType::PayrollDisbursement,
        #             LedgerJournalType::VendPaymRemittance:
        #                if (this.PaymMode == '')
        #                {
        #                    custVendPaymModeTable = null;
        #                    this.OffsetAccountType = LedgerJournalACType::Ledger;
        #                    this.OffsetLedgerDimension = 0;
        #                }
        #                else
        #                {
        #                    changecompany(this.company())
        #                    {
        #                        custVendPaymModeTable = VendPaymModeTable::find(this.PaymMode);
        #                        searchedForCustVendPaymModeTable = true;
        #                    }
        #                }
        #             break;
        #
        #        case LedgerJournalType::CustPayment,
        #             LedgerJournalType::CustPaymRemittance:
        #                if (this.PaymMode == '')
        #                {
        #                    custVendPaymModeTable = null;
        #                    this.OffsetAccountType = LedgerJournalACType::Ledger;
        #                    this.OffsetLedgerDimension = 0;
        #                }
        #                else
        #                {
        #                    //--> Advanced Credit Card begin
        #                    if (!this.setForCreditCard(ledgerJournalTable))
        #                    {
        #                        changecompany(this.company())
        #                        {
        #                            custVendPaymModeTable = CustVendPaymModeTable::findCommon(this);
        #                            searchedForCustVendPaymModeTable = true;
        #                        }
        #                    }
        #                }
        #             break;
        #
        #        case LedgerJournalType::Daily :
        #            if (this.Invoice)
        #            {
        #                break;
        #            }
        #            // Fall through
        #
        #        default :
        #            if (this.PaymMode)
        #            {
        #                changecompany(this.company())
        #                {
        #                    custVendPaymModeTable = CustVendPaymModeTable::findCommon(this);
        #                    searchedForCustVendPaymModeTable = true;
        #                }
        #            }
        #            else
        #            {
        #                this.OffsetAccountType = LedgerJournalACType::Ledger;
        #                this.OffsetLedgerDimension = 0;
        #            }
        #    }
        #
        #    if (custVendPaymModeTable)
        #    {
        #        // Do not add as part of prevoius if, just do not want to update accounts if
        #        //      line has a related payment record.
        #        if (!MCROrderParameters::isCallCenterEnabledAndInUse()
        #            || !MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId, this.TableId))
        #        {
        #            custVendOffsetLedgerDimension = custVendPaymModeTable.offsetLedgerDimension();
        #
        #            if (custVendOffsetLedgerDimension)
        #            {
        #                accountType = custVendPaymModeTable.paymACType();
        #
        #                if (accountType == LedgerJournalACType::Ledger)
        #                {
        #                    changecompany(this.company())
        #                    {
        #                        this.setOffsetLedgerDimension(ledgerJournalTable,
        #                            accountType,
        #                            this.getOffsetLedgerDimensionForLedgerType(
        #                                custVendOffsetLedgerDimension,
        #                                    this.getOffsetCompany()));
        #                    }
        #                    this.BankClientDocumentTypeId_RU = custVendPaymModeTable.BankClientDocumentTypeId_RU;
        #                }
        #                else
        #                {
        #                    this.setOffsetLedgerDimension(ledgerJournalTable,
        #                        accountType,
        #                        custVendOffsetLedgerDimension);
        #                }
        #            }
        #
        #            this.BankTransType = custVendPaymModeTable.BankTransType;
        #        }
        #    }
        #    else if (searchedForCustVendPaymModeTable)
        #    {
        #        this.PaymMode = '';
        #    }
        #
        #    if (!this.OffsetLedgerDimension
        #        && this.getOffsetCompany() == ledgerJournalTable.company())
        #    {
        #        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        #        {
        #            // if type is ledger need to create ledger account structure by merging the main
        #            // account and the dimensions for the main account
        #            this.setOffsetLedgerDimension(ledgerJournalTable,
        #                ledgerJournalTable.OffsetAccountType,
        #                this.getOffsetLedgerDimensionForLedgerType(
        #                    ledgerJournalTable.parmOffsetLedgerDimension(),
        #                    this.getOffsetCompany()));
        #        }
        #        else
        #        {
        #            this.setOffsetLedgerDimension(ledgerJournalTable,
        #                ledgerJournalTable.OffsetAccountType,
        #                ledgerJournalTable.parmOffsetLedgerDimension());
        #        }
        #    }
        #
        #    this.PaymModeMap::modifiedPaymMode(); // Set specification
        #}
      ENDSOURCE
      SOURCE #paymStatusModified
        #public server void paymStatusModified(TransDate _approvalDate = systemDateGet())
        #{
        #    CustBillOfExchangeJour  custBillOfExchangeJour;
        #    VendPromissoryNoteJour  vendPromissoryNoteJour;
        #    SpecTrans               specTransFieldList;
        #    LedgerJournalType       ledgerJournalType   = this.ledgerJournalTable().JournalType;
        #
        #    switch (ledgerJournalType)
        #    {
        #        case LedgerJournalType::CustBillOfExchangeDraw,
        #             LedgerJournalType::CustBillOfExchangeRedraw,
        #             LedgerJournalType::CustPaymRemittance:
        #            ttsbegin;
        #
        #            while select firstonly crossCompany specTransFieldList
        #                where specTransFieldList.SpecRecId == this.RecId
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecCompany == this.company()
        #            {
        #                while select firstonly forupdate custBillOfExchangeJour
        #                    where custBillOfExchangeJour.BillOfExchangeId == specTransFieldList.custTrans().BillOfExchangeID ||
        #                        custBillOfExchangeJour.BillOfExchangeId == this.NegInstId
        #                {
        #                    custBillOfExchangeJour.ApprovalDate = _approvalDate;
        #                    custBillOfExchangeJour.update();
        #                }
        #            }
        #            ttscommit;
        #            break;
        #
        #        case LedgerJournalType::VendPromissoryNoteDraw,
        #            LedgerJournalType::VendPromissoryNoteRedraw,
        #            LedgerJournalType::VendPaymRemittance:
        #            ttsbegin;
        #            while select firstonly crossCompany specTransFieldList
        #                where specTransFieldList.SpecRecId == this.RecId
        #                    && specTransFieldList.SpecTableId == this.TableId
        #                    && specTransFieldList.SpecCompany == this.company()
        #            {
        #                while select firstonly forupdate vendPromissoryNoteJour
        #                where   vendPromissoryNoteJour.PromissoryNoteId == specTransFieldList.vendTrans().PromissoryNoteID ||
        #                        vendPromissoryNoteJour.PromissoryNoteId == this.NegInstId
        #                {
        #                    vendPromissoryNoteJour.ApprovalDate = _approvalDate;
        #                    vendPromissoryNoteJour.update();
        #                }
        #            }
        #            ttscommit;
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #paySheetTransDeleteLink_RU
        #private void paySheetTransDeleteLink_RU()
        #{
        #    RPaySheetTrans    paySheetTrans;
        #
        #    if (this.ledgerJournalTable().Posted)
        #    {
        #        return;
        #    }
        #
        #    switch (this.rCashPayTransType)
        #    {
        #        case RCashPayLedgerTransType::Bank :
        #            while select forupdate paySheetTrans
        #                where paySheetTrans.JournalNum == this.JournalNum
        #            {
        #                paySheetTrans.JournalNum        = '';
        #                paySheetTrans.PayVoucherBank    = '';
        #                paySheetTrans.PayDateBank       = dateNull();
        #                paySheetTrans.update();
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsCalcAmt
        #public void pdsCalcAmt(boolean _credit, Amount _amount)
        #{
        #    if (#PdsRebateEnabled)
        #    {
        #        if (_credit)
        #        {
        #            if (_amount > 0)
        #            {
        #                this.AmountCurCredit    = _amount;
        #                this.AmountCurDebit     = 0;
        #            }
        #            else
        #            {
        #                this.AmountCurDebit     = -_amount;
        #                this.AmountCurCredit    = 0;
        #            }
        #        }
        #        else
        #        {
        #            if (_amount > 0)
        #            {
        #                this.AmountCurCredit    = 0;
        #                this.AmountCurDebit     = _amount;
        #            }
        #            else
        #            {
        #                this.AmountCurDebit     = 0;
        #                this.AmountCurCredit    = -_amount;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #processPaymentBankDocument
        #/// <summary>
        #/// Processes payment type bank document from this table.
        #/// </summary>
        #/// <exception cref="M:Exception::Error">
        #/// An exception is thrown when status is not consistent with its bank document.
        #/// </exception>
        #private void processPaymentBankDocument()
        #{
        #    BankDocument            bankDocument;
        #
        #    if (this.isBankDocumentPaymentProcessNeeded())
        #    {
        #        switch (this.PaymentStatus)
        #        {
        #            case CustVendPaymStatus::Sent:
        #                if (BankAccountTable::find(this.parmBankAccount()).isBankStatementUsedAsPaymentConfirmation())
        #                {
        #                    //create electronic payment bank document
        #                    if (!this.parmBankCurrencyAmount())
        #                    {
        #                        this.calculateBankCurrencyAmount();
        #                    }
        #                    BankDocumentProcessor::submitBankDocumentTable(this);
        #                }
        #                break;
        #
        #            case CustVendPaymStatus::Recieved:
        #                bankDocument = BankDocument::construct(this);
        #                if (bankDocument)
        #                {
        #                    if (!bankDocument.getIsReconciled())
        #                    {
        #                        // Not allow user updates Recieved status manually if related document is reconciled.
        #                        throw error("@GLS221741");
        #                    }
        #                }
        #                break;
        #
        #            default:
        #                // Delete related existing bank document.
        #                this.clearBankCurrencyAmount();
        #                BankDocumentProcessor::deleteBankDocument(this.TableId, this.RecId);
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #purchOffsetLedgerDimension
        #public LedgerDimensionDefaultAccount purchOffsetLedgerDimension()
        #{
        #    return this.findVendTable().purchOffsetLedgerDimension(this.PostingProfile);
        #}
      ENDSOURCE
      SOURCE #rCashTable
        #// <GEERU>
        #/// <summary>
        #/// Finds the <c>RCashTable</c> record corresponding to the account.
        #/// </summary>
        #/// <returns>
        #/// A record from the <c>RCashTable</c> table; otherwise, an empty record.
        #/// </returns>
        #public RCashTable rCashTable()
        #{
        #    RCashTable      cashTable;
        #    RCashAccount    cashAccount = this.parmAccount();
        #
        #    if (this.AccountType == LedgerJournalACType::RCash)
        #    {
        #        cashTable = RCashTable::find(cashAccount);
        #    }
        #
        #    return cashTable;
        #}
        #// </GEERU>
      ENDSOURCE
      SOURCE #removeAccruals
        #public server void removeAccruals(boolean _skipWarning = false)
        #{
        #    LedgerJournalTransAccrual   ledgerJournalTransAccrual;
        #
        #    ttsbegin;
        #
        #    ledgerJournalTransAccrual = LedgerJournalTransAccrual::find(this.TableId, this.RecId, true);
        #
        #    if (ledgerJournalTransAccrual)
        #    {
        #        ledgerJournalTransAccrual.delete();
        #        if (!_skipWarning)
        #        {
        #            warning("@SYS78328");
        #        }
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #removeBudget
        #/// <summary>
        #/// Removes the budget amounts for the current <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <remarks>
        #/// The ledger accounts actual expenditure amounts on the current record are removed from the budgetary control system.
        #/// </remarks>
        #public void removeBudget()
        #{
        #    if (this.RecId != 0)
        #    {
        #        BudgetControlAccountingJournalProcessor::submitLedgerJournalTransToRemoveBudget(
        #            this.RecId,
        #            this.ledgerJournalTable().JournalType,
        #            this.JournalNum,
        #            this.company(),
        #            this.Voucher);
        #    }
        #}
      ENDSOURCE
      SOURCE #removeBudgetForVoucher
        #/// <summary>
        #/// Removes the budget amounts for all the <c>LedgerJournalTrans</c> records that are associated to the
        #/// voucher of the current <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <remarks>
        #/// The ledger accounts actual expenditure amounts for all the <c>LedgerJournalTrans</c> records that
        #/// are associated to the voucher of the current record are removed from the budgetary control system.
        #/// </remarks>
        #public void removeBudgetForVoucher()
        #{
        #    BudgetControlAccountingJournalProcessor::submitLedgerJournalVoucherToRemoveBudget(
        #        this.JournalNum,
        #        this.company(),
        #        this.Voucher);
        #}
      ENDSOURCE
      SOURCE #reopenTaxWithholdEditStatus_BR
        #public void reopenTaxWithholdEditStatus_BR()
        #{
        #    LedgerJournalTransPayment_BR ledgerJournalTransPayment;
        #
        #    ledgerJournalTransPayment = this.getPaymentExtension_BR();
        #
        #    if (this.ledgerJournalTable().Posted == NoYes::Yes)
        #    {
        #        ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
        #        this.packExtensionTable(ledgerJournalTransPayment);
        #        throw error("@GLS2085");
        #    }
        #
        #    ledgerJournalTransPayment.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Opened;
        #
        #    if (this.hasConflictingTaxWithholdEditStatus_BR())
        #    {
        #        ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
        #        this.packExtensionTable(ledgerJournalTransPayment);
        #        throw error("@GLS2084");
        #    }
        #
        #    if (this.affectsOtherWithholdCalcs_BR())
        #    {
        #        ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
        #        this.packExtensionTable(ledgerJournalTransPayment);
        #        throw error("@GLS2083");
        #    }
        #}
      ENDSOURCE
      SOURCE #represPersonCard_LT
        #//BP deviation documented
        #display RepresPersonCard_LT represPersonCard_LT()
        #{
        #    return  RCashTrans::findLedgerJournalTrans(this).RepresPersonCard_LT;
        #}
        #
        #
      ENDSOURCE
      SOURCE #represPersonCard_RU
        #//BP deviation documented
        #display PayeeDocument_RU represPersonCard_RU()
        #{
        #    return conPeek(RCashTransType::represPersonNameCard(this.rCashDocRepresPersonId,
        #                                                        this.AccountType == LedgerJournalACType::RCash ? this.OffsetAccountType : this.AccountType,
        #                                                        this.AccountType == LedgerJournalACType::RCash ? this.parmOffsetAccount() : this.parmAccount(),
        #                                                        this.rCashDocRepresType),
        #                   2);
        #}
      ENDSOURCE
      SOURCE #represPersonCardEdit_W
        #/// <summary>
        #/// Edits the representative person card information.
        #/// </summary>
        #/// <param name="_set">
        #/// A Boolean determining whether to set the value.
        #/// </param>
        #/// <param name="_cardInfo">
        #/// The value to be set.
        #/// </param>
        #/// <returns>
        #/// Card information to set.
        #/// </returns>
        #/// <remarks>
        #/// Returns the calculated representative person card information if tha corresponding table field is empty.
        #/// </remarks>
        #public edit PayeeDocument_RU represPersonCardEdit_W(boolean _set, PayeeDocument_RU _cardInfo)
        #{
        #    if (_set)
        #    {
        #        this.RepresPersonCard_W = _cardInfo;
        #    }
        #
        #    if (!this.RepresPersonCard_W && this.RCashDocRepresType != RCashDocRepresType::Person)
        #    {
        #        this.RepresPersonCard_W = this.represPersonCard_RU();
        #    }
        #
        #    return this.RepresPersonCard_W;
        #}
      ENDSOURCE
      SOURCE #represPersonName_LT
        #//BP deviation documented
        #display EmplName represPersonName_LT()
        #{
        #    return RCashTransType::represPersonName_LT(this.rCashDocRepresPersonId,
        #                                               this.AccountType == LedgerJournalACType::RCash ? this.OffsetAccountType : this.AccountType,
        #                                               this.AccountType == LedgerJournalACType::RCash ? this.parmOffsetAccount() : this.parmAccount(),
        #                                               this.rCashDocRepresType
        #                                              );
        #}
        #
      ENDSOURCE
      SOURCE #represPersonName_RU
        #//BP deviation documented
        #display EmplName represPersonName_RU()
        #{
        #    LedgerJournalAC offsetAccount;
        #
        #    if (this.AccountType == LedgerJournalACType::RCash && this.OffsetAccountType == LedgerJournalACType::Ledger)
        #    {
        #        offsetAccount = MainAccount::findByLedgerDimension(this.OffsetLedgerDimension).MainAccountId;
        #    }
        #    else
        #    {
        #        offsetAccount = this.parmOffsetAccount();
        #    }
        #
        #    return conPeek(RCashTransType::represPersonNameCard(this.rCashDocRepresPersonId,
        #                                                        this.AccountType == LedgerJournalACType::RCash ? this.OffsetAccountType : this.AccountType,
        #                                                        this.AccountType == LedgerJournalACType::RCash ? offsetAccount : this.parmAccount(),
        #                                                        this.rCashDocRepresType),
        #                   1);
        #}
      ENDSOURCE
      SOURCE #represPersonNameEdit_W
        #/// <summary>
        #/// Edits the representative person name.
        #/// </summary>
        #/// <param name="_set">
        #/// A Boolean determining whether to set the value.
        #/// </param>
        #/// <param name="_name">
        #/// The value to be set.
        #/// </param>
        #/// <returns>
        #/// Representative person name.
        #/// </returns>
        #/// <remarks>
        #/// Returns the calculated represemtative person name if the corresponding table field is empty.
        #/// </remarks>
        #public edit PersonName represPersonNameEdit_W(boolean _set, EmplName _name)
        #{
        #    if (_set)
        #    {
        #        this.RepresPersonName_W = _name;
        #    }
        #
        #    if (!this.RepresPersonName_W && this.RCashDocRepresType != RCashDocRepresType::Person)
        #    {
        #        this.RepresPersonName_W = this.represPersonName_RU();
        #    }
        #
        #    return this.RepresPersonName_W;
        #}
      ENDSOURCE
      SOURCE #reuseCheck
        #public void reuseCheck(LedgerJournalTrans ljtRecord)
        #{
        #    CustVendPaymReconciliationSetStatus custVendPaymReconciliationSetStatus;
        #    LedgerJournalTrans                  localLedgerJournalTrans;
        #    FormDataSource                      formDS;
        #
        #    formDS = ljtRecord.dataSource();
        #    if (formDS)
        #    {
        #        custVendPaymReconciliationSetStatus = new CustVendPaymReconciliationSetStatus();
        #        custVendPaymReconciliationSetStatus.parmStatus(CustVendPaymStatus::None); // args.parmEnum()
        #
        #        for (localLedgerJournalTrans = getFirstSelection(formDS);
        #             localLedgerJournalTrans;
        #             localLedgerJournalTrans = formDS.getNext() as LedgerJournalTrans)
        #        {
        #            custVendPaymReconciliationSetStatus.parmRecid(localLedgerJournalTrans.RecId);
        #        }
        #
        #        CustVendPaymReconciliationSetStatus::runServerReuseChecks(custVendPaymReconciliationSetStatus.pack());
        #        formDS.research();
        #    }
        #    else
        #    {
        #        custVendPaymReconciliationSetStatus = new CustVendPaymReconciliationSetStatus();
        #        custVendPaymReconciliationSetStatus.parmStatus(CustVendPaymStatus::None);
        #        custVendPaymReconciliationSetStatus.parmRecid(ljtRecord.RecId);
        #        CustVendPaymReconciliationSetStatus::runServerReuseChecks(custVendPaymReconciliationSetStatus.pack());
        #    }
        #}
      ENDSOURCE
      SOURCE #revertBankAccountTrans
        #/// <summary>
        #/// Reverts the <c>BankAccountTrans</c> table updates that were made when a bank check or deposit
        #/// reversal journal is created.
        #/// </summary>
        #/// <param name="_ledgerJournalType">
        #/// The ledger journal type of the bank check or deposit reversal journal to revert.
        #/// </param>
        #private server void revertBankAccountTrans(LedgerJournalType _ledgerJournalType)
        #{
        #    BankAccountTrans    bankAccountTrans;
        #
        #    // Find the related bankAccountTrans.
        #    switch (_ledgerJournalType)
        #    {
        #        case LedgerJournalType::BankChequeReversal:
        #            bankAccountTrans = BankAccountTrans::findByAccountIDAndChequeNum(this.parmOffsetAccount(), this.BankChequeNum, true);
        #            break;
        #
        #        case LedgerJournalType::BankDepositPaymCancel:
        #            bankAccountTrans = BankAccountTrans::findByDepositNum(this.BankDepositNum, true);
        #            break;
        #    }
        #
        #    if (bankAccountTrans.RecId != 0)
        #    {
        #        // Revert the CancelPending and remove any related reason code data.
        #        bankAccountTrans.CancelPending = NoYes::No;
        #        bankAccountTrans.ReasonRefRecID = 0;
        #
        #        if (bankAccountTrans.validateWrite())
        #        {
        #            bankAccountTrans.write();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #revertBankChequeTable
        #/// <summary>
        #/// Reverts the <c>BankChequeTable</c> table updates that were made when a bank check reversal journal
        #/// is created.
        #/// </summary>
        #private server void revertBankChequeTable()
        #{
        #    BankChequeTable     bankChequeTable;
        #
        #    bankChequeTable = BankChequeTable::find(this.parmOffsetAccount(), this.BankChequeNum, true);
        #
        #    if (bankChequeTable.RecId != 0)
        #    {
        #        // Revert the CancelPending and remove any related reason code data.
        #        bankChequeTable.ChequeStatus = ChequeStatus::Payment;
        #        bankChequeTable.ReasonRefRecID = 0;
        #        bankChequeTable.ReversalTableId = 0;
        #        bankChequeTable.ReversalRecId = 0;
        #
        #        if (bankChequeTable.validateWrite())
        #        {
        #            bankChequeTable.write();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #revertBankDeposit
        #/// <summary>
        #/// Reverts the <c>BankDeposit</c> table updates that were made when a bank deposit slip cancellation
        #/// journal is created.
        #/// </summary>
        #private server void revertBankDeposit()
        #{
        #    BankDeposit     bankDeposit;
        #
        #    bankDeposit = BankDeposit::find(this.BankChequeDepositTransRefRecID, true);
        #
        #    if (bankDeposit.RecId != 0)
        #    {
        #        // Revert the CancelPending and remove any related reason code data.
        #        bankDeposit.CancelPending = NoYes::No;
        #        bankDeposit.ReasonRefRecID = 0;
        #        bankDeposit.ReversalTableId = 0;
        #        bankDeposit.ReversalRecId = 0;
        #
        #        if (bankDeposit.validateWrite())
        #        {
        #            bankDeposit.write();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #rollbackFIFOLineExchRate_HU
        #server client public void rollbackFIFOLineExchRate_HU()
        #{
        #    RCashTrans              rollbackCashTransIn;
        #    LedgerJournalTrans      this_orig, ledgerJournalTransOut;
        #    AmountCur               rollbackGoings;
        #    LedgerJournalTable      ledgerJournalTable;
        #
        #    ;
        #    this_orig = this.orig();
        #
        #    while select ledgerJournalTransOut
        #        where ledgerJournalTransOut.LedgerDimension  == this_orig.LedgerDimension   &&
        #              ledgerJournalTransOut.CurrencyCode     == this_orig.CurrencyCode &&
        #              (ledgerJournalTransOut.AmountCurCredit >  0.0 ||
        #               ledgerJournalTransOut.AmountCurDebit  < 0.0)                    &&
        #              ledgerJournalTransOut.AccountType      == LedgerJournalACType::RCash
        #    notexists join ledgerJournalTable
        #        where ledgerJournalTable.JournalNum == ledgerJournalTransOut.JournalNum &&
        #              ledgerJournalTable.Posted
        #    {
        #        rollbackGoings += ledgerJournalTransOut.AmountCurCredit + abs(ledgerJournalTransOut.AmountCurDebit);
        #    }
        #
        #    select forupdate rollbackCashTransIn
        #        order by TransDate desc, Voucher desc
        #        where rollbackCashTransIn.LedgerDimension   == this_orig.LedgerDimension   &&
        #              rollbackCashTransIn.CurrencyCode == this_orig.CurrencyCode &&
        #              rollbackCashTransIn.Posted                                 &&
        #              rollbackCashTransIn.AmountCur    >  0.0                    &&
        #              rollbackCashTransIn.SettleAmountCur_PL;
        #
        #    while (rollbackCashTransIn)
        #    {
        #        rollbackGoings = rollbackGoings - rollbackCashTransIn.SettleAmountCur_PL;
        #        if (rollbackGoings > 0.0)
        #        {
        #            rollbackCashTransIn.SettleAmountCur_PL = 0.0;
        #            rollbackCashTransIn.doUpdate();
        #        }
        #
        #        else
        #        {
        #            rollbackCashTransIn.SettleAmountCur_PL = abs(rollbackGoings);
        #            rollbackCashTransIn.doUpdate();
        #            break;
        #        }
        #
        #        next rollbackCashTransIn;
        #    }
        #}
      ENDSOURCE
      SOURCE #serviceTaxAmountForReverseCharge_IN
        #/// <summary>
        #/// Gets the service tax amount for reverse charge.
        #/// </summary>
        #/// <returns>
        #/// Returns service tax amount for reverse charge, a instance of the <c>TaxAmountCur</c> class.
        #/// </returns>
        #public TaxAmountCur serviceTaxAmountForReverseCharge_IN()
        #{
        #    TaxTrans        taxTrans;
        #    TaxAmountCur    totalReverseChargeTaxAmountCur;
        #    TaxTable        taxTableRev;
        #
        #    // Get the service tax to be posted if reverse charge exist.
        #    // for reverse charge, 3 taxtrans would be postd:
        #    // Recoverable: Dr (serviceTaxAmount * (100 - reversePercentage)%)
        #    // Interim Recoverable: Dr (serviceTaxAmount - serviceTaxAmount * (100 - reversePercentage)%)
        #    // Interim Payable Cr: (serviceTaxAmount - serviceTaxAmount * (100 - reversePercentage)%)
        #    while select sum (SourceRegulateAmountCur), sum(SourceTaxAmountCur) from taxTrans
        #        group by taxTrans.TaxCode
        #        where taxTrans.Voucher      == this.orig().Voucher
        #            && taxTrans.TransDate   == this.orig().TransDate
        #            && taxTrans.TaxOrigin   == TaxOrigin::Tax
        #        exists join taxTableRev
        #            where taxTableRev.TaxCode == taxTrans.TaxCode
        #                && taxTableRev.TaxType_IN == TaxType_IN::ServiceTax
        #    {
        #        totalReverseChargeTaxAmountCur += taxTrans.SourceRegulateAmountCur;
        #    }
        #
        #    return totalReverseChargeTaxAmountCur;
        #}
      ENDSOURCE
      SOURCE #servicetaxBaseamountForAdvancePayment_IN
        #/// <summary>
        #/// Gets the service tax base amount for advance payment.
        #/// </summary>
        #/// <returns>
        #/// Returns service tax base amount for advance payment, a instance of the <c>AmountCur</c> class.
        #/// </returns>
        #public AmountCur servicetaxBaseamountForAdvancePayment_IN()
        #{
        #    SpecTransManager specOffsetVoucher = SpecTransManager::construct(this);
        #    AmountCur baseAmountCur,specAmount;
        #
        #    specAmount = SpecTransManager::getTotalSettleAmountForSpecReference(this.company(),
        #                                                                        this.TableId,
        #                                                                        this.RecId,
        #                                                                        this.CurrencyCode,
        #                                                                        this.Company,
        #                                                                        this.TransDate,
        #                                                                        this.crossrate());
        #    if (specAmount !=0)
        #    {
        #        if (abs(this.amount()) > abs(specAmount) && this.isServiceApplicable_IN())
        #        {
        #            baseAmountCur = abs(this.amount()) - abs(specAmount);
        #            if(this.amount() < 0)
        #                baseAmountCur = -baseAmountCur;
        #        }
        #        else
        #        {
        #            baseAmountCur = this.amount();
        #        }
        #    }
        #    else
        #    {
        #        baseAmountCur = this.amount();
        #    }
        #    return baseAmountCur;
        #}
      ENDSOURCE
      SOURCE #setAgreementEmptyValues_RU
        #/// <summary>
        #///     Clears agreement or ofsset agreement of the current <c>LedgerJournalTrans</c> record depending on account type.
        #/// </summary>
        #/// <param name="_accountOffsetaccount">
        #///     Account type, account or offset account; optional.
        #/// </param>
        #public void setAgreementEmptyValues_RU(AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
        #{
        #    if (_accountOffsetaccount == AccountOffsetaccount::Account)
        #    {
        #        if (this.AccountAgreementId_RU)
        #        {
        #            this.AccountAgreementId_RU = '';
        #            this.clearAgreementDimension_RU(_accountOffsetaccount);
        #        }
        #    }
        #    else
        #    if (_accountOffsetaccount == AccountOffsetaccount::OffsetAccount)
        #    {
        #        if (this.OffsetAccountAgreementId_RU)
        #        {
        #            this.OffsetAccountAgreementId_RU = '';
        #            this.clearAgreementDimension_RU(_accountOffsetaccount);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setAssessableValue_IN
        #/// <summary>
        #/// Sets Assessable value of the table <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #private void setAssessableValue_IN()
        #{
        #    this.AssessableValue_IN = this.AmountCurDebit ? this.AmountCurDebit : this.AmountCurCredit;
        #}
      ENDSOURCE
      SOURCE #setCustVendSettlementbuffer
        #private CustVendSettlement setCustVendSettlementbuffer()
        #{
        #    CustSettlement  custSettlement;
        #    VendSettlement  vendSettlement;
        #
        #    if (this.AccountType == LedgerJournalACType::Cust)
        #    {
        #        return custSettlement;
        #    }
        #    else
        #    {
        #        return vendSettlement;
        #    }
        #}
      ENDSOURCE
      SOURCE #setCustVendTransOpenbuffer
        #private CustVendTransOpen setCustVendTransOpenbuffer()
        #{
        #    CustTransOpen   custTransOpen;
        #    VendTransOpen   vendTransOpen;
        #
        #    if (this.AccountType == LedgerJournalACType::Cust)
        #    {
        #        return custTransOpen;
        #    }
        #    else
        #    {
        #        return vendTransOpen;
        #    }
        #}
      ENDSOURCE
      SOURCE #setDefaultAccount
        #public void setDefaultAccount(
        #    boolean     _isOffset,
        #    CustVendAC  _custVendAC)
        #{
        #    VendDefaultAccounts             vendDefaultAccounts;
        #    LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        #    LedgerJournalType               ledgerJournalType = this.ledgerJournalTable().JournalType;
        #    LedgerDimensionAccount          combinedLedgerDimension;
        #
        #    if (ledgerJournalType != LedgerJournalType::PurchaseLedger && // diff. from Invoice register
        #        ledgerJournalType != LedgerJournalType::Payment)
        #    {
        #        vendDefaultAccounts = VendDefaultAccounts::findDefault(_custVendAC,  _isOffset ? this.OffsetCompany : this.Company);
        #
        #        if (vendDefaultAccounts)
        #        {
        #            if (_isOffset && this.AccountType == LedgerJournalACType::Ledger && !this.LedgerDimension)
        #            {
        #                this.AccountType    = vendDefaultAccounts.LedgerJournalACType;
        #                if (this.AccountType == LedgerJournalACType::Ledger)
        #                {
        #                    // Need to merge ledger dimension account and the default dimensions.
        #                    ledgerDimensionDefaultAccount = vendDefaultAccounts.parmLedgerDimension();
        #                    this.LedgerDimension = this.getLedgerDimensionForLedgerType(ledgerDimensionDefaultAccount, this.Company);
        #                }
        #                else
        #                {
        #                    this.LedgerDimension = vendDefaultAccounts.parmLedgerDimension();
        #                }
        #                combinedLedgerDimension = DimensionDefaultingService::serviceCreateLedgerDimension(this.LedgerDimension, VendTable::find(_custVendAC).DefaultDimension);
        #                if (combinedLedgerDimension != 0)
        #                {
        #                    this.LedgerDimension = combinedLedgerDimension;
        #                }
        #            }
        #
        #            if (!_isOffset && this.OffsetAccountType == LedgerJournalACType::Ledger && !this.OffsetLedgerDimension)
        #            {
        #                this.OffsetAccountType  = vendDefaultAccounts.LedgerJournalACType;
        #                if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #                {
        #                    // Need to merge ledger dimension account and the default dimensions.
        #                    ledgerDimensionDefaultAccount = vendDefaultAccounts.parmLedgerDimension();
        #                    this.OffsetLedgerDimension = this.getOffsetLedgerDimensionForLedgerType(ledgerDimensionDefaultAccount, this.getOffsetCompany());
        #                }
        #                else
        #                {
        #                    this.OffsetLedgerDimension = vendDefaultAccounts.parmLedgerDimension();
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setEPRemitInfo_BR
        #void setEPRemitInfo_BR()
        #{
        #    if (this.AccountType == LedgerJournalACType::Cust && this.RecId)
        #    {
        #        if (this.PaymMode)
        #        {
        #            CustEPRemitInfo_BR::setEPRemitInfo(this);
        #        }
        #        else
        #        {
        #            CustEPRemitInfo_BR::clearEPRemitInfo(this.RecId);
        #        }
        #    }
        #    if (this.AccountType == LedgerJournalACType::Vend && this.RecId)
        #    {
        #        if (this.PaymMode)
        #        {
        #            VendEPRemitInfo_BR::setEPRemitInfo(this);
        #        }
        #        else
        #        {
        #            VendEPRemitInfo_BR::clearEPRemitInfo(this.RecId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setForCreditCard
        #private boolean setForCreditCard(LedgerJournalTable     ledgerJournalTable)
        #{
        #    CreditCardParameters    ccParameters;
        #    CreditCardTerminalTable ccTerminal;
        #    CreditCardUsers         ccUsers;
        #    CreditCardBanks         ccBanks;
        #    CreditCardTrans         ccTrans;
        #    LedgerJournalTransCC    ledgerJournalTransCC = LedgerJournalTransCC::find(this.Voucher,this.LineNum);
        #    Boolean                 ret;
        #    ;
        #    select ccTerminal;
        #
        #    if (!ccTerminal)
        #        return false;
        #
        #    ccTerminal = ccTrans.resolveTerminalforJournal(this,ccTrans);
        #
        #    select firstonly TerminalId,RecId
        #        from ccParameters
        #        where ccParameters.TerminalId == ccTerminal.TerminalId;
        #
        #    if (ccParameters.RecId > 0)
        #    {
        #        //--> Strange code, we know.  The idea is that if there are
        #        //--> no parameters, this will not create a problem.  We check
        #        //--> first and then do our business.
        #        select ccUsers where ccUsers.UserId == curUserId();
        #        if (ccUsers)
        #        {
        #            if (ccParameters.PaymMode == this.PaymMode
        #                && ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
        #            {
        #                ccBanks = CreditCardBanks::find(CreditCardTable::find(ledgerJournalTransCC.CreditCardId).CreditCardType,ccParameters.TerminalId);
        #                if (ccBanks)
        #                {
        #                    this.parmOffsetAccount(ccBanks.AccountId,
        #                                           LedgerJournalACType::Bank,
        #                                           this.Company());
        #                    ret = true;
        #                }
        #                else
        #                {
        #                    this.parmOffsetAccount(CreditCardParameters::findParameter().DefBankId,
        #                                           LedgerJournalACType::Bank,
        #                                           this.Company());
        #                    ret = true;
        #                }
        #
        #                if (this.AccountType == LedgerJournalACType::Cust)
        #                {
        #                    if (!ledgerJournalTransCC)
        #                    {
        #                        ledgerJournalTransCC.Voucher = this.Voucher;
        #                        ledgerJournalTransCC.JournalNum = this.JournalNum;
        #                        ledgerJournalTransCC.LineNum = this.LineNum;
        #                        ledgerJournalTransCC.CreditCardId = CreditCardTable::findPrimary(this.parmAccount()).CreditCardId;
        #                        ledgerJournalTransCC.write();
        #                    }
        #                }
        #
        #            }
        #            else
        #            {
        #                ret = false;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setInterestAndFine_BR
        #/// <summary>
        #/// Adjusts <c>LedgerJournalTrans</c> fields (FinInterestAmount / FineAmount )
        #/// in response to a change in the  <c>LedgerJournalTrans</c> AmountCurDebit or AmountCurCredit value.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// The field that was modified.
        #/// </param>
        #public void setInterestAndFine_BR(FieldId _fieldId)
        #{
        #    SpecTrans           specTransLoc;
        #    VendTransOpen       vendTransOpenLoc;
        #    CustTransOpen       custTransOpenLoc;
        #    AmountCur           invoiceAmountCur;
        #    AmountCur           finInterestAmountCur;
        #    AmountCur           fineAmountCur;
        #    LedgerJournalTransPayment_BR payment_BR;
        #
        #    specTransLoc    = SpecTrans::findBySpec(this.company(), this.TableId, this.RecId);
        #
        #    payment_BR = this.getPaymentExtension_BR();
        #
        #    if (specTransLoc)
        #    {
        #        switch (_fieldId)
        #        {
        #            case fieldNum(LedgerJournalTrans, AmountCurDebit):
        #                if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::Payment)
        #                {
        #                    invoiceAmountCur        = 0;
        #                    finInterestAmountCur    = 0;
        #                    fineAmountCur           = 0;
        #                    while select  crosscompany  specTransLoc
        #                          where     specTransLoc.SpecCompany == this.company() &&
        #                                    specTransLoc.SpecTableId == this.TableId &&
        #                                    specTransLoc.SpecRecId   == this.RecId
        #                          join      AmountCur, InterestAmountPaymCur_BR, FineAmountPaymCur_BR from vendTransOpenLoc
        #                          where     vendTransOpenLoc.TableId == specTransLoc.RefTableId &&
        #                                    vendTransOpenLoc.RecId   == specTransLoc.RefRecId
        #                    {
        #                        invoiceAmountCur       += vendTransOpenLoc.AmountCur;
        #                        finInterestAmountCur   += vendTransOpenLoc.InterestAmountPaymCur_BR;
        #                        fineAmountCur          += vendTransOpenLoc.FineAmountPaymCur_BR;
        #                    }
        #
        #                    if (this.AmountCurDebit < abs(invoiceAmountCur + finInterestAmountCur + fineAmountCur))
        #                    {
        #                        payment_BR.FinInterestAmountCur_BR = 0;
        #                        payment_BR.FineAmountCur_BR        = 0;
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, AmountCurCredit):
        #                if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::CustPayment)
        #                {
        #                    invoiceAmountCur        = 0;
        #                    finInterestAmountCur    = 0;
        #                    fineAmountCur           = 0;
        #
        #                    while select crosscompany   specTransLoc
        #                          where     specTransLoc.SpecCompany == this.company() &&
        #                                    specTransLoc.SpecTableId == this.TableId &&
        #                                    specTransLoc.SpecRecId   == this.RecId
        #                          join      AmountCur, InterestAmountPaymCur_BR, FineAmountPaymCur_BR from custTransOpenLoc
        #                          where     custTransOpenLoc.TableId == specTransLoc.RefTableId &&
        #                                    custTransOpenLoc.RecId   == specTransLoc.RefRecId
        #                    {
        #                        invoiceAmountCur       += custTransOpenLoc.AmountCur;
        #                        finInterestAmountCur   += custTransOpenLoc.InterestAmountPaymCur_BR;
        #                        fineAmountCur          += custTransOpenLoc.FineAmountPaymCur_BR;
        #                    }
        #
        #                    if (this.AmountCurDebit < abs(invoiceAmountCur + finInterestAmountCur + fineAmountCur))
        #                    {
        #                        payment_BR.FinInterestAmountCur_BR = 0;
        #                        payment_BR.FineAmountCur_BR        = 0;
        #                    }
        #
        #                }
        #            default:
        #                payment_BR.FinInterestAmountCur_BR = 0;
        #                payment_BR.FineAmountCur_BR        = 0;
        #                break;
        #        }
        #    }
        #    else
        #    {
        #        payment_BR.FinInterestAmountCur_BR = 0;
        #        payment_BR.FineAmountCur_BR        = 0;
        #    }
        #
        #    this.packExtensionTable(payment_BR);
        #}
        #
      ENDSOURCE
      SOURCE #setListCode
        #public server void setListCode()
        #{
        #    LogisticsPostalAddress           postalAddress;
        #    LogisticsAddressCountryRegionId  countryRegionId;
        #    LogisticsAddressCountryRegionId  offSetCountryRegionId;
        #    ModuleCustVend                   module;
        #
        #    module          = this.AccountType == LedgerJournalACType::Cust? ModuleCustVend::Cust : ModuleCustVend::Vend;
        #    postalAddress   = DirParty::primaryPostalAddress(CustVendTable::findModule(module, this.parmAccount()).Party);
        #    countryRegionId = postalAddress.CountryRegionId;
        #
        #    if (IntrastatCountryRegionParameters::isInEU(countryRegionId))
        #    {
        #        if (this.OffsetAccountType == LedgerJournalACType::Cust || this.OffsetAccountType == LedgerJournalACType::Vend)
        #        {
        #            module                = this.OffsetAccountType == LedgerJournalACType::Cust? ModuleCustVend::Cust : ModuleCustVend::Vend;
        #            postalAddress         = DirParty::primaryPostalAddress(CustVendTable::findModule(module,this.parmOffsetAccount()).Party);
        #            offSetCountryRegionId = postalAddress.CountryRegionId;
        #
        #            if (countryRegionId != offSetCountryRegionId)
        #            {
        #                this.Listcode  = Listcode::TriangularEUTrade;
        #            }
        #            else
        #            {
        #                this.Listcode  = Listcode::EUTrade;
        #            }
        #        }
        #        else
        #        {
        #            this.Listcode  = Listcode::EUTrade;
        #        }
        #    }
        #    else
        #    {
        #        this.Listcode  = Listcode::IncludeNot;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #setNotApplicableTaxWithholdEditStatus_BR
        #
        #private void setNotApplicableTaxWithholdEditStatus_BR()
        #{
        #    LedgerJournalTransPayment_BR ledgerJournalTransPaym = this.getPaymentExtension_BR();
        #
        #    ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::NotApplicable;
        #    if (!this.isFormDataSource())
        #    {
        #        this.packExtensionTable(ledgerJournalTransPaym);
        #    }
        #}
      ENDSOURCE
      SOURCE #setOffsetLedgerDimension
        #/// <summary>
        #/// Sets the offset account type and offset account fields on the <c>LedgerJournalTrans</c> record.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> table.
        #/// </param>
        #/// <param name="_ledgerJournalACType">
        #/// The ledger journal account type.
        #/// </param>
        #/// <param name="_ledgerJournalAccount">
        #/// The ledger journal account number.
        #/// </param>
        #public void setOffsetLedgerDimension(
        #    LedgerJournalTable _ledgerJournalTable,
        #    LedgerJournalACType _ledgerJournalACType,
        #    LedgerDimensionAccount _ledgerJournalAccount)
        #{
        #    if (_ledgerJournalTable.FixedOffsetAccount)
        #    {
        #        // The LedgerJournalTable has a fixed offset, so use the values from the LedgerJournalTable to
        #        // set the offset fields
        #        this.OffsetAccountType = _ledgerJournalTable.OffsetAccountType;
        #        if (_ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        #        {
        #            // if type is ledger need to create ledger account structure by merging the main
        #            // account and the dimensions for the main account with the currently entered values
        #            this.OffsetLedgerDimension =
        #                DimensionDefaultingService::serviceMergeLedgerDimensions(
        #                    this.OffsetLedgerDimension,
        #                this.getOffsetLedgerDimensionForLedgerType(
        #                    _ledgerJournalTable.parmOffsetLedgerDimension(),
        #                        this.getOffsetCompany()));
        #        }
        #        else
        #        {
        #            // if type isn't ledger can just copy the ledgerDimension value
        #            this.OffsetLedgerDimension = _ledgerJournalTable.parmOffsetLedgerDimension();
        #        }
        #    }
        #    else
        #    {
        #        // The LedgerJournalTable offset is not fixed, so use passed in values to set offset
        #        this.OffsetAccountType = _ledgerJournalACType;
        #        this.OffsetLedgerDimension = _ledgerJournalAccount;
        #    }
        #}
      ENDSOURCE
      SOURCE #setRepresPersonValues_W
        #/// <summary>
        #/// Sets the values of representative dependent fields.
        #/// </summary>
        #/// <remarks>
        #/// Sets the employee name and identity card fields depending on the representative person selected.
        #/// </remarks>
        #public void setRepresPersonValues_W()
        #{
        #    LedgerJournalTrans this_Orig = this.orig();
        #    container represPersonNameCard;
        #
        #    if (this.RCashDocRepresType == RCashDocRepresType::Person)
        #    {
        #        if (this_Orig.RCashDocRepresType != RCashDocRepresType::Person)
        #        {
        #            this.RepresPersonName_W = '';
        #            this.RepresPersonCard_W = '';
        #        }
        #    }
        #    else if (this.RCashDocRepresPersonId != '')
        #    {
        #        represPersonNameCard = RCashTransType::represPersonNameCard(this.rCashDocRepresPersonId,
        #                                                                    this.AccountType == LedgerJournalACType::RCash ? this.OffsetAccountType : this.AccountType,
        #                                                                    this.AccountType == LedgerJournalACType::RCash ? this.parmOffsetAccount() : this.parmAccount(),
        #                                                                    this.rCashDocRepresType);
        #        this.RepresPersonName_W = conPeek(represPersonNameCard, 1);
        #        this.RepresPersonCard_W = conPeek(represPersonNameCard, 2);
        #    }
        #    else
        #    {
        #        this.RepresPersonName_W = '';
        #        this.RepresPersonCard_W = '';
        #    }
        #}
      ENDSOURCE
      SOURCE #setSettleVoucher
        #public void setSettleVoucher()
        #{
        #    if (this.SettleVoucher != SettlementType::SelectedTransact)
        #    {
        #        switch (this.AccountType)
        #        {
        #            case LedgerJournalACType::Cust:
        #                this.SettleVoucher = CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        #                break;
        #            case LedgerJournalACType::Vend:
        #                this.SettleVoucher = VendParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        #                break;
        #            default:
        #                switch (this.OffsetAccountType)
        #                {
        #                    case LedgerJournalACType::Cust:
        #                        this.SettleVoucher = CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        #                        break;
        #                    case LedgerJournalACType::Vend:
        #                        this.SettleVoucher = VendParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        #                        break;
        #                    default:
        #                        this.SettleVoucher = SettlementType::None;
        #                }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setTaxInfoOfCompany_IN
        #/// <summary>
        #/// Sets tax information of company.
        #/// </summary>
        #/// <param name="_companyInfo">
        #/// The company information.
        #/// </param>
        #public void setTaxInfoOfCompany_IN(CompanyInfo _companyInfo)
        #{
        #    DirPartyLocation        dirPartyLocation;
        #    LogisticsLocation       logisticsLocation;
        #    TaxInformation_IN       taxInformation;
        #
        #    dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(_companyInfo.RecId);
        #    if (dirPartyLocation)
        #    {
        #        logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        #
        #        select firstonly RecId from taxInformation
        #            where taxInformation.RegistrationLocation == logisticsLocation.RecId;
        #
        #        this.CompanyLocation_IN = logisticsLocation.RecId;
        #    }
        #}
      ENDSOURCE
      SOURCE #setTaxInfoOfProjTable_IN
        #/// <summary>
        #/// Initializes fields for the current LedgerJournaltrans record with values from the specified project record.
        #/// </summary>
        #/// <param name="_projTable">
        #/// The project record.
        #/// </param>
        #/// <remarks>
        #/// This method sets the Tax Information fields for the current LedgerJournaltrans record
        #/// with the Tax Information for the project.
        #/// </remarks>
        #public void setTaxInfoOfProjTable_IN(ProjTable _projTable)
        #{
        #    LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        #    ProjTableTaxExtensionIN             projTableTaxExtensionIN;
        #
        #    projTableTaxExtensionIN             = ProjTableTaxExtensionIN::findByProjTable(_projTable.RecId);
        #    ledgerJournalTransTaxExtensionIN    = this.ledgerJournalTransTaxExtensionIN();
        #
        #    this.CompanyLocation_IN                                         = projTableTaxExtensionIN.CompanyLocation;
        #    this.ExciseType_IN                                              = projTableTaxExtensionIN.ExciseType;
        #    this.CustomsTariffCodeTable_IN                                  = projTableTaxExtensionIN.CustomsTariffCodeTable;
        #    ledgerJournalTransTaxExtensionIN.DirectSettlement               = projTableTaxExtensionIN.DirectSettlement;
        #    this.ExciseRecordType_IN                                        = projTableTaxExtensionIN.ExciseRecordType;
        #    this.ExciseTariffCodes_IN                                       = projTableTaxExtensionIN.ExciseTariffCodes;
        #    this.SalesTaxFormTypes_IN                                       = projTableTaxExtensionIN.SalesTaxFormTypes;
        #    this.ServiceCodeTable_IN                                        = projTableTaxExtensionIN.ServiceCodeTable;
        #    ledgerJournalTransTaxExtensionIN.TaxInventVATCommodityCodeId    = projTableTaxExtensionIN.TaxInventVATCommodityCodeId;
        #    this.packledgerJournalTransTaxExtensionIN(ledgerJournalTransTaxExtensionIN);
        #}
        #
      ENDSOURCE
      SOURCE #setTaxWithholdEditStatus_BR
        #private void setTaxWithholdEditStatus_BR()
        #{
        #    boolean isCustVendAccType = (this.AccountType == LedgerJournalACType::Cust || this.AccountType == LedgerJournalACType::Vend);
        #
        #    if (!(isCustVendAccType)
        #         || ((isCustVendAccType) && this.Invoice)
        #         || !this.hasTaxWithholdSetting_BR())
        #    {
        #        this.setNotApplicableTaxWithholdEditStatus_BR();
        #    }
        #    else if (this.getPaymentExtension_BR().TaxWithholdEditStatus_BR != LedgerTransTaxWithholdEditStatus_BR::Closed)
        #    {
        #        if (this.PaymentStatus != CustVendPaymStatus::None || this.NoEdit ==  NoYes::Yes)
        #        {
        #            this.closeTaxWithholdEditStatus_BR();
        #        }
        #        else // since it could have been in NotApplicable status at this moment
        #        {
        #            this.openTaxWithholdEditStatus_BR();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #splitPaymentInvoiceSettled
        #public server void splitPaymentInvoiceSettled(
        #    LedgerJournalEngine _ledgerJournalEngine,
        #    TransDate           _transDate = dateNull())
        #{
        #    SpecTrans               localSpecTrans;
        #    LedgerJournalTrans      localLedgerJournalTrans = this;
        #    CustVendSettlement      localSettlement         = this.setCustVendSettlementbuffer();
        #    boolean                 first                   = true;
        #    Counter                 idx;
        #    container               conRecid;
        #    LineNum                 lastLineNum;
        #    AmountCur               amountCur;
        #
        #    ttsbegin;
        #
        #    // This is called during the Bill of Exchange and Promissory Note processing and will always
        #    // occur in the context of a single company.  As a result, there is no need to cross
        #    // company boundaries in the code below.
        #
        #    //create a ledgerJournalTrans for each specTrans
        #    while select forupdate localSpecTrans
        #        where localSpecTrans.SpecTableId    == this.TableId &&
        #              localSpecTrans.SpecRecId      == this.RecId &&
        #              localSpecTrans.SpecCompany    == this.company()
        #    {
        #        // because the first specTrans shall reamin attached to the original ledgerJournalTrans
        #        select firstonly DueDate, TransDate from localSettlement
        #            where localSettlement.TableId   == localSpecTrans.RefTableId
        #               && localSettlement.RecId     == localSpecTrans.RefRecId
        #               && localSettlement.DataAreaId == localSpecTrans.RefCompany;
        #
        #        localLedgerJournalTrans.Due             = localSettlement.DueDate  ? localSettlement.DueDate : localSettlement.TransDate;
        #        localLedgerJournalTrans.TransDate       = _transDate != dateNull() ? _transDate              : localLedgerJournalTrans.Due;
        #        localLedgerJournalTrans.SettleVoucher   = SettlementType::SelectedTransact;
        #
        #        if (first)
        #        {
        #            lastLineNum = LedgerJournalTrans::lastLineNum(this.JournalNum);
        #            first       = false;
        #        }
        #        else
        #        {
        #            // create new LedgerJournalTrans and attach the settlement to it
        #            lastLineNum++;
        #            localLedgerJournalTrans.Voucher = LedgerJournalTrans::splitCreateNewVoucher(this.JournalNum);
        #            localLedgerJournalTrans.LineNum = lastLineNum;
        #            localLedgerJournalTrans.insert();
        #
        #            localSpecTrans.SpecRecId = localLedgerJournalTrans.RecId;
        #
        #            localSpecTrans.update();
        #        }
        #        amountCur = Currency::curAmount2CurAmount(localSpecTrans.Balance01,
        #                                                  localSpecTrans.Code,
        #                                                  localLedgerJournalTrans.CurrencyCode,
        #                                                  localLedgerJournalTrans.TransDate);
        #        if (amountCur < 0)
        #        {
        #            localLedgerJournalTrans.AmountCurDebit  = abs(amountCur);
        #            localLedgerJournalTrans.AmountCurCredit = 0;
        #        }
        #        else
        #        {
        #            localLedgerJournalTrans.AmountCurCredit = abs(amountCur);
        #            localLedgerJournalTrans.AmountCurDebit  = 0;
        #        }
        #        localLedgerJournalTrans.write();
        #        conRecid += localLedgerJournalTrans.RecId;
        #    }
        #    for (idx = conLen(conRecid);
        #         idx;
        #         idx--)
        #    {
        #        localLedgerJournalTrans = LedgerJournalTrans::findRecId(conPeek(conRecid,idx), true);
        #        localLedgerJournalTrans.fillPaymentNotes();
        #        _ledgerJournalEngine.settleTransUpdate(localLedgerJournalTrans);
        #        _ledgerJournalEngine.calcPaymentFee(localLedgerJournalTrans);
        #    }
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #splitPaymentTAN_IN
        #/// <summary>
        #/// Splits payment.
        #/// </summary>
        #/// <param name="_transDate">
        #/// The transaction date.
        #/// </param>
        #public server void splitPaymentTAN_IN(TransDate _transDate = dateNull())
        #{
        #    SpecTrans                       specTrans;
        #    VendTrans                       vendTrans;
        #    VendInvoiceJour                 vendInvoiceJour;
        #    VendInvoiceTrans                vendInvoiceTrans;
        #    VendInvoiceTransTaxExtensionIN  vendInvoiceTransTaxExtension;
        #    VendTransOpen                   vendTransOpen;
        #    LedgerJournalTrans              localLedgerJournalTrans = this;
        #    boolean                         first                   = true;
        #    AmountCur                       amountSum               = 0;
        #    TaxWithholdTAN_IN               tanNumber;
        #    container                       conRecid;
        #    LineNum                         lastLineNum             = 0;
        #    TaxWithholdSettleTrans_IN       taxWithholdSettleTrans;
        #
        #    ttsbegin;
        #    while select forupdate specTrans
        #        where specTrans.SpecTableId == this.TableId &&
        #              specTrans.SpecRecId   == this.RecId   &&
        #              specTrans.SpecCompany == this.company()
        #    {
        #        select firstonly DueDate, TransDate, AccountNum, RefRecId, TaxWithholdRegNumber_IN from vendTransOpen
        #            where vendTransOpen.TableId     == specTrans.RefTableId
        #               && vendTransOpen.RecId       == specTrans.RefRecId
        #               && vendTransOpen.DataAreaId  == specTrans.RefCompany
        #               && vendTransOpen.TaxWithholdRegNumber_IN;
        #
        #        tanNumber = TaxWithholdRegNumbers_IN::find(vendTransOpen.TaxWithholdRegNumber_IN).RegistrationNumber ?
        #        TaxWithholdRegNumbers_IN::find(vendTransOpen.TaxWithholdRegNumber_IN).RegistrationNumber : '';
        #
        #        select firstonly CompanyLocation_IN from vendInvoiceTrans
        #            join RecId from vendInvoiceJour
        #                where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
        #                   && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
        #                   && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
        #                   && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
        #                   && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId
        #                join RecId from vendTrans
        #                    where vendTrans.AccountNum           == vendTransOpen.AccountNum
        #                       && vendTrans.RecId                == vendTransOpen.RefRecId
        #                       &&  vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
        #                       && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
        #                       && vendInvoiceJour.InvoiceDate    == vendTrans.TransDate
        #                join TaxInformation_IN from vendInvoiceTransTaxExtension
        #                    where vendInvoiceTrans.RecId == vendInvoiceTransTaxExtension.VendInvoiceTrans;
        #
        #        if (!first)
        #        {
        #            if (TaxWithholdRegNumbers_IN::find(TaxInformation_IN::find(LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(localLedgerJournalTrans.RecId).TaxInformation_IN).tan).RegistrationNumber != tanNumber)
        #            {
        #                lastLineNum++;
        #
        #                if (amountSum < 0)
        #                {
        #                    localLedgerJournalTrans.AmountCurDebit  = -Currency::amount(amountSum, localLedgerJournalTrans.CurrencyCode);
        #                    localLedgerJournalTrans.AmountCurCredit = 0;
        #                }
        #                else
        #                {
        #                    localLedgerJournalTrans.AmountCurCredit = Currency::amount(amountSum, localLedgerJournalTrans.CurrencyCode);
        #                    localLedgerJournalTrans.AmountCurDebit  = 0;
        #                }
        #                localLedgerJournalTrans.write();
        #                localLedgerJournalTrans.calcPaymentFee();
        #
        #                localLedgerJournalTrans.TransDate           = _transDate;
        #                if (vendInvoiceTrans)
        #                {
        #                    localLedgerJournalTrans.CompanyLocation_IN  = vendInvoiceTrans.CompanyLocation_IN;
        #                }
        #                else
        #                {
        #                    this.initTaxInfomation_IN(this.Company ? this.Company : curext());
        #                }
        #                localLedgerJournalTrans.Voucher             = LedgerJournalTrans::splitCreateNewVoucher(this.JournalNum);
        #                localLedgerJournalTrans.LineNum             = LedgerJournalTrans::lastLineNum(this.JournalNum) + 1;
        #                localLedgerJournalTrans.SettleVoucher       = SettlementType::SelectedTransact;
        #                localLedgerJournalTrans.insert();
        #                conRecid += localLedgerJournalTrans.RecId;
        #                amountSum = 0;
        #
        #                vendTrans = VendTrans::find(vendTransOpen.RefRecId);
        #                select sum(TaxAmount) from taxWithholdSettleTrans
        #                    where taxWithholdSettleTrans.Voucher == vendTrans.Voucher
        #                        && taxWithholdSettleTrans.Mark    == NoYes::Yes
        #                        && taxWithholdSettleTrans.Closed  == NoYes::No;
        #                if (taxWithholdSettleTrans.TaxAmount)
        #                {
        #                    taxWithholdSettleTrans.updateLedgerVoucher(localLedgerJournalTrans.Voucher, vendTrans.Voucher);
        #                }
        #            }
        #            specTrans.SpecRecId = localLedgerJournalTrans.RecId;
        #            specTrans.update();
        #        }
        #        else
        #        {
        #            lastLineNum = LedgerJournalTrans::lastLineNum(this.JournalNum);
        #            first       = false;
        #            localLedgerJournalTrans.TransDate           = _transDate;
        #            conRecid += localLedgerJournalTrans.RecId;
        #        }
        #        amountSum += Currency::curAmount2CurAmount(specTrans.Balance01,
        #                                                   specTrans.Code,
        #                                                   localLedgerJournalTrans.CurrencyCode,
        #                                                   localLedgerJournalTrans.TransDate,
        #                                                   false);
        #    }
        #
        #    if (!first)
        #    {
        #        if (amountSum < 0)
        #        {
        #            localLedgerJournalTrans.AmountCurDebit  = -Currency::amount(amountSum, localLedgerJournalTrans.CurrencyCode);
        #            localLedgerJournalTrans.AmountCurCredit = 0;
        #        }
        #        else
        #        {
        #            localLedgerJournalTrans.AmountCurCredit = Currency::amount(amountSum, localLedgerJournalTrans.CurrencyCode);
        #            localLedgerJournalTrans.AmountCurDebit  = 0;
        #        }
        #        localLedgerJournalTrans.write();
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #swapAccountOffsetAccount
        #public void swapAccountOffsetAccount()
        #{
        #    #ISOCountryRegionCodes
        #    LedgerJournalTrans  ledgerJournalTransSaveTmp;
        #
        #    ledgerJournalTransSaveTmp.data(this);
        #    this.AccountType           = this.OffsetAccountType;
        #    this.LedgerDimension       = this.OffsetLedgerDimension;
        #
        #    switch(ledgerJournalTransSaveTmp.ledgerJournalTable().JournalType)
        #    {
        #        case LedgerJournalType::VendPromissoryNoteDraw:
        #            if(ledgerJournalTransSaveTmp.LedgerDimension == this.LedgerDimension)
        #                this.DefaultDimension  = ledgerJournalTransSaveTmp.DefaultDimension;
        #            break;
        #        default:
        #            this.DefaultDimension      = this.OffsetDefaultDimension;
        #    }
        #
        #    this.Company               = this.OffsetCompany ? this.OffsetCompany : this.Company;
        #    this.Txt                   = this.OffsetTxt ? this.OffsetTxt : this.Txt;
        #    this.AmountCurDebit        = this.AmountCurCredit;
        #
        #    this.OffsetAccountType     = ledgerJournalTransSaveTmp.AccountType;
        #    this.OffsetLedgerDimension = ledgerJournalTransSaveTmp.LedgerDimension;
        #    this.OffsetDefaultDimension = ledgerJournalTransSaveTmp.DefaultDimension;
        #    this.OffsetCompany         = ledgerJournalTransSaveTmp.Company;
        #    this.OffsetTxt             = ledgerJournalTransSaveTmp.Txt;
        #    this.AmountCurCredit       = ledgerJournalTransSaveTmp.AmountCurDebit;
        #
        #    this.CashDiscAmount        = -this.CashDiscAmount;
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        #    {
        #        this.AccountAgreementId_RU       = this.OffsetAccountAgreementId_RU;
        #        this.OffsetAccountAgreementId_RU = ledgerJournalTransSaveTmp.AccountAgreementId_RU;
        #    }
        #    // // <GEERU><GEEU>
        #    if (this.OffsetPostingProfile_RU && RCashParameters::isCashModuleEnabled())
        #    {
        #        this.PostingProfile          = this.OffsetPostingProfile_RU;
        #        this.OffsetPostingProfile_RU = ledgerJournalTransSaveTmp.PostingProfile;
        #    }
        #}
      ENDSOURCE
      SOURCE #taxAmountInCostPrice
        #//BP Deviation Documented
        #server display TaxAmountJournal taxAmountInCostPrice()
        #{
        #    TaxTrans            taxTrans;
        #    TaxAmountJournal    taxInCostPrice;
        #    LedgerJournalTable  ledgerJournalTable;
        #    TaxCalculation      taxCalculation;
        #
        #    if (this.ledgerJournalTable().Posted)
        #    {
        #        select sum(TaxInCostPriceRegulated) from taxTrans
        #            where taxTrans.TransDate    == this.TransDate
        #               && taxTrans.Voucher      == this.Voucher
        #               && taxTrans.JournalNum   == this.JournalNum
        #               && taxTrans.SourceRecId  == this.RecId
        #               && taxTrans.TaxAutogenerated == NoYes::No;
        #        taxInCostPrice = taxTrans.TaxInCostPriceRegulated;
        #
        #        select sum(TaxInCostPrice) from taxTrans
        #            where taxTrans.TransDate    == this.TransDate
        #               && taxTrans.Voucher      == this.Voucher
        #               && taxTrans.JournalNum   == this.JournalNum
        #               && taxTrans.SourceRecId  == this.RecId
        #               && taxTrans.TaxAutogenerated == NoYes::Yes;
        #        taxInCostPrice += taxTrans.TaxInCostPrice;
        #
        #        return abs(taxInCostPrice);
        #    }
        #    else
        #    {
        #        ledgerJournalTable = this.ledgerJournalTable();
        #
        #        if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice))
        #        {
        #            TaxUncommitted::getActualTaxInCostPriceForSourceLine(this.TableId, this.RecId);
        #        }
        #        else
        #        {
        #            taxCalculation = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this);
        #
        #            taxInCostPrice = taxCalculation.totalTaxInCostPrice(this.RecId);
        #        }
        #
        #        return abs(taxInCostPrice);
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #taxAmountJournal
        #//BP Deviation Documented
        #server display TaxAmountJournal taxAmountJournal()
        #{
        #    LedgerJournalTable ledgerJournalTable;
        #    TaxAmountJournal   taxAmountCur = 0;
        #
        #    ledgerJournalTable= LedgerJournalTable::find(this.JournalNum);
        #
        #    if (ledgerJournalTable.Posted)
        #    {
        #        taxAmountCur = Tax::taxTotalVoucherDateRecId(this.Voucher, this.TransDate, this.RecId);
        #    }
        #    else
        #    {
        #        taxAmountCur = 0;
        #    }
        #
        #    return taxAmountCur;
        #}
      ENDSOURCE
      SOURCE #totalTaxAmountForInvoice
        #/// <summary>
        #/// Gets the total tax amount for an invoice.
        #/// </summary>
        #/// <param name="_includeActualTax">
        #/// Indicates whether the actual tax or the calculated tax is retrieved.
        #/// </param>
        #/// <param name="_includeUseTax">
        #/// Indicates whether the use tax is included in the tax amount.
        #/// </param>
        #/// <param name="_useTransactionalCurrency">
        #/// Indicates whether the tax amount is retrieved in the transaction or accounting currency.
        #/// </param>
        #/// <returns>
        #/// The tax amount for the invoice.
        #/// </returns>
        #public TaxAmountCur totalTaxAmountForInvoice(boolean _includeActualTax = true, boolean _includeUseTax = false, boolean _useTransactionalCurrency = true)
        #{
        #    LedgerJournalTable ledgerJournalTable;
        #    TaxCalculation taxCalculation;
        #
        #    if (!_includeActualTax && !_useTransactionalCurrency)
        #    {
        #        Error::wrongUseOfFunction(funcName());
        #    }
        #
        #    ledgerJournalTable = this.ledgerJournalTable();
        #
        #    if (!TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice))
        #    {
        #        taxCalculation = LedgerJournalTrans::getTaxInstance(ledgerJournalTable.JournalNum, this.Voucher, this.Invoice, false, this);
        #
        #        if (_includeActualTax)
        #        {
        #            return taxCalculation.totalTaxAmount(_includeUseTax);
        #        }
        #        else
        #        {
        #            return taxCalculation.totalTaxAmountCalculated(false);
        #        }
        #    }
        #
        #
        #    if (_includeActualTax)
        #    {
        #        return TaxUncommitted::getActualTaxAmountForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice, _includeUseTax);
        #    }
        #    else
        #    {
        #        return TaxUncommitted::getCalculatedTaxAmountForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice, _includeUseTax);
        #    }
        #}
      ENDSOURCE
      SOURCE #totalTaxAmountSingleLine
        #/// <summary>
        #/// Gets the total tax amount for the current line.
        #/// </summary>
        #/// <param name="_includeActualTax">
        #/// Indicates whether the actual tax or calculated tax is retrieved.
        #/// </param>
        #/// <param name="_includeUseTax">
        #/// Indicates whether the use tax is included in the tax amount.
        #/// </param>
        #/// <param name="_useTransactionalCurrency">
        #/// Indicates whether the tax amount is retrieved in the transaction or accounting currency.
        #/// </param>
        #/// <returns>
        #/// The tax amount for the current line.
        #/// </returns>
        #public server TaxAmountCur totalTaxAmountSingleLine(boolean _includeActualTax = true, boolean _includeUseTax = false, boolean _useTransactionalCurrency = true)
        #{
        #    TaxAmountCur            taxAmountCur;
        #    XppILExecutePermission  xppILExecutePermission;
        #
        #    // Since tax calculation calls cost around 40ms minimum, ensure transition to Xpp IL before calculating
        #    xppILExecutePermission = new XppILExecutePermission();
        #    xppILExecutePermission.assert();
        #    [taxAmountCur] = runTableMethodIL(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, totalTaxAmountSingleLineIL), [this, _includeActualTax, _includeUseTax, _useTransactionalCurrency]);
        #    CodeAccessPermission::revertAssert();
        #
        #    return taxAmountCur;
        #}
      ENDSOURCE
      SOURCE #type
        #private List type(AxLedgerJournalTrans _axLedgerJournalTrans)
        #{
        #    AxLedgerJournalTrans    axLedgerJournalTrans;
        #
        #    // Because we have polymorphic business logic, we need to track state
        #    // to ensure the business logic is only executed once. Therefore, a
        #    // AxLedgerJournalTrans class is created to track state.
        #    axLedgerJournalTrans = _axLedgerJournalTrans;
        #    if (!axLedgerJournalTrans)
        #    {
        #        axLedgerJournalTrans = new AxLedgerJournalTrans();
        #        axLedgerJournalTrans.ledgerJournalTrans(this);
        #    }
        #
        #    return LedgerJournalTransType::construct(axLedgerJournalTrans);
        #}
      ENDSOURCE
      SOURCE #update
        #public void update()
        #{
        #    #ISOCountryRegionCodes
        #    LedgerJournalTrans              this_orig;
        #    LedgerJournalTrans_Project      ledgerJournalTrans_Project;
        #    LedgerJournalTrans_Asset        ledgerJournalTrans_Asset;
        #
        #    LedgerJournalTrans_RAsset       ledgerJournalTrans_RAsset;
        #    LedgerJournalTrans_RDeferrals   ledgerJournalTrans_RDeferrals;
        #    LedgerJournalTrans_RCash        ledgerJournalTrans_RCash;
        #    #ISOCountryRegionCodes
        #    boolean                         countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #    CustPaymModeTable               custPaymModeTable;
        #    LedgerJournalTable              ledgerJournalTable;
        #    boolean                         recalculateTaxes;
        #    boolean                         checkNACHARecord;
        #    boolean                         recalculateWithholdTaxes;
        #    HuExchOutflowType               exchOutflowType;
        #    boolean                         cashModuleEnabled = RCashParameters::isCashModuleEnabled();
        #    TAMDeduction                    tamDeduction;
        #
        #    if (cashModuleEnabled)
        #    {
        #        ttsbegin;
        #    }
        #    ledgerJournalTable = this.ledgerJournalTable();
        #
        #    this_orig = this.orig();
        #
        #    if (! this.CurrencyCode)
        #    {
        #        throw error("@SYS23229");
        #    }
        #
        #    if (! this.Company)
        #    {
        #        this.Company = curext();
        #    }
        #
        #    if (! this.OffsetCompany)
        #    {
        #        this.OffsetCompany = curext();
        #    }
        #
        #    if (this.Transfer)
        #    {
        #        this.TransactionType = LedgerTransType::Transfer;
        #    }
        #
        #    if (this.TaxCode)
        #    {
        #        this.updateTaxCode();
        #    }
        #
        #    if (!this.AcknowledgementDate)
        #    {
        #        this.AcknowledgementDate = this.TransDate;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && AssetParameters::checkAssetParameters_IN())
        #    {
        #        this.updateDerivedDepBookAmount_IN();
        #    }
        #
        #    this.checkAmount();
        #
        #    custPaymModeTable = CustPaymModeTable::find(this.PaymMode);
        #
        #    if (custPaymModeTable
        #        && custPaymModeTable.ClassId == classNum(CustOutPaym_NLClieOp03)
        #        && this.AccountType == LedgerJournalACType::Cust
        #        && this.OffsetAccountType == LedgerJournalACType::Bank)
        #    {
        #        this.BankAccountId = custPaymModeTable.parmPaymAccount();
        #    }
        #
        #    if (this.isSEPAPaymentRejected(custPaymModeTable, this_orig))
        #    {
        #        this.cancelMandateLogRecord();
        #    }
        #
        #    if ((this.OffsetLedgerDimension != this_orig.OffsetLedgerDimension ||
        #         this.OffsetAccountType != this_orig.OffsetAccountType ||
        #         this.PaymReference != this_orig.PaymReference) &&
        #         CustVendPaymJournalFee::existRefRecId(this.RecId))
        #    {
        #        this.updateFeeOffsetAccount();
        #    }
        #
        #    this.modifyVatDueDate_W();
        #
        #    if (this.AccountType != LedgerJournalACType::Vend && this.AccountType != LedgerJournalACType::Cust)
        #    {
        #        this.CustBankAccount = 0;
        #        this.VendBankAccount = 0;
        #        this.CustVendBankAccountId = "";
        #    }
        #    else
        #    {
        #        if (this.CustVendBankAccountId != "")
        #        {
        #            if (this.CustBankAccount == 0 && this.VendBankAccount == 0)
        #            {
        #                this.updateCustVendBankAccount();
        #            }
        #        }
        #        else
        #        {
        #            this.CustBankAccount = 0;
        #            this.VendBankAccount = 0;
        #        }
        #    }
        #
        #    if (countryRegion_RU)
        #    {
        #        this.updateBankPaymentOrderJour_RU();
        #        this.updatePaymentOrderBudgetTrans_RU();
        #    }
        #    // taxes are out of date to delete TaxUncommitted records.
        #    recalculateTaxes = this.deleteTaxUncommitted(ledgerJournalTable);
        #
        #    // Remove the journalNum tax cache that was set on \Classes\LedgerJournalTaxDocument\doTaxGroupExistsForDocument,
        #    // but only if tax data was changed on this buffer since updates to other fields of
        #    // the buffer would not impact whether or not taxes existed for the journal
        #    if (this.TaxGroup != this_orig.TaxGroup ||
        #        this.TaxItemGroup != this_orig.TaxItemGroup ||
        #        this.TaxCode != this_orig.TaxCode)
        #    {
        #        LedgerJournalTaxDocument::clearCachedTaxExistenceCheck(this.JournalNum);
        #    }
        #
        #    if (TaxWithholdParameters_IN::checkTaxParameters())
        #    {
        #        recalculateWithholdTaxes = this.deleteTaxWitholdUncommitted_IN(ledgerJournalTable, recalculateTaxes);
        #    }
        #
        #    if (this.PaymentStatus != this_orig.PaymentStatus)
        #    {
        #        this.processPaymentBankDocument();
        #    }
        #
        #    exchOutflowType = RCashParameters::find().ExchOutflowType_HU;
        #    if (exchOutflowType == HuExchOutflowType::FIFO &&
        #        (this.isCashTransaction_RU() ||
        #         this_orig.isCashTransaction_RU())         &&
        #        (
        #         this.TransDate    != this_orig.TransDate                           ||
        #         this.CurrencyCode != this_orig.CurrencyCode                        ||
        #         this.amount()     != this_orig.amount()                            ||
        #         ((this.AccountType             == LedgerJournalACType::RCash ||
        #           this_orig.AccountType        == LedgerJournalACType::RCash) &&
        #           this.LedgerDimension    != this_orig.LedgerDimension)                      ||
        #         ((this.OffsetAccountType       == LedgerJournalACType::RCash ||
        #           this_orig.OffsetAccountType  == LedgerJournalACType::RCash) &&
        #           this.OffsetLedgerDimension != this_orig.OffsetLedgerDimension)
        #        )
        #       )
        #    {
        #        this.rollbackFIFOLineExchRate_HU();
        #    }
        #    this.updatePaySheetTrans_RU();
        #    this.SysExtensionSerializerMap::postUpdate();
        #
        #    ttsbegin;
        #    super();
        #    this.SysExtensionSerializerMap::postUpdate();
        #    ttscommit;
        #
        #    switch (exchOutflowType)
        #    {
        #        case HuExchOutflowType::FIFO :
        #            if ((this.isCashTransaction_RU() ||
        #                 this_orig.isCashTransaction_RU())         &&
        #                (
        #                 this.TransDate    != this_orig.TransDate                           ||
        #                 this.CurrencyCode != this_orig.CurrencyCode                        ||
        #                 this.amount()     != this_orig.amount()                            ||
        #                 ((this.AccountType             == LedgerJournalACType::RCash ||
        #                   this_orig.AccountType        == LedgerJournalACType::RCash) &&
        #                   this.LedgerDimension    != this_orig.LedgerDimension)                      ||
        #                 ((this.OffsetAccountType       == LedgerJournalACType::RCash ||
        #                   this_orig.OffsetAccountType  == LedgerJournalACType::RCash) &&
        #                   this.OffsetLedgerDimension != this_orig.OffsetLedgerDimension)
        #                )
        #               )
        #            {
        #                this.updateFIFOLineExchRate_HU();
        #            }
        #            break;
        #
        #        case HuExchOutflowType::AverageRate :
        #            this.calcAverageLinesExchRate_HU();
        #            break;
        #    }
        #
        #    if (!this.DelayTaxCalculation && (recalculateTaxes || !TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice)))
        #    {
        #        // if the journal is posted, we don't want to recalculate taxes.
        #        // For the invoice register, some updates happen prior to the Posted flag gets marked as true.
        #        // In this case, checking the transferred by field is a reliable way to tell it was posted and that
        #        // we don't want to recalculate taxes.
        #        // documents in the invoice pool are already posted and should not have taxes calculated.
        #        if (!ledgerJournalTable.Posted && !(ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger && this.TransferredBy) &&
        #        !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool))
        #        {
        #            // if taxes were deleted then recalculate taxes
        #            LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, true
        #            , null, false, this.TransDate
        #            );
        #        }
        #    }
        #    if (TaxWithholdParameters_IN::checkTaxParameters())
        #    {
        #        if(recalculateWithholdTaxes || !TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        #        {
        #            // delete the cache for the document header if the threshold is not exceeded.
        #            // because this will impact the tax calculation for other journal lines.
        #            if (!TaxWithholdCalculation_IN::checkRecoverableAccount(this)
        #                && TaxWithholdTrans_IN::isThresholdExceededForAccount(this.parmAccount(),
        #                                                                      this.tdsGroup_IN? this.tdsGroup_IN : this.tcsGroup_IN,
        #                                                                      this.TransDate))
        #            {
        #                if (TaxWithholdUncommitted_IN::existByDocumentId(ledgerJournalTable.TableId, ledgerJournalTable.RecId))
        #                {
        #                    TaxWithholdUncommitted_IN::deleteForDocumentHeader(ledgerJournalTable.TableId, ledgerJournalTable.RecId);
        #                }
        #                if (!ledgerJournalTable.Posted)
        #                {
        #                    TaxVoucherService::calculateWithholdTaxForJournal_IN(this.JournalNum);
        #                }
        #            }
        #            else
        #            {
        #                if (!ledgerJournalTable.Posted && !(ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger && this.TransferredBy) &&
        #                    !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool))
        #                {
        #                    // if taxes were deleted then recalculate taxes
        #                    LedgerJournalTrans::getTaxWithholdInstance_IN(this.JournalNum, this.Voucher, this.Invoice, true);
        #                }
        #            }
        #        }
        #    }
        #
        #    if (this.PaymentStatus != this_orig.PaymentStatus)
        #    {
        #        this.updateInvoicePaymStatus();
        #    }
        #
        #
        #    if (this.TaxWithholdGroup != this_orig.TaxWithholdGroup && !BrazilParameters::isEnabled())
        #    {
        #        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH, #isoSA, #isoGB, #isoIE]))
        #        {
        #            new TaxWithhold(this).createAllTaxWithholdTrans();
        #            TaxWithhold::clearCache();
        #        }
        #    }
        #    else
        #    {
        #        if (this.TaxWithholdGroup &&
        #                (this.CurrencyCode    != this_orig.CurrencyCode  ||
        #                 this.Triangulation   != this_orig.Triangulation ||
        #                 this.ExchRate        != this_orig.ExchRate      ||
        #                 this.ExchRateSecond  != this_orig.ExchRateSecond ||
        #                 this.TransDate       != this_orig.TransDate))
        #        {
        #             new TaxWithhold(this).updateAllTaxWithholdTransJournal();
        #        }
        #    }
        #
        #    if (this.NegInstId && this.Due != this_orig.Due)
        #    {
        #        switch (this.ledgerJournalTable().JournalType)
        #        {
        #            case LedgerJournalType::CustBillOfExchangeDraw:
        #                CustBillOfExchangeJour::updateDueDate(this.NegInstId, this.Due);
        #                break;
        #
        #            case LedgerJournalType::VendPromissoryNoteDraw:
        #                VendPromissoryNoteJour::updateDueDate(this.NegInstId, this.Due);
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    // Update account number for BOE
        #    if (this.NegInstId && this.LedgerDimension != this_orig.LedgerDimension)
        #    {
        #        switch (this.ledgerJournalTable().JournalType)
        #        {
        #            case LedgerJournalType::CustBillOfExchangeDraw:
        #                CustBillOfExchangeJour::updateAccountNum(this.NegInstId, this.parmAccount());
        #                break;
        #
        #            case LedgerJournalType::VendPromissoryNoteDraw:
        #                VendPromissoryNoteJour::updateAccountNum(this.NegInstId, this.parmAccount());
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    // record has become unassociated with a project - remove the obsolete related project information
        #    if ((this_orig.AccountType == LedgerJournalACType::Project ||
        #         (this_orig.OffsetAccountType == LedgerJournalACType::Project && this_orig.OffsetLedgerDimension)) &&
        #
        #        (this.AccountType != LedgerJournalACType::Project &&
        #         (this.OffsetAccountType != LedgerJournalACType::Project ||
        #          (this.OffsetAccountType == LedgerJournalACType::Project && !this.OffsetLedgerDimension))))
        #    {
        #        delete_from ledgerJournalTrans_Project where
        #            ledgerJournalTrans_Project.RefRecId == this.RecId;
        #    }
        #
        #    // record has become unassociated with an asset - remove the obsolete related asset information
        #    if ((this_orig.AccountType == LedgerJournalACType::FixedAssets ||
        #         (this_orig.OffsetAccountType == LedgerJournalACType::FixedAssets && this_orig.OffsetLedgerDimension)) &&
        #
        #        (this.AccountType != LedgerJournalACType::FixedAssets &&
        #         (this.OffsetAccountType != LedgerJournalACType::FixedAssets ||
        #          (this.OffsetAccountType == LedgerJournalACType::FixedAssets && !this.OffsetLedgerDimension))))
        #    {
        #        delete_from ledgerJournalTrans_Asset where
        #            ledgerJournalTrans_Asset.RefRecId == this.RecId;
        #    }
        #
        #    if (countryRegion_RU)
        #    {
        #        if ((this_orig.AccountType == LedgerJournalACType::FixedAssets_RU ||
        #             (this_orig.OffsetAccountType == LedgerJournalACType::FixedAssets_RU && this_orig.parmOffsetLedgerDimension())) &&
        #            (this.AccountType != LedgerJournalACType::FixedAssets_RU &&
        #             (this.OffsetAccountType != LedgerJournalACType::FixedAssets_RU ||
        #              (this.OffsetAccountType == LedgerJournalACType::FixedAssets_RU && !this.parmOffsetLedgerDimension()))))
        #        {
        #            delete_from ledgerJournalTrans_RAsset where
        #                ledgerJournalTrans_RAsset.RefRecId == this.RecId;
        #        }
        #
        #        if ((this_orig.AccountType == LedgerJournalACType::RDeferrals ||
        #             (this_orig.OffsetAccountType == LedgerJournalACType::RDeferrals && this_orig.parmOffsetLedgerDimension())) &&
        #            (this.AccountType != LedgerJournalACType::RDeferrals &&
        #             (this.OffsetAccountType != LedgerJournalACType::RDeferrals ||
        #              (this.OffsetAccountType == LedgerJournalACType::RDeferrals && !this.parmOffsetLedgerDimension()))))
        #        {
        #            delete_from ledgerJournalTrans_RDeferrals where
        #                ledgerJournalTrans_RDeferrals.RefRecId == this.RecId;
        #        }
        #    }
        #
        #    if (cashModuleEnabled)
        #    {
        #        if ((this_orig.AccountType == LedgerJournalACType::RCash ||
        #             (this_orig.OffsetAccountType == LedgerJournalACType::RCash && this_orig.parmOffsetLedgerDimension())) &&
        #            (this.AccountType != LedgerJournalACType::RCash &&
        #             (this.OffsetAccountType != LedgerJournalACType::RCash ||
        #              (this.OffsetAccountType == LedgerJournalACType::RCash && !this.parmOffsetLedgerDimension()))))
        #        {
        #            delete_from ledgerJournalTrans_RCash where
        #                ledgerJournalTrans_RCash.RefRecId == this.RecId;
        #        }
        #    }
        #
        #    // update the LedgerJournalTransVoucherTemplate record for JournalNum or Voucher change
        #    if (this_orig.Voucher != this.Voucher ||
        #        this_orig.JournalNum != this.JournalNum)
        #    {
        #        LedgerJournalTransVoucherTemplate::updateVoucherTemplate(this, this_orig.JournalNum, this_orig.Voucher);
        #        this.updateLedgerJournalTransFeeVoucher(this_orig.JournalNum, this_orig.Voucher, this.Voucher, this_orig.RecId);
        #    }
        #
        #    if (cashModuleEnabled)
        #    {
        #        ttscommit;
        #    }
        #
        #    if (this_orig.PaymMode
        #        && this_orig.PaymMode != this.PaymMode)
        #    {
        #        if (this.AccountType == LedgerJournalACType::Cust)
        #        {
        #            if (CustOutPaym_NACHA_IAT::isIATNACHAFormat(this_orig.PaymMode))
        #            {
        #                CustVendNACHAIATInfoTable_US::deleteByVoucher(this.RecId);
        #            }
        #        }
        #        else if(this.AccountType == LedgerJournalACType::Vend)
        #        {
        #            if (VendOutPaym_NACHA_IAT::isIATNACHAFormat(this_orig.PaymMode))
        #            {
        #                CustVendNACHAIATInfoTable_US::deleteByVoucher(this.RecId);
        #            }
        #        }
        #    }
        #
        #    // If the Debit value has changed to the credit, or negative credit changed positive credit,
        #    // and NACHA information was previously entered, the NACHA record needs to be deleted.
        #    if (this.PaymMode)
        #    {
        #        if (this.AccountType == LedgerJournalACType::Cust
        #            && CustOutPaym_NACHA_IAT::isIATNACHAFormat(this.PaymMode))
        #        {
        #            checkNACHARecord = true;
        #        }
        #        else if(this.AccountType == LedgerJournalACType::Vend
        #            && VendOutPaym_NACHA_IAT::isIATNACHAFormat(this_orig.PaymMode))
        #        {
        #            checkNACHARecord = true;
        #        }
        #
        #        if (checkNACHARecord
        #            && ((this_orig.AmountCurCredit < 0 && this.AmountCurCredit > 0)
        #            || (this_orig.AmountCurDebit > 0 && this.AmountCurDebit < 0)
        #            || (this_orig.AmountCurDebit > 0 && this.AmountCurCredit > 0)
        #            || (this_orig.AmountCurCredit < 0 && this.AmountCurDebit < 0)))
        #        {
        #            CustVendNACHAIATInfoTable_US::deleteByVoucher(this.RecId);
        #        }
        #    }
        #
        #    //start update negotiable instrument
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) && this.NegInstId  &&
        #        (this.parmLedgerDimension() != this_orig.parmLedgerDimension()|| this.Due!= this_orig.Due))
        #    {
        #        this.negotiableInstrumentUpdate();
        #    }
        #
        #    // if TAMPromotionsManagement and the journal has a new value and is linked to a deduction, then update the deduction.
        #    if (this_orig.AmountCurCredit   != this.AmountCurCredit
        #        && isConfigurationkeyEnabled(configurationKeyNum(TAMPromotionsManagement)))
        #    {
        #        ttsbegin;
        #        tamDeduction    = TAMDeduction::findByLedgerJournalTransRecId(this.RecId, true);
        #        if (tamDeduction)
        #        {
        #            tamDeduction.AmountCur  = this.AmountCurCredit;
        #            tamDeduction.update();
        #        }
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateAmountCurDelete
        #public void updateAmountCurDelete(
        #    Amount          _amount,
        #    CurrencyCode    _oldCurrencyCode)
        #{
        #    if (this.AmountCurCredit)
        #    {
        #        this.AmountCurCredit += (Currency::curAmount2CurAmount(  0,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true))
        #                                - (Currency::curAmount2CurAmount(_amount,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true));
        #        if (this.AmountCurCredit < 0)
        #        {
        #            this.AmountCurDebit   = abs(this.AmountCurCredit);
        #            this.AmountCurCredit  = 0;
        #        }
        #    }
        #    else
        #    {
        #        this.AmountCurDebit -= (Currency::curAmount2CurAmount(0,
        #                                                             _oldCurrencyCode,
        #                                                             this.CurrencyCode,
        #                                                             this.TransDate,true))
        #                            - (Currency::curAmount2CurAmount(_amount,
        #                                                             _oldCurrencyCode,
        #                                                             this.CurrencyCode,
        #                                                             this.TransDate,true));
        #        if (this.AmountCurDebit < 0)
        #        {
        #            this.AmountCurCredit = abs(this.AmountCurDebit);
        #            this.AmountCurDebit  = 0;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateAmountCurWrite
        #public void updateAmountCurWrite(
        #    Amount          _amount,
        #    Amount          _amountLocal,
        #    CurrencyCode    _oldCurrencyCode)
        #{
        #    if (this.AmountCurCredit)
        #    {
        #        this.AmountCurCredit -=   (Currency::curAmount2CurAmount(_amountLocal,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true))
        #                                - (Currency::curAmount2CurAmount(_amount,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true));
        #    }
        #    if (this.AmountCurDebit)
        #    {
        #        this.AmountCurDebit  +=   (Currency::curAmount2CurAmount(_amountLocal,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true))
        #                                - (Currency::curAmount2CurAmount(_amount,
        #                                                                 _oldCurrencyCode,
        #                                                                 this.CurrencyCode,
        #                                                                 this.TransDate,true));
        #    }
        #}
      ENDSOURCE
      SOURCE #updateAttachments_CN
        #private server void updateAttachments_CN()
        #{
        #    LedgerJournalTrans ledgerJournalTransLocal;
        #
        #    ttsbegin;
        #
        #    ledgerJournalTransLocal.skipDataMethods(true);
        #
        #    update_recordset ledgerJournalTransLocal
        #        setting Attachments_CN = this.Attachments_CN
        #        where ledgerJournalTransLocal.JournalNum == this.JournalNum
        #           && ledgerJournalTransLocal.Voucher    == this.Voucher
        #           && ledgerJournalTransLocal.RecId      != this.RecId;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateBankPaymentOrderJour_RU
        ##ISOCountryRegionCodes
        #server public void updateBankPaymentOrderJour_RU()
        #{
        #    BankPaymentOrderJour_RU     bankPaymentOrderJour;
        #
        #    ;
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        #    {
        #        if(this.BankChequeNum                                   &&
        #            ((this.AccountType   == LedgerJournalACType::Cust)  ||
        #             (this.AccountType   == LedgerJournalACType::Vend)) &&
        #            ((this.TransDate     != this.orig().TransDate)      ||
        #             (this.LineNum       != this.orig().LineNum)        ||
        #             (this.AccountType   != this.orig().AccountType)    ||
        #             (this.JournalNum    != this.orig().JournalNum)     ||
        #             (this.Voucher       != this.orig().Voucher)))
        #        {
        #            bankPaymentOrderJour = this.orig().bankPaymentOrderJour_RU(true);
        #
        #            if(bankPaymentOrderJour)
        #            {
        #                bankPaymentOrderJour.initFromLedgerJournalTrans(this);
        #                bankPaymentOrderJour.update();
        #            }
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #updateCustEPRemitInfo_BR
        #/// <summary>
        #/// Updates DocumnetType, BankFolder, Instrcution_1 and Instruction_2 in <c>CustEPRemitInfo_BR</c> table.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// A reference to the <c>ledgerJournalTrans</c> table.
        #/// </param>
        #/// <param name="_custTransEPRemit">
        #/// A reference to the <c>CustTransEPRemit_BR</c> table.
        #/// </param>
        #void updateCustEPRemitInfo_BR(LedgerJournalTrans _ledgerJournalTrans, CustTransEPRemit_BR _custTransEPRemit)
        #{
        #    CustEPRemitInfo_BR  custEPRemitInfoLoc;
        #    CustTransEPRemit_BR custTransEPRemitLoc;
        #
        #    custTransEPRemitLoc = _custTransEPRemit;
        #    ttsbegin;
        #    if (CustEPRemitInfo_BR::find(_ledgerJournalTrans.RecId,true))
        #    {
        #        select forupdate custEPRemitInfoLoc
        #            where custEPRemitInfoLoc.LedgerJournalTrans == _ledgerJournalTrans.RecId;
        #        custEPRemitInfoLoc.DocumentType  = custTransEPRemitLoc.DocumentType ;
        #        custEPRemitInfoLoc.BankFolder    = custTransEPRemitLoc.BankFolder ;
        #        custEPRemitInfoLoc.Instruction_1 = custTransEPRemitLoc.Instruction_1;
        #        custEPRemitInfoLoc.Instruction_2 = custTransEPRemitLoc.Instruction_2 ;
        #        custEPRemitInfoLoc.update();
        #    }
        #    else
        #    {
        #        custEPRemitInfoLoc.initFromLedgerJournalTrans(_ledgerJournalTrans);
        #        custEPRemitInfoLoc.DocumentType  = custTransEPRemitLoc.DocumentType ;
        #        custEPRemitInfoLoc.BankFolder    = custTransEPRemitLoc.BankFolder ;
        #        custEPRemitInfoLoc.Instruction_1 = custTransEPRemitLoc.Instruction_1;
        #        custEPRemitInfoLoc.Instruction_2 = custTransEPRemitLoc.Instruction_2 ;
        #        custEPRemitInfoLoc.insert();
        #    }
        #    ttscommit;
        #    custEPRemitInfoLoc.reread();
        #}
      ENDSOURCE
      SOURCE #updateCustVendBankAccount
        #/// <summary>
        #/// Saves the record ID of the <c>CustBankAccount</c> or <c>VendBankAccount</c> table in the
        #/// <c>CustBankAccount</c> or <c>VendBankAccount</c> fields to complete the relation.
        #/// </summary>
        #/// <param name="_clearField">
        #/// A Boolean value that indicates whether to clear the current references and the
        #/// <c>CustVendBankAccountID</c> field when the account type changes.
        #/// </param>
        #/// <remarks>
        #/// This upgrade script was introduced to fix the relations that using the <c>DEL_AccountNum</c> field.
        #/// </remarks>
        #public void updateCustVendBankAccount(boolean _clearField = false)
        #{
        #    VendBankAccount         vendBankAccount;
        #    CustBankAccount         custBankAccount;
        #    DimensionDisplayValue   accountNumber;
        #
        #    if (!_clearField &&
        #    (this.AccountType == LedgerJournalACType::Cust || this.AccountType == LedgerJournalACType::Vend))
        #    {
        #        accountNumber = DimensionAttributeValueCombination::getDisplayValue(this.LedgerDimension);
        #
        #        if (this.AccountType == LedgerJournalACType::Cust)
        #        {
        #            changecompany (this.Company)
        #            {
        #                select RecId from custBankAccount
        #                    where this.CustVendBankAccountId  == custBankAccount.AccountID    &&
        #                        custBankAccount.CustAccount == accountNumber;
        #            }
        #
        #            this.CustBankAccount = custBankAccount.RecId;
        #        }
        #        else if (this.AccountType == LedgerJournalACType::Vend)
        #        {
        #            changecompany (this.Company)
        #            {
        #                select RecId from vendBankAccount
        #                    where this.CustVendBankAccountId  == vendBankAccount.AccountID    &&
        #                        vendBankAccount.VendAccount == accountNumber;
        #            }
        #
        #            this.VendBankAccount = vendBankAccount.RecId;
        #        }
        #    }
        #    else
        #    {
        #        this.CustBankAccount = 0;
        #        this.VendBankAccount = 0;
        #        this.CustVendBankAccountId = "";
        #    }
        #}
      ENDSOURCE
      SOURCE #updateDerivedDepBookAmount_IN
        #/// <summary>
        #/// Update derived depreciation book buffer.
        #/// </summary>
        #public void updateDerivedDepBookAmount_IN()
        #{
        #    AssetBookIdPurchSalesInvent     bookIdLoc;
        #    AssetBookTableDerivedJournal    assetBookTableDerivedJournal;
        #    AssetDepBookTableDerivedJour    assetDepBookTableDerivedJournal;
        #
        #    bookIdLoc = LedgerJournalTrans_Asset::find(this.RecId).BookId;
        #    if (AssetBook::find(DimensionAttributeValueCombination::getMainAccountFromLedgerDimension(this.LedgerDimension), bookIdLoc).AssetGroupDepreciation_IN && bookIdLoc && this.orig().amount() != this.amount())
        #    {
        #        ttsbegin;
        #        while select forupdate assetBookTableDerivedJournal
        #            where assetBookTableDerivedJournal.RefRecId  == this.RecId
        #            && assetBookTableDerivedJournal.AmountCur == this.orig().amount()
        #        {
        #            assetBookTableDerivedJournal.AmountCur = this.amount();
        #            assetBookTableDerivedJournal.update();
        #        }
        #        if (isConfigurationkeyEnabled(configurationKeyNum(AssetDepBook)))
        #        {
        #            while select forupdate assetDepBookTableDerivedJournal
        #                where assetDepBookTableDerivedJournal.RefRecId  == this.RecId
        #                && assetDepBookTableDerivedJournal.AmountCur == this.orig().amount()
        #            {
        #                assetDepBookTableDerivedJournal.AmountCur = this.amount();
        #                assetDepBookTableDerivedJournal.update();
        #
        #            }
        #        }
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateEPRemitInfo_BR
        #/// <summary>
        #/// Updates the TypedLine, EPBarCodeInfo_BR in <c>VendEPRemitInfo_BR</c> table and
        #/// EPPaymentType_BR, EPPaymentWay_BR in <c>LedgerJournalTransPayment_BR</c> table when EPBarcodeInfo_BR
        #/// in <c>VendTransPayment_BR</c> changed
        #/// </summary>
        #void updateEPRemitInfo_BR()
        #{
        #    SpecTrans                       specTransLoc;
        #    VendEPRemitInfo_BR              vendEPRemitInfoLoc;
        #    CustTransEPRemit_BR             custTransEPRemitLoc;
        #    SpecTransManager                specTransManager;
        #    LedgerJournalTransPayment_BR    ledgerJournalTransPayment_BR;
        #
        #    DataAreaId                      a;
        #    VendTransOpen                   vendTransOpenLoc;
        #
        #    if (this.AccountType == LedgerJournalACType::Vend)
        #    {
        #        specTransManager = SpecTransManager::construct(this);
        #        if (specTransManager.getSpecTransCount() >= 1)
        #        {
        #            select specTransLoc
        #                where specTransLoc.SpecRecId == this.RecId
        #                    && specTransLoc.SpecTableId == tableNum(LedgerJournalTrans)
        #                    && specTransLoc.SpecCompany == this.company();
        #
        #            select epBarCodeInfo_BR from vendTransOpenLoc
        #                where vendTransOpenLoc.DataAreaId == specTransLoc.RefCompany
        #                    && vendTransOpenLoc.TableId   == specTransLoc.RefTableId
        #                    && vendTransOpenLoc.RecId     == specTransLoc.RefRecId;
        #
        #            if (vendTransOpenLoc.epBarCodeInfo_BR)
        #            {
        #                if (VendEPRemitInfo_BR::find(this.RecId))
        #                {
        #                    ttsbegin;
        #                    select forupdate vendEPRemitInfoLoc
        #                        where vendEPRemitInfoLoc.LedgerJournalTrans == this.RecId;
        #                    vendEPRemitInfoLoc.BarCodeInfo = vendTransOpenLoc.epBarCodeInfo_BR;
        #                    vendEPRemitInfoLoc.TypedLine   = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).TypedLine_BR;
        #                    vendEPRemitInfoLoc.update();
        #                    ttscommit;
        #                }
        #                else
        #                {
        #                    ttsbegin;
        #                    vendEPRemitInfoLoc.initFromLedgerJournalTrans(this);
        #                    vendEPRemitInfoLoc.BarCodeInfo = vendTransOpenLoc.epBarCodeInfo_BR;
        #                    vendEPRemitInfoLoc.TypedLine   = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).TypedLine_BR;
        #                    vendEPRemitInfoLoc.insert();
        #                    ttscommit;
        #                }
        #                vendEPRemitInfoLoc.reread();
        #            }
        #            ttsbegin;
        #
        #            ledgerJournalTransPayment_BR = this.getPaymentExtension_BR();
        #            if (!ledgerJournalTransPayment_BR)
        #            {
        #                ledgerJournalTransPayment_BR.initFromLedgerJournalTrans(this);
        #            }
        #            ledgerJournalTransPayment_BR.epPaymentType_BR = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).epPaymentType_BR;
        #            ledgerJournalTransPayment_BR.epPaymentWay_BR  = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).epPaymentWay_BR;
        #            this.packExtensionTable(ledgerJournalTransPayment_BR);
        #
        #            this.PaymMode = VendTrans::find(specTransLoc.vendTrans().RecId).PaymMode;
        #            this.PaymSpec = VendTrans::find(specTransLoc.vendTrans().RecId).PaymSpec;
        #            this.paymModeModified();
        #            this.update();
        #            ttscommit;
        #
        #            this.reread();
        #        }
        #    }
        #    else if (this.AccountType == LedgerJournalACType::Cust)
        #    {
        #        specTransManager = SpecTransManager::construct(this);
        #        if (specTransManager.getSpecTransCount() >= 1)
        #        {
        #            a = this.company();
        #
        #            select crosscompany specTransLoc
        #                where   specTransLoc.SpecRecId == this.RecId
        #                    && specTransLoc.SpecCompany == a;
        #
        #            select custTransEPRemitLoc
        #                where   custTransEPRemitLoc.CustTransOpenRefRecId == specTransLoc.custTransOpen().RecId;
        #
        #            if (custTransEPRemitLoc)
        #            {
        #                if(this.PaymMode)
        #                {
        #                    if ((CustPaymModeTable::find(this.PaymMode).ExportLayoutGroupId_BR ==
        #                        CustPaymModeTable::find(specTransLoc.custTrans().PaymMode).ExportLayoutGroupId_BR))
        #                    {
        #                        this.updateCustEPRemitInfo_BR(this,custTransEPRemitLoc);
        #                    }
        #                    else if ((CustPaymModeTable::find(this.PaymMode).ExportLayoutGroupId_BR !=
        #                        CustPaymModeTable::find(specTransLoc.custTrans().PaymMode).ExportLayoutGroupId_BR))
        #                    {
        #                        if (Box::yesNo("@GLS1171",DialogButton::Yes == DialogButton::Yes ))
        #                           this.updateCustEPRemitInfo_BR(this,custTransEPRemitLoc);
        #                    }
        #                }
        #                else
        #                {
        #                    this.updateCustEPRemitInfo_BR(this,custTransEPRemitLoc);
        #                }
        #            }
        #
        #            ttsbegin;
        #
        #            ledgerJournalTransPayment_BR = this.getPaymentExtension_BR();
        #            if (!ledgerJournalTransPayment_BR)
        #            {
        #                ledgerJournalTransPayment_BR.initFromLedgerJournalTrans(this);
        #            }
        #            if (!ledgerJournalTransPayment_BR.isFormDataSource())
        #            {
        #                ledgerJournalTransPayment_BR.epPaymentType_BR = CustTransPayment_BR::find(specTransLoc.custTrans().RecId).epPaymentType_BR;
        #                ledgerJournalTransPayment_BR.epPaymentWay_BR  = CustTransPayment_BR::find(specTransLoc.custTrans().RecId).epPaymentWay_BR;
        #                this.packExtensionTable(ledgerJournalTransPayment_BR);
        #            }
        #
        #            this.PaymMode = CustTrans::find(specTransLoc.custTrans().RecId).PaymMode;
        #            this.PaymSpec = CustTrans::find(specTransLoc.custTrans().RecId).PaymSpec;
        #            this.paymModeModified();
        #            this.update();
        #
        #            ttscommit;
        #
        #            this.reread();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateFeeOffsetAccount
        #public void updateFeeOffsetAccount()
        #{
        #    CustVendPaymJournalFee custVendPaymJournalFeeLocal;
        #    LedgerJournalTrans ledgerJournalTransLocal;
        #
        #    ttsbegin;
        #
        #    while select forupdate ledgerJournalTransLocal join custVendPaymJournalFeeLocal
        #        where custVendPaymJournalFeeLocal.RefRecId == this.RecId &&
        #            custVendPaymJournalFeeLocal.FeeTransRecId == ledgerJournalTransLocal.RecId
        #    {
        #        ledgerJournalTransLocal.OffsetLedgerDimension = this.OffsetLedgerDimension;
        #        ledgerJournalTransLocal.OffsetAccountType = this.OffsetAccountType;
        #        ledgerJournalTransLocal.PaymReference = this.PaymReference;
        #        ledgerJournalTransLocal.update();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateFIFOLineExchRate_HU
        #server client public void updateFIFOLineExchRate_HU()
        #{
        #    LedgerJournalTrans ledgerJournalTransOut;
        #    LedgerJournalTable ledgerJournalTable;
        #    ;
        #
        #    while select forupdate ledgerJournalTransOut
        #    order by ledgerJournalTransOut.TransDate    asc,
        #             ledgerJournalTransOut.Voucher      asc
        #    where   ledgerJournalTransOut.LedgerDimension      == this.LedgerDimension    &&
        #            (ledgerJournalTransOut.AmountCurCredit > 0.0                ||
        #             ledgerJournalTransOut.AmountCurDebit < 0.0)                &&
        #            ledgerJournalTransOut.CurrencyCode    == this.CurrencyCode  &&
        #            ledgerJournalTransOut.AccountType     == LedgerJournalACType::RCash
        #    notexists join ledgerJournalTable
        #        where ledgerJournalTable.JournalNum == ledgerJournalTransOut.JournalNum &&
        #              ledgerJournalTable.Posted
        #    {
        #        ledgerJournalTransOut.calcFIFOLineExchRate_HU();
        #    }
        #}
      ENDSOURCE
      SOURCE #updateInvoicePaymStatus
        #private void updateInvoicePaymStatus()
        #{
        #    SpecTrans   specTrans;
        #
        #    update_recordset specTrans
        #        setting PaymentStatus = this.PaymentStatus
        #        where specTrans.SpecTableId == this.TableId &&
        #              specTrans.SpecRecId   == this.RecId &&
        #              specTrans.SpecCompany == this.company();
        #}
      ENDSOURCE
      SOURCE #updateLedgerJournalTable
        #public server LedgerJournalTable updateLedgerJournalTable(ExchRate  _exchRate)
        #{
        #    LedgerJournalTable  ledgerJournalTable;
        #
        #    if (this.ExchRate != _exchRate)
        #    {
        #        ledgerJournalTable = LedgerJournalTable::find(this.JournalNum, true);
        #        ledgerJournalTable.JournalTotalOffsetBalance = ledgerJournalTable.journalBalanceOnAccount(ledgerJournalTable.OffsetAccountType, ledgerJournalTable.OffsetLedgerDimension);
        #
        #        [ledgerJournalTable.JournalTotalDebit,
        #         ledgerJournalTable.JournalTotalCredit] = LedgerJournalTable::journalBalanceMST(this.JournalNum);
        #
        #        ledgerJournalTable.update();
        #    }
        #
        #    return ledgerJournalTable;
        #}
      ENDSOURCE
      SOURCE #updateLedgerJournalTransFeeVoucher
        #void updateLedgerJournalTransFeeVoucher(LedgerJournalId _oldJournalNum, Voucher _oldVoucher, Voucher _newVoucher, RecId _recId)
        #{
        #    LedgerJournalTrans      ledgerJournalTrans;
        #    CustVendPaymJournalFee  custVendPaymJournalFee;
        #
        #    ttsbegin;
        #
        #    while select FeeTransRecId
        #            from  custVendPaymJournalFee
        #            where custVendPaymJournalFee.RefRecId == _recId
        #        join forupdate ledgerJournalTrans
        #            where   ledgerJournalTrans.JournalNum == _oldJournalNum    &&
        #                    ledgerJournalTrans.Voucher    == _oldVoucher  &&
        #                    ledgerJournalTrans.RecId      == custVendPaymJournalFee.FeeTransRecId
        #    {
        #        ledgerJournalTrans.Voucher = _newVoucher;
        #        ledgerJournalTrans.doUpdate();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateMarkedInvoice
        #/// <summary>
        #/// Updates the marked invoice of the current payment.
        #/// </summary>
        #/// <param name="_openTransMarkedCount">
        #/// The number of open transactions marked for settlement.
        #/// </param>
        #/// <remarks>
        #/// This method should be used for cases where a marked open transaction is not available.
        #/// </remarks>
        #public void updateMarkedInvoice(int _openTransMarkedCount)
        #{
        #    CustTrans trans;
        #    CustTransOpen transOpen;
        #    SpecTrans specTrans;
        #    container sharedCompanyList;
        #
        #    Debug::assert(this.RecId != 0);
        #
        #
        #    if (_openTransMarkedCount == 0)
        #    {
        #        this.MarkedInvoice = '';
        #    }
        #    else if (_openTransMarkedCount == 1)
        #    {
        #       // Retrieve the companies that the query should be limited to.
        #        sharedCompanyList = CustVendOpenTransManager::findSharedServiceCompanies(this.Company);
        #
        #        // Check if the marked transaction is an invoice
        #        select firstonly crosscompany:sharedCompanyList RecId, Invoice from trans
        #            join transOpen
        #            where transOpen.RefRecId == trans.RecId
        #            join RecId from specTrans
        #            where specTrans.RefCompany == transOpen.DataAreaId && // transOpen.company is not allowed because it is a part of the select
        #                specTrans.RefTableId == tableNum(CustTransOpen) &&
        #                specTrans.RefRecId == transOpen.RecId &&
        #                specTrans.SpecCompany == this.company() &&
        #                specTrans.SpecTableId == tableNum(LedgerJournalTrans) &&
        #                specTrans.SpecRecId == this.RecId;
        #
        #        Debug::assert(trans.RecId != 0);
        #
        #        if (trans.Invoice == '')
        #        {
        #            this.MarkedInvoice = LedgerJournalEngine_CustPayment::getMarkedInvoiceSettlementIndicator();
        #        }
        #        else
        #        {
        #            this.MarkedInvoice = trans.Invoice;
        #        }
        #    }
        #    else
        #    {
        #        this.MarkedInvoice = LedgerJournalEngine_CustPayment::getMarkedInvoiceSettlementIndicator();
        #    }
        #
        #    if ((this.MarkedInvoice != '') && (this.MarkedInvoice == trans.Invoice))
        #    {
        #        // the marked invoice is a valid reference
        #        this.MarkedInvoiceCompany = transOpen.company();
        #        this.MarkedInvoiceRecId = transOpen.RecId;
        #    }
        #    else
        #    {
        #        this.MarkedInvoiceCompany = '';
        #        this.MarkedInvoiceRecId = 0;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #updateMarkedInvoiceWithTrans
        #/// <summary>
        #/// Updates the marked invoice of the current payment by using the specified marked transaction.
        #/// </summary>
        #/// <param name="_openTransMarkedCount">
        #/// The number of open transactions marked for settlement.
        #/// </param>
        #/// <param name="_markedOpenTrans">
        #/// The open transaction marked for settlement.
        #/// </param>
        #/// <param name="_trans">
        #/// The customer transaction.
        #/// </param>
        #/// <remarks>
        #/// This method should be used when the marked transaction is available.
        #/// </remarks>
        #public void updateMarkedInvoiceWithTrans(
        #    int _openTransMarkedCount,
        #    CustTransOpen _markedOpenTrans,
        #    CustTrans _trans)
        #{
        #    if (_openTransMarkedCount == 0)
        #    {
        #        this.MarkedInvoice = '';
        #    }
        #    else if (_openTransMarkedCount == 1)
        #    {
        #        if (_trans.Invoice == '')
        #        {
        #            this.MarkedInvoice = LedgerJournalEngine_CustPayment::getMarkedInvoiceSettlementIndicator();
        #        }
        #        else
        #        {
        #            this.MarkedInvoice = _trans.Invoice;
        #        }
        #    }
        #    else
        #    {
        #        this.MarkedInvoice = LedgerJournalEngine_CustPayment::getMarkedInvoiceSettlementIndicator();
        #    }
        #
        #    if ((this.MarkedInvoice != '') && (this.MarkedInvoice == _trans.Invoice))
        #    {
        #        // the marked invoice is a valid reference
        #        this.MarkedInvoiceCompany = _markedOpenTrans.company();
        #        this.MarkedInvoiceRecId = _markedOpenTrans.RecId;
        #    }
        #    else
        #    {
        #        this.MarkedInvoiceCompany = '';
        #        this.MarkedInvoiceRecId = 0;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #updateOperationType_MX
        #/// <summary>
        #/// Updates the <c>OperationType_MX</c> field value when you post the journals when there is no common
        #/// tax codes, that is, when the <c>DiotAddInfo_MX</c> check box is checked, are not attached.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// A value to pass as a parameter to the <c>updateOperationType_MX</c> method.
        #/// </param>
        #public server void updateOperationType_MX(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Vend
        #        && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend)
        #    {
        #        _ledgerJournalTrans.OperationType_MX = VendorOperationType_MX::Blank;
        #        _ledgerJournalTrans.doUpdate();
        #    }
        #}
      ENDSOURCE
      SOURCE #updatePaymentOrderBudgetTrans_RU
        ##ISOCountryRegionCodes
        #server public void updatePaymentOrderBudgetTrans_RU()
        #{
        #    PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans;
        #    ;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        #    {
        #        if ((this.orig().JournalNum != this.JournalNum) ||
        #            (this.orig().LineNum    != this.LineNum)    ||
        #            (this.orig().Voucher    != this.Voucher)    ||
        #            (this.orig().TransDate  != this.TransDate)  ||
        #            (this.orig().LedgerDimension != this.LedgerDimension))
        #        {
        #
        #            paymentOrderBudgetTrans = PaymentOrderBudgetTrans_RU::find(this.orig().JournalNum,
        #                                                                       this.orig().LineNum,
        #                                                                       this.orig().Voucher,
        #                                                                       this.orig().AccountType,
        #                                                                       this.orig().TransDate,
        #                                                                       true);
        #
        #            if (paymentOrderBudgetTrans)
        #            {
        #                paymentOrderBudgetTrans.initFromLedgerJournalTrans(this);
        #                paymentOrderBudgetTrans.update();
        #            }
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #updatePaySheetTrans_RU
        #private void updatePaySheetTrans_RU()
        #{
        #    RPaySheetTrans  paySheetTrans;
        #
        #    if (this.rCashPayTransType != RCashPayLedgerTransType::Bank)
        #    {
        #        return;
        #    }
        #
        #    if (this.Voucher   != this.orig().Voucher ||
        #        this.TransDate != this.orig().TransDate)
        #    {
        #        while select forupdate paySheetTrans
        #            where paySheetTrans.PayVoucherBank  == this.orig().Voucher &&
        #                  paySheetTrans.PayDateBank     == this.orig().TransDate
        #        {
        #            paySheetTrans.PayVoucherBank = this.Voucher;
        #            paySheetTrans.PayDateBank    = this.TransDate;
        #            paySheetTrans.update();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateTaxCode
        #private void updateTaxCode()
        #{
        #    TaxTable    taxTable;
        #
        #    if(TaxParameters::checkTaxParameters_IN()
        #       && TaxTable::find(this.TaxCode).TaxType_IN != TaxType_IN::None)
        #    {
        #        taxTable = TaxTable::find(this.TaxCode);
        #        if (!LedgerJournalTrans::existsLedgerAccount_IN(this.AccountType, this.LedgerDimension, taxTable.TaxType_IN))
        #        {
        #            this.TaxCode = '';
        #        }
        #    }
        #    else
        #    {
        #        changecompany(this.Company)
        #        {
        #        if (!TaxVoucherService::ledgerAccountIsVATAccount(this.AccountType, this.LedgerDimension))
        #            {
        #                if (this.OffsetLedgerDimension)
        #                {
        #                    changecompany(this.OffsetCompany)
        #                    {
        #                    if (!TaxVoucherService::ledgerAccountIsVATAccount(this.OffsetAccountType, this.OffsetLedgerDimension))
        #                        {
        #                            this.TaxCode = '';
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    this.TaxCode = '';
        #                }
        #            }
        #            // if account type isn't ledger check the offset account
        #            // if the account type is ledger and ledgerAccountIsVATAccount returned true
        #            // it is valid to leave the tax code and the offset account shouldn't be checked
        #            else if (this.OffsetLedgerDimension && this.AccountType != LedgerJournalACType::Ledger)
        #            {
        #                changecompany(this.OffsetCompany)
        #                {
        #                    if (!TaxVoucherService::ledgerAccountIsVATAccount(this.OffsetAccountType, this.OffsetLedgerDimension))
        #                    {
        #                        this.TaxCode = '';
        #                    }
        #                }
        #            }
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #updateTCSGroup_IN
        #/// <summary>
        #/// Update TCSGroup_IN.
        #/// </summary>
        #public void updateTCSGroup_IN()
        #{
        #    if (this.AccountType == LedgerJournalACType::Vend
        #        && this.AmountCurCredit != 0)
        #    {
        #        this.tcsGroup_IN = "";
        #    }
        #}
      ENDSOURCE
      SOURCE #updateTDSGroup_IN
        #/// <summary>
        #/// Update TDSGroup_IN.
        #/// </summary>
        #public void updateTDSGroup_IN()
        #{
        #    if (this.AccountType == LedgerJournalACType::Cust
        #        && this.AmountCurDebit != 0)
        #    {
        #        this.tdsGroup_IN = "";
        #    }
        #}
      ENDSOURCE
      SOURCE #updateVoucherHeader_CN
        #/// <summary>
        #/// Updates old Chinese voucher number according to new journal lines, releases old voucher number.
        #/// </summary>
        #private server void updateVoucherHeader_CN()
        #{
        #    LedgerJournalTrans ledgerJournalTransLocal;
        #
        #    ttsbegin;
        #
        #    select firstonly ledgerJournalTransLocal
        #        where ledgerJournalTransLocal.JournalNum == this.JournalNum
        #           && ledgerJournalTransLocal.Voucher    == this.Voucher
        #           && ledgerJournalTransLocal.Voucher_CN != this.Voucher_CN;
        #    if (ledgerJournalTransLocal)
        #    {
        #        NumberSeq_Voucher_CN::release(
        #            LedgerVoucherType_CN::find(ledgerJournalTransLocal.LedgerVoucherType_CN).NumberSequenceTable,
        #            ledgerJournalTransLocal.Voucher_CN,
        #            ledgerJournalTransLocal.TransDate);
        #    }
        #
        #    ledgerJournalTransLocal.skipDataMethods(true);
        #
        #    update_recordset ledgerJournalTransLocal
        #        setting LedgerVoucherType_CN = this.LedgerVoucherType_CN,
        #                Voucher_CN           = this.Voucher_CN,
        #                TransDate            = this.TransDate
        #        where ledgerJournalTransLocal.JournalNum == this.JournalNum
        #           && ledgerJournalTransLocal.Voucher    == this.Voucher;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #validateBankAccount
        #public boolean validateBankAccount()
        #{
        #    boolean ok = true;
        #
        #    if (this.CustVendBankAccountId)
        #    {
        #        ok = Bank::construct(
        #            Bank::paymIdValidationCountryRegionISOCode(
        #                this.AccountType,
        #                this.LedgerDimension,
        #                this.CustVendBankAccountId,
        #                this.OffsetAccountType,
        #                this.OffsetLedgerDimension)).checkPaymId(this.PaymId);
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #validateCorrectiveTrans_RU
        #/// <summary>
        #/// Indicates whether the current journal line can be posted as corrective operation.
        #/// </summary>
        #/// <returns>
        #/// True if the record is valid; otherwise, false.
        #/// </returns>
        #
        #public boolean validateCorrectiveTrans_RU()
        #{
        #    boolean ret = true;
        #    ;
        #
        #    if (this.ledgerJournalTable().ledgerJournalTable_W().ReportingDate_RU)
        #    {
        #        if ((this.LedgerDimension                                   &&
        #             this.AccountType       != LedgerJournalACType::Ledger) ||
        #            (this.OffsetLedgerDimension                             &&
        #             this.OffsetAccountType != LedgerJournalACType::Ledger))
        #        {
        #            ret = checkFailed(strfmt("@SYP4860748", "@SYS13356"));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateCurrencyConvBankTransAccount_RU
        #boolean validateCurrencyConvBankTransAccount_RU()
        #{
        #    BankAccountTable    bankSpecAccount;
        #    boolean             ret = true;
        #    ;
        #
        #    if (this.BankSpecAccountId_RU &&
        #        this.ledgerJournalTable().JournalType != LedgerJournalType::RCash)
        #    {
        #        bankSpecAccount = BankAccountTable::find(this.BankSpecAccountId_RU);
        #
        #        if(bankSpecAccount &&
        #           bankSpecAccount.CurrencyCode != this.TransferCurrency_RU)
        #        {
        #            ret = checkFailed(strFmt("@GLS114421", bankSpecAccount.CurrencyCode, this.TransferCurrency_RU));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean validateDelete()
        #{
        #    boolean ret = true;
        #
        #    if (this.TransferredBy && this.Transferred &&
        #        LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::Approval)
        #
        #    {
        #        ret = checkFailed("@SYS23847");
        #    }
        #
        #    if (this.PaymentStatus == CustVendPaymStatus::Confirmed ||
        #        this.PaymentStatus == CustVendPaymStatus::Recieved  ||
        #        this.PaymentStatus == CustVendPaymStatus::Sent)
        #    {
        #        ret = checkFailed(strFmt("@SYS68189", CustVendPaymStatus::None, CustVendPaymStatus::Rejected));
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        this.handleDeleteTaxWithholdEditStatus_BR();
        #    }
        #
        #    if (ret)
        #    {
        #        ret = this.checkAllowEdit(true);
        #    }
        #
        #    if (ret)
        #    {
        #        ret = super();
        #    }
        #    // Deductions must be deleted first
        #    if (ret
        #        && this.mcrIsDeductionParent())
        #    {
        #        ret = checkFailed("@MCR27446");
        #    }
        #
        #    // Prevent deletion if record is for a refund check created for
        #    // sales order payment.
        #    if(MCRRCTransBatchTable::findByLedgerJournalId(this.JournalNum))
        #    {
        #        ret = checkFailed("@MCR28910");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateField
        #/// <summary>
        #/// Determines whether the specified field is valid.
        #/// </summary>
        #/// <param name="field">
        #/// The field ID of the field to validate.
        #/// </param>
        #/// <param name="_axLedgerJournalTrans">
        #/// The AxLedgerJournalTrans class associated with the field being validated; optional.
        #/// </param>
        #/// <returns>
        #/// true if the field is valid; otherwise, false.
        #/// </returns>
        #public boolean validateField(FieldId field, AxLedgerJournalTrans _axLedgerJournalTrans = null)
        #{
        #    #LedgerJournalFaults
        #    boolean                 ret = true;
        #    LedgerJournalTransType  ledgerJournalTransType;
        #    List                    ledgerJournalTransTypeList;
        #    ListEnumerator          enumerator;
        #    VendTable               vendTable;
        #    CompanyId               offsetCompanyId;
        #    #ISOCountryRegionCodes
        #
        #    // The LedgerJournalTrans.AccountType represents one logical line and
        #    // LedgerJournalTrans.OffsetAccountType represents another logical line.
        #    // Therefore, a set is used to encapsulate the polymorphic business logic.
        #    // The logic is placed before other validation because the kernel validates the Company
        #    // returning by false in the super call and does not put anything into the infolog.  This
        #    // fault must be returned to the consumer.
        #    ledgerJournalTransTypeList = this.type(_axLedgerJournalTrans);
        #    if (ledgerJournalTransTypeList)
        #    {
        #        enumerator = ledgerJournalTransTypeList.getEnumerator();
        #        while (enumerator.moveNext())
        #        {
        #            ledgerJournalTransType = enumerator.current();
        #            ret = ledgerJournalTransType.validateField(field);
        #
        #            if (ret == false)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (ret)
        #    {
        #        switch(field)
        #        {
        #            case fieldNum(LedgerJournalTrans, TaxCode):
        #                // only test if a value is set else the exists fails
        #                // for intercompany when the tax code has been cleared.
        #                if (this.TaxCode)
        #                {
        #                    //check for intercompany transaction
        #                    if (this.Company == curext())
        #                    {
        #                        ret = super(field);
        #                    }
        #                    else
        #                    {
        #                        changecompany(this.Company)
        #                        {
        #                            ret = TaxTable::exist(this.TaxCode);
        #                            if (!ret)
        #                            {
        #                                //this error message is used for consistency between nonintercompany and intercompany transactions
        #                                ret = checkFailed(strFmt("@SYS112224", this.TaxCode, fieldPName(TaxTable, TaxCode), tablePName(TaxTable)));
        #                            }
        #                        }
        #                    }
        #                    // if tax code is specified verify that the tax amount can be posted to the account or offset account
        #                    if (this.AccountType == LedgerJournalACType::Ledger)
        #                    {
        #                        changecompany(this.Company)
        #                        {
        #                            ret = TaxLedgerAccountGroup::verifyVATAccountNum(this.LedgerDimension,this.TaxCode);
        #                        }
        #                    }
        #                    else if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        #                    {
        #                        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #                        {
        #                            offsetCompanyId = this.OffsetCompany;
        #                        }
        #                        else
        #                        {
        #                            offsetCompanyId = this.Company;
        #                        }
        #                        changecompany(offsetCompanyId)
        #                        {
        #                            ret = TaxLedgerAccountGroup::verifyVATAccountNum(this.OffsetLedgerDimension, this.TaxCode);
        #                        }
        #                    }
        #                }
        #                break;
        #            case fieldNum(LedgerJournalTrans, Txt):
        #            case fieldNum(LedgerJournalTrans, OffsetTxt):
        #                return true;
        #
        #            case fieldNum(LedgerJournalTrans, AccountAgreementId_RU):
        #                ret = this.checkAgreement_RU();
        #                break;
        #            case fieldNum(LedgerJournalTrans, OffsetAccountAgreementId_RU):
        #                ret = this.checkAgreement_RU(AccountOffsetaccount::OffsetAccount);
        #                break;
        #
        #            default:
        #                if ((TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters()) &&
        #                    (this.Company != this.OffsetCompany))
        #                {
        #                    // When Two different companies are involve in invoice and payment..
        #                    ret = true;
        #                }
        #                else
        #                {
        #
        #                    ret = super(field);
        #                }
        #
        #        }
        #    }
        #
        #    if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        #    {
        #        if (!this.Company)
        #        {
        #            this.Company = curext();
        #        }
        #    }
        #
        #    if (ret)
        #    {
        #        switch(field)
        #        {
        #            case fieldNum(LedgerJournalTrans, ExchRate) :
        #                ret = this.checkExchRate();
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, Company) :
        #
        #                if (this.Company != curext() && !isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #                {
        #                     ret = checkFailed("@SYS125880");
        #                }
        #
        #                ret = ret && this.isInterCompanySupportedByTransType();
        #
        #                ret = ret && this.checkDataAreaAccessible(this.Company);
        #
        #                if (this.LedgerDimension && ret)
        #                {
        #                    ret = this.checkAllowPosting(this.LedgerDimension,
        #                                                 this.AccountType,
        #                                                 this.Company);
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, OffsetCompany) :
        #                ret = this.isInterCompanySupportedByTransType();
        #
        #                ret = ret && this.checkDataAreaAccessible(this.OffsetCompany);
        #
        #                if (this.OffsetLedgerDimension && ret)
        #                {
        #                    ret = this.checkAllowPosting(this.OffsetLedgerDimension,
        #                                                 this.OffsetAccountType,
        #                                                 this.OffsetCompany);
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, BankAccountId) :
        #                if (this.BankAccountId)
        #                {
        #                    ret = ret && BankAccountTable::checkIsActive(this.BankAccountId, this.TransDate);
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, LedgerDimension) :
        #                ret = this.checkAllowPosting(this.LedgerDimension,
        #                                             this.AccountType,
        #                                             this.Company);
        #
        #                if (this.AccountType == LedgerJournalACType::Bank)
        #                {
        #                    if (this.parmAccount())
        #                    {
        #                        ret = ret && BankAccountTable::checkIsActive(this.parmAccount(), this.TransDate, this.Company);
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, OffsetLedgerDimension) :
        #                ret = this.checkAllowPosting(this.OffsetLedgerDimension,
        #                                             this.OffsetAccountType,
        #                                             this.OffsetCompany);
        #
        #                if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #                {
        #                    if (this.parmOffsetAccount())
        #                    {
        #                        ret = ret && BankAccountTable::checkIsActive(this.parmOffsetAccount(), this.TransDate, this.getOffsetCompany());
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, TransDate) :
        #                if (this.OffsetAccountType == LedgerJournalACType::Bank)
        #                {
        #                    if (this.parmOffsetAccount())
        #                    {
        #                        ret = ret && BankAccountTable::checkIsActive(this.parmOffsetAccount(), this.TransDate, this.getOffsetCompany());
        #                    }
        #                }
        #                if (this.AccountType == LedgerJournalACType::Bank)
        #                {
        #                    if (this.parmAccount())
        #                    {
        #                        ret = ret && BankAccountTable::checkIsActive(this.parmAccount(), this.TransDate, this.Company);
        #                    }
        #                }
        #                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #                {
        #                    if((this.AccountAgreementId_RU &&
        #                        AgreementHeader::find(
        #                            AgreementHeaderExt_RU::findByAgreementId(this.AccountAgreementId_RU).AgreementHeader).canReleaseAgreement(this.TransDate) != true) ||
        #                        (this.OffsetAccountAgreementId_RU &&
        #                        AgreementHeader::find(
        #                            AgreementHeaderExt_RU::findByAgreementId(this.OffsetAccountAgreementId_RU).AgreementHeader).canReleaseAgreement(this.TransDate) != true))
        #                    {
        #                        ret = checkFailed(strFmt("@GLS221056", fieldPName(LedgerJournalTrans, TransDate)));
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, vatNumJournal) :
        #                ret = TaxVATNumTable::checkVATNum(this.vatNumJournal, this, field);
        #                ret = ret && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.EnterpriseNumber, this.vatNumJournal, true);
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, ForeignCompany) :
        #                ret = this.checkDataAreaAccessible(this.ForeignCompany);
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, CustVendBankAccountId):
        #                switch (this.AccountType)
        #                {
        #                    case LedgerJournalACType::Cust :
        #                        ret = CustBankAccount::checkBankAccountReference(this.parmAccount(), this.CustVendBankAccountId, this.Company);
        #                        break;
        #
        #                    case LedgerJournalACType::Vend :
        #                        ret = VendBankAccount::checkBankAccountReference(this.parmAccount(), this.CustVendBankAccountId, this.Company);
        #                        break;
        #                }
        #
        #            case fieldNum(LedgerJournalTrans, CurrencyCode):
        #                if (VendOutPaymRecord_DEDTAZV_CVal::counterValuePayment(this.PaymMode, this.PaymSpec))
        #                {
        #                    ret = VendOutPaymRecord_DEDTAZV_CVal::checkCurrencyCode(this.CurrencyCode);
        #                }
        #                // If line has at least one deduction, don't allow currency code to change
        #                if (this.mcrIsDeductionParent())
        #                {
        #                    ret = checkFailed(strFmt("@MCR27299",
        #                                             fieldId2pname(tableNum(LedgerJournalTrans),
        #                                                           fieldNum(LedgerJournalTrans, CurrencyCode))));
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, RemitteeCurrency):
        #                if (VendOutPaymRecord_DEDTAZV_CVal::counterValuePayment(this.PaymMode, this.PaymSpec))
        #                {
        #                    ret = VendOutPaymRecord_DEDTAZV_CVal::checkRemitteeCurrency(this.RemitteeCurrency);
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, PaymSpec):
        #                if (VendOutPaymRecord_DEDTAZV_CVal::counterValuePayment(this.PaymMode, this.PaymSpec))
        #                {
        #                    // The return value is not considered because the payment specification must not
        #                    // be reset. This is necessary to allow the user to enter the correct values in
        #                    // the fields CurrencyCode and RemitteeCurrency
        #                    VendOutPaymRecord_DEDTAZV_CVal::checkCurrencyCode(this.CurrencyCode);
        #                    VendOutPaymRecord_DEDTAZV_CVal::checkRemitteeCurrency(this.RemitteeCurrency);
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, AmountCurDebit):
        #                if(TaxWithholdParameters_IN::checkTaxParameters())
        #                {
        #                    this.checkSettledVendorAutority_IN(true);
        #                }
        #
        #            case fieldNum(LedgerJournalTrans, AmountCurCredit):
        #                ret = this.markedForSettlementError();
        #                if (ret)
        #                    ret = this.markedForSettlementWarning();
        #
        #                if (ret
        #                    && this.ledgerJournalTable().isPositiveDRCROnlyEnabled_JP()
        #                    && (this.AmountCurCredit < 0
        #                        || this.AmountCurDebit   < 0))
        #                {
        #                    ret = checkFailed("@GLS60021");
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, EnterpriseNumber):
        #                ret = TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.EnterpriseNumber);
        #
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, PaymId):
        #                if (this.AccountType == LedgerJournalACType::Vend && VendParameters::find().VendInvoiceRefNumValidation_FI)
        #                {
        #                    ret = CustVendInvoiceRefNum_FI::checkReferenceNumber(this.PaymId);
        #                    if (!ret)
        #                    {
        #                        ret = checkFailed("@SYS97602");
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, AccountType) :
        #                ret = this.isInterCompanySupportedByTransType();
        #
        #                if (ret && !LedgerJournalEngine::accountTypeValid(this, this.ledgerJournalTable()))
        #                {
        #
        #                    ret = checkFailed(strFmt("@SYS111828", this.AccountType));
        #
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, OffsetAccountType) :
        #                ret = this.isInterCompanySupportedByTransType();
        #
        #                if (ret && !LedgerJournalEngine::accountTypeValid(this, this.ledgerJournalTable()))
        #                {
        #
        #                    ret = checkFailed(strFmt("@SYS111828", this.OffsetAccountType));
        #
        #                }
        #                break;
        #            case fieldNum(LedgerJournalTrans, BankSpecAccountId_RU):
        #                ret = this.validateSpecBankAccountId_RU();
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, InvoiceReleaseDate) :
        #                if (this.InvoiceReleaseDate != utcDateTimeNull() && DateTimeUtil::addDays(this.InvoiceReleaseDate,1) < DateTimeUtil::utcNow())
        #                {
        #                    ret = checkFailed(strFmt("@SYS114595"));
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, TaxWithholdGroup):
        #                if (TaxWithholdParameters_IN::checkTaxParameters()
        #                    && this.TaxWithholdGroup)
        #                {
        #                    changecompany(this.Company ? this.Company : curext())
        #                    {
        #                        if (TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN != TaxWithholdCodeType_IN::None)
        #                        {
        #                            ret = checkFailed(strFmt("@GLS5461", this.TaxWithholdGroup, TaxWithholdCodeType_IN::None));
        #                        }
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, CompanyLocation_IN):
        #
        #            case fieldNum(LedgerJournalTrans, tdsGroup_IN):
        #                if (TaxWithholdParameters_IN::isTDSActivate()
        #                    && this.tdsGroup_IN)
        #                {
        #                    changecompany(this.Company ? this.Company : curext())
        #                    {
        #                        if (TaxWithholdGroupHeading::find(this.tdsGroup_IN).TaxType_IN != TaxWithholdCodeType_IN::TDS)
        #                        {
        #                            ret = checkFailed(strFmt("@GLS5461", this.tdsGroup_IN, TaxWithholdCodeType_IN::TDS));
        #                        }
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans, tcsGroup_IN):
        #                if (TaxWithholdParameters_IN::isTCSActivate()
        #                    && this.tcsGroup_IN)
        #                {
        #                    changecompany(this.Company ? this.Company : curext())
        #                    {
        #                        if (TaxWithholdGroupHeading::find(this.tcsGroup_IN).TaxType_IN != TaxWithholdCodeType_IN::TCS)
        #                        {
        #                            ret = checkFailed(strFmt("@GLS5461", this.tcsGroup_IN, TaxWithholdCodeType_IN::TCS));
        #                        }
        #                    }
        #                }
        #                break;
        #            case fieldNum(LedgerJournalTrans, TaxItemGroup):
        #                if (TaxParameters::isServiceTaxEnable_IN())
        #                {
        #                    if (this.AccountType == LedgerJournalACType::Vend)
        #                    {
        #                        vendTable = this.findVendTable();
        #                    }
        #                    else if (this.OffsetAccountType == LedgerJournalACType::Vend)
        #                    {
        #                        vendTable = this.findVendForOffset();
        #                    }
        #                    if (vendTable.RecId != 0)
        #                    {
        #                        ret = TaxItemGroupHeading::validatePOTForGTA_IN(vendTable, this.TaxItemGroup);
        #                    }
        #                }
        #                break;
        #            case fieldNum(LedgerJournalTrans, CustomsTariffCodeTable_IN):
        #                if (TaxParameters::isCustomsEnable_IN())
        #                {
        #                    ret = this.checkCustomsTariffCode_IN(this.CustomsTariffCodeTable_IN);
        #                }
        #                break;
        #            case fieldNum(LedgerJournalTrans, SoftwareDeclReceived_IN):
        #                if (TaxWithholdParameters_IN::checkTaxParameters())
        #                {
        #                    ret = TaxWithholdCalculation_IN::validateTDSZeroRate(this.tdsGroup_IN, this.TransDate);
        #                }
        #                break;
        #
        #
        #            case fieldNum(LedgerJournalTrans, PaymMode) :
        #                if (this.orig().PaymMode
        #                    && this.orig().PaymMode != this.PaymMode)
        #                {
        #                    if (CustVendNACHAIATInfoTable_US::findByLedgerJournalTrans(this.RecId).RecId)
        #                    {
        #                        if (Box::yesNo(strFmt("@SYS313183"), DialogButton::No,'') == DialogButton::No)
        #                        {
        #                            ret = false;
        #                        }
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(LedgerJournalTrans,OperationType_MX):
        #                if (VendTable::findByLedgerDimension(this.LedgerDimension).VendorType_MX == VendorType_MX::ForeignVendor
        #                    && this.OperationType_MX == VendorOperationType_MX::RentLease)
        #                {
        #                    ret = checkFailed(strFmt("@SYS312599", this.OperationType_MX));
        #                }
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateFieldValue
        #/// <summary>
        #/// Validates field value.
        #/// </summary>
        #/// <param name="_fieldName">
        #/// The field name.
        #/// </param>
        #/// <param name="_arrayIndex">
        #/// The array index.
        #/// </param>
        #/// <returns>
        #/// true if the validation succeed; otherwise, false.
        #/// </returns>
        #public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
        #{
        #    boolean ret;
        #
        #    ret = super(_fieldName, _arrayIndex);
        #
        #    if (TaxWithholdParameters_IN::checkTaxParameters()
        #        && this.TaxWithholdCode_IN != ''
        #        && ret)
        #    {
        #        switch (_fieldName)
        #        {
        #            case fieldStr(LedgerJournalTrans, AmountCurCredit) :
        #            case fieldStr(LedgerJournalTrans, AmountCurDebit) :
        #            case fieldStr(LedgerJournalTrans, OffsetAccountType) :
        #            case fieldStr(LedgerJournalTrans, OffsetCompany) :
        #            case fieldStr(LedgerJournalTrans, OffsetDefaultDimension) :
        #            case fieldStr(LedgerJournalTrans, OffsetLedgerDimension) :
        #            case fieldStr(LedgerJournalTrans, TransDate) :
        #            case fieldStr(LedgerJournalTrans, LedgerDimension) :
        #                break;
        #
        #            default :
        #                if (Box::okCancel("@GLS222698",
        #                    DialogButton::Cancel) == DialogButton::Cancel)
        #                {
        #                    ret = false;
        #                }
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateGTA_ForeignVendor_IN
        #/// <summary>
        #/// Validates GTA and foreign vendors for reverse cahrge mechanism.
        #/// </summary>
        #/// <returns>
        #/// True if validation passes.
        #/// </returns>
        #
        #public boolean validateGTA_ForeignVendor_IN()
        #{
        #    boolean             ret;
        #    TaxItemGroupHeading taxItemGroupHeading;
        #
        #    if (this.isGTAVendorAccount_IN() || this.isForeignVendorAccount_IN())
        #    {
        #        taxItemGroupHeading = TaxItemGroupHeading::find(this.orig().TaxItemGroup);
        #        if (taxItemGroupHeading)
        #        {
        #            ret = taxItemGroupHeading.isGTAVendorTaxItemGroup_IN();
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #validateInvoice
        #public server boolean validateInvoice(LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
        #{
        #    LedgerJournalTrans  ledgerJournalTransLocal;
        #    boolean             ok  = true;
        #    TransDate           fromDate;
        #    TransDate           toDate;
        #    RecId               calendarRecId = CompanyInfo::fiscalCalendarRecId();
        #
        #    if (this.Invoice && !this.Invisible)
        #    {
        #        switch (this.AccountType)
        #        {
        #            case LedgerJournalACType::Vend :
        #                switch (VendParameters::find().CheckInvoice)
        #                {
        #                    case ReuseVoucher::NoDuplicate :
        #                        fromDate = dateNull();
        #                        toDate   = maxDate();
        #                        break;
        #
        #                    case ReuseVoucher::NoDuplicateInYear, ReuseVoucher::WarnDuplicate :
        #                        fromDate =  FiscalCalendars::findOpeningStartDateByDate(calendarRecId,this.TransDate);
        #                        toDate   =  FiscalCalendars::findClosingPeriodEndDateByDate(calendarRecId,this.TransDate);
        #                        break;
        #                }
        #
        #                select  RecId
        #                from    ledgerJournalTransLocal
        #                where   ledgerJournalTransLocal.JournalNum      == this.JournalNum      &&
        #                        ledgerJournalTransLocal.AccountType     == this.AccountType     &&
        #                        ledgerJournalTransLocal.LedgerDimension == this.LedgerDimension &&
        #                        ledgerJournalTransLocal.Invoice         == this.Invoice         &&
        #                        ledgerJournalTransLocal.RecId           != this.RecId           &&
        #                        ledgerJournalTransLocal.TransDate       >= fromDate             &&
        #                        ledgerJournalTransLocal.TransDate       <= toDate               &&
        #                       !ledgerJournalTransLocal.Invisible;
        #                if (ledgerJournalTransLocal.RecId)
        #                {
        #                    if (_ledgerPostingMessageCollection)
        #                    {
        #                        ok = _ledgerPostingMessageCollection.logCheckFailed("@SYS60176");
        #                    }
        #                    else
        #                    {
        #                        ok = checkFailed("@SYS60176");
        #                    }
        #                }
        #                break;
        #        }
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateSpecBankAccountId_RU
        #public boolean validateSpecBankAccountId_RU()
        #{
        #    BankAccountTable  specBankAccountTable, offsetBankAccountTable;
        #    LedgerJournalType ledgerJournalType = this.ledgerJournalTable().JournalType;
        #    BankTransType     bankTransType     = BankTransType::find(this.BankTransType);
        #
        #    boolean ret = true;
        #
        #    if (ledgerJournalType == LedgerJournalType::Payment                     ||
        #        (ledgerJournalType == LedgerJournalType::Daily  && !this.Invoice)   &&
        #        this.AccountType == LedgerJournalACType::Vend                       &&
        #        this.OffsetAccountType == LedgerJournalACType::Bank                 &&
        #        this.LedgerDimension                                                &&
        #        this.OffsetLedgerDimension                                          &&
        #        this.BankSpecAccountId_RU)
        #    {
        #        if (!BankAccountTable::checkIsActive(this.BankSpecAccountId_RU, this.TransDate))
        #            ret = checkFailed(strFmt("@GLS115323", this.BankSpecAccountId_RU));
        #
        #        specBankAccountTable   = BankAccountTable::find(this.BankSpecAccountId_RU);
        #        offsetBankAccountTable = BankAccountTable::find(this.parmOffsetAccount());
        #
        #        if (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrBuy ||
        #            bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrSell  )
        #        {
        #            if (specBankAccountTable.BankGroupId != offsetBankAccountTable.BankGroupId)
        #            {
        #                ret = checkFailed("@GLS115325");
        #            }
        #        }
        #        else if (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrTransfer)
        #        {
        #            if (! specBankAccountTable.vendAccount_RU())
        #            {
        #                ret = checkFailed("@GLS114411");
        #            }
        #        }
        #
        #        if (this.BankSpecAccountId_RU && this.BankSpecAccountId_RU == this.parmOffsetAccount())
        #            ret = checkFailed("@GLS115326");
        #    }
        #    else
        #    if (ledgerJournalType == LedgerJournalType::RCash           &&
        #        LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(this)  &&
        #        this.LedgerDimension                                    &&
        #        this.OffsetLedgerDimension                              &&
        #        this.BankSpecAccountId_RU)
        #    {
        #        if (!BankAccountTable::checkIsActive(this.BankSpecAccountId_RU, this.TransDate))
        #        {
        #            ret = checkFailed(strFmt("@GLS115323", this.BankSpecAccountId_RU));
        #        }
        #
        #        specBankAccountTable = BankAccountTable::find(this.BankSpecAccountId_RU);
        #
        #        if (! specBankAccountTable.vendAccount_RU() || specBankAccountTable.vendAccount_RU() != this.parmOffsetAccount())
        #        {
        #            ret = checkFailed("@GLS114411");
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #validateW9Received
        #/// <summary>
        #/// Validates that a W-9 has been received from the vendor if the journal's account or
        #/// offset account corresponds to a vendor.
        #/// </summary>
        #/// <param name="_validateAll">
        #/// Specifies whether to validate both the account and offset account or just the account
        #/// specified by the second parameter.
        #/// </param>
        #/// <param name="_accountType">
        #/// Specifies whether to validate the account or offset account; optional.
        #/// </param>
        #public server void validateW9Received(boolean _validateAll,
        #    AccountOffsetaccount _accountType = AccountOffsetaccount::Account)
        #{
        #    LedgerJournalTable  ledgerJournalTableLoc;
        #
        #    ledgerJournalTableLoc = this.ledgerJournalTable();
        #
        #    switch(ledgerJournalTableLoc.JournalType)
        #    {
        #        case LedgerJournalType::VendInvoiceRegister:
        #        case LedgerJournalType::PurchaseLedger:
        #        case LedgerJournalType::Approval:
        #        case LedgerJournalType::Daily:
        #            if (_validateAll || _accountType == AccountOffsetaccount::Account)
        #            {
        #                switch (this.AccountType)
        #                {
        #                    case LedgerJournalACType::Vend :
        #                        VendTable::checkW9Received(this.parmAccount());
        #                        break;
        #
        #                    case LedgerJournalACType::Ledger :
        #                        if (this.VendTransId)
        #                        {
        #                            VendTable::checkW9Received(VendTrans::find(this.VendTransId).AccountNum);
        #                        }
        #                        break;
        #                }
        #            }
        #
        #            if ((_validateAll || _accountType == AccountOffsetaccount::OffsetAccount)
        #                && this.OffsetAccountType == LedgerJournalACType::Vend)
        #            {
        #                VendTable::checkW9Received(this.parmOffsetAccount());
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #/// <summary>
        #/// Determines whether the current record is valid and ready to be written to the database.
        #/// </summary>
        #/// <param name="_axLedgerJournalTrans">
        #/// The <c>AxLedgerJournalTrans</c> class that is associated with the row being defaulted; optional.
        #/// </param>
        #/// <returns>
        #/// true if the record is valid; otherwise, false.
        #/// </returns>
        #public server boolean validateWrite(AxLedgerJournalTrans _axLedgerJournalTrans = null)
        #{
        #    boolean                 isValid;
        #
        #    FiscalCalendarRecId     fiscalCalendarRecId;
        #
        #    isValid = this.validateWrite_ServerPre(_axLedgerJournalTrans);
        #
        #    if (isValid)
        #    {
        #        isValid = super();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.validateWrite_Server();
        #    }
        #
        #    if (this.AccountType != LedgerJournalACType::Ledger)
        #    {
        #        changecompany(this.Company)
        #        {
        #            DimensionValidation::validateDefaultDimension(this.DefaultDimension);
        #        }
        #    }
        #
        #    if (isValid
        #        && LedgerParameters::isChineseVoucher_CN()
        #        && this.ledgerJournalTable().JournalType != LedgerJournalType::Approval
        #        && this.ledgerJournalTable().JournalType != LedgerJournalType::BankChequeReversal)
        #    {
        #        if (!this.LedgerVoucherType_CN)
        #        {
        #            // Voucher type must be filled in
        #            isValid = checkFailed(strFmt("@SYS26332","@GLS54929"));
        #        }
        #
        #        if (isValid
        #            && this.Voucher_CN
        #            && !LedgerJournalTrans::checkVoucherNotUsed_CN(this, false))
        #        {
        #            // Voucher number has already been used
        #            isValid = checkFailed(strFmt("@GLS60257", this.Voucher_CN));
        #        }
        #
        #        if (isValid
        #            && this.TransDate == dateNull())
        #        {
        #            // Date must be specified
        #            isValid = checkFailed("@SYS24455");
        #        }
        #
        #        if (isValid)
        #        {
        #            fiscalCalendarRecId = CompanyInfo::fiscalCalendarRecId();
        #            if (!FiscalCalendars::findYearEndClosingPeriodByDate(fiscalCalendarRecId,this.TransDate).RecId)
        #            {
        #                // The transaction date is not in a valid period
        #                isValid = checkFailed("@GLS54501");
        #            }
        #        }
        #    }
        #    if (this.OffsetAccountType != LedgerJournalACType::Ledger)
        #    {
        #        changecompany(this.Company)
        #        {
        #            DimensionValidation::validateDefaultDimension(this.OffsetDefaultDimension);
        #        }
        #    }
        #
        #    return isValid;
        #}
        #
      ENDSOURCE
      SOURCE #validateWrite_Server
        #/// <summary>
        #/// Indicates whether the current record is valid and ready to be written to the database.
        #/// </summary>
        #/// <returns>
        #/// true if the record is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method was created to move execution of the logic for the <c>validateWrite</c> method onto the
        #/// server.
        #/// </remarks>
        #private server boolean validateWrite_Server()
        #{
        #    #LedgerJournalFaults
        #    LedgerJournalType   ledgerJournalType;
        #    LedgerJournalTable  ledgerJournalTable  = this.ledgerJournalTable();
        #    boolean             isValid;
        #    container           taxCheck;
        #    AmountCur           amountCurCreditDebit;
        #    classId             classId;
        #    boolean             isPayrollClass;
        #    #ISOCountryRegionCodes
        #    #Tax1099
        #
        #    ledgerJournalType = ledgerJournalTable.JournalType;
        #    classId = VendPaymModeTable::find(this.paymMode).ClassId;
        #    isPayrollClass  = (classId == classNum(VendOutPaym_Cheque_Payroll) || classId == classNum(VendOutPaymNACHAPayroll));
        #
        #    // Start by assuming the record is valid.
        #    isValid = true;
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkAllowEdit();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkApprovalActive();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkJournalAccountControl();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkVATNumJournal();
        #    }
        #
        #    if (this.checkAccountTypesProject())
        #    {
        #        isValid = checkFailed("@SYS76796");
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.isInterCompanySupportedByTransType();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkBankAccounts();
        #    }
        #
        #    if (isValid                                                                 &&
        #        (!isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)) ||
        #         this.Company        == this.OffsetCompany)                              &&
        #        this.AccountType     == this.OffsetAccountType                           &&
        #        this.LedgerDimension == this.OffsetLedgerDimension                       &&
        #        this.LedgerDimension != 0                                                &&
        #        this.OffsetLedgerDimension != 0                                          &&
        #        (
        #        (ledgerJournalType  != LedgerJournalType::CustBillOfExchangeDraw        &&
        #         ledgerJournalType  != LedgerJournalType::CustBillOfExchangeProtest     &&
        #         ledgerJournalType  != LedgerJournalType::CustBillOfExchangeRedraw      &&
        #         ledgerJournalType  != LedgerJournalType::CustPaymRemittance            &&
        #         ledgerJournalType  != LedgerJournalType::VendPromissoryNoteDraw        &&
        #         ledgerJournalType  != LedgerJournalType::VendPaymRemittance)           ||
        #        (ledgerJournalType  == LedgerJournalType::CustBillOfExchangeProtest &&
        #         ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
        #         ))
        #
        #        if (this.AccountType == LedgerJournalACType::Cust ||
        #            this.AccountType == LedgerJournalACType::Vend)
        #        {
        #            if ((this.AccountType == this.OffsetAccountType &&
        #                this.LedgerDimension == this.OffsetLedgerDimension) ||
        #                SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId))
        #            {
        #                isValid = checkFailed("@SYS65180");
        #            }
        #        }
        #        else
        #        {
        #            isValid = AifFault::checkFailedLogFault("@SYS65180", #AccountAndOffsetAccountCanNotBeEqual);
        #        }
        #
        #    // This validation does not need to be checked for the cost journals
        #    // as this validation calls checkIsActive method of BankAccountTable
        #    // which is not required at the time of posting of cost journals
        #    if (isValid && ledgerJournalType != LedgerJournalType::Cost && this.parmOffsetLedgerDimension())
        #    {
        #        if (!this.RecId && this.OffsetAccountType == LedgerJournalACType::Bank)
        #        {
        #            isValid = BankAccountTable::checkIsActive(this.parmOffsetAccount(), DateTimeUtil::date(DateTimeUtil::utcNow()), this.getOffsetCompany());
        #        }
        #    }
        #    // the following code is moved from Validatefield
        #    // because it prevented the lookup to pass over the enumaration value Project
        #    if (isValid &&
        #        ((ledgerJournalType     == LedgerJournalType::CustPayment   ||
        #         (ledgerJournalType     == LedgerJournalType::Payment)      &&
        #        this.OffsetAccountType  == LedgerJournalACType::Project)))
        #    {
        #        isValid = checkFailed("@SYS58297");
        #    }
        #
        #    if (isValid)
        #    {
        #        // Italian functionality of VAT books and VAT book sections
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) &&
        #            ledgerJournalTable.ledgerJournalName().TaxBookTypeJournal != TaxBookTypeJournal::Empty)
        #        {
        #            isValid = TaxBookSection::checkTaxBookSection(
        #                                    NumberSequenceTable::find(ledgerJournalTable.ledgerJournalName().NumberSequenceTable).RecId,
        #                                    this.TransDate);
        #            if (isValid)
        #            {
        #                isValid = TaxGroupData::checkTaxGroups(this.TaxGroup, this.TaxItemGroup);
        #            }
        #        }
        #    }
        #
        #    if(isValid && this.AccountType == LedgerJournalACType::Vend)
        #    {
        #        amountCurCreditDebit =  this.AmountCurDebit ? this.AmountCurDebit : -this.AmountCurCredit;
        #
        #        // this.AmountCurDebit is sent in as a negative amount because it's how Axapta actually treats this amount.
        #        taxCheck = [amountCurCreditDebit, this.Tax1099Amount, this.Tax1099StateAmount, this.Tax1099Fields, this.Tax1099State];
        #        isValid = Tax1099ElectronicCheck::tax1099EntryValidation(taxCheck);
        #    }
        #
        #    if(isValid && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        #    {
        #        isValid = Bank_BE::checkPaymentId(this.PaymId);
        #    }
        #
        #    // Validation for Opertaion type
        #    if (isValid && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        #    {
        #        isValid = this.checkOpertaionType_MX(ledgerJournalType);
        #    }
        #
        #    if (isValid && this.BankNegInstRecipientName && !this.AccountType == LedgerJournalACType::Ledger)
        #    {
        #        isValid = checkFailed("@SYS92827");
        #    }
        #
        #    if (isValid &&
        #        this.AccountType == LedgerJournalACType::FixedAssets &&
        #        this.OffsetAccountType == LedgerJournalACType::FixedAssets &&
        #        this.OffsetLedgerDimension &&
        #        this.Company != this.OffsetCompany &&
        #        isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        #    {
        #        isValid = checkFailed("@SYS112198");
        #    }
        #
        #    if (isValid && this.ReverseEntry && this.ReverseDate <= this.TransDate)
        #    {
        #        isValid = checkFailed("@SYS116157");
        #    }
        #
        #    if (isValid
        #        && LedgerParameters::isChineseVoucher_CN()
        #        && ledgerJournalType == LedgerJournalType::Daily)
        #    {
        #        if (this.amount() == 0)
        #        {
        #            // Amount not specified in the line
        #            isValid = checkFailed("@SYS58995");
        #        }
        #        if (isValid && this.Txt == "")
        #        {
        #            // Transaction text must be input
        #            isValid = checkFailed("@GLS54513");
        #        }
        #    }
        #
        #    if (isValid && BrazilParameters::isEnabled())
        #    {
        #        isValid = this.handleWriteTaxWithholdEditStatus_BR();
        #    }
        #
        #    if (isValid)
        #    {
        #        isValid = this.checkReasonRefRecID();
        #    }
        #
        #    if (isValid                                                         &&
        #        (ledgerJournalType == LedgerJournalType::PurchaseLedger         ||
        #         ledgerJournalType == LedgerJournalType::VendInvoiceRegister)   &&
        #        this.Payment                                                    &&
        #        !this.LedgerJournalDlvDate_ES                                   &&
        #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES])    &&
        #        PaymTerm::find(this.Payment).UseDeliveryDateForDueDate_ES)
        #    {
        #        isValid = checkFailed(strFmt("@SYS4000479", this.Payment));
        #    }
        #
        #    isValid = this.validateCurrencyConvBankTransAccount_RU() && isValid;
        #
        #    if (isValid && ledgerJournalType == LedgerJournalType::Payment && isPayrollClass)
        #    {
        #        isValid = checkFailed(strFmt("@SYS4004015", enum2str(ledgerJournalType), VendPaymFormat::find(classId, BankFormat::Export).format));
        #    }
        #
        #    if (isValid && ledgerJournalType == LedgerJournalType::PayrollDisbursement && !isPayrollClass)
        #    {
        #        isValid = checkFailed(strFmt("@SYS4004022", enum2str(ledgerJournalType), VendPaymFormat::find(classNum(VendOutPaym_Cheque_Payroll), BankFormat::Export).format, VendPaymFormat::find(classNum(VendOutPaymNACHAPayroll), BankFormat::Export).format));
        #    }
        #
        #    // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
        #    isValid = isValid && Tax::isValidTaxGroupIntersection(this.TaxGroup, this.TaxItemGroup) != CheckTaxGroups::Error;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        isValid = this.validateCorrectiveTrans_RU() && isValid;
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #validateWrite_ServerPre
        #/// <summary>
        #/// Indicates whether the current record is valid and ready to be written to the database.
        #/// </summary>
        #/// <param name="_axLedgerJournalTrans">
        #/// The <c>AxLedgerJournalTrans</c> class that is associated with the default row; optional.
        #/// </param>
        #/// <returns>
        #/// true if the record is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method was created to move execution of the logic for the <c>validateWrite</c> method onto the
        #/// server. The logic is positioned before other validation logic because the kernel validates
        #/// information that will not be exposed as faults.
        #/// </remarks>
        #private server boolean validateWrite_ServerPre(AxLedgerJournalTrans _axLedgerJournalTrans)
        #{
        #    boolean                 isValid;
        #    LedgerJournalTransType  ledgerJournalTransType;
        #    List                    ledgerJournalTransTypeList;
        #    ListEnumerator          enumerator;
        #
        #    isValid = true;
        #
        #    // The LedgerJournalTrans.AccountType represents one logical line and
        #    // LedgerJournalTrans.OffsetAccountType represents another logical line.
        #    // Therefore, a set is used to encapsulate the polymorphic business logic.
        #    ledgerJournalTransTypeList = this.type(_axLedgerJournalTrans);
        #    if (ledgerJournalTransTypeList)
        #    {
        #        enumerator = ledgerJournalTransTypeList.getEnumerator();
        #        while (enumerator.moveNext())
        #        {
        #            ledgerJournalTransType = enumerator.current();
        #            isValid = ledgerJournalTransType.validateRow();
        #
        #            if (isValid == false)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    return isValid;
        #}
      ENDSOURCE
      SOURCE #vatData_copyLine_PL
        #server public void vatData_copyLine_PL()
        #{
        #    LedgerJournalTrans localledgerJournalTrans;
        #
        #    select firstonly reverse Invoice, DocumentNum, DocumentDate, vatNumJournal, CustVendAccount_PL, CustVendName_PL, Addressing_PL, VatDueDate_W, TaxPeriodPaymentCode_PL, RecId from localledgerJournalTrans index NumVoucherIdx
        #        where localledgerJournalTrans.JournalNum   == this.JournalNum           &&
        #                localledgerJournalTrans.Voucher      == this.Voucher              &&
        #                (localledgerJournalTrans.AccountType == LedgerJournalACType::Cust ||
        #                localledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
        #                localledgerJournalTrans.AccountType == LedgerJournalACType::Ledger);
        #
        #    if (localledgerJournalTrans.RecId)
        #    {
        #        this.Invoice                 = localledgerJournalTrans.Invoice;
        #        this.DocumentNum             = localledgerJournalTrans.DocumentNum;
        #        this.DocumentDate            = localledgerJournalTrans.DocumentDate;
        #        this.vatNumJournal           = localledgerJournalTrans.vatNumJournal;
        #        this.CustVendAccount_PL      = localledgerJournalTrans.CustVendAccount_PL;
        #        this.CustVendName_PL         = localledgerJournalTrans.CustVendName_PL;
        #        this.Addressing_PL           = localledgerJournalTrans.Addressing_PL;
        #        this.VatDueDate_W            = localledgerJournalTrans.VatDueDate_W;
        #        this.TaxPeriodPaymentCode_PL = localledgerJournalTrans.TaxPeriodPaymentCode_PL;
        #    }
        #}
      ENDSOURCE
      SOURCE #vatInPayment_RU
        #public server TempStr vatInPayment_RU()
        #{
        #    CurrencyNameDeclension_RU   currencyNameDeclension;
        #    CalcTaxes_RU                calcTaxes;
        #    TaxAmountCur                amountVAT;
        #    TaxValue                    valueVAT;
        #    int                         amountVATPenny;
        #
        #    TaxCalculationJournal       taxCalculationJournal;
        #
        #    TmpTaxWorkTrans             tmpTaxWorkTrans;
        #    TempStr                     text;
        #
        #    str endDot(str _str)
        #    {
        #        str ret = strRTrim(_str);
        #        if (! strEndsWith(ret, '.'))
        #        {
        #            ret += '.';
        #        }
        #        return ret;
        #    }
        #
        #    taxCalculationJournal = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this, true);
        #
        #    tmpTaxWorkTrans.setTmpData(taxCalculationJournal.tmpTaxWorkTrans());
        #
        #    select tmpTaxWorkTrans;
        #
        #    calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
        #    calcTaxes.calc();
        #
        #    amountVAT   = Currency::amount(calcTaxes.taxAmountCur_VAT() +
        #                                   calcTaxes.taxAmountCur_VATReduced() +
        #                                   calcTaxes.taxAmountCur_VATZero(), this.CurrencyCode);
        #
        #    valueVAT    = calcTaxes.taxValue_VAT();
        #
        #    if (valueVAT && amountVAT)
        #    {
        #        currencyNameDeclension  = CurrencyNameDeclension_RU::find(this.CurrencyCode, CompanyInfo::languageId());
        #
        #        if (currencyNameDeclension.ShortNamePenny)
        #        {
        #            amountVATPenny          = (decRound(frac(amountVAT), 2) * 100);
        #            amountVAT               = trunc(amountVAT);
        #
        #            text = endDot(strFmt("@GLS111818" , valueVAT, num2str(amountVAT, 0, 0, 0, 0), strLwr(endDot(currencyNameDeclension.ShortName))) + ' ' + num2Str0(amountVATPenny, 2) + ' ' + strLwr(currencyNameDeclension.ShortNamePenny));
        #        }
        #        else
        #        {
        #            text = endDot(strFmt("@GLS111818", valueVAT, amountVAT, strLwr(currencyNameDeclension.ShortName)));
        #        }
        #    }
        #    else
        #    {
        #        text = "@GLS111819";
        #    }
        #
        #    return text;
        #
        #}
      ENDSOURCE
      SOURCE #vatTaxAgentAmountPayable_RU
        #//BP Deviation Documented
        #display AmountCurDebit vatTaxAgentAmountPayable_RU()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #vendPaymentFilledOk
        #private server boolean vendPaymentFilledOk(Map _tmpVoucherMap = null)
        #{
        #    LedgerJournalType   ledgerJournalType;
        #    VendPaymMethodVal   vendPaymMethodValFieldList;
        #    boolean             ok = true;
        #
        #    if (this.PaymMode)
        #    {
        #        ledgerJournalType = this.ledgerJournalTable().JournalType;
        #
        #        if (ledgerJournalType == LedgerJournalType::Payment ||
        #            (ledgerJournalType == LedgerJournalType::Daily  && !this.Invoice))
        #        {
        #            while select VendPaymValidate from vendPaymMethodValFieldList
        #                where vendPaymMethodValFieldList.VendPaymentMode == this.PaymMode
        #                {
        #                switch (vendPaymMethodValFieldList.VendPaymValidate)
        #                {
        #                    case VendPaymentValidate::PaymReference :
        #                        if (!this.PaymReference)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54960", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::BankPostType :
        #                        if (!this.BankTransType)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54961", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::OffsetAccountIsBank :
        #                        if (this.OffsetAccountType != LedgerJournalACType::Bank)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54962", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::CheckNo :
        #                        if (!this.BankChequeNum)
        #                        {
        #                            if (ledgerJournalType == LedgerJournalType::Daily  && !this.Invoice)
        #                            {
        #                                ok = checkFailed(strFmt("@GLS223918"));
        #                            }
        #                            else
        #                            {
        #                                ok = checkFailed(strFmt("@SYS54964", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                            }
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::PaymentSpecification :
        #                        if (!this.PaymSpec)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54965", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::PaymentId :
        #                        if (!this.PaymId)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54966", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #
        #                    case VendPaymentValidate::Comment :
        #                        if (!this.PaymentNotes)
        #                        {
        #                            ok = checkFailed(strFmt("@SYS54967", LedgerJournalTrans::findTmpVoucher(this.Voucher, _tmpVoucherMap), date2StrUsr(this.TransDate, DateFlags::FormatAll)));
        #                        }
        #                        break;
        #                }
        #            }
        #        }
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #write
        #/// <summary>
        #/// Writes data to ledger journal trans.
        #/// </summary>
        #public void write()
        #{
        #    LedgerJournalTrans              this_orig = this.orig();
        #    LedgerJournalTrans              ledgerJournalTrans;
        #    boolean                         updateChineseVoucher;
        #    boolean                         updateAttachments;
        #    boolean                         allRecordsChange = false;
        #    boolean                         isCallingFromFormDataSource;
        #    RefRecId                        numberSequenceTableRecId;
        #    NumberSeq                       numberSeq;
        #    boolean                         isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
        #    #define.OneRecord(1)
        #
        #    if (isChineseVoucher)
        #    {
        #        if (this.LedgerVoucherType_CN != this_orig.LedgerVoucherType_CN
        #            || this.Voucher           != this_orig.Voucher)
        #        {
        #            updateChineseVoucher = true;
        #        }
        #
        #        if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::Daily
        #            && this_orig.Attachments_CN != this.Attachments_CN)
        #        {
        #            updateAttachments = true;
        #        }
        #
        #        if (updateChineseVoucher
        #            || updateAttachments)
        #        {
        #            select count(RecId) from ledgerJournalTrans
        #                where ledgerJournalTrans.JournalNum == this.JournalNum
        #                    && ledgerJournalTrans.Voucher    == this.Voucher;
        #
        #            if ((this.RecId && (ledgerJournalTrans.RecId > #OneRecord)) //If this is updating and at least 2+ records(>1), then prompt.
        #                || (!this.RecId && (ledgerJournalTrans.RecId >= #OneRecord))) // or if this is insertion and has records(>=1), then prompt.
        #            {
        #                isCallingFromFormDataSource = this.dataSource() ? true : false;
        #                if (isCallingFromFormDataSource)
        #                {
        #                    if (Box::yesNo("@GLS64340", DialogButton::Yes) == DialogButton::Yes)
        #                    {
        #                        allRecordsChange = true;
        #                    }
        #                    else
        #                    {
        #                        allRecordsChange = false;
        #                        if (updateChineseVoucher)
        #                        {
        #                            this.LedgerVoucherType_CN = this_orig.LedgerVoucherType_CN;
        #                            numberSequenceTableRecId = LedgerVoucherType_CN::find(this_orig.LedgerVoucherType_CN).NumberSequenceTable;
        #
        #                            if (numberSequenceTableRecId != 0)
        #                            {
        #                                numberSeq = NumberSeq_Voucher_CN::newGetVoucherFromCode(numberSequenceTableRecId, this.TransDate);
        #                            }
        #
        #                            if (numberSeq)
        #                            {
        #                                this.Voucher_CN = numberSeq.voucher();
        #                            }
        #                        }
        #
        #                        if (updateAttachments)
        #                        {
        #                            this.Attachments_CN = this_orig.Attachments_CN;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    //if not calling from formdatasource, don't prompt dialog and update the records always.
        #                     allRecordsChange = true;
        #                }
        #            }
        #        }
        #    }
        #
        #    super();
        #
        #    if (isChineseVoucher)
        #    {
        #        if (updateChineseVoucher
        #            && allRecordsChange)
        #        {
        #            this.updateVoucherHeader_CN();
        #        }
        #
        #        if (updateAttachments
        #            && allRecordsChange)
        #        {
        #            this.updateAttachments_CN();
        #        }
        #        //Since in the updateVoucherHeader_CN() and updateAttachments_CN() method shall do
        #        //set based updating after super() call in this write method, so here shall need to
        #        //call reread of current record to refresh the RecVersion field, otherwise, the next
        #        //updating on current record cursor shall cause the update conflicts exception.
        #        this.reread();
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #calcTaxOnVoucher
        #public server static TaxAmountCur calcTaxOnVoucher(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #    TaxAmount           taxAmount;
        #    Sign                taxSign;
        #
        #    while select ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
        #           && ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher
        #    {
        #        if (ledgerJournalTrans.isTaxable())
        #        {
        #            taxSign    = ledgerJournalTrans.amount() > 0 ? 1 : -1;
        #            taxAmount += taxSign * abs(ledgerJournalTrans.totalTaxAmountSingleLine(true, false, true));
        #        }
        #
        #    }
        #    return abs(taxAmount);
        #}
      ENDSOURCE
      SOURCE #canServiceTaxCalculate_IN
        #/// <summary>
        #/// Checks if the service tax can be calculated.
        #/// </summary>
        #/// <param name="_voucher">
        #/// The voucher information.
        #/// </param>
        #/// <param name="_journalNum">
        #/// The ledger journal id.
        #/// </param>
        #/// <param name="_unsavedLedgerJournalTrans">
        #/// The unsaved ledger journal transaction.
        #/// </param>
        #/// <returns>
        #/// Returns true if the service tax can be calculated.
        #/// </returns>
        #public server static boolean canServiceTaxCalculate_IN(
        #    Voucher            _voucher,
        #    LedgerJournalId    _journalNum,
        #    LedgerJournalTrans _unsavedLedgerJournalTrans = null)
        #{
        #    boolean            ret;
        #    LedgerJournalTrans ledgerJournalTransCopy;
        #
        #    if (_unsavedLedgerJournalTrans.RecId != 0)
        #    {
        #        ret = _unsavedLedgerJournalTrans.isTaxable();
        #    }
        #    else
        #    {
        #        while select * from ledgerJournalTransCopy
        #            where ledgerJournalTransCopy.JournalNum == _journalNum
        #               && ledgerJournalTransCopy.Voucher    == _voucher
        #        {
        #            ret = ledgerJournalTransCopy.isTaxable();
        #            if (ret == true)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkVoucherNotUsed_CN
        #/// <summary>
        #/// Checks if the voucher is used or not.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// The ledger journal trans.
        #/// </param>
        #/// <param name="includeCurrentJournal">
        #/// If true, the check will include the current journal.
        #/// </param>
        #/// <returns>
        #/// Returns true if the voucher is not used.
        #/// </returns>
        #public static server boolean checkVoucherNotUsed_CN(
        #    LedgerJournalTrans _ledgerJournalTrans,
        #    boolean            includeCurrentJournal = true)
        #{
        #    LedgerJournalTrans      ledgerJournalTransLocal;
        #    RefRecId                numberSequenceTableRecId;
        #    boolean                 restart_CN;
        #    FiscalCalendarRecId     calendarRecId = CompanyInfo::fiscalCalendarRecId();
        #
        #    numberSequenceTableRecId = LedgerVoucherType_CN::find(_ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable;
        #    restart_CN = NumberSequenceTable_CN::findByNumberSequenceTable(numberSequenceTableRecId).RestartNum;
        #
        #    while select JournalNum,TransDate
        #        from ledgerJournalTransLocal
        #        where ledgerJournalTransLocal.Voucher_CN            == _ledgerJournalTrans.Voucher_CN
        #           && ledgerJournalTransLocal.LedgerVoucherType_CN  == _ledgerJournalTrans.LedgerVoucherType_CN
        #           && ledgerJournalTransLocal.RecId                 != _ledgerJournalTrans.RecId
        #    {
        #        if ((!includeCurrentJournal
        #            && (ledgerJournalTransLocal.JournalNum != _ledgerJournalTrans.JournalNum))
        #            || includeCurrentJournal)
        #        {
        #            if (!restart_CN
        #                && LedgerJournalTable::find(ledgerJournalTransLocal.JournalNum).JournalType != LedgerJournalType::Periodic)
        #            {
        #                return false;
        #            }
        #
        #
        #        if (FiscalCalendars::findPeriodStartDateByDateWithIndex(calendarRecId,ledgerJournalTransLocal.TransDate)
        #                 == FiscalCalendars::findPeriodStartDateByDateWithIndex(calendarRecId, _ledgerJournalTrans.TransDate)
        #                 && LedgerJournalTable::find(ledgerJournalTransLocal.JournalNum).JournalType != LedgerJournalType::Periodic)
        #            {
        #                return false;
        #            }
        #
        #        }
        #    }
        #
        #    if (GeneralJournalEntry::findVoucher_CN(_ledgerJournalTrans.LedgerVoucherType_CN, _ledgerJournalTrans.Voucher_CN, _ledgerJournalTrans.TransDate))
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #clearTaxCache
        #/// <summary>
        #/// Clears the internal caches for tax amounts and corrected tax amounts of all ledger journal
        #/// transactions with specified journal number.
        #/// </summary>
        #/// <param name="_journalNum">
        #/// The ledger journal number
        #/// </param>
        #/// <param name="_ledgerJournalEngine">
        #/// An instance of the ledger journal engine.
        #/// </param>
        #public static void clearTaxCache(
        #    LedgerJournalId     _journalNum,
        #    LedgerJournalEngine _ledgerJournalEngine)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    while select ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _journalNum
        #    {
        #        _ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);
        #        _ledgerJournalEngine.clearCorrectedTaxAmount(ledgerJournalTrans);
        #    }
        #}
      ENDSOURCE
      SOURCE #deleteChildrenForLedgerJournalTable
        #/// <summary>
        #/// Deletes the records in the delete action tables of the <c>LedgerJournalTrans</c>
        #/// table associated with the specified <c>LedgerJournalTable</c> record.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> record.
        #/// </param>
        #/// <remarks>
        #/// The records in the country specific delete action tables are not deleted.
        #/// </remarks>
        #public server static void deleteChildrenForLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        #    LedgerJournalTrans_Project ledgerJournalTrans_Project;
        #    AssetBookTableDerivedJournal assetBookTableDerivedJournal;
        #    AssetDepBookTableDerivedJour assetDepBookTableDerivedJour;
        #    CustTransCashDisc custTransCashDisc;
        #    CustVendNACHAIATInfoTable_US custVendNACHAIATInfoTable_US;
        #    CustVendPaymJournalFee custVendPaymJournalFee;
        #    CustVendPDCRegister custVendPDCRegister;
        #    EMSInvoiceRegisterFlowRelation emsInvoiceRegisterFlowRelation;
        #    LedgerJournalTransBankLC ledgerJournalTransBankLC;
        #
        #    ledgerJournalTrans_Asset.skipDeleteActions(true);
        #    ledgerJournalTrans_Asset.skipDeleteMethod(true);
        #
        #    delete_from ledgerJournalTrans_Asset
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == ledgerJournalTrans_Asset.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #    ledgerJournalTrans_Project.skipDeleteActions(true);
        #    ledgerJournalTrans_Project.skipDeleteMethod(true);
        #
        #    delete_from ledgerJournalTrans_Project
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == ledgerJournalTrans_Project.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    assetBookTableDerivedJournal.skipDeleteActions(true);
        #    assetBookTableDerivedJournal.skipDeleteMethod(true);
        #
        #    delete_from assetBookTableDerivedJournal
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == assetBookTableDerivedJournal.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    assetDepBookTableDerivedJour.skipDeleteActions(true);
        #    assetDepBookTableDerivedJour.skipDeleteMethod(true);
        #
        #    delete_from assetDepBookTableDerivedJour
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == assetDepBookTableDerivedJour.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    custTransCashDisc.skipDeleteActions(true);
        #    custTransCashDisc.skipDeleteMethod(true);
        #
        #    delete_from custTransCashDisc
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == custTransCashDisc.RefRecId
        #                && ledgerJournalTrans.TableId == custTransCashDisc.RefTableId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    custVendNACHAIATInfoTable_US.skipDeleteActions(true);
        #    custVendNACHAIATInfoTable_US.skipDeleteMethod(true);
        #
        #    delete_from custVendNACHAIATInfoTable_US
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == custVendNACHAIATInfoTable_US.LedgerJournalTransRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    custVendPaymJournalFee.skipDeleteActions(true);
        #    custVendPaymJournalFee.skipDeleteMethod(true);
        #
        #    delete_from custVendPaymJournalFee
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    custVendPDCRegister.skipDeleteActions(true);
        #    custVendPDCRegister.skipDeleteMethod(true);
        #
        #    delete_from custVendPDCRegister
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == custVendPDCRegister.LedgerJournalTrans
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    emsInvoiceRegisterFlowRelation.skipDeleteActions(true);
        #    emsInvoiceRegisterFlowRelation.skipDeleteMethod(true);
        #
        #    delete_from emsInvoiceRegisterFlowRelation
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == emsInvoiceRegisterFlowRelation.RefRecId
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #
        #    ledgerJournalTransBankLC.skipDeleteActions(true);
        #    ledgerJournalTransBankLC.skipDeleteMethod(true);
        #
        #    delete_from ledgerJournalTransBankLC
        #        exists join ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == ledgerJournalTransBankLC.LedgerJournalTrans
        #                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #}
        #
      ENDSOURCE
      SOURCE #deleteForLedgerJournalTable
        #/// <summary>
        #/// Deletes all the <c>LedgerJournalTrans</c> records associated with the
        #/// specified <c>LedgerJournalTable</c> record.
        #/// </summary>
        #/// <param name="_ledgerJournalTable">
        #/// The <c>LedgerJournalTable</c> record.
        #/// </param>
        #/// <remarks>
        #/// The caller has to verify deleting all the <c>LedgerJournalTrans</c>
        #/// records is supported. The row-by-row delete must be used if any of the
        #/// following are true.
        #/// <list type="bullet">
        #/// <item>
        #/// <description>A payment exists that is confirmed, received, or sent.</description>
        #/// </item>
        #/// <item>
        #/// <description><c>SpecTrans</c> records exist.</description>
        #/// </item>
        #/// <item>
        #/// <description>Budget sources exist.</description>
        #/// </item>
        #/// <item>
        #/// <description>This is an approval journal.</description>
        #/// </item>
        #/// <item>
        #/// <description>Any of the country specific delete action tables is in context.</description>
        #/// </item>
        #/// </list>
        #/// </remarks>
        #public server static void deleteForLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    ttsbegin;
        #
        #    if (_ledgerJournalTable.JournalType == LedgerJournalType::Daily ||
        #        _ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
        #    {
        #        LedgerJournalTransVoucherTemplate::deleteForJournalOrVoucher(_ledgerJournalTable.JournalNum);
        #    }
        #
        #    if (_ledgerJournalTable.JournalType != LedgerJournalType::Periodic)
        #    {
        #        select RecId from ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
        #                && ledgerJournalTrans.Transferred == true;
        #
        #        if (ledgerJournalTrans == null)
        #        {
        #            select minof(Voucher) from ledgerJournalTrans
        #                where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #            NumberSeq::releaseNumber(_ledgerJournalTable.NumberSequenceTable, ledgerJournalTrans.Voucher);
        #        }
        #    }
        #
        #    LedgerJournalTrans::deleteChildrenForLedgerJournalTable(_ledgerJournalTable);
        #
        #    ledgerJournalTrans.skipDeleteActions(true);
        #    ledgerJournalTrans.skipDeleteMethod(true);
        #
        #    delete_from ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        #
        #    TaxUncommitted::deleteForDocumentHeader(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId);
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #deleteIfZeroAmount
        #public server static void deleteIfZeroAmount(LedgerJournalId  _ledgerJournalId)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    ttsbegin;
        #
        #    delete_from ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum      == _ledgerJournalId
        #           && ledgerJournalTrans.AmountCurCredit == 0
        #           && ledgerJournalTrans.AmountCurDebit  == 0;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #deleteLineAfterPosting
        #public server static void deleteLineAfterPosting(LedgerJournalId _ledgerJournalId)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    ttsbegin;
        #
        #    while select forupdate ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #    {
        #        ledgerJournalTrans.delete(false);
        #    }
        #
        #    // delete any voucher template rows existing for this journal
        #    LedgerJournalTransVoucherTemplate::deleteForJournalOrVoucher(_ledgerJournalId);
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #deleteTransFromVoucher
        #public server static void deleteTransFromVoucher(
        #    LedgerJournalId _journalNum,
        #    Voucher         _voucher)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #    Counter             counter;
        #    boolean             numberSeqRelease = true;
        #    LedgerJournalType   journalType;
        #    RefRecId            voucherSeries;
        #    SpecTransManager    specTransManager;
        #
        #    ttsbegin;
        #
        #    while select forupdate ledgerJournalTrans
        #        index hint NumVoucherIdx
        #        where ledgerJournalTrans.JournalNum == _journalNum &&
        #              ledgerJournalTrans.Voucher    == _voucher
        #    {
        #        if (!counter)
        #        {
        #            journalType = ledgerJournalTrans.ledgerJournalTable().JournalType;
        #            voucherSeries = ledgerJournalTrans.ledgerJournalTable().NumberSequenceTable;
        #        }
        #
        #        if (ledgerJournalTrans.Transferred)
        #        {
        #            numberSeqRelease = false;
        #        }
        #
        #        // Delete the SpecTrans records associated with the LedgerJournalTrans.
        #        // Normally this is handled by the delete method, but this is calling doDelete
        #        specTransManager = SpecTransManager::construct(ledgerJournalTrans, false);
        #        specTransManager.deleteAll();
        #
        #        ledgerJournalTrans.doDelete();
        #        TaxUncommitted::deleteForVoucher(ledgerJournalTrans.ledgerJournalTable().TableId, ledgerJournalTrans.ledgerJournalTable().RecId, ledgerJournalTrans.Voucher);
        #        counter++;
        #    }
        #
        #    // delete associated LedgerJournalTransVoucherTemplate record
        #    if (journalType == LedgerJournalType::Daily ||
        #        journalType == LedgerJournalType::VendInvoiceRegister)
        #    {
        #        LedgerJournalTransVoucherTemplate::deleteForJournalOrVoucher(_journalNum, _voucher);
        #    }
        #
        #    if (counter && numberSeqRelease)
        #    {
        #        if (journalType != LedgerJournalType::Periodic)
        #        {
        #            NumberSeq::releaseNumber(voucherSeries, _voucher);
        #        }
        #    }
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #exist
        #public server static boolean exist(
        #    LedgerJournalId _ledgerJournalId,
        #    Voucher         _voucher,
        #    LineNum         _lineNum)
        #{
        #    return _ledgerJournalId && _voucher && (select firstonly RecId from ledgerJournalTrans
        #                index hint NumVoucherIdx
        #                where ledgerJournalTrans.JournalNum == _ledgerJournalId &&
        #                      ledgerJournalTrans.Voucher    == _voucher  &&
        #                      ledgerJournalTrans.LineNum    == _lineNum
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existBadDebtPeriod_JP
        #/// <summary>
        #/// Check whether there are record(s) existing in LedgerJournalTrans.
        #/// </summary>
        #/// <param name="_fromDate">
        #/// From date to check.
        #/// </param>
        #/// <param name="_toDate">
        #/// End date to check.
        #/// </param>
        #/// <param name="_ledgerDimension">
        #/// A BadDebtLedgerDimension variable is used to check whethere it exist in LedgerJournalTrans.
        #/// </param>
        #/// <returns>
        #/// If true, exist in LedgerJournalTrans table.
        #/// </returns>
        #public static boolean existBadDebtPeriod_JP(
        #    TransDate                  _fromDate,
        #    TransDate                  _toDate,
        #    LedgerBadDebtDimension_JP  _ledgerDimension)
        #{
        #    LedgerJournalTrans                  ledgerJournalTrans;
        #    DimensionAttributeValueCombination  dimAttrValueCombo;
        #    MainAccount                         mainAccount;
        #    MainAccountNum                      badDebtMainAccount;
        #
        #    badDebtMainAccount = DimensionAttributeValueCombination::getMainAccountFromLedgerDimension(_ledgerDimension);
        #
        #    select firstonly RecId from ledgerJournalTrans
        #        where ledgerJournalTrans.TransDate      >= _fromDate
        #            && ledgerJournalTrans.TransDate     <= _toDate
        #        join MainAccount from dimAttrValueCombo
        #            where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
        #                || dimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension
        #            exists join mainAccount
        #                where mainAccount.RecId             == dimAttrValueCombo.MainAccount
        #                    && mainAccount.MainAccountId    == badDebtMainAccount;
        #
        #    return ledgerJournalTrans.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existCollectedBadDebtPeriod_JP
        #/// <summary>
        #/// Reads the LedgerBadDebtAccounts_JP table for the specified id.
        #/// </summary>
        #/// <param name="_fromDate">
        #/// From date to check.
        #/// </param>
        #/// <param name="_toDate">
        #/// End date to check.
        #/// </param>
        #/// <param name="_ledgerDimension">
        #/// A CollectedBadDebtLedgerDimension_JP variable is used to check whethere it exist in LedgerJournalTrans.
        #/// </param>
        #/// <returns>
        #/// If true, exist in LedgerJournalTrans table.
        #/// </returns>
        #public static boolean existCollectedBadDebtPeriod_JP(
        #    TransDate                           _fromDate,
        #    TransDate                           _toDate,
        #    LedgerCollectedBadDebtDimension_JP  _ledgerDimension)
        #{
        #    LedgerJournalTrans                  ledgerJournalTrans;
        #    DimensionAttributeValueCombination  dimAttrValueCombo;
        #    MainAccount                         mainAccount;
        #    MainAccountNum                      collectedBadDebtMainAccount;
        #
        #    collectedBadDebtMainAccount = DimensionAttributeValueCombination::getMainAccountFromLedgerDimension(_ledgerDimension);
        #
        #    select firstonly RecId from ledgerJournalTrans
        #        where ledgerJournalTrans.TransDate      >= _fromDate
        #            && ledgerJournalTrans.TransDate     <= _toDate
        #        join MainAccount from dimAttrValueCombo
        #            where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
        #                || dimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension
        #            exists join mainAccount
        #                where mainAccount.RecId             == dimAttrValueCombo.MainAccount
        #                    && mainAccount.MainAccountId    == collectedBadDebtMainAccount;
        #
        #    return ledgerJournalTrans.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existForVoucherInvoice
        #/// <summary>
        #/// Gets a value that indicates whether a <c>LedgerJournalTrans</c> record exists for the specified values.
        #/// </summary>
        #/// <param name="_ledgerJournalId">
        #/// The journal batch number.
        #/// </param>
        #/// <param name="_voucher">
        #/// The voucher.
        #/// </param>
        #/// <param name="_invoiceId">
        #/// The invoice ID.
        #/// </param>
        #/// <returns>
        #/// A value that indicates whether a <c>LedgerJournalTrans</c> record exists for the specified values.
        #/// </returns>
        #public server static boolean existForVoucherInvoice(LedgerJournalId _ledgerJournalId, Voucher _voucher, InvoiceId _invoiceId)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (strLen(_ledgerJournalId) == 0 || strLen(_voucher) == 0 || strLen(_invoiceId) == 0)
        #    {
        #        return false;
        #    }
        #
        #    select RecId from ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #            && ledgerJournalTrans.Voucher == _voucher
        #            && ledgerJournalTrans.Invoice == _invoiceId;
        #
        #    return ledgerJournalTrans != null;
        #}
        #
      ENDSOURCE
      SOURCE #existJournalNum_CN
        #/// <summary>
        #/// Checks if the journal number exist in the ledger journal transaction.
        #/// </summary>
        #/// <param name="_ledgerJournalId">
        #/// The ledger journal id.
        #/// </param>
        #/// <returns>
        #/// Returns true if the journal number exist.
        #/// </returns>
        #public static boolean existJournalNum_CN(LedgerJournalId _ledgerJournalId)
        #{
        #    return _ledgerJournalId
        #        && (select firstonly RecId
        #                from ledgerJournalTrans
        #               where ledgerJournalTrans.JournalNum == _ledgerJournalId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existLedgerJournalTrans_IN
        #/// <summary>
        #/// Determines whether the record exists in the table with specified value model.
        #/// </summary>
        #/// <param name="_assetBookIdPurchSalesInvent">
        #/// The value model of the <c>LedgerJournalTrans</c> table record.
        #/// </param>
        #/// <param name="_accountNum">
        #/// A enumration that indicates transaction whether have ledger dimension.
        #/// </param>
        #/// <returns>
        #/// true if the record exits; otherwise, false.
        #/// </returns>
        #public static boolean existLedgerJournalTrans_IN(AssetBookIdPurchSalesInvent _assetBookIdPurchSalesInvent,
        #                                                 NoYesId                     _accountNum)
        #{
        #
        #    LedgerJournalTrans          ledgerJournalTransLoc;
        #    LedgerJournalTrans_Asset    ledgerJournalTransAssetLoc;
        #
        #    if (_assetBookIdPurchSalesInvent)
        #    {
        #        if (_accountNum)
        #        {
        #            select firstonly RecId, LedgerDimension from ledgerJournalTransLoc
        #                join BookId, TransType, RefRecId from ledgerJournalTransAssetLoc
        #                where ledgerJournalTransLoc.LedgerDimension
        #                    && ledgerJournalTransAssetLoc.BookId     == _assetBookIdPurchSalesInvent
        #                    && ledgerJournalTransAssetLoc.TransType  == AssetTransTypeJournal::Depreciation
        #                    && ledgerJournalTransLoc.RecId           == ledgerJournalTransAssetLoc.RefRecId;
        #
        #        }
        #        else
        #        {
        #            select firstonly RecId, LedgerDimension from ledgerJournalTransLoc
        #                join BookId, TransType, RefRecId from ledgerJournalTransAssetLoc
        #                where !ledgerJournalTransLoc.LedgerDimension
        #                    && ledgerJournalTransAssetLoc.BookId     == _assetBookIdPurchSalesInvent
        #                    && ledgerJournalTransAssetLoc.TransType  == AssetTransTypeJournal::Depreciation
        #                    && ledgerJournalTransLoc.RecId           == ledgerJournalTransAssetLoc.RefRecId;
        #        }
        #    }
        #
        #    return ledgerJournalTransLoc.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existsAdvancePaymentForServiceTax_IN
        #/// <summary>
        #/// Checks if the advance payment for service tax exists.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// The ledger journal transaction.
        #/// </param>
        #/// <returns>
        #/// Returns true if the advance payment for service tax exists.
        #/// </returns>
        #public server static boolean existsAdvancePaymentForServiceTax_IN(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    boolean    ret;
        #    AmountCur  paymentAmount;
        #    AmountCur  invoiceAmount;
        #
        #    if (_ledgerJournalTrans.TransactionType != LedgerTransType::Fee
        #        && _ledgerJournalTrans.isServiceTax_IN())
        #    {
        #        ret = true;
        #        paymentAmount   = abs(_ledgerJournalTrans.amount());
        #        invoiceAmount   = abs(SpecTransManager::getTotalSettleAmountForSpecReference(_ledgerJournalTrans.company(),
        #                                                                                        _ledgerJournalTrans.TableId,
        #                                                                                        _ledgerJournalTrans.RecId,
        #                                                                                        _ledgerJournalTrans.CurrencyCode,
        #                                                                                        _ledgerJournalTrans.Company,
        #                                                                                        _ledgerJournalTrans.TransDate,
        #                                                                                        _ledgerJournalTrans.crossrate()));
        #        // Case 1: Calculate service tax if payment is more than the Invoice amount to settle with.
        #        // Case 2: Do not calculate Tax if:
        #        //          a) Payment = Invoice amount  OR
        #        //          b) Payment < Invoice amount
        #        if (invoiceAmount  != 0
        #            && paymentAmount != 0)
        #        {
        #            if (paymentAmount > invoiceAmount)
        #            {
        #                ret = true;
        #            }
        #            else if (paymentAmount == invoiceAmount)
        #            {
        #                ret = false;
        #            }
        #            else
        #            {
        #                ret = false;
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existsLedgerAccount_IN
        #/// <summary>
        #/// Checks if the ledger account exists.
        #/// </summary>
        #/// <param name="_accountType">
        #/// The account type.
        #/// </param>
        #/// <param name="_ledgerDimension">
        #/// The ledger dimension.
        #/// </param>
        #/// <param name="_taxType">
        #/// The tax type.
        #/// </param>
        #/// <returns>
        #/// Returns true if the ledger account exist.
        #/// </returns>
        #static boolean existsLedgerAccount_IN(LedgerJournalACType       _accountType,
        #                                      LedgerDimensionAccount    _ledgerDimension,
        #                                      TaxType_IN                _taxType)
        #{
        #    if (_accountType != LedgerJournalACType::Ledger ||
        #        (_accountType == LedgerJournalACType::Ledger &&
        #        MainAccount::existLedgerPostingType_IN(_ledgerDimension, _taxType)))
        #        return true;
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #existTransMinusThis
        #public server static boolean existTransMinusThis(
        #    LedgerJournalId _ledgerJournalId,
        #    Voucher         _voucher,
        #    RecId           _recId = 0)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_ledgerJournalId && _voucher)
        #    {
        #        select firstonly RecId from ledgerJournalTrans
        #        index hint NumVoucherIdx
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalId &&
        #              ledgerJournalTrans.Voucher    == _voucher         &&
        #              ledgerJournalTrans.RecId      != _recId;
        #    }
        #
        #    return (ledgerJournalTrans.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #existVoucher
        #public server static boolean existVoucher(
        #    LedgerJournalId _ledgerJournalId,
        #    Voucher         _voucher)
        #{
        #    return _ledgerJournalId && _voucher && (select firstonly RecId from ledgerJournalTrans
        #                index hint NumVoucherIdx
        #                where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #                   && ledgerJournalTrans.Voucher    == _voucher
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #public static LedgerJournalTrans find(
        #    LedgerJournalId _ledgerJournalId,
        #    Voucher         _voucher,
        #    boolean         _forUpdate)
        #
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_ledgerJournalId && _voucher)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select
        #            firstonly
        #            ledgerJournalTrans
        #            index NumVoucherIdx
        #            where ledgerJournalTrans.JournalNum == _ledgerJournalId &&
        #                    ledgerJournalTrans.Voucher    == _voucher;
        #    }
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findByRef
        #/// <summary>
        #/// Finds the specified record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <param name="_refCompany">
        #/// The reference company of the record to find.
        #/// </param>
        #/// <param name="_ledgerJournalTransRecId">
        #/// The reference record ID of the record to find.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
        #/// </returns>
        #public static LedgerJournalTrans findByRef(
        #    CompanyId _refCompany,
        #    RecId _ledgerJournalTransRecId,
        #    boolean _forUpdate = false)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_refCompany != '' && _ledgerJournalTransRecId != 0)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly crossCompany ledgerJournalTrans
        #            where ledgerJournalTrans.Company == _refCompany &&
        #                ledgerJournalTrans.RecId == _ledgerJournalTransRecId ;
        #    }
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findByRefAndDataArea
        #/// <summary>
        #/// Finds the specified record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <param name="_dataArea">
        #/// The data area of the <c>LedgerJournalTrans</c> record to find.
        #/// </param>
        #/// <param name="_ledgerJournalTransRecId">
        #/// The reference record ID of the <c>LedgerJournalTrans</c> record to find.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record from the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
        #/// </returns>
        #public static LedgerJournalTrans findByRefAndDataArea(
        #    CompanyId _dataArea,
        #    RecId _ledgerJournalTransRecId,
        #    boolean _forUpdate = false)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_dataArea != '' && _ledgerJournalTransRecId != 0)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly crossCompany ledgerJournalTrans
        #            where ledgerJournalTrans.DataAreaId == _dataArea &&
        #                ledgerJournalTrans.RecId == _ledgerJournalTransRecId ;
        #    }
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findByReverse
        #/// <summary>
        #/// Finds the specified record in the <c>LedgerJournalTrans</c> table by using the reverse reference.
        #/// </summary>
        #/// <param name="_reverseRecID">
        #/// The reverse reference record ID of the <c>LedgerJournalTrans</c> record.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record from the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
        #/// </returns>
        #public server static LedgerJournalTrans findByReverse(
        #    RecId   _reverseRecID,
        #    boolean _forUpdate = false)
        #
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_reverseRecID != 0)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.RevRecId == _reverseRecID;
        #    }
        #
        #    return ledgerJournalTrans;
        #}
        #
      ENDSOURCE
      SOURCE #findFacture_RU
        #public static server LedgerJournalTrans findFacture_RU(FactureTrans_RU   _trans)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_trans                                                               &&
        #        (_trans.Module         == FactureModule_RU::TaxCorrectionPurch       ||
        #         _trans.Module         == FactureModule_RU::TaxCorrectionSales       ||
        #         _trans.Module         == FactureModule_RU::TaxCorrectionPurch_Cust  ||
        #         _trans.Module         == FactureModule_RU::TaxCorrectionSales_Vend) &&
        #        _trans.FactureLineType == FactureLineType_RU::TaxCorrection)
        #    {
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.LineNum    == _trans.InvoiceLineNum &&
        #                  ledgerJournalTrans.JournalNum == _trans.InvoiceId      &&
        #                  ledgerJournalTrans.RecId      == _trans.MarkupRefRecId;
        #    }
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findJournalForVoucher
        #/// <summary>
        #/// Retrieves the specified record in the <c>LedgerJournalTrans</c> table, depending on the
        #/// <c>Voucher</c> parameter and the <c>transDate</c> parameter.
        #/// </summary>
        #/// <param name="_voucherNum">
        #/// The voucher number of the record to find.
        #/// </param>
        #/// <param name="_transDate">
        #/// The transaction date of the record to find.
        #/// </param>
        #/// <returns>
        #/// The <c>LedgerJournalTrans</c> table buffer.
        #/// </returns>
        #
        #public static LedgerJournalTrans findJournalForVoucher(Voucher _voucherNum, TransDate _transDate)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.Voucher == _voucherNum &&
        #            ledgerJournalTrans.TransDate     == _transDate;
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findLedgerJournalId
        #public static LedgerJournalTrans findLedgerJournalId(
        #    Voucher _voucher,
        #    boolean _forUpdate = false)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    if (_voucher)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.Voucher    == _voucher;
        #    }
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findRCashDocID_HU
        #public static LedgerJournalTrans findRCashDocID_HU(RCashDocId _docId)
        #{
        #    LedgerJournalTrans          ledgerJournalTrans;
        #    LedgerJournalTrans_RCash    ledgerJournalTransRCash;
        #    ;
        #
        #    if (_docId)
        #    {
        #        select firstonly ledgerJournalTrans
        #        exists join ledgerJournalTransRCash
        #            where ledgerJournalTransRCash.CashDocId == _docId &&
        #                  ledgerJournalTransRCash.RefRecId  == ledgerJournalTrans.RecId;
        #    }
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #findRecId
        #public server static LedgerJournalTrans findRecId(
        #    RecId   _recId,
        #    boolean _forUpdate)
        #
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_recId)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.RecId == _recId;
        #    }
        #    return ledgerJournalTrans;
        #}
        #
      ENDSOURCE
      SOURCE #findTaxSource
        #/// <summary>
        #///   Determines which <c>LedgerJournalTrans</c> record in an intercompany document is the tax obligation source company.
        #/// </summary>
        #/// <param name="_journalBatchNumber">
        #///    The journal batch number.
        #/// </param>
        #/// <param name="_voucher">
        #///    The voucher.
        #/// </param>
        #/// <param name="_isIntercompanyJournal">
        #///    true if this is an intercompany journal; otherwise, false.
        #/// </param>
        #/// <param name="_primaryJournalVoucher">
        #///    The voucher for the primary journal.  Used in intercompany scenarios to ensure we get the original journal and voucher when
        #///    invoked on an intercompany journal.
        #/// </param>
        #/// <returns>
        #///   The source company.
        #/// </returns>
        #/// <remarks>
        #///   The source company is the company where the payable to the vendor or receivable
        #///   to the customer, vendor, or bank is recorded.  If multiple sources are used on the document then
        #///   the order of priority is Vendor, Customer, and then Bank.
        #/// </remarks>
        #public static LedgerJournalTrans findTaxSource(LedgerJournalId _journalBatchNumber, Voucher _voucher, boolean _isIntercompanyJournal = false, Voucher _primaryJournalVoucher = '')
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    select firstonly RecId from ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _journalBatchNumber &&
        #            ((ledgerJournalTrans.Voucher == _voucher &&
        #            !_isIntercompanyJournal) ||
        #            (ledgerJournalTrans.ForeignVoucher == _primaryJournalVoucher &&
        #            _isIntercompanyJournal)) &&
        #            (ledgerJournalTrans.Company != curext() ||
        #            ledgerJournalTrans.OffsetCompany != curext());
        #
        #    // if this isn't an intercompany scenario then no need to execute the queries below
        #    // whether we treat it as "source" or "destination" in this scenario will make no difference
        #    // in terms of functionality except that treating it as "destination" will perform better.
        #    if (ledgerJournalTrans)
        #    {
        #        // if multiline scenario check for Vend/Cust.  If both Vend/Cust are used then
        #        // we need to use order by account type to select Vend first.
        #        select firstonly * from ledgerJournalTrans
        #            order by Invoice, AccountType desc, RecId
        #            where ledgerJournalTrans.JournalNum == _journalBatchNumber &&
        #                ((ledgerJournalTrans.Voucher == _voucher &&
        #                !_isIntercompanyJournal) ||
        #                (ledgerJournalTrans.ForeignVoucher == _primaryJournalVoucher &&
        #                _isIntercompanyJournal)) &&
        #                (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
        #                ledgerJournalTrans.AccountType == LedgerJournalACType::Cust);
        #
        #        if (ledgerJournalTrans == null)
        #        {
        #            // check for single line scenario where vend/cust is the offset account type.
        #            select firstonly * from ledgerJournalTrans
        #                order by Invoice, OffsetAccountType desc, RecId
        #                where ledgerJournalTrans.JournalNum == _journalBatchNumber &&
        #                    ((ledgerJournalTrans.Voucher == _voucher &&
        #                    !_isIntercompanyJournal) ||
        #                    (ledgerJournalTrans.ForeignVoucher == _primaryJournalVoucher &&
        #                    _isIntercompanyJournal)) &&
        #                    (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend ||
        #                    ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust);
        #        }
        #
        #        if (ledgerJournalTrans == null)
        #        {
        #            // Bank is the lowest priority for a source.  If Bank is not found then we will return
        #            // an empty record since there is no source.
        #            select firstonly * from ledgerJournalTrans
        #                where ledgerJournalTrans.JournalNum == _journalBatchNumber &&
        #                    ((ledgerJournalTrans.Voucher == _voucher &&
        #                    !_isIntercompanyJournal) ||
        #                    (ledgerJournalTrans.ForeignVoucher == _primaryJournalVoucher &&
        #                    _isIntercompanyJournal)) &&
        #                    (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank ||
        #                    ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank);
        #        }
        #    }
        #
        #    return ledgerJournalTrans;
        #}
        #
      ENDSOURCE
      SOURCE #findTmpVoucher
        #public static Voucher findTmpVoucher(
        #    Voucher _voucher,
        #    Map     _tmpVoucherMap)
        #{
        #    Voucher tmpVoucher;
        #
        #    if (_tmpVoucherMap && _tmpVoucherMap.exists(_voucher))
        #    {
        #        tmpVoucher = _tmpVoucherMap.lookup(_voucher);
        #    }
        #    else
        #    {
        #        tmpVoucher = _voucher;
        #    }
        #
        #    return tmpVoucher;
        #}
        #
        #
      ENDSOURCE
      SOURCE #findVendTransId
        #public server static RecId findVendTransId(
        #    LedgerJournalId _ledgerJournalId,
        #    Voucher         _voucher)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    select firstonly VendTransId from ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #           && ledgerJournalTrans.Voucher    == _voucher
        #           && ledgerJournalTrans.VendTransId;
        #
        #    return ledgerJournalTrans.VendTransId;
        #}
      ENDSOURCE
      SOURCE #findVoucher_BR
        #static Voucher findVoucher_BR(LedgerJournalId   _ledgerJournalId,
        #                               boolean      _forUpdate = false)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #    ;
        #
        #    if (_ledgerJournalId)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly Voucher from ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum== _ledgerJournalId;
        #    }
        #    return ledgerJournalTrans.Voucher;
        #}
      ENDSOURCE
      SOURCE #getActualAndCalculatedTaxForSingleLineIL
        #/// <summary>
        #///   Gets the actual and calculated tax amount for the specified line.
        #/// </summary>
        #/// <param name="_params">
        #///    A container holding the <c>LedgerJournalTtrans</c> record and a value that indicates whether to include the use tax.
        #/// </param>
        #/// <returns>
        #///   A container holding the actual and calculated tax amount.
        #/// </returns>
        #/// <remarks>
        #///   This method exists so calls can transition to IL before computing taxes. The standard
        #///   API consumers should use is LedgerJournalTrans.getCalculatedAndActualTaxForSingleLine().
        #/// </remarks>
        #private static container getActualAndCalculatedTaxForSingleLineIL(container _params)
        #{
        #    LedgerJournalTable ledgerJournalTable;
        #    TaxCalculation taxCalculation;
        #    LedgerJournalTrans ledgerJournalTrans;
        #    boolean includeUseTax;
        #    TaxAmountCur actualTax, calculatedTax;
        #
        #    // Unpack incoming parameters
        #    [ledgerJournalTrans, includeUseTax] = _params;
        #
        #    ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        #
        #    if (!ledgerJournalTrans.RecId
        #        || !TaxUncommitted::existByDocumentAndInvoice(tableNum(LedgerJournalTable), ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice))
        #    {
        #        taxCalculation = LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, false, ledgerJournalTrans);
        #
        #        if (includeUseTax)
        #        {
        #            actualTax = taxCalculation.totalRegTaxAmountSingleLineIncludeUseTax(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId, false);
        #        }
        #        else
        #        {
        #            actualTax = taxCalculation.totalRegulatedTaxAmountSingleLine(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
        #        }
        #
        #        calculatedTax = taxCalculation.totalTaxAmountSingleLine(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId, false, includeUseTax);
        #    }
        #    else
        #    {
        #        actualTax = TaxUncommitted::getActualTaxAmountForSourceLine(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId, includeUseTax, true);
        #        calculatedTax = TaxUncommitted::getCalculatedTaxAmountForSourceLine(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId, includeUseTax);
        #    }
        #
        #    return [actualTax, calculatedTax];
        #}
      ENDSOURCE
      SOURCE #getInterCompanyForCentralizedPay_IN
        #/// <summary>
        #/// Gets te company id or the offset company id for a centralized payment line.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// The ledger journal trans.
        #/// </param>
        #/// <param name="_company">
        #/// The company id.
        #/// </param>
        #/// <returns>
        #/// The company id information.
        #/// </returns>
        #public static CompanyId getInterCompanyForCentralizedPay_IN(
        #    LedgerJournalTrans _ledgerJournalTrans,
        #    CompanyId          _company)
        #{
        #    CompanyId companyId =curext();
        #
        #    if (LedgerJournalTrans::isCentralizedAdvancePayment_IN(_ledgerJournalTrans) == true)
        #    {
        #        if (_ledgerJournalTrans.Company != ''
        #            && _ledgerJournalTrans.OffsetCompany != '')
        #        {
        #            if (_ledgerJournalTrans.Company == _company)
        #            {
        #                companyId = _ledgerJournalTrans.OffsetCompany;
        #            }
        #            else if (_ledgerJournalTrans.OffsetCompany == _company)
        #            {
        #                companyId = _ledgerJournalTrans.Company;
        #            }
        #        }
        #    }
        #
        #    return companyId;
        #}
      ENDSOURCE
      SOURCE #getLedgerDimensionForLedgerTypeServer
        #/// <summary>
        #/// Gets the ledger account for the default account.
        #/// </summary>
        #/// <param name="_ledgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_company">
        #/// The company ID of the default account.
        #/// </param>
        #/// <param name="_ledgerJournalTable">
        #/// The header for the transaction.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// This method mirrors the <c>getLedgerDimensionForLedgerType</c> method but is guaranteed to run on
        #/// the server.
        #/// </remarks>
        #server private static LedgerDimensionAccount getLedgerDimensionForLedgerTypeServer(
        #    LedgerDimensionDefaultAccount   _ledgerDimension,
        #    CompanyId                       _company,
        #    LedgerJournalTable              _ledgerJournalTable)
        #{
        #    LedgerDimensionAccount mergedLedgerDimension;
        #    List dimensionSources;
        #
        #    Debug::assert(_ledgerDimension);
        #
        #    changecompany(_company)
        #    {
        #        // Get dimensions from journal header
        #        dimensionSources = new List(Types::Class);
        #        if (_company == _ledgerJournalTable.company())
        #        {
        #            dimensionSources.addEnd(DimensionDefaultingEngine::getDefaultDimensionSpecifiers(_ledgerJournalTable.DefaultDimension));
        #        }
        #
        #        // Get dimensions from main account
        #        DimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _ledgerDimension);
        #
        #        mergedLedgerDimension = DimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources);
        #    }
        #
        #    return mergedLedgerDimension;
        #}
      ENDSOURCE
      SOURCE #getOffsetLedgerDimForLedgerTypeServer
        #/// <summary>
        #/// Gets the offset ledger account for the default account.
        #/// </summary>
        #/// <param name="_defaultLedgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_offsetCompany">
        #/// The company ID of the default account.
        #/// </param>
        #/// <param name="_ledgerJournalTrans">
        #/// The <c>LedgerJournalTrans</c> record.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// This method mirrors the <c>getOffsetLedgerDimForLedgerTypeServer</c> method
        #/// but is guaranteed to run on the server.
        #/// </remarks>
        #server private static LedgerDimensionAccount getOffsetLedgerDimForLedgerTypeServer(
        #    LedgerDimensionDefaultAccount   _defaultLedgerDimension,
        #    CompanyId                       _offsetCompany,
        #    LedgerJournalTrans              _ledgerJournalTrans)
        #{
        #    LedgerDimensionAccount  mergedLedgerDimension;
        #    List                    dimensionSources;
        #    Map                     primaryDimensionSpecifiers;
        #
        #    Debug::assert(_defaultLedgerDimension);
        #
        #    changecompany(_offsetCompany)
        #    {
        #        // Get dimension values from the primary side
        #        dimensionSources = new List(Types::Class);
        #        primaryDimensionSpecifiers = null;
        #        if (_ledgerJournalTrans.Company == _offsetCompany)
        #        {
        #            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        #            {
        #                if (_ledgerJournalTrans.LedgerDimension)
        #                {
        #                    primaryDimensionSpecifiers = DimensionDefaultingEngine::getLedgerDimensionSpecifiers(_ledgerJournalTrans.LedgerDimension, true);
        #                }
        #            }
        #            else
        #            {
        #                if (_ledgerJournalTrans.DefaultDimension)
        #                {
        #                    primaryDimensionSpecifiers = DimensionDefaultingEngine::getDefaultDimensionSpecifiers(_ledgerJournalTrans.DefaultDimension);
        #                }
        #            }
        #        }
        #        if (primaryDimensionSpecifiers)
        #        {
        #            dimensionSources.addEnd(primaryDimensionSpecifiers);
        #        }
        #
        #        // Get dimensions from main account
        #        DimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _defaultLedgerDimension);
        #
        #        mergedLedgerDimension = DimensionDefaultingEngine::createLedgerDimension(_defaultLedgerDimension, dimensionSources);
        #    }
        #
        #    return mergedLedgerDimension;
        #}
      ENDSOURCE
      SOURCE #getOffsetLedgerDimForProposalServer
        #/// <summary>
        #/// Gets the offset ledger account for the default account for a proposal.
        #/// </summary>
        #/// <param name="_defaultLedgerDimension">
        #/// The default account.
        #/// </param>
        #/// <param name="_accountNumber">
        #/// The account number of the entity.
        #/// </param>
        #/// <param name="_accountType">
        #/// The account type of the entity.
        #/// </param>
        #/// <param name="_assetBookId">
        #/// The asset book ID.
        #/// </param>
        #/// <param name="_ledgerJournalTable">
        #/// The header for the transaction.
        #/// </param>
        #/// <returns>
        #/// The ledger account.
        #/// </returns>
        #/// <remarks>
        #/// This method mirrors the <c>getOffsetLedgerDimensionForProposal</c> method
        #/// but is guaranteed to run on the server.
        #/// </remarks>
        #server private static LedgerDimensionAccount getOffsetLedgerDimForProposalServer(
        #    LedgerDimensionDefaultAccount   _defaultLedgerDimension,
        #    LedgerJournalAC                 _accountNumber,
        #    LedgerJournalACType             _accountType,
        #    AssetBookIdPurchSalesInvent     _assetBookId,
        #    LedgerJournalTable              _ledgerJournalTable)
        #{
        #    LedgerDimensionAccount  mergedLedgerDimension;
        #    List                    dimensionSources;
        #    DimensionDefault        defaultDimension;
        #
        #    if (_defaultLedgerDimension == 0)
        #    {
        #        return 0;
        #    }
        #
        #    // Get dimensions from journal header (everything should be in the current company)
        #    dimensionSources = new List(Types::Class);
        #    dimensionSources.addEnd(DimensionDefaultingEngine::getDefaultDimensionSpecifiers(_ledgerJournalTable.DefaultDimension));
        #
        #    // Get dimensions from the entity
        #    defaultDimension = LedgerJournalEngine::getAccountDefaultDimension(_accountNumber, curext(), _accountType, _assetBookId);
        #    if (defaultDimension)
        #    {
        #        dimensionSources.addEnd(DimensionDefaultingEngine::getDefaultDimensionSpecifiers(defaultDimension));
        #    }
        #
        #    // Get dimensions from main account
        #    DimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _defaultLedgerDimension);
        #
        #    mergedLedgerDimension = DimensionDefaultingEngine::createLedgerDimension(_defaultLedgerDimension, dimensionSources);
        #
        #    return mergedLedgerDimension;
        #}
      ENDSOURCE
      SOURCE #getTaxInstance
        #/// <summary>
        #///   Gets an instance of <c>TaxCalculation</c> with the tax lines loaded into <c>TmpTaxWorkTrans</c>.
        #/// </summary>
        #/// <param name="_journalNum">
        #///    The journal number.
        #/// </param>
        #/// <param name="_voucher">
        #///    The voucher.
        #/// </param>
        #/// <param name="_invoiceId">
        #///    The invoice ID.
        #/// </param>
        #/// <param name="_persistToTaxUncommitted">
        #///    true if calculated taxes should be persisted to the <c>TaxUncommitted</c> table; otherwise, false.
        #/// </param>
        #/// <param name="_unsavedLedgerJournalTrans">
        #///    If a <c>LedgerJournalTrans</c> record is unsaved then it needs to be passed
        #///    into so that the new values may be considered for tax calculations.
        #/// </param>
        #/// <param name="_forceTaxable_RU">
        #///    true if taxes should be calculated for purpose text building; otherwise, false.
        #/// </param>
        #/// <param name="_transDate">
        #///    The transaction date.
        #/// </param>
        #/// <param name="_taxRateDateOverride">
        #///    The date to be used in overriding the default date when retrieving the tax rate for tax calculation.
        #/// </param>
        #/// <returns>
        #///   An instance of the <c>TaxCalculation</c> class.
        #/// </returns>
        #static public server TaxCalculation getTaxInstance(
        #    LedgerJournalId     _journalNum,
        #    Voucher             _voucher,
        #    InvoiceId           _invoiceId,
        #    boolean             _persistToTaxUncommitted,
        #    LedgerJournalTrans  _unsavedLedgerJournalTrans = null,
        #    boolean             _forceTaxable_RU = false
        #    ,
        #    TransDate           _transDate = dateNull()
        #    , TransDate         _taxRateDateOverride = dateNull()
        #    )
        #{
        #    TaxCalculation taxCalculation;
        #    LedgerJournalTaxDocument ledgerJournalTaxDocument;
        #    DataAreaId dataAreaId;
        #    #ISOCountryRegionCodes
        #    LedgerJournalTrans ledgeJournalTrans;
        #    LedgerJournalTrans ledgerJournalTransServiceTax;
        #    TaxItemGroupHeading taxItemGroupHeadingPOTRev;
        #    boolean            iscentralizedAdvancePayment;
        #    boolean            countryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        #
        #    if (countryRegionIN)
        #    {
        #        ledgeJournalTrans = LedgerJournalTrans::findJournalForVoucher(_voucher, _transDate);
        #        ledgerJournalTransServiceTax = _unsavedLedgerJournalTrans.RecId ? _unsavedLedgerJournalTrans : ledgeJournalTrans;
        #        iscentralizedAdvancePayment = LedgerJournalTrans::isCentralizedAdvancePayment_IN(ledgerJournalTransServiceTax);
        #    }
        #    if (iscentralizedAdvancePayment)
        #    {
        #        ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(_journalNum, _voucher, _invoiceId, ledgerJournalTransServiceTax);
        #        ledgerJournalTaxDocument.parmServTaxCentralizedPayment_IN(iscentralizedAdvancePayment);
        #    }
        #    else
        #    {
        #        ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(_journalNum, _voucher, _invoiceId, _unsavedLedgerJournalTrans);
        #    }
        #    ledgerJournalTaxDocument.parmForceTaxable_RU(_forceTaxable_RU);
        #    ledgerJournalTaxDocument.parmTaxRateDateOverride(_taxRateDateOverride);
        #
        #    // if this is a prepayment and the tax parameter enabling tax on prepayments
        #    // was on, we calculated tax, then turned off, then we need to ensure that
        #    // taxes gets cleared out.
        #    if ((ledgerJournalTaxDocument.isCustomerPayment() && !ledgerJournalTaxDocument.getTaxOnPrepayment()) ||
        #    (ledgerJournalTaxDocument.isVendorPayment() && !ledgerJournalTaxDocument.getTaxOnPrepayment()))
        #    {
        #        TaxUncommitted::deleteForInvoice(tableNum(LedgerJournalTable), LedgerJournalTable::find(_journalNum).RecId, _voucher, _invoiceId);
        #        if (countryRegionIN)
        #        {
        #            TaxUncommitted::deleteForDocumentLine(ledgerJournalTransServiceTax.TableId, ledgerJournalTransServiceTax.RecId);
        #        }
        #    }
        #    if (iscentralizedAdvancePayment)
        #    {
        #        dataAreaId = (ledgerJournalTransServiceTax.Company != '') ? ledgerJournalTransServiceTax.Company : curext();
        #    }
        #    else
        #    {
        #        dataAreaId = _unsavedLedgerJournalTrans.Company ? _unsavedLedgerJournalTrans.Company : _unsavedLedgerJournalTrans.company() ? _unsavedLedgerJournalTrans.company() : curext();
        #    }
        #    changecompany(dataAreaId)
        #    {
        #        if (countryRegionIN)
        #        {
        #            TaxUncommitted::deleteForDocumentLine(ledgerJournalTransServiceTax.TableId, ledgerJournalTransServiceTax.RecId);
        #        }
        #        if (_persistToTaxUncommitted)
        #        {
        #            taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::Journals, ledgerJournalTaxDocument, true, false);
        #
        #            ledgeJournalTrans = LedgerJournalTrans::findJournalForVoucher(_voucher, _transDate);
        #            taxCalculation.parmExchRate(ledgeJournalTrans.exchRate);
        #            taxCalculation.parmExchRateSecond(ledgeJournalTrans.ExchRateSecond);
        #
        #            // <GIN>
        #            if(iscentralizedAdvancePayment)
        #            {
        #                taxCalculation.parmLedgerJournalTrans_IN(ledgerJournalTransServiceTax);
        #            }
        #            if (!taxCalculation.taxExists())
        #            {
        #                if (countryRegionIN)
        #                {
        #                    taxItemGroupHeadingPOTRev = TaxItemGroupHeading::find(ledgerJournalTransServiceTax.TaxItemGroup);
        #                    if (taxItemGroupHeadingPOTRev.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
        #                        && taxItemGroupHeadingPOTRev.ReverseChargePercentage_IN == 0
        #                        && !(ledgerJournalTransServiceTax.TaxGroup
        #                            && ledgerJournalTransServiceTax.TaxItemGroup
        #                            && ledgerJournalTransServiceTax.isTaxable()))
        #                    {
        #                        return taxCalculation;
        #                    }
        #                    taxCalculation.parmLedgerJournalTrans_IN(ledgerJournalTransServiceTax);
        #                }
        #                taxCalculation.calculateTax();
        #            }
        #            else
        #            {
        #                // if this is a prepayment and the tax parameter enabling tax on prepayments
        #                // was on, we calculated tax, then turned off, then we need to ensure that
        #                // taxes gets cleared out.
        #                if ((ledgerJournalTaxDocument.isCustomerPayment() && !ledgerJournalTaxDocument.getTaxOnPrepayment()) ||
        #                (ledgerJournalTaxDocument.isVendorPayment() && !ledgerJournalTaxDocument.getTaxOnPrepayment()))
        #                {
        #                    if (TaxUncommitted::existByDocumentAndInvoice(tableNum(LedgerJournalTable), LedgerJournalTable::find(_journalNum).RecId, _voucher, _invoiceId))
        #                    {
        #                        TaxUncommitted::deleteForInvoice(tableNum(LedgerJournalTable), LedgerJournalTable::find(_journalNum).RecId, _voucher, _invoiceId);
        #                    }
        #                }
        #                if (ledgerJournalTransServiceTax.isPaymentJournal_IN()
        #                    && (TaxItemGroupHeading::find(ledgerJournalTransServiceTax.TaxItemGroup).ServiceTaxBasis_IN !=ServiceTaxBasis_IN::None))
        #                {
        #                    _voucher = TaxSettlement_IN::determineRelatedVoucher(_voucher, ledgerJournalTransServiceTax.TransDate);
        #                    TaxUncommitted::deleteForInvoice(tableNum(LedgerJournalTable), LedgerJournalTable::find(_journalNum).RecId, _voucher, '');
        #                }
        #            }
        #        }
        #        else
        #        {
        #            taxCalculation = TaxCalculation::newForSourceType(TaxSourceType::Journals, ledgerJournalTaxDocument);
        #            if(iscentralizedAdvancePayment)
        #            {
        #                taxCalculation.parmLedgerJournalTrans_IN(ledgerJournalTransServiceTax);
        #            }// </GIN>
        #            taxCalculation.calculateTax();
        #        }
        #    }
        #
        #    return taxCalculation;
        #}
      ENDSOURCE
      SOURCE #getTaxWithholdInstance_IN
        #/// <summary>
        #/// Gets an instance of <c>TaxWithholdCalculation_IN</c> with the withhold tax lines loaded into <c>TmpTaxWithholdWorkTrans_IN</c>.
        #/// </summary>
        #/// <param name="_journalNum">
        #/// The journal number of the journal.
        #/// </param>
        #/// <param name="_voucher">
        #/// The voucher of the journal.
        #/// </param>
        #/// <param name="_invoiceId">
        #/// The invoice ID of the journal.
        #/// </param>
        #/// <param name="_persistToTaxWithholdUncommitted">
        #/// true if calculated withhold taxes should be persisted to the <c>TaxWithholdUncommitted_IN</c> table; otherwise, false.
        #/// </param>
        #/// <param name="_unsavedLedgerJournalTrans">
        #///    If a <c>LedgerJournalTrans</c> record is unsaved then it needs to be passed
        #///    into so that the new values may be considered for withhold tax calculations.
        #/// </param>
        #/// <returns>
        #/// An instance of the <c>TaxWithholdCalculation_IN</c> class.
        #/// </returns>
        #
        #static public server TaxWithholdCalculation_IN getTaxWithholdInstance_IN(
        #    LedgerJournalId     _journalNum,
        #    Voucher             _voucher,
        #    InvoiceId           _invoiceId,
        #    boolean             _persistToTaxWithholdUncommitted,
        #    LedgerJournalTrans  _unsavedLedgerJournalTrans = null)
        #
        #{
        #    LedgerJournalTaxDocument    ledgerJournalTaxWithholdDocument;
        #    TaxWithholdCalculation_IN   taxWithholdJournal;
        #    TmpTaxWithholdWorkTrans_IN  tmpTaxWithholdWorkTransLoc;
        #    TaxWithhold_IN              taxwithhold;
        #    TaxWithholdGroup            taxWithholdGroup;
        #    DataAreaId                  dataAreaId;
        #
        #    taxwithhold = new TaxWithhold_IN();
        #    taxWithholdGroup = _unsavedLedgerJournalTrans.tdsGroup_IN ?  _unsavedLedgerJournalTrans.tdsGroup_IN : _unsavedLedgerJournalTrans.tcsGroup_IN;
        #
        #    ledgerJournalTaxWithholdDocument = LedgerJournalTaxWithholdDocument_IN::construct(_journalNum, _voucher, _invoiceId, _unsavedLedgerJournalTrans);
        #
        #    dataAreaId = _unsavedLedgerJournalTrans.Company ? _unsavedLedgerJournalTrans.Company : _unsavedLedgerJournalTrans.company() ? _unsavedLedgerJournalTrans.company() : curext();
        #    changecompany(dataAreaId)
        #    {
        #        if(_persistToTaxWithholdUncommitted)
        #        {
        #            taxWithholdJournal = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::Journals, ledgerJournalTaxWithholdDocument, true, false);
        #            if (!taxWithholdJournal.taxExists())
        #            {
        #                taxWithholdJournal.calculateTax();
        #            }
        #        }
        #        else
        #        {
        #            taxWithholdJournal = TaxWithholdCalculation_IN::newForSourceType(TaxSourceType::Journals, ledgerJournalTaxWithholdDocument);
        #            taxWithholdJournal.calculateTax();
        #        }
        #        tmpTaxWithholdWorkTransLoc = taxWithholdJournal.tmpTaxWithholdWorkTrans();
        #        taxwithhold.tmpTaxWithholdWorkTrans(tmpTaxWithholdWorkTransLoc);
        #        taxwithhold.loadTaxWithholdRegulation(tmpTaxWithholdWorkTransLoc);
        #        taxwithhold.rateOfDeduction(taxWithholdJournal.parmRateOfDeduction());
        #        taxWithholdJournal.taxWithhold(taxwithhold);
        #    }
        #
        #    return taxWithholdJournal;
        #}
      ENDSOURCE
      SOURCE #getTransDateByReverse
        #/// <summary>
        #/// Finds the transDate in the <c>LedgerJournalTrans</c> table by using the reverse reference.
        #/// </summary>
        #/// <param name="_reverseRecID">
        #/// The reverse reference record ID of the <c>LedgerJournalTrans</c> record.
        #/// </param>
        #/// <returns>
        #/// TransDate from the <c>LedgerJournalTrans</c> table.
        #/// </returns>
        #public server static TransDate getTransDateByReverse(RecId _reverseRecID)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_reverseRecID != 0)
        #    {
        #        select firstonly TransDate from ledgerJournalTrans
        #            where ledgerJournalTrans.RevRecId == _reverseRecID;
        #    }
        #
        #    return ledgerJournalTrans.TransDate;
        #}
      ENDSOURCE
      SOURCE #isCentralizedAdvancePayment_IN
        #/// <summary>
        #/// Checks whether the journal line is linked to Servicetax centralized payment.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// The ledger journal trans.
        #/// </param>
        #/// <returns>
        #/// True if the journal line is linked to Centralized payment.
        #/// </returns>
        #public static boolean isCentralizedAdvancePayment_IN(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    boolean ret;
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
        #        && _ledgerJournalTrans.TaxItemGroup != ''
        #        && conLen(CustVendOpenTransManager::findSharedServiceCompanies(_ledgerJournalTrans.DataAreaId)) > 1
        #        && _ledgerJournalTrans.isPaymentJournal_IN()
        #        && _ledgerJournalTrans.Company != ''
        #        && _ledgerJournalTrans.OffsetCompany != ''
        #        && (_ledgerJournalTrans.Company != _ledgerJournalTrans.OffsetCompany)
        #       )
        #    {
        #        changecompany(_ledgerJournalTrans.Company)
        #        {
        #            if(
        #                TaxParameters::isServiceTaxEnable_IN() // Centralized payment is only for cash basis.
        #                && TaxItemGroupHeading::find(_ledgerJournalTrans.TaxItemGroup).ServiceTaxBasis_IN == ServiceTaxBasis_IN::CashBasis
        #               )
        #            {
        #                ret = true;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isLegalEntityInCountryRegionForDelAct
        #/// <summary>
        #/// Gets a value that indicates whether any of the country specific delete
        #/// action tables of the <c>LedgerJournalTrans</c> table are in scope.
        #/// </summary>
        #/// <returns>
        #/// true if any of the country specific delete action tables of the
        #/// <c>LedgerJournalTrans</c> table are in scope.
        #/// </returns>
        #/// <remarks>
        #/// Only the country specific delete action tables are checked.
        #/// </remarks>
        #public static boolean isLegalEntityInCountryRegionForDelAct()
        #{
        #    SysDictTable dictTable;
        #    SysDictTable dictTableDeleteAction;
        #    container regionCodes;
        #    int i;
        #
        #    dictTable = new SysDictTable(tableNum(LedgerJournalTrans));
        #    for (i = 1; i <= dictTable.deleteActionCnt(); i++)
        #    {
        #        dictTableDeleteAction = new SysDictTable(dictTable.deleteActionTableId(i));
        #        regionCodes = dictTableDeleteAction.getCountryRegionCodes();
        #        if (regionCodes != conNull())
        #        {
        #            if (SysCountryRegionCode::isLegalEntityInCountryRegion(regionCodes))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #isTaxWithholdGroupOnLJT_IN
        #/// <summary>
        #/// Determines whether the specified record have tax withhold group.
        #/// </summary>
        #/// <param name="_ledgerJournalId">
        #/// The ledger journal number of the <c>LedgerJournalTrans</c> table record.
        #/// </param>
        #/// <param name="_transDate">
        #/// The transaction date of the <c>LedgerJournalTrans</c> table record.
        #/// </param>
        #/// <param name="_voucher">
        #/// The voucher number of the <c>LedgerJournalTrans</c> table record.
        #/// </param>
        #/// <returns>
        #/// true if the tax without group of transaction not exits; otherwise, false.
        #/// </returns>
        #public static boolean isTaxWithholdGroupOnLJT_IN(LedgerJournalId    _ledgerJournalId,
        #                                                 TransDate          _transDate,
        #                                                 Voucher            _voucher)
        #{
        #    boolean ret ;
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #               && ledgerJournalTrans.TransDate == _transDate
        #               && ledgerJournalTrans.Voucher == _voucher
        #               && ledgerJournalTrans.TaxWithholdGroup;
        #
        #    ret = ledgerJournalTrans ? false: true;
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #lastLineNum
        #public static server LineNum lastLineNum(LedgerJournalId _ledgerJournalId)
        #{
        #    return (select maxof(LineNum) from ledgerJournalTrans
        #               where ledgerJournalTrans.JournalNum == _ledgerJournalId).LineNum;
        #}
      ENDSOURCE
      SOURCE #ledgerJournalTransPool
        #/// <summary>
        #/// Returns a <c>LedgerJournalTrans</c> table record that represents an AP invoice pool.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// A <c>LedgetJournalTrans</c> table record representing an AP Invoice Pool, or its corresponding Approval Journal.
        #/// </param>
        #/// <returns>
        #/// A <c>LedgerJournalTrans</c> table record representing an AP Invoice Pool.
        #/// </returns>
        #public static LedgerJournalTrans ledgerJournalTransPool(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    LedgerJournalTrans      ledgerJournalTransPool;
        #    LedgerJournalId         vendInvoicePoolJournalNum = LedgerJournalTable::findVendorInvoicePool().JournalNum;
        #
        #    // If the ledgerJournalTrans has the Invoice Pool JournalId, and AccountType of Vend, then this is the Invoice Pool
        #    if (_ledgerJournalTrans.JournalNum == vendInvoicePoolJournalNum && _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        #    {
        #        ledgerJournalTransPool = _ledgerJournalTrans;
        #    }
        #    // If the ledgerJournalTrans we have isn't the Invoice Pool, then it is the Approval Journal;  Get the Invoice Pool
        #    else
        #    {
        #        select firstonly ledgerJournalTransPool
        #            where ledgerJournalTransPool.JournalNum   == vendInvoicePoolJournalNum
        #               && ledgerJournalTransPool.Voucher      == _ledgerJournalTrans.Voucher
        #               && ledgerJournalTransPool.AccountType  == LedgerJournalACType::Vend
        #               && ledgerJournalTransPool.Invoice      == _ledgerJournalTrans.Invoice;
        #    }
        #
        #    return ledgerJournalTransPool;
        #}
      ENDSOURCE
      SOURCE #ledgerJournalTransRegister
        #/// <summary>
        #/// Returns a record in the <c>LedgerJournalTrans</c> table that represents an AP invoice register.
        #/// </summary>
        #/// <param name="_ledgerJournalTrans">
        #/// A record in the <c>LedgetJournalTrans</c> table that represents an AP invoice pool or its
        #/// corresponding approval journal.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>LedgerJournalTrans</c> table that represents an AP invoice register.
        #/// </returns>
        #public static LedgerJournalTrans ledgerJournalTransRegister(LedgerJournalTrans _ledgerJournalTrans)
        #{
        #    LedgerJournalTrans      ledgerJournalTrans;
        #    LedgerJournalId         vendInvoicePoolJournalNum = LedgerJournalTable::findVendorInvoicePool().JournalNum;
        #
        #
        #    select firstonly ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum   != vendInvoicePoolJournalNum
        #            && ledgerJournalTrans.Voucher     == _ledgerJournalTrans.Voucher
        #            && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
        #            && ledgerJournalTrans.Invoice     == _ledgerJournalTrans.Invoice;
        #
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #mainAccount
        #public server static LedgerJournalTrans mainAccount(
        #    LedgerJournalId    _ledgerJournalId,
        #    Voucher            _voucher)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    select firstonly ledgerJournalTrans
        #        where ledgerJournalTrans.JournalNum     == _ledgerJournalId
        #           && ledgerJournalTrans.Voucher        == _voucher
        #           && (ledgerJournalTrans.AccountType   == LedgerJournalACType::Cust ||
        #               ledgerJournalTrans.AccountType   == LedgerJournalACType::Vend ||
        #               ledgerJournalTrans.AccountType   == LedgerJournalACType::Project);
        #
        #    if (!ledgerJournalTrans)
        #    {
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum == _ledgerJournalId
        #               && ledgerJournalTrans.Voucher    == _voucher;
        #    }
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #mcrFindByInvoice
        #/// <summary>
        #/// Finds the specified record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <param name="_invoiceId">
        #/// The InvoiceID ID of the <c>LedgerJournalTrans</c> table record to find.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in <c>LedgerJournalTrans</c>; otherwise, an empty record.
        #/// </returns>
        #public static LedgerJournalTrans mcrFindByInvoice(
        #    InvoiceId   _invoiceId,
        #    boolean     _forUpdate = false)
        #
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_invoiceId)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.MarkedInvoice == _invoiceId;
        #    }
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #mcrFindByPaymIdPaymModePaymRef
        #/// <summary>
        #/// Given the payment id,payment mode and paym reference return a record in the <c>LedgerJournalTrans</c> table.
        #/// </summary>
        #/// <param name="_paymId">
        #/// The record ID of the <c>LedgerJournalTrans</c> record to find.
        #/// </param>
        #/// <param name="_paymMode">
        #/// The record ID of the <c>LedgerJournalTrans</c> record to find.
        #/// </param>
        #/// <param name="_paymReference">
        #/// The record ID of the <c>LedgerJournalTrans</c> record to find.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
        #/// </returns>
        #public static LedgerJournalTrans mcrFindByPaymIdPaymModePaymRef(
        #    MCRPaymOrderId  _paymId,
        #    PaymMode        _paymMode,
        #    PaymReference   _paymReference,
        #    boolean         _forUpdate)
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_paymId && _paymMode && _paymReference)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.mcrPaymOrderID == _paymId
        #            && ledgerJournalTrans.PaymMode == _paymMode
        #            && ledgerJournalTrans.PaymReference == _paymReference;
        #    }
        #    return ledgerJournalTrans;
        #}
      ENDSOURCE
      SOURCE #mcrFindRefPaymId
        #/// <summary>
        #/// Finds the reference payment ID pertaining to the passed payment record ID.
        #/// </summary>
        #/// <param name="_mcrRefPaymId">
        #/// The record id of the referenced payment record.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A boolean that determines whether to select the record for update.
        #/// </param>
        #/// <returns>
        #/// The <c>LedgerJournalTrans</c> record contianing the passed payment record ID.
        #/// </returns>
        #public server static LedgerJournalTrans mcrFindRefPaymId(
        #    RecId   _mcrRefPaymId,
        #    boolean _forUpdate = false)
        #
        #{
        #    LedgerJournalTrans ledgerJournalTrans;
        #
        #    if (_mcrRefPaymId)
        #    {
        #        ledgerJournalTrans.selectForUpdate(_forUpdate);
        #
        #        select firstonly ledgerJournalTrans
        #            where ledgerJournalTrans.mcrRefPaymID == _mcrRefPaymId;
        #    }
        #    return ledgerJournalTrans;
        #}
        #
      ENDSOURCE
      SOURCE #revertBankBorderoNum_BR
        #/// <summary>
        #/// Finds LedgerJournalTrans records and sets their bordero number to empty.
        #/// </summary>
        #/// <param name="_transDate">
        #/// The transaction date for which to find the LedgerJournalTrans records.
        #/// </param>
        #/// <param name="_voucher">
        #/// The voucher for which to find the LedgerJournalTrans records.
        #/// </param>
        #/// <param name="_borderoNum">
        #/// The bordero number for which to find the LedgerJournalTrans records.
        #/// This is generally the bordero being reversed.
        #/// </param>
        #/// <param name="_journalNum">
        #/// If supplied, the LedgerJournalTrans record that contains this journal number is skipped.
        #/// </param>
        #/// <remarks>
        #/// This method is used by the bordero reversal process.
        #/// </remarks>
        #public static void revertBankBorderoNum_BR(TransDate _transDate,
        #                                           Voucher _voucher,
        #                                           BorderoSequenceNum_BR _borderoNum,
        #                                           LedgerJournalId _journalNum = '')
        #{
        #    LedgerJournalTrans              ledgerJournalTransLocal;
        #    LedgerJournalTransPayment_BR    ledgerJournalTransPayment;
        #    ;
        #
        #    if (_journalNum != '')
        #    {
        #        update_recordset ledgerJournalTransPayment
        #            setting BorderoSequenceNum_BR = ''
        #        join ledgerJournalTransLocal
        #            where ledgerJournalTransLocal.RecId                  == ledgerJournalTransPayment.RefRecId &&
        #                  ledgerJournalTransLocal.TransDate              == _transDate     &&
        #                  ledgerJournalTransLocal.Voucher                == _voucher       &&
        #                  ledgerJournalTransLocal.PaymReference          == _borderoNum &&
        #                  ledgerJournalTransLocal.JournalNum             != _journalNum;
        #    }
        #    else
        #    {
        #        update_recordset ledgerJournalTransPayment
        #            setting BorderoSequenceNum_BR = ''
        #        join ledgerJournalTransLocal
        #            where ledgerJournalTransLocal.RecId                  == ledgerJournalTransPayment.RefRecId &&
        #                  ledgerJournalTransLocal.TransDate              == _transDate     &&
        #                  ledgerJournalTransLocal.Voucher                == _voucher       &&
        #                  ledgerJournalTransLocal.PaymReference          == _borderoNum;
        #    }
        #}
      ENDSOURCE
      SOURCE #revertBankChequeNum
        #/// <summary>
        #/// Finds <c>LedgerJournalTrans</c> records and sets their check number to empty.
        #/// </summary>
        #/// <param name="_transDate">
        #/// The transaction date to find records for.
        #/// </param>
        #/// <param name="_voucher">
        #/// The voucher to find records for.
        #/// </param>
        #/// <param name="_bankChequeNum">
        #/// The check number to find records for.
        #/// </param>
        #/// <param name="_journalNum">
        #/// The journal number of a <c>LedgerJournalTrans</c> record that should be skipped; optional.
        #/// </param>
        #/// <remarks>
        #/// This method is used by the check reversal process.
        #/// </remarks>
        #public static void revertBankChequeNum(TransDate _transDate,
        #    Voucher         _voucher,
        #    BankChequeNum   _bankChequeNum,
        #    LedgerJournalId _journalNum = '')
        #{
        #    LedgerJournalTrans  ledgerJournalTransLocal;
        #
        #    if (_journalNum != '')
        #    {
        #        update_recordset ledgerJournalTransLocal
        #            setting BankChequeNum = ''
        #            where ledgerJournalTransLocal.TransDate      == _transDate     &&
        #                  ledgerJournalTransLocal.Voucher        == _voucher       &&
        #                  ledgerJournalTransLocal.BankChequeNum  == _bankChequeNum &&
        #                  ledgerJournalTransLocal.JournalNum     != _journalNum;
        #    }
        #    else
        #    {
        #        update_recordset ledgerJournalTransLocal
        #            setting BankChequeNum = ''
        #            where ledgerJournalTransLocal.TransDate      == _transDate     &&
        #                  ledgerJournalTransLocal.Voucher        == _voucher       &&
        #                  ledgerJournalTransLocal.BankChequeNum  == _bankChequeNum;
        #    }
        #}
      ENDSOURCE
      SOURCE #splitCreateNewVoucher
        #private static server Voucher splitCreateNewVoucher(LedgerJournalId _ledgerJournalId)
        #{
        #    LedgerJournalTable  ledgerJournalTable;
        #    LedgerJournalName   ledgerJournalName;
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    select firstonly JournalNum from ledgerJournalTable
        #        where ledgerJournalTable.JournalNum == _ledgerJournalId
        #    join firstonly NewVoucher from ledgerJournalName
        #        where ledgerJournalName.JournalName == ledgerJournalTable.JournalName;
        #
        #    if (ledgerJournalName.NewVoucher == NewVoucher::OneVoucher)
        #    {
        #        select firstonly Voucher from ledgerJournalTrans
        #            where ledgerJournalTrans.JournalNum == _ledgerJournalId;
        #
        #        if (ledgerJournalTrans)
        #        {
        #            return ledgerJournalTrans.Voucher;
        #        }
        #    }
        #
        #    return new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_ledgerJournalId))).getNew(false);
        #}
      ENDSOURCE
      SOURCE #totalTaxAmountSingleLineIL
        #/// <summary>
        #/// Gets the total tax amount for the current line.
        #/// </summary>
        #/// <param name="_params">
        #/// A container that contains the parameters <paramref name="LedgerJournalTrans" />, <paramref
        #/// name="IncludeActualTax" />, <paramref name="IncludeUseTax" />, and <paramref
        #/// name="UseTransactionalCurrency" />.
        #/// </param>
        #/// <returns>
        #/// A container that contains the tax amount for the current line.
        #/// </returns>
        #/// <remarks>
        #/// This method exists so calls can transition to IL before computing taxes. API consumers should use
        #/// the <c>LedgerJournalTrans.totalTaxAmountSingleLine</c> method.
        #/// </remarks>
        #private static container totalTaxAmountSingleLineIL(container _params)
        #{
        #    LedgerJournalTable ledgerJournalTable;
        #    TaxCalculation taxCalculation;
        #    LedgerJournalTrans ledgerJournalTrans;
        #    boolean includeActualTax;
        #    boolean includeUseTax;
        #    boolean useTransactionalCurrency;
        #
        #    // Unpack incoming parameters
        #    [ledgerJournalTrans, includeActualTax, includeUseTax, useTransactionalCurrency] = _params;
        #
        #    if (!includeActualTax && !useTransactionalCurrency)
        #    {
        #        Error::wrongUseOfFunction(funcName());
        #    }
        #
        #    ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        #
        #    if (!TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice) ||
        #                         !ledgerJournalTrans.RecId)
        #    {
        #
        #            taxCalculation = LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, false, ledgerJournalTrans
        #            , false, ledgerJournalTrans.TransDate//Service tax
        #            );
        #
        #        if (includeActualTax)
        #        {
        #            if (includeUseTax)
        #            {
        #                return [taxCalculation.totalRegTaxAmountSingleLineIncludeUseTax(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, false)];
        #            }
        #            else
        #            {
        #                return [taxCalculation.totalRegulatedTaxAmountSingleLine(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId)];
        #            }
        #        }
        #        else
        #        {
        #            return [taxCalculation.totalTaxAmountSingleLine(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, false, includeUseTax)];
        #        }
        #    }
        #
        #    if (includeActualTax)
        #    {
        #        return [TaxUncommitted::getActualTaxAmountForSourceLine(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, includeUseTax, useTransactionalCurrency)];
        #    }
        #    else
        #    {
        #        return [TaxUncommitted::getCalculatedTaxAmountForSourceLine(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, includeUseTax)];
        #    }
        #}
      ENDSOURCE
      SOURCE #updateApproveJBAPayment
        #/// <summary>
        #/// Updates field approved and approver according to the journal number
        #/// </summary>
        #/// <param name="_approver">
        #/// The approver who approved journal transaction.
        #/// </param>
        #/// <param name="_journalNum">
        #/// The journal number.
        #/// </param>
        #/// <remarks>
        #/// For Japan feature JBA bank format.
        #/// </remarks>
        #public static server void updateApproveJBAPayment(
        #    HcmApprover     _approver,
        #    LedgerJournalId _journalNum)
        #{
        #    LedgerJournalTrans  ledgerJournalTrans;
        #
        #    if(!_approver)
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #    ledgerJournalTrans.skipDataMethods(true);
        #
        #    update_recordset ledgerJournalTrans
        #        setting Approved   = NoYes::Yes,
        #            Approver = _approver
        #    where ledgerJournalTrans.JournalNum == _journalNum;
        #
        #    ttscommit;
        #
        #}
      ENDSOURCE
    ENDMETHODS
    EVENTS
      METHOD #insert
        EVENTHANDLERS
          EVENTHANDLER #insertPost_BR
            PROPERTIES
              CalledWhen          #Post
              Class               #LedgerJournalTransHandler_BR
              Method              #insertPostHandler
              AOTlink             #\Classes\LedgerJournalTransHandler_BR\insertPostHandler
            ENDPROPERTIES
            
          ENDEVENTHANDLER
        ENDEVENTHANDLERS
      ENDMETHOD
      METHOD #update
        EVENTHANDLERS
          EVENTHANDLER #updatePost
            PROPERTIES
              CalledWhen          #Post
              Class               #LedgerJournalTransEventHandler
              Method              #updatePost_SLN
              AOTlink             #\Classes\LedgerJournalTransEventHandler\updatePost_SLN
            ENDPROPERTIES
            
          ENDEVENTHANDLER
        ENDEVENTHANDLERS
      ENDMETHOD
    ENDEVENTS
  ENDTABLE
  

***Element: END
