Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; 
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SalesTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #SalesTable
      Label               #@SYS25193
      SearchLinkRefName   #EPSalesTableInfo
      TitleField1         #SalesId
      TitleField2         #SalesName
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #CustTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      TableGroup          #WorksheetHeader
      PrimaryIndex        #SalesIdx
      ClusterIndex        #SalesIdx
      ModifiedDateTime    #Yes
      DEL_modifiedTime    #Yes
      ModifiedBy          #Yes
      ModifiedTransactionId #Yes
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      CreatedBy           #Yes
      CreatedTransactionId #Yes
      DeveloperDocumentation  #@SYS124484
      Origin              #{2C0A016E-0000-1000-B787-EA7473546162}
      LegacyId            #366
    ENDPROPERTIES
    
    FIELDS
      FIELD #AddressRefRecId
        INT64
        PROPERTIES
          Name                #AddressRefRecId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{AF38A73A-6C15-400A-A82D-80DC6627184C}
          LegacyId            #127
          ExtendedDataType    #AddressRefRecId
        ENDPROPERTIES
        
      FIELD #AddressRefTableId
        INT
        PROPERTIES
          Name                #AddressRefTableId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{78031ED8-AD82-44A0-9C85-1B3ADA65A756}
          LegacyId            #69
          ExtendedDataType    #AddressRefTableId
        ENDPROPERTIES
        
      FIELD #AutoSummaryModuleType
        ENUM
        PROPERTIES
          Name                #AutoSummaryModuleType
          Label               #@SYS57738
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{E26AD532-B742-41AA-A23D-E461072A8E75}
          LegacyId            #85
          EnumType            #ModuleCustSales
        ENDPROPERTIES
        
      FIELD #BankAccount_LV
        STRING
        PROPERTIES
          Name                #BankAccount_LV
          Label               #@GLS220786
          HelpText            #@GLS220787
          Table               #SalesTable
          CountryRegionCodes  #CZ,EE,HU,LT,LV,PL
          IgnoreEDTRelation   #Yes
          Origin              #{6DAF6150-8F6E-432A-9A60-69693864E67E}
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeCode
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeCode
          Table               #SalesTable
          CountryRegionCodes  #NO
          IgnoreEDTRelation   #Yes
          Origin              #{90004273-4C03-46CF-BA8E-2810A7CC6B9C}
          LegacyId            #118
          ExtendedDataType    #BankCentralBankPurposeCode
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeText
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeText
          Table               #SalesTable
          CountryRegionCodes  #NO
          Origin              #{54DE2034-CD4B-49F7-929F-DF669C1E04D9}
          LegacyId            #105
          ExtendedDataType    #BankCentralBankPurposeText
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #BankDocumentType
        ENUM
        PROPERTIES
          Name                #BankDocumentType
          Label               #@SYS313726
          HelpText            #@SYS316247
          Table               #SalesTable
          Origin              #{00363579-7A1E-46AC-9882-2160854B1746}
          LegacyId            #209
          ExtendedDataType    #BankDocumentFacilityNature
          EnumType            #BankDocumentType
        ENDPROPERTIES
        
      FIELD #CaseTagging
        ENUM
        PROPERTIES
          Name                #CaseTagging
          Table               #SalesTable
          Origin              #{6EAAD564-D19E-42CA-90CE-333AD42337FE}
          LegacyId            #125
          ExtendedDataType    #RFIDCaseTagging
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CashDisc
        STRING
        PROPERTIES
          Name                #CashDisc
          HelpText            #@SYS851
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{3351C9CA-B7A5-4BE1-80AD-59C8B89F2CB6}
          LegacyId            #17
          ExtendedDataType    #CustCashDiscCode
        ENDPROPERTIES
        
      FIELD #CashDiscBaseDate
        DATE
        PROPERTIES
          Name                #CashDiscBaseDate
          Table               #SalesTable
          Origin              #{EB84730D-AE52-420B-ACB4-A4FB496DFD40}
          ExtendedDataType    #CashDiscBaseDate
        ENDPROPERTIES
        
      FIELD #CashDiscBaseDays
        INT
        PROPERTIES
          Name                #CashDiscBaseDays
          Visible             #No
          Table               #SalesTable
          Origin              #{3D05D707-9DB3-4FE7-9A6A-549E72092FBB}
          ExtendedDataType    #CashDiscBaseDays
        ENDPROPERTIES
        
      FIELD #CashDiscPercent
        REAL
        PROPERTIES
          Name                #CashDiscPercent
          Table               #SalesTable
          Origin              #{D77DA4DD-5B6B-41F6-910A-B991985BC6F7}
          LegacyId            #59
          ExtendedDataType    #DiscPct
        ENDPROPERTIES
        
      FIELD #CommissionGroup
        STRING
        PROPERTIES
          Name                #CommissionGroup
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{23B8E66F-F022-478B-9679-A717304B4A7C}
          LegacyId            #53
          ExtendedDataType    #CommissCustomerGroup
        ENDPROPERTIES
        
      FIELD #ConsTarget_JP
        ENUM
        PROPERTIES
          Name                #ConsTarget_JP
          Table               #SalesTable
          Origin              #{2104ED2F-61F3-42B2-86F0-EC0659C6EC96}
          LegacyId            #8081
          ExtendedDataType    #CustConsTarget_JP
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ContactPersonId
        STRING
        PROPERTIES
          Name                #ContactPersonId
          HelpText            #@SYS26087
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{ACA92180-182E-4FE5-981F-2FD9E01B824D}
          LegacyId            #60
          ExtendedDataType    #ContactPersonId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CountyOrigDest
        STRING
        PROPERTIES
          Name                #CountyOrigDest
          Table               #SalesTable
          Origin              #{B49587E3-D311-4EB8-A084-FC518A09E395}
          LegacyId            #28
          ExtendedDataType    #AddressCountyOrigDest
        ENDPROPERTIES
        
      FIELD #CovStatus
        INT
        PROPERTIES
          Name                #CovStatus
          Table               #SalesTable
          Origin              #{37010D16-C609-4B4D-A935-8047DEDCA044}
          LegacyId            #52
          ExtendedDataType    #CovStatus
        ENDPROPERTIES
        
      FIELD #CreditCardApprovalAmount
        REAL
        PROPERTIES
          Name                #CreditCardApprovalAmount
          Label               #@SYS116984
          HelpText            #@SYS117747
          ConfigurationKey    #CreditCard
          Table               #SalesTable
          Origin              #{F3C5C676-C9A9-4CD2-893C-2EEBB05C675C}
          LegacyId            #142
          ExtendedDataType    #AmountMST
        ENDPROPERTIES
        
      FIELD #CreditCardAuthorization
        STRING
        PROPERTIES
          Name                #CreditCardAuthorization
          ConfigurationKey    #CreditCard
          Table               #SalesTable
          Origin              #{DBD5CC2D-7F04-47C1-A279-48F4B6295695}
          LegacyId            #143
          ExtendedDataType    #CreditCardAuthorization
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CreditCardAuthorizationError
        ENUM
        PROPERTIES
          Name                #CreditCardAuthorizationError
          Label               #@SYS117748
          HelpText            #@SYS117749
          ConfigurationKey    #CreditCard
          Table               #SalesTable
          Origin              #{BB03AB58-19D5-45F6-BC59-88BC662374BC}
          LegacyId            #148
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CreditCardCustRefId
        INT64
        PROPERTIES
          Name                #CreditCardCustRefId
          Label               #@SYS71999
          HelpText            #@SYS117745
          ConfigurationKey    #CreditCard
          Table               #SalesTable
          Origin              #{DE0FF463-A323-4E60-B00D-8981F55F2A65}
          LegacyId            #135
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #CreditNoteReasonCode
        INT64
        PROPERTIES
          Name                #CreditNoteReasonCode
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{0D176954-E170-497F-A088-BFD5B3970EC0}
          ExtendedDataType    #ReasonTableRefRecId
        ENDPROPERTIES
        
      FIELD #CurBankAccount_LV
        STRING
        PROPERTIES
          Name                #CurBankAccount_LV
          Label               #@GLS108456
          HelpText            #@GLS220789
          Table               #SalesTable
          CountryRegionCodes  #CZ,EE,HU,LT,LV,PL
          IgnoreEDTRelation   #Yes
          Origin              #{D8A16152-9D68-4E3E-AA75-D93B0FF9BB37}
          ExtendedDataType    #CompanyBankAccountId
        ENDPROPERTIES
        
      FIELD #CurrencyCode
        STRING
        PROPERTIES
          Name                #CurrencyCode
          HelpText            #@SYS15068
          Mandatory           #Yes
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{38038F9E-5656-41FF-90C8-A23D387225EC}
          LegacyId            #15
          ExtendedDataType    #CustCurrencyCode
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #CustAccount
        STRING
        PROPERTIES
          Name                #CustAccount
          HelpText            #@SYS15261
          Mandatory           #Yes
          Table               #SalesTable
          Origin              #{079A1A78-83CF-41BE-B2F1-E72029811495}
          LegacyId            #4
          ExtendedDataType    #CustAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CustBankAccount_LV
        STRING
        PROPERTIES
          Name                #CustBankAccount_LV
          Label               #@SYS88297
          HelpText            #@GLS220788
          Table               #SalesTable
          CountryRegionCodes  #LV
          Origin              #{D3D32CE8-C128-436D-9402-D22130B1DE1C}
          ExtendedDataType    #CustBankAccountId
        ENDPROPERTIES
        
      FIELD #CustGroup
        STRING
        PROPERTIES
          Name                #CustGroup
          HelpText            #@SYS16729
          Mandatory           #Yes
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{DE838310-96F5-43FB-A6EE-955A4A654B31}
          LegacyId            #20
          ExtendedDataType    #CustGroupId
        ENDPROPERTIES
        
      FIELD #CustInvoiceId
        STRING
        PROPERTIES
          Name                #CustInvoiceId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{C952F4F7-360E-47C9-94E9-B3FC3ED8D3FE}
          LegacyId            #130
          ExtendedDataType    #CustInvoiceId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CustomerRef
        STRING
        PROPERTIES
          Name                #CustomerRef
          Table               #SalesTable
          Origin              #{61C36B55-918E-4B9D-9A86-E3243DD56727}
          LegacyId            #27
          ExtendedDataType    #CustRef
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #CustomsExportOrder_IN
        ENUM
        PROPERTIES
          Name                #CustomsExportOrder_IN
          Label               #@GLS5723
          HelpText            #@GLS5730
          Table               #SalesTable
          CountryRegionCodes  #IN
          Origin              #{B4EB7CB9-FAB1-48FD-B6C4-EA19DBE6CFDF}
          LegacyId            #8032
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CustomsShippingBill_IN
        ENUM
        PROPERTIES
          Name                #CustomsShippingBill_IN
          Label               #@GLS5773
          HelpText            #@GLS5710
          Table               #SalesTable
          CountryRegionCodes  #IN
          Origin              #{55226A69-F87F-4804-A7BD-0CCE8ACB7B4E}
          LegacyId            #8053
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DAXIntegrationID
        GUID
        PROPERTIES
          Name                #DAXIntegrationID
          Label               #@SYS4004696
          HelpText            #@SYS4004696
          Table               #SalesTable
          Origin              #{D5F03120-745F-430D-A803-5054A2DADC0A}
          ExtendedDataType    #ConnIntegrationKey
        ENDPROPERTIES
        
      FIELD #Deadline
        DATE
        PROPERTIES
          Name                #Deadline
          Table               #SalesTable
          Origin              #{23A0CBD9-6908-406C-A037-A0F3322C0A85}
          LegacyId            #65
          ExtendedDataType    #SalesDeadline
        ENDPROPERTIES
        
      FIELD #DefaultDimension
        INT64
        PROPERTIES
          Name                #DefaultDimension
          Table               #SalesTable
          Origin              #{692AAB74-FC19-40E0-BC23-E9635887ADF6}
          LegacyId            #133
          ExtendedDataType    #DimensionDefault
        ENDPROPERTIES
        
      FIELD #DeliveryDate
        DATE
        PROPERTIES
          Name                #DeliveryDate
          Table               #SalesTable
          Origin              #{48D18071-37E0-43CF-8E6B-4D3475011989}
          LegacyId            #6
          ExtendedDataType    #SalesShippingDate
        ENDPROPERTIES
        
      FIELD #DeliveryDateControlType
        ENUM
        PROPERTIES
          Name                #DeliveryDateControlType
          Table               #SalesTable
          Origin              #{DD71BAA6-0E7C-4E47-A87E-E35C2DDEC44F}
          LegacyId            #167
          EnumType            #SalesDeliveryDateControlType
        ENDPROPERTIES
        
      FIELD #DeliveryName
        STRING
        PROPERTIES
          Name                #DeliveryName
          GroupPrompt         #@SYS7399
          Table               #SalesTable
          Origin              #{DBC66C5C-696C-4C52-8D30-AE01805FB545}
          LegacyId            #50
          ExtendedDataType    #LogisticsDeliveryName
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #DeliveryPostalAddress
        INT64
        PROPERTIES
          Name                #DeliveryPostalAddress
          Table               #SalesTable
          Origin              #{D59D0A8A-35DB-454D-8A36-98F4FE1258DA}
          LegacyId            #192
          ExtendedDataType    #LogisticsPostalAddressRecId
        ENDPROPERTIES
        
      FIELD #DirectDebitMandate
        INT64
        PROPERTIES
          Name                #DirectDebitMandate
          Table               #SalesTable
          Origin              #{205E6B52-9A0B-41E8-B5A1-16CD33595912}
          ExtendedDataType    #CustDirectDebitMandateRecId
        ENDPROPERTIES
        
      FIELD #DiscPercent
        REAL
        PROPERTIES
          Name                #DiscPercent
          Table               #SalesTable
          Origin              #{21A3BA65-03E6-40CA-8CD1-6558C3A09AB7}
          LegacyId            #21
          ExtendedDataType    #SalesEndDiscPct
        ENDPROPERTIES
        
      FIELD #DlvMode
        STRING
        PROPERTIES
          Name                #DlvMode
          HelpText            #@SYS1529
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{0C89D9E5-6EE7-4AC6-9D0C-6DB8DBBD9033}
          LegacyId            #31
          ExtendedDataType    #CustDlvModeId
        ENDPROPERTIES
        
      FIELD #DlvReason
        STRING
        PROPERTIES
          Name                #DlvReason
          HelpText            #@SYS79297
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{04D9D066-FE11-44CB-85A9-D73738F42699}
          LegacyId            #111
          ExtendedDataType    #DlvReasonId
        ENDPROPERTIES
        
      FIELD #DlvTerm
        STRING
        PROPERTIES
          Name                #DlvTerm
          HelpText            #@SYS2036
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{595AA3A1-DE95-4C3F-A121-DDC7E2367CBC}
          LegacyId            #30
          ExtendedDataType    #CustDlvTermId
        ENDPROPERTIES
        
      FIELD #DocumentStatus
        ENUM
        PROPERTIES
          Name                #DocumentStatus
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{ABC0126C-8476-47F4-A15B-EFCE3BF5B25D}
          LegacyId            #13
          EnumType            #DocumentStatus
        ENDPROPERTIES
        
      FIELD #EInvoiceAccountCode
        STRING
        PROPERTIES
          Name                #EInvoiceAccountCode
          Table               #SalesTable
          Origin              #{AB8EBB95-B284-4E18-9A0D-46561CFB3B36}
          LegacyId            #122
          ExtendedDataType    #EInvoiceAccountCode
          StringSize          #35
        ENDPROPERTIES
        
      FIELD #EInvoiceLineSpec
        ENUM
        PROPERTIES
          Name                #EInvoiceLineSpec
          Table               #SalesTable
          Origin              #{A3C3AC5E-2799-4653-9970-B1ED11799CD7}
          LegacyId            #81
          ExtendedDataType    #EInvoiceLineSpecific
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Email
        STRING
        PROPERTIES
          Name                #Email
          Table               #SalesTable
          Origin              #{3625062A-10F9-4D84-8680-CFA1FC228A6E}
          LegacyId            #56
          ExtendedDataType    #Email
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #EndDisc
        STRING
        PROPERTIES
          Name                #EndDisc
          Table               #SalesTable
          Origin              #{D13BD586-3B30-4226-B08B-12C263DE59E4}
          LegacyId            #26
          ExtendedDataType    #CustEndDiscCode
        ENDPROPERTIES
        
      FIELD #EnterpriseNumber
        STRING
        PROPERTIES
          Name                #EnterpriseNumber
          Table               #SalesTable
          Origin              #{5DDD4984-938D-499F-9BAC-8B54862FD301}
          LegacyId            #47
          ExtendedDataType    #TaxEnterpriseNumber
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #Estimate
        REAL
        PROPERTIES
          Name                #Estimate
          Table               #SalesTable
          Origin              #{61FA4288-E9A7-4B50-8000-D6C0BE66F265}
          LegacyId            #88
          ExtendedDataType    #SalesEstimateGross
        ENDPROPERTIES
        
      FIELD #ExportReason
        STRING
        PROPERTIES
          Name                #ExportReason
          Table               #SalesTable
          Origin              #{BDF2A47E-62FD-403E-926C-0EAC8101F0E4}
          LegacyId            #97
          ExtendedDataType    #SalesExportReason
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #FiscalDocType_PL
        ENUM
        PROPERTIES
          Name                #FiscalDocType_PL
          Table               #SalesTable
          CountryRegionCodes  #PL
          Origin              #{49ED515B-2EC5-4A7B-914F-BA25714F0CB8}
          EnumType            #PlFiscalDocType
        ENDPROPERTIES
        
      FIELD #FixedDueDate
        DATE
        PROPERTIES
          Name                #FixedDueDate
          Table               #SalesTable
          Origin              #{9A652D59-922F-4633-A165-E32403615636}
          LegacyId            #94
          ExtendedDataType    #SalesFixedDueDate
        ENDPROPERTIES
        
      FIELD #FixedExchRate
        REAL
        PROPERTIES
          Name                #FixedExchRate
          Table               #SalesTable
          Origin              #{20BEB925-F8D0-42ED-99FD-B058E99728B8}
          LegacyId            #83
          ExtendedDataType    #SalesFixedExchRate
        ENDPROPERTIES
        
      FIELD #FreightSlipType
        ENUM
        PROPERTIES
          Name                #FreightSlipType
          Table               #SalesTable
          Origin              #{48A1C2DE-46D4-4576-8D3C-A23DF9BAF0CD}
          LegacyId            #12
          ExtendedDataType    #CustFreightSlipType
          EnumType            #FreightSlipType
        ENDPROPERTIES
        
      FIELD #FreightZone
        STRING
        PROPERTIES
          Name                #FreightZone
          Table               #SalesTable
          Origin              #{2F277711-3BAE-4220-AD50-D4EBEC6971E8}
          LegacyId            #57
          ExtendedDataType    #CustFreightZoneId
        ENDPROPERTIES
        
      FIELD #GiroType
        ENUM
        PROPERTIES
          Name                #GiroType
          Table               #SalesTable
          Origin              #{E1FA6756-C778-4A68-93BF-0482589B37B3}
          LegacyId            #86
          ExtendedDataType    #PaymentStubInvoiceId
          EnumType            #PaymentStub
        ENDPROPERTIES
        
      FIELD #InclTax
        ENUM
        PROPERTIES
          Name                #InclTax
          Table               #SalesTable
          Origin              #{3D2F98D2-250B-444F-ADBC-937A108DDF42}
          LegacyId            #80
          ExtendedDataType    #InclTax
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyAllowIndirectCreation
        ENUM
        PROPERTIES
          Name                #InterCompanyAllowIndirectCreation
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{3325E522-FB8E-4D8E-833A-427AB7654DE4}
          LegacyId            #48
          ExtendedDataType    #InterCompanyAllowIndirectCreation
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyAllowIndirectCreationOrig
        ENUM
        PROPERTIES
          Name                #InterCompanyAllowIndirectCreationOrig
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{E50EBBC8-0E4A-43D0-9832-369A87B86C6D}
          LegacyId            #49
          ExtendedDataType    #InterCompanyAllowIndirectCreation
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyAutoCreateOrders
        ENUM
        PROPERTIES
          Name                #InterCompanyAutoCreateOrders
          Table               #SalesTable
          Origin              #{248006CF-2222-435B-B9D9-6F5611B09120}
          LegacyId            #39
          ExtendedDataType    #InterCompanyAutoCreateOrders
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyCompanyId
        STRING
        PROPERTIES
          Name                #InterCompanyCompanyId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{5A854354-AACF-41A7-9ED5-764A04627F61}
          LegacyId            #107
          ExtendedDataType    #InterCompanyCompanyId
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #InterCompanyDirectDelivery
        ENUM
        PROPERTIES
          Name                #InterCompanyDirectDelivery
          Table               #SalesTable
          Origin              #{8E8BBD6B-BDC3-4F5D-97F6-33969F616D2D}
          LegacyId            #40
          ExtendedDataType    #InterCompanyDirectDelivery
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyDirectDeliveryOrig
        ENUM
        PROPERTIES
          Name                #InterCompanyDirectDeliveryOrig
          Table               #SalesTable
          Origin              #{6E78A2B9-9ED7-4D22-AFC2-D8DF9E37D1BD}
          LegacyId            #41
          ExtendedDataType    #InterCompanyDirectDelivery
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyOrder
        ENUM
        PROPERTIES
          Name                #InterCompanyOrder
          Table               #SalesTable
          Origin              #{69ECF485-CF8C-4A5C-BBAB-22C1166CC404}
          LegacyId            #109
          ExtendedDataType    #InterCompanyCustomer
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InterCompanyOrigin
        ENUM
        PROPERTIES
          Name                #InterCompanyOrigin
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{1F00600F-CD84-4FEA-BC43-073162CE27B9}
          LegacyId            #55
          EnumType            #InterCompanyOrigin
        ENDPROPERTIES
        
      FIELD #InterCompanyOriginalCustAccount
        STRING
        PROPERTIES
          Name                #InterCompanyOriginalCustAccount
          Table               #SalesTable
          Origin              #{96915D43-3AA5-40AB-93EA-A6EE52C6034F}
          LegacyId            #22
          ExtendedDataType    #InterCompanyOriginalCustAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InterCompanyOriginalSalesId
        STRING
        PROPERTIES
          Name                #InterCompanyOriginalSalesId
          Table               #SalesTable
          Origin              #{13320496-EB73-47EC-90D9-DCBE0F03C330}
          LegacyId            #14
          ExtendedDataType    #InterCompanyOriginalSalesId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InterCompanyPurchId
        STRING
        PROPERTIES
          Name                #InterCompanyPurchId
          Table               #SalesTable
          Origin              #{9F8D84DC-F319-4E81-A12C-E016E0852028}
          LegacyId            #108
          ExtendedDataType    #InterCompanyPurchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #IntrastatAddValue_LV
        REAL
        PROPERTIES
          Name                #IntrastatAddValue_LV
          Table               #SalesTable
          Origin              #{71BBEDA4-DFA6-483E-A0E0-3DC058BF6368}
          LegacyId            #16047
          ExtendedDataType    #LvIntrastatAddValue
        ENDPROPERTIES
        
      FIELD #IntrastatFulfillmentDate_HU
        DATE
        PROPERTIES
          Name                #IntrastatFulfillmentDate_HU
          Table               #SalesTable
          Origin              #{F4631D65-2043-497D-934C-91FF3BB62ED6}
          LegacyId            #8082
          ExtendedDataType    #IntrastatFulfillmentDate_HU
        ENDPROPERTIES
        
      FIELD #InventLocationId
        STRING
        PROPERTIES
          Name                #InventLocationId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{C55CEC40-FA82-49E7-ABD5-6AFDB9808333}
          LegacyId            #67
          ExtendedDataType    #SalesInventLocationId
        ENDPROPERTIES
        
      FIELD #InventSiteId
        STRING
        PROPERTIES
          Name                #InventSiteId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{6B6CDB58-FC8F-4BCF-BD24-BFFA5F26A9C2}
          LegacyId            #131
          ExtendedDataType    #InventSiteId
        ENDPROPERTIES
        
      FIELD #InvoiceAccount
        STRING
        PROPERTIES
          Name                #InvoiceAccount
          HelpText            #@SYS518
          Mandatory           #Yes
          Table               #SalesTable
          Origin              #{542FF9D4-EAA6-4CB5-86CC-7CCA432A82DA}
          LegacyId            #5
          ExtendedDataType    #CustInvoiceAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InvoiceRegister_LT
        ENUM
        PROPERTIES
          Name                #InvoiceRegister_LT
          Table               #SalesTable
          CountryRegionCodes  #LT,LV
          Origin              #{C8082860-D081-466B-9700-847EB37FD1F3}
          LegacyId            #16053
          ExtendedDataType    #LtInvoiceAutoNumbering
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ItemTagging
        ENUM
        PROPERTIES
          Name                #ItemTagging
          Table               #SalesTable
          Origin              #{244E4604-89C9-466F-B7AF-59B34543BA48}
          LegacyId            #124
          ExtendedDataType    #RFIDItemTagging
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #LanguageId
        STRING
        PROPERTIES
          Name                #LanguageId
          HelpText            #@SYS8305
          Mandatory           #Yes
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{B187F9B3-0667-4113-B4D9-BE32778F2C0A}
          LegacyId            #84
          ExtendedDataType    #CustLanguageId
          StringSize          #7
        ENDPROPERTIES
        
      FIELD #LineDisc
        STRING
        PROPERTIES
          Name                #LineDisc
          HelpText            #@SYS7237
          Table               #SalesTable
          Origin              #{FF2687B1-0CB8-40ED-978F-5B7F74CFD1A6}
          LegacyId            #19
          ExtendedDataType    #CustLineDiscCode
        ENDPROPERTIES
        
      FIELD #Listcode
        ENUM
        PROPERTIES
          Name                #Listcode
          Table               #SalesTable
          Origin              #{D1D3F0B7-6E30-4683-B8BF-799543B8E6FD}
          LegacyId            #29
          ExtendedDataType    #ListcodeId
          EnumType            #Listcode
        ENDPROPERTIES
        
      FIELD #ManualEntryChangepolicy
        INT64
        PROPERTIES
          Name                #ManualEntryChangepolicy
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{241A2B59-50BE-4CAB-9EAD-B6CCABCE684D}
          LegacyId            #187
          ExtendedDataType    #PriceDiscPolicyManual
        ENDPROPERTIES
        
      FIELD #MarkupGroup
        STRING
        PROPERTIES
          Name                #MarkupGroup
          HelpText            #@SYS5822
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{76B37813-6E8A-4BB2-A57F-10C9C45513CA}
          LegacyId            #34
          ExtendedDataType    #CustMarkupGroupId
        ENDPROPERTIES
        
      FIELD #MatchingAgreement
        INT64
        PROPERTIES
          Name                #MatchingAgreement
          Table               #SalesTable
          Origin              #{05103E46-3471-450C-8A7E-9620229EC024}
          LegacyId            #175
          ExtendedDataType    #AgreementHeaderRecId
        ENDPROPERTIES
        
      FIELD #MCROrderStopped
        ENUM
        PROPERTIES
          Name                #MCROrderStopped
          Table               #SalesTable
          Origin              #{CDAC884E-57E1-4B67-84F2-693A3E451D5C}
          ExtendedDataType    #MCROrderStopped
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #MultiLineDisc
        STRING
        PROPERTIES
          Name                #MultiLineDisc
          Table               #SalesTable
          Origin              #{351E0715-19B6-4679-9E96-4374DDC67D8E}
          LegacyId            #25
          ExtendedDataType    #CustMultiLineDiscCode
        ENDPROPERTIES
        
      FIELD #NatureOfAssessee_IN
        ENUM
        PROPERTIES
          Name                #NatureOfAssessee_IN
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{AA6452A6-DEF0-4F0D-941D-C44ED3D7A473}
          LegacyId            #8056
          EnumType            #NatureOfAssessee_IN
        ENDPROPERTIES
        
      FIELD #NumberSequenceGroup
        STRING
        PROPERTIES
          Name                #NumberSequenceGroup
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{6DF328D5-05E4-46AC-B2FF-B9A75C543912}
          LegacyId            #82
          ExtendedDataType    #NumberSequenceGroupId
        ENDPROPERTIES
        
      FIELD #OneTimeCustomer
        ENUM
        PROPERTIES
          Name                #OneTimeCustomer
          Table               #SalesTable
          Origin              #{D56C53A6-4AA0-409F-8713-FCAB36319EB2}
          LegacyId            #51
          ExtendedDataType    #OneTimeCustomer
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PackedExtensions
        QUEUE
        PROPERTIES
          Name                #PackedExtensions
          SaveContents        #No
          Visible             #No
          Table               #SalesTable
          Origin              #{8E284279-C15E-40EF-894D-524FA70D3B76}
          ExtendedDataType    #SysExtensionSerializerPackedContainer
        ENDPROPERTIES
        
      FIELD #PackedPrioritizedIdList
        QUEUE
        PROPERTIES
          Name                #PackedPrioritizedIdList
          SaveContents        #No
          Visible             #No
          Table               #SalesTable
          Origin              #{C1B86A4F-A92F-40C2-99F6-A59BDECCA1EE}
          ExtendedDataType    #SysExtensionSerializerPrioritizedIdList
        ENDPROPERTIES
        
      FIELD #PackingSlipRegister_LT
        ENUM
        PROPERTIES
          Name                #PackingSlipRegister_LT
          Table               #SalesTable
          CountryRegionCodes  #LT,LV
          Origin              #{9EFDC337-A1BB-47BF-82B1-06D9496361EE}
          LegacyId            #16054
          ExtendedDataType    #LtPackingSlipAutoNumbering
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PalletTagging
        ENUM
        PROPERTIES
          Name                #PalletTagging
          Table               #SalesTable
          Origin              #{9A26B07A-27AF-4E3E-BA82-919E3B3AA9A1}
          LegacyId            #126
          ExtendedDataType    #RFIDPalletTagging
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Payment
        STRING
        PROPERTIES
          Name                #Payment
          Label               #@SYS828
          HelpText            #@SYS8004
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{CBE74AA5-1E28-4A60-9908-8D501C5032BA}
          LegacyId            #16
          ExtendedDataType    #CustPaymTermId
        ENDPROPERTIES
        
      FIELD #PaymentSched
        STRING
        PROPERTIES
          Name                #PaymentSched
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{447529CD-0A02-4014-85C6-B05D433DFD08}
          LegacyId            #54
          ExtendedDataType    #PaymSchedId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PaymMode
        STRING
        PROPERTIES
          Name                #PaymMode
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{2E6720E8-5C6A-429B-98FD-8EE152C3912A}
          LegacyId            #92
          ExtendedDataType    #CustPaymMode
        ENDPROPERTIES
        
      FIELD #PaymSpec
        STRING
        PROPERTIES
          Name                #PaymSpec
          Table               #SalesTable
          Origin              #{9EC99216-C4D4-43C2-96BF-A9CCEB67D1F8}
          LegacyId            #93
          ExtendedDataType    #CustPaymSpec
        ENDPROPERTIES
        
      FIELD #PdsBatchAttribAutoRes
        ENUM
        PROPERTIES
          Name                #PdsBatchAttribAutoRes
          Table               #SalesTable
          Origin              #{0169C2A5-4C5A-411D-AD9F-DBED1ADA7EA4}
          ExtendedDataType    #PdsBatchAttribAutoRes
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PdsCustRebateGroupId
        STRING
        PROPERTIES
          Name                #PdsCustRebateGroupId
          Table               #SalesTable
          Origin              #{AC99756A-684E-4636-83ED-3DCBC0E49A94}
          ExtendedDataType    #PdsCustRebateGroupId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PdsRebateProgramTMAGroup
        STRING
        PROPERTIES
          Name                #PdsRebateProgramTMAGroup
          Table               #SalesTable
          Origin              #{189E7DFF-FCCE-41FD-B7D3-DF44D100429E}
          ExtendedDataType    #PdsRebateProgramTMAGroup
        ENDPROPERTIES
        
      FIELD #Port
        STRING
        PROPERTIES
          Name                #Port
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{D4C6CFA7-4441-4F00-AEED-622A77867630}
          LegacyId            #71
          ExtendedDataType    #IntrastatPortId
        ENDPROPERTIES
        
      FIELD #PostingProfile
        STRING
        PROPERTIES
          Name                #PostingProfile
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{B82C4B2A-271D-4C54-B4F4-7D6A808FF655}
          LegacyId            #37
          ExtendedDataType    #CustPostingProfile
        ENDPROPERTIES
        
      FIELD #PriceGroupId
        STRING
        PROPERTIES
          Name                #PriceGroupId
          Table               #SalesTable
          Origin              #{13B50B09-D4EF-4881-8D93-F84B2F11FD76}
          LegacyId            #24
          ExtendedDataType    #CustPriceGroup
        ENDPROPERTIES
        
      FIELD #ProjId
        STRING
        PROPERTIES
          Name                #ProjId
          AllowEdit           #No
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{2B83C105-6B54-4B6B-98B5-271B30659465}
          LegacyId            #66
          ExtendedDataType    #ProjId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PurchId
        STRING
        PROPERTIES
          Name                #PurchId
          HelpText            #@SYS10442
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{0B5077F6-4119-41D6-BB87-617FB631F019}
          LegacyId            #32
          ExtendedDataType    #PurchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PurchOrderFormNum
        STRING
        PROPERTIES
          Name                #PurchOrderFormNum
          Table               #SalesTable
          Origin              #{D8B59B45-51C4-4864-83FB-BBC68272A59D}
          LegacyId            #9
          ExtendedDataType    #CustPurchaseOrder
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #QuotationId
        STRING
        PROPERTIES
          Name                #QuotationId
          Table               #SalesTable
          Origin              #{FF92DE2A-530A-4997-A715-3E588FC0C7D4}
          LegacyId            #112
          ExtendedDataType    #QuotationId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ReceiptDateConfirmed
        DATE
        PROPERTIES
          Name                #ReceiptDateConfirmed
          Table               #SalesTable
          Origin              #{18057E84-AFE1-4BEE-9AFE-63FA432BEBFF}
          LegacyId            #115
          ExtendedDataType    #SalesReceiptDateConfirmed
        ENDPROPERTIES
        
      FIELD #ReceiptDateRequested
        DATE
        PROPERTIES
          Name                #ReceiptDateRequested
          Table               #SalesTable
          Origin              #{A856BFB4-37DC-4424-B737-538543F6ECCB}
          LegacyId            #114
          ExtendedDataType    #SalesReceiptDateRequested
        ENDPROPERTIES
        
      FIELD #ReleaseStatus
        ENUM
        PROPERTIES
          Name                #ReleaseStatus
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{D5D0DE51-2AD8-480B-81CE-EB8A7CAF1226}
          EnumType            #WHSReleaseStatus
        ENDPROPERTIES
        
      FIELD #Reservation
        ENUM
        PROPERTIES
          Name                #Reservation
          Table               #SalesTable
          Origin              #{6FDED444-198B-47D5-9AA7-F3AF689F0037}
          LegacyId            #3
          EnumType            #ItemReservation
        ENDPROPERTIES
        
      FIELD #ReturnDeadline
        DATE
        PROPERTIES
          Name                #ReturnDeadline
          Table               #SalesTable
          Origin              #{DA149DFB-B0F9-42E2-8064-BF82985BAFDF}
          LegacyId            #144
          ExtendedDataType    #ReturnDeadline
        ENDPROPERTIES
        
      FIELD #ReturnItemNum
        STRING
        PROPERTIES
          Name                #ReturnItemNum
          Table               #SalesTable
          Origin              #{AD2BE6ED-7AC0-417D-8BFF-54F0AA0D2726}
          LegacyId            #58
          ExtendedDataType    #SalesReturnItemNum
        ENDPROPERTIES
        
      FIELD #ReturnReasonCodeId
        STRING
        PROPERTIES
          Name                #ReturnReasonCodeId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{60727816-FF69-42D3-A2EF-7B27088160BE}
          LegacyId            #147
          ExtendedDataType    #ReturnReasonCodeId
        ENDPROPERTIES
        
      FIELD #ReturnReplacementCreated
        ENUM
        PROPERTIES
          Name                #ReturnReplacementCreated
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{DBA537EC-54AA-48E2-AB3A-7801207A28B3}
          LegacyId            #154
          ExtendedDataType    #ReturnReplacementCreated
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ReturnReplacementId
        STRING
        PROPERTIES
          Name                #ReturnReplacementId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{AB047588-B2F9-45F7-A217-652032FFED59}
          LegacyId            #145
          ExtendedDataType    #ReturnReplacementId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ReturnStatus
        ENUM
        PROPERTIES
          Name                #ReturnStatus
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{40C96A73-FC54-4DD5-BC7B-C6352BB929CB}
          LegacyId            #146
          EnumType            #ReturnStatusHeader
        ENDPROPERTIES
        
      FIELD #SalesGroup
        STRING
        PROPERTIES
          Name                #SalesGroup
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{434F0D92-1969-4BFC-A136-E213FE84AC6B}
          LegacyId            #11
          ExtendedDataType    #CommissSalesGroup
        ENDPROPERTIES
        
      FIELD #SalesId
        STRING
        PROPERTIES
          Name                #SalesId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{80FE19CC-FB64-4F92-90EE-BA5781699A54}
          LegacyId            #1
          ExtendedDataType    #SalesIdBase
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #SalesName
        STRING
        PROPERTIES
          Name                #SalesName
          Table               #SalesTable
          Origin              #{7F9A8D75-DA36-4009-9307-BB0B4B395546}
          LegacyId            #2
          ExtendedDataType    #SalesName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #SalesOriginId
        STRING
        PROPERTIES
          Name                #SalesOriginId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{0792985B-AC54-498F-89D4-AE26F0F6579B}
          LegacyId            #87
          ExtendedDataType    #SalesOriginId
        ENDPROPERTIES
        
      FIELD #SalesPoolId
        STRING
        PROPERTIES
          Name                #SalesPoolId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{572383AD-444E-449A-A881-06C342E508A6}
          LegacyId            #36
          ExtendedDataType    #SalesPoolId
        ENDPROPERTIES
        
      FIELD #SalesStatus
        ENUM
        PROPERTIES
          Name                #SalesStatus
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #SalesTable
          Origin              #{9BCFF147-E6B5-405F-83A4-32E315372685}
          LegacyId            #33
          EnumType            #SalesStatus
        ENDPROPERTIES
        
      FIELD #SalesType
        ENUM
        PROPERTIES
          Name                #SalesType
          Table               #SalesTable
          Origin              #{696DC95A-D3BD-4B10-8C2B-796F2F0F5B20}
          LegacyId            #35
          EnumType            #SalesType
        ENDPROPERTIES
        
      FIELD #SalesUnitId
        STRING
        PROPERTIES
          Name                #SalesUnitId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{F686D293-F614-4232-9ED6-9BC9862D8A02}
          LegacyId            #8002
          ExtendedDataType    #smmSalesUnitId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #SettleVoucher
        ENUM
        PROPERTIES
          Name                #SettleVoucher
          Table               #SalesTable
          Origin              #{82A47772-7C10-4606-9858-57DAB870E101}
          LegacyId            #45
          ExtendedDataType    #SalesSettlementType
          EnumType            #SettlementType
        ENDPROPERTIES
        
      FIELD #ShipCarrierAccount
        STRING
        PROPERTIES
          Name                #ShipCarrierAccount
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          Origin              #{5D9DBD07-84AC-4225-9A40-75057D0E31A4}
          LegacyId            #136
          ExtendedDataType    #ShipCarrierAccount
          StringSize          #25
        ENDPROPERTIES
        
      FIELD #ShipCarrierAccountCode
        STRING
        PROPERTIES
          Name                #ShipCarrierAccountCode
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          Origin              #{0EE071D3-40F9-44AC-9C38-A409EEAA92E0}
          LegacyId            #152
          ExtendedDataType    #ShipCarrierAccountCode
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ShipCarrierBlindShipment
        ENUM
        PROPERTIES
          Name                #ShipCarrierBlindShipment
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          Origin              #{AE6B6410-17D9-4AD3-9B00-04299310F9ED}
          LegacyId            #139
          ExtendedDataType    #ShipCarrierBlindShipment
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShipCarrierDeliveryContact
        STRING
        PROPERTIES
          Name                #ShipCarrierDeliveryContact
          Label               #@SYS116731
          HelpText            #@SYS117746
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          Origin              #{319B7D5B-33F5-4437-8F68-60C6F13C3D6F}
          LegacyId            #141
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ShipCarrierDlvType
        ENUM
        PROPERTIES
          Name                #ShipCarrierDlvType
          Table               #SalesTable
          Origin              #{05DF8833-11CA-4C45-95DA-0E088967BB4A}
          LegacyId            #158
          EnumType            #ShipCarrierDlvType
        ENDPROPERTIES
        
      FIELD #ShipCarrierExpeditedShipment
        ENUM
        PROPERTIES
          Name                #ShipCarrierExpeditedShipment
          Table               #SalesTable
          Origin              #{BB9B39C3-E18B-47D6-ADF8-E44F43F6E86D}
          LegacyId            #168
          ExtendedDataType    #ShipCarrierExpeditedShipment
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShipCarrierFuelSurcharge
        ENUM
        PROPERTIES
          Name                #ShipCarrierFuelSurcharge
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          Origin              #{697F3551-CA59-448B-A2BD-8C2B0DA1D457}
          LegacyId            #138
          ExtendedDataType    #ShipCarrierFuelSurcharge
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShipCarrierId
        STRING
        PROPERTIES
          Name                #ShipCarrierId
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #ShipCarrier
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{7048125C-61C8-4F7B-A580-48EC3C4EBFEB}
          LegacyId            #137
          ExtendedDataType    #ShipCarrierId
        ENDPROPERTIES
        
      FIELD #ShipCarrierName
        STRING
        PROPERTIES
          Name                #ShipCarrierName
          Table               #SalesTable
          Origin              #{C7C90228-E7C5-48DD-B732-488C0882CDB3}
          LegacyId            #194
          ExtendedDataType    #LogisticsShipCarrierName
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #ShipCarrierPostalAddress
        INT64
        PROPERTIES
          Name                #ShipCarrierPostalAddress
          Table               #SalesTable
          Origin              #{0B359857-D74D-4091-9909-F2E9F23154CA}
          LegacyId            #193
          ExtendedDataType    #LogisticsPostalAddressRecId
        ENDPROPERTIES
        
      FIELD #ShipCarrierResidential
        ENUM
        PROPERTIES
          Name                #ShipCarrierResidential
          Table               #SalesTable
          Origin              #{B2BD31BE-1846-4CA9-8399-FC04BF64CAB8}
          LegacyId            #169
          ExtendedDataType    #ShipCarrierResidentialDest
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShippingDateConfirmed
        DATE
        PROPERTIES
          Name                #ShippingDateConfirmed
          Table               #SalesTable
          Origin              #{540382D8-B0C2-4EDF-99B7-2B3D63567FEE}
          LegacyId            #117
          ExtendedDataType    #SalesShippingDateConfirmed
        ENDPROPERTIES
        
      FIELD #ShippingDateRequested
        DATE
        PROPERTIES
          Name                #ShippingDateRequested
          Mandatory           #Yes
          Table               #SalesTable
          Origin              #{A003FB6E-35F3-4834-98FE-67166AFD0FF8}
          LegacyId            #116
          ExtendedDataType    #SalesShippingDateRequested
        ENDPROPERTIES
        
      FIELD #SkipUpdate
        ENUM
        PROPERTIES
          Name                #SkipUpdate
          SaveContents        #No
          Visible             #No
          Table               #SalesTable
          Origin              #{BEFB0137-060A-46FD-8E15-E8B8A74E050C}
          LegacyId            #128
          EnumType            #InterCompanySkipUpdate
        ENDPROPERTIES
        
      FIELD #smmCampaignId
        STRING
        PROPERTIES
          Name                #smmCampaignId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{0362B433-26A0-4776-B4B7-CAC0397A5DB4}
          LegacyId            #8004
          ExtendedDataType    #smmCampaignId
        ENDPROPERTIES
        
      FIELD #smmSalesAmountTotal
        REAL
        PROPERTIES
          Name                #smmSalesAmountTotal
          Table               #SalesTable
          Origin              #{AEFF394F-B32A-462E-8D11-8C49FE0DF068}
          LegacyId            #8003
          ExtendedDataType    #smmSalesAmountTotal
        ENDPROPERTIES
        
      FIELD #SourceDocumentHeader
        INT64
        PROPERTIES
          Name                #SourceDocumentHeader
          Label               #@SYS314386
          Visible             #No
          Table               #SalesTable
          Origin              #{3938A16C-5D4B-4EF4-A55E-D5F28AF58AB1}
          LegacyId            #205
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #StatProcId
        STRING
        PROPERTIES
          Name                #StatProcId
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{1779FDDD-C435-4C9E-8791-B563FF672C5C}
          LegacyId            #104
          ExtendedDataType    #IntrastatProcId
        ENDPROPERTIES
        
      FIELD #SystemEntryChangePolicy
        INT64
        PROPERTIES
          Name                #SystemEntryChangePolicy
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{257C2061-52E9-4F4A-99F8-95ED6735431D}
          LegacyId            #186
          ExtendedDataType    #PriceDiscPolicySystem
        ENDPROPERTIES
        
      FIELD #SystemEntrySource
        ENUM
        PROPERTIES
          Name                #SystemEntrySource
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SalesTable
          Origin              #{AF629E91-2106-4EF1-A7B9-74D547C344E1}
          LegacyId            #185
          EnumType            #PriceDiscSystemSource
        ENDPROPERTIES
        
      FIELD #TaxGroup
        STRING
        PROPERTIES
          Name                #TaxGroup
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{5D31AB5E-E2D4-4908-8AAE-C76B03CE760A}
          LegacyId            #18
          ExtendedDataType    #TaxGroup
        ENDPROPERTIES
        
      FIELD #TaxPeriodPaymentCode_PL
        STRING
        PROPERTIES
          Name                #TaxPeriodPaymentCode_PL
          Table               #SalesTable
          Origin              #{512A3459-A452-4922-814D-8486FF0FEF30}
          ExtendedDataType    #PlTaxPeriodPaymentCode
        ENDPROPERTIES
        
      FIELD #TCSGroup_IN
        STRING
        PROPERTIES
          Name                #TCSGroup_IN
          Label               #@GLS5363
          HelpText            #@GLS5846
          Table               #SalesTable
          CountryRegionCodes  #IN
          Origin              #{4B022655-FC92-4569-A689-F037638A6153}
          LegacyId            #8055
          ExtendedDataType    #TaxWithholdGroup
        ENDPROPERTIES
        
      FIELD #TDSGroup_IN
        STRING
        PROPERTIES
          Name                #TDSGroup_IN
          Label               #@GLS5362
          HelpText            #@GLS5823
          Table               #SalesTable
          CountryRegionCodes  #IN
          Origin              #{126428FD-1414-42CC-8AA1-4473E90EC1C0}
          LegacyId            #8054
          ExtendedDataType    #TaxWithholdGroup
        ENDPROPERTIES
        
      FIELD #Touched
        ENUM
        PROPERTIES
          Name                #Touched
          SaveContents        #No
          Visible             #No
          Table               #SalesTable
          Origin              #{D1D884FF-A184-4082-A7B6-2ACB8B54A4FD}
          LegacyId            #89
          ExtendedDataType    #TradeTouched
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TransactionCode
        STRING
        PROPERTIES
          Name                #TransactionCode
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{45F4DDD6-622A-41BE-9A6F-91B1B73C68C7}
          LegacyId            #38
          ExtendedDataType    #IntrastatTransactionCodeId
        ENDPROPERTIES
        
      FIELD #Transport
        STRING
        PROPERTIES
          Name                #Transport
          Table               #SalesTable
          IgnoreEDTRelation   #Yes
          Origin              #{9439B6E0-E752-4830-A0BA-F8355D5A0473}
          LegacyId            #90
          ExtendedDataType    #IntrastatTransport
        ENDPROPERTIES
        
      FIELD #TransportationDocument
        INT64
        PROPERTIES
          Name                #TransportationDocument
          Visible             #No
          Table               #SalesTable
          Origin              #{2E490ADE-216F-45B0-9E12-CB8268734395}
          ExtendedDataType    #TransportationDocumentRecId
        ENDPROPERTIES
        
      FIELD #UnitedVATInvoice_LT
        ENUM
        PROPERTIES
          Name                #UnitedVATInvoice_LT
          Table               #SalesTable
          Origin              #{A212B9DD-2DB4-4FF2-906E-7A18C41E0A43}
          LegacyId            #8111
          ExtendedDataType    #UnitedVATInvoice_LT
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #URL
        STRING
        PROPERTIES
          Name                #URL
          Table               #SalesTable
          Origin              #{CCBDE028-3FD0-4462-9343-7D7BD1FDE393}
          LegacyId            #8
          ExtendedDataType    #URL
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #VATNum
        STRING
        PROPERTIES
          Name                #VATNum
          Table               #SalesTable
          Origin              #{FC791268-28F0-41DC-87D7-905961AF1D42}
          LegacyId            #70
          ExtendedDataType    #VATNumJournal
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #WorkerSalesResponsible
        INT64
        PROPERTIES
          Name                #WorkerSalesResponsible
          Table               #SalesTable
          Origin              #{F55D06B2-2FE7-494C-9EF7-0B6A8366B324}
          ExtendedDataType    #WorkerSalesResponsible
        ENDPROPERTIES
        
      FIELD #WorkerSalesTaker
        INT64
        PROPERTIES
          Name                #WorkerSalesTaker
          Table               #SalesTable
          Origin              #{C56E4EAB-B7F3-4DC6-BC63-77ECBEBBBC98}
          LegacyId            #199
          ExtendedDataType    #SalesTaker
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoSummary
        PROPERTIES
          Name                #AutoSummary
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #SalesName
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #SalesName
          #CustAccount
          #InvoiceAccount
          #SalesStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AccountsReceivable
        PROPERTIES
          Name                #AccountsReceivable
          Label               #@SYS25196
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #InvoiceAccount
          #OneTimeCustomer
          #ContactPersonId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressDisplay
        PROPERTIES
          Name                #AddressDisplay
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #deliveryAddressing
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressLookup
        PROPERTIES
          Name                #AddressLookup
          Label               #@SYS88672
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #CustAccount
          #InvoiceAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressReference
        PROPERTIES
          Name                #AddressReference
          Label               #@SYS88679
        ENDPROPERTIES
        
        GROUPFIELDS
          #AddressRefTableId
          #AddressRefRecId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Administration
        PROPERTIES
          Name                #Administration
          Label               #@SYS9853
        ENDPROPERTIES
        
        GROUPFIELDS
          #WorkerSalesTaker
          #SalesPoolId
          #LanguageId
          #SalesUnitId
          #WorkerSalesResponsible
          #SalesOriginId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Agreement
        PROPERTIES
          Name                #Agreement
          Label               #@SYS15240
        ENDPROPERTIES
        
        GROUPFIELDS
          #MatchingAgreement
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Agreement_RU
        PROPERTIES
          Name                #Agreement_RU
          Label               #@SYS15240
        ENDPROPERTIES
        
        GROUPFIELDS
          #agreementDocumentTitle_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankAccounts_LV
        PROPERTIES
          Name                #BankAccounts_LV
          Label               #@SYS21829
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankAccount_LV
          #CurBankAccount_LV
          #CustBankAccount_LV
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Campaign
        PROPERTIES
          Name                #Campaign
          Label               #@SYS80187
        ENDPROPERTIES
        
        GROUPFIELDS
          #smmCampaignId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CarrierInfo
        PROPERTIES
          Name                #CarrierInfo
          Label               #@SYS50722
        ENDPROPERTIES
        
        GROUPFIELDS
          #ShipCarrierId
          #ShipCarrierAccountCode
          #ShipCarrierAccount
          #ShipCarrierFuelSurcharge
          #ShipCarrierExpeditedShipment
          #ShipCarrierResidential
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CarrierIssues
        PROPERTIES
          Name                #CarrierIssues
          Label               #@SYS116986
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #CustAccount
          #InvoiceAccount
          #SalesStatus
          #CurrencyCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CaseMoreInformation
        PROPERTIES
          Name                #CaseMoreInformation
          Label               #@SYS314356
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #CustAccount
          #InvoiceAccount
          #SalesType
          #SalesStatus
          #CurrencyCode
          #ProjId
          #agreementIsLinked
          #PurchOrderFormNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CaseMoreInformation_ReturnOrder
        PROPERTIES
          Name                #CaseMoreInformation_ReturnOrder
          Label               #@SYS314356
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
          #CustAccount
          #InvoiceAccount
          #SalesId
          #ReturnStatus
          #ReturnDeadline
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Commission
        PROPERTIES
          Name                #Commission
          Label               #@SYS2489
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesGroup
          #CommissionGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ConnIntegration
        PROPERTIES
          Name                #ConnIntegration
          Label               #@SYS4004713
        ENDPROPERTIES
        
        GROUPFIELDS
          #DAXIntegrationID
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ConsTarget_JP
        PROPERTIES
          Name                #ConsTarget_JP
          Label               #@SYS106495
        ENDPROPERTIES
        
        GROUPFIELDS
          #ConsTarget_JP
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ContactInfo
        PROPERTIES
          Name                #ContactInfo
          Label               #@SYS21663
        ENDPROPERTIES
        
        GROUPFIELDS
          #URL
          #Email
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CreditCard
        PROPERTIES
          Name                #CreditCard
          Label               #@SYS101746
        ENDPROPERTIES
        
        GROUPFIELDS
          #editCreditCard
          #CreditCardAuthorization
          #CreditCardApprovalAmount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Currency
        PROPERTIES
          Name                #Currency
          Label               #@SYS7572
        ENDPROPERTIES
        
        GROUPFIELDS
          #CurrencyCode
          #FixedExchRate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CurrencyShow
        PROPERTIES
          Name                #CurrencyShow
          Label               #@SYS7572
        ENDPROPERTIES
        
        GROUPFIELDS
          #CurrencyCode
          #editFixedExchRate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustInvoice
        PROPERTIES
          Name                #CustInvoice
          Label               #@SYS14204
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustInvoiceId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Customer
        PROPERTIES
          Name                #Customer
          Label               #@SYS11779
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #OneTimeCustomer
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Customs_IN
        PROPERTIES
          Name                #Customs_IN
          Label               #@GLS5007
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsExportOrder_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomsMisc_IN
        PROPERTIES
          Name                #CustomsMisc_IN
          Label               #@SYS80069
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsShippingBill_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Delivery
        PROPERTIES
          Name                #Delivery
          Label               #@SYS4508
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReceiptDateRequested
          #ShippingDateRequested
          #ReceiptDateConfirmed
          #ShippingDateConfirmed
          #DeliveryDateControlType
          #DlvMode
          #DlvTerm
          #DlvReason
          #ExportReason
          #ShipCarrierBlindShipment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeliveryAddition
        PROPERTIES
          Name                #DeliveryAddition
          Label               #@SYS88262
        ENDPROPERTIES
        
        GROUPFIELDS
          #DlvTerm
          #ShipCarrierAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeliveryAddress
        PROPERTIES
          Name                #DeliveryAddress
          Label               #@SYS7924
        ENDPROPERTIES
        
        GROUPFIELDS
          #ShipCarrierDeliveryContact
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeliveryAddress_RU
        PROPERTIES
          Name                #DeliveryAddress_RU
          Label               #@SYS7924
        ENDPROPERTIES
        
        GROUPFIELDS
          #DeliveryName
          #ShipCarrierDeliveryContact
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DeliverySummary
        PROPERTIES
          Name                #DeliverySummary
          Label               #@SYS22058
        ENDPROPERTIES
        
        GROUPFIELDS
          #DeliveryName
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS342338
        ENDPROPERTIES
        
        GROUPFIELDS
          #DefaultDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Discount
        PROPERTIES
          Name                #Discount
          Label               #@SYS11829
        ENDPROPERTIES
        
        GROUPFIELDS
          #LineDisc
          #MultiLineDisc
          #EndDisc
          #DiscPercent
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DiscountMiscCharges
        PROPERTIES
          Name                #DiscountMiscCharges
          Label               #@SYS22031
        ENDPROPERTIES
        
        GROUPFIELDS
          #PriceGroupId
          #LineDisc
          #MultiLineDisc
          #EndDisc
          #MarkupGroup
          #PdsCustRebateGroupId
          #PdsRebateProgramTMAGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EInvoice
        PROPERTIES
          Name                #EInvoice
          Label               #@SYS100769
        ENDPROPERTIES
        
        GROUPFIELDS
          #EInvoiceLineSpec
          #EInvoiceAccountCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Emails
        PROPERTIES
          Name                #Emails
          Label               #@SYS96646
        ENDPROPERTIES
        
        GROUPFIELDS
          #Email
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPMiniPage
        PROPERTIES
          Name                #EPMiniPage
          Label               #@SYS108232
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #SalesName
          #SalesStatus
          #ContactPersonId
          #smmSalesAmountTotal
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ExternalReference
        PROPERTIES
          Name                #ExternalReference
          Label               #@SYS21697
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchOrderFormNum
          #CustomerRef
          #ReturnItemNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FiscalDocType_PL
        PROPERTIES
          Name                #FiscalDocType_PL
          Label               #@GLS109781
        ENDPROPERTIES
        
        GROUPFIELDS
          #FiscalDocType_PL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ForeignTrade
        PROPERTIES
          Name                #ForeignTrade
          Label               #@SYS27650
        ENDPROPERTIES
        
        GROUPFIELDS
          #TransactionCode
          #Transport
          #Port
          #StatProcId
          #Listcode
          #CountyOrigDest
          #IntrastatAddValue_LV
          #IntrastatFulfillmentDate_HU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #GiroMoneyTransferSlip
        PROPERTIES
          Name                #GiroMoneyTransferSlip
          Label               #@SYS2723
        ENDPROPERTIES
        
        GROUPFIELDS
          #GiroType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #HeaderToLineUpdate
        PROPERTIES
          Name                #HeaderToLineUpdate
          Label               #@SYS62436
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #SalesGroup
          #TaxGroup
          #DefaultDimension
          #InventLocationId
          #Reservation
          #TransactionCode
          #Port
          #StatProcId
          #PriceGroupId
          #LineDisc
          #MarkupGroup
          #DeliveryDate
          #LanguageId
          #Transport
          #DlvMode
          #DlvTerm
          #ShipCarrierAccount
          #TCSGroup_IN
          #TDSGroup_IN
          #IntrastatFulfillmentDate_HU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Intercompany
        PROPERTIES
          Name                #Intercompany
          Label               #@SYS75319
        ENDPROPERTIES
        
        GROUPFIELDS
          #InterCompanyOrder
          #InterCompanyCompanyId
          #InterCompanyPurchId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InterCompanyAdmin
        PROPERTIES
          Name                #InterCompanyAdmin
          Label               #@SYS74106
        ENDPROPERTIES
        
        GROUPFIELDS
          #InterCompanyAutoCreateOrders
          #InterCompanyDirectDelivery
          #interCompanyOriginDisplay
          #InterCompanyAllowIndirectCreation
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InterCompanyOriginal
        PROPERTIES
          Name                #InterCompanyOriginal
          Label               #@SYS93838
        ENDPROPERTIES
        
        GROUPFIELDS
          #InterCompanyOriginalSalesId
          #InterCompanyOriginalCustAccount
          #InterCompanyDirectDeliveryOrig
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InterCompanyReturn
        PROPERTIES
          Name                #InterCompanyReturn
          Label               #@SYS120343
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnReplacementCreated
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Inventory
        PROPERTIES
          Name                #Inventory
          Label               #@SYS981
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventSiteId
          #InventLocationId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRCCAuthorization
        PROPERTIES
          Name                #MCRCCAuthorization
          Label               #@MCR23339
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #SalesName
          #CustAccount
          #SalesType
          #SalesStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRDefaultClassification
        PROPERTIES
          Name                #MCRDefaultClassification
          Label               #@MCR22225
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRReturn
        PROPERTIES
          Name                #MCRReturn
          Label               #@MCR12123
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MCRWebConfirmation
        PROPERTIES
          Name                #MCRWebConfirmation
          Label               #@MCR28470
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NotificationToTheCentralBank
        PROPERTIES
          Name                #NotificationToTheCentralBank
          Label               #@SYS67156
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankCentralBankPurposeCode
          #BankCentralBankPurposeText
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Other
        PROPERTIES
          Name                #Other
          Label               #@SYS1284
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditCardCustRefId
          #CreditCardAuthorizationError
          #ShipCarrierDlvType
          #ShipCarrierName
          #ShipCarrierPostalAddress
          #DeliveryPostalAddress
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #CustAccount
          #InvoiceAccount
          #SalesType
          #SalesStatus
          #CurrencyCode
          #ProjId
          #qualityOrderStatusDisplay
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview_RU
        PROPERTIES
          Name                #Overview_RU
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesId
          #CustAccount
          #InvoiceAccount
          #SalesType
          #SalesStatus
          #CurrencyCode
          #ProjId
          #showContactPerson
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Payment
        PROPERTIES
          Name                #Payment
          Label               #@SYS828
        ENDPROPERTIES
        
        GROUPFIELDS
          #Payment
          #FixedDueDate
          #PaymMode
          #PaymSpec
          #PaymentSched
          #CashDisc
          #CashDiscBaseDate
          #CashDiscPercent
          #BankDocumentType
          #DirectDebitMandate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Posting
        PROPERTIES
          Name                #Posting
          Label               #@SYS5943
        ENDPROPERTIES
        
        GROUPFIELDS
          #PostingProfile
          #SettleVoucher
          #NumberSequenceGroup
          #InvoiceRegister_LT
          #PackingSlipRegister_LT
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Project
        PROPERTIES
          Name                #Project
          Label               #@SYS4534
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Quotation
        PROPERTIES
          Name                #Quotation
          Label               #@SYS5864
        ENDPROPERTIES
        
        GROUPFIELDS
          #QuotationId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReasonCode_W
        PROPERTIES
          Name                #ReasonCode_W
          Label               #@SYS114719
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditNoteReasonCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Reservation
        PROPERTIES
          Name                #Reservation
          Label               #@SYS7669
        ENDPROPERTIES
        
        GROUPFIELDS
          #Reservation
          #PdsBatchAttribAutoRes
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Return
        PROPERTIES
          Name                #Return
          Label               #@SYS24700
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnReasonCodeId
          #ReturnStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReturnItemNum
        PROPERTIES
          Name                #ReturnItemNum
          Label               #@SYS104082
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
          #CustAccount
          #ReturnStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReturnListPage
        PROPERTIES
          Name                #ReturnListPage
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
          #CustAccount
          #InvoiceAccount
          #ReturnReasonCodeId
          #ReturnDeadline
          #ReturnStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReturnOrder
        PROPERTIES
          Name                #ReturnOrder
          Label               #@SYS105841
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
          #SalesId
          #ReturnReasonCodeId
          #ReturnDeadline
          #CurrencyCode
          #CustAccount
          #InvoiceAccount
          #editContactPersonName
          #ContactPersonId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ReturnReplacement
        PROPERTIES
          Name                #ReturnReplacement
          Label               #@SYS84714
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnReplacementId
          #ReturnReplacementCreated
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RFIDTagging
        PROPERTIES
          Name                #RFIDTagging
          Label               #@SYS90171
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemTagging
          #CaseTagging
          #PalletTagging
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesAmountTotal
        PROPERTIES
          Name                #SalesAmountTotal
          Label               #@SYS23862
        ENDPROPERTIES
        
        GROUPFIELDS
          #smmSalesAmountTotal
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesOrderTable
        PROPERTIES
          Name                #SalesOrderTable
          Label               #@SYS12847
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnItemNum
          #CovStatus
          #SalesName
          #SalesType
          #MarkupGroup
          #DocumentStatus
          #CustGroup
          #PostingProfile
          #SettleVoucher
          #SalesStatus
          #Reservation
          #PurchId
          #Deadline
          #Estimate
          #Touched
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesTax
        PROPERTIES
          Name                #SalesTax
          Label               #@SYS5878
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxGroup
          #VATNum
          #EnterpriseNumber
          #InclTax
          #UnitedVATInvoice_LT
          #TaxPeriodPaymentCode_PL
          #editExportSales_PL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Status
        PROPERTIES
          Name                #Status
          Label               #@SYS25587
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesStatus
          #DocumentStatus
          #Deadline
          #qualityOrderStatusDisplay
          #MCROrderStopped
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SummaryNumber
        PROPERTIES
          Name                #SummaryNumber
          Label               #*** OUTDATED ***
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SummaryOrder
        PROPERTIES
          Name                #SummaryOrder
          Label               #@SYS24079
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SummaryUpdate
        PROPERTIES
          Name                #SummaryUpdate
          Label               #@SYS57755
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #InvoiceAccount
          #SalesType
          #CurrencyCode
          #FixedExchRate
          #ContactPersonId
          #LanguageId
          #DefaultDimension
          #SalesPoolId
          #PostingProfile
          #NumberSequenceGroup
          #VATNum
          #InclTax
          #SalesGroup
          #CommissionGroup
          #DlvMode
          #DlvTerm
          #FreightZone
          #FreightSlipType
          #PriceGroupId
          #MultiLineDisc
          #EndDisc
          #DiscPercent
          #LineDisc
          #CashDisc
          #Payment
          #PaymentSched
          #TransactionCode
          #Listcode
          #InventLocationId
          #PaymMode
          #PaymSpec
          #FixedDueDate
          #InterCompanyCompanyId
          #InterCompanyOriginalCustAccount
          #InterCompanyDirectDeliveryOrig
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SummaryUpdateParameters
        PROPERTIES
          Name                #SummaryUpdateParameters
          Label               #@SYS57738
        ENDPROPERTIES
        
        GROUPFIELDS
          #AutoSummaryModuleType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SummaryUpdateShow
        PROPERTIES
          Name                #SummaryUpdateShow
          Label               #@SYS57755
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #InvoiceAccount
          #SalesType
          #CurrencyCode
          #FixedExchRate
          #ContactPersonId
          #LanguageId
          #DefaultDimension
          #SalesPoolId
          #PostingProfile
          #NumberSequenceGroup
          #VATNum
          #InclTax
          #SalesGroup
          #CommissionGroup
          #DlvMode
          #DlvTerm
          #FreightZone
          #FreightSlipType
          #PriceGroupId
          #MultiLineDisc
          #EndDisc
          #DiscPercent
          #LineDisc
          #CashDisc
          #Payment
          #PaymentSched
          #TransactionCode
          #Listcode
          #InventLocationId
          #PaymMode
          #PaymSpec
          #FixedDueDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Transport
        PROPERTIES
          Name                #Transport
          Label               #@SYS3843
        ENDPROPERTIES
        
        GROUPFIELDS
          #FreightZone
          #FreightSlipType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Warehouse
        PROPERTIES
          Name                #Warehouse
          Label               #@WAX374
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReleaseStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebCategoryBrowsing
        PROPERTIES
          Name                #WebCategoryBrowsing
          Label               #@SYS74258
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebCategoryBrowsingReturn
        PROPERTIES
          Name                #WebCategoryBrowsingReturn
          Label               #@SYS74258
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReturnStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebDelivery
        PROPERTIES
          Name                #WebDelivery
          Label               #@SYS4508
        ENDPROPERTIES
        
        GROUPFIELDS
          #DeliveryName
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WithholdingTax_IN
        PROPERTIES
          Name                #WithholdingTax_IN
          Label               #@SYS33817
        ENDPROPERTIES
        
        GROUPFIELDS
          #NatureOfAssessee_IN
          #TDSGroup_IN
          #TCSGroup_IN
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #SalesIdx
      PROPERTIES
        Name                #SalesIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B080001-016E-1000-5361-6C6573496478}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #SalesId
      ENDINDEXFIELDS
      
      #CustIdx
      PROPERTIES
        Name                #CustIdx
        AllowDuplicates     #No
        Origin              #{2B070002-016E-1000-4375-737449647800}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #CustAccount
        #SalesId
        #PurchOrderFormNum
      ENDINDEXFIELDS
      
      #ProjIdIdx
      PROPERTIES
        Name                #ProjIdIdx
        ConfigurationKey    #ProjBasic
        Origin              #{2B090003-016E-1000-F8C6-816A49644964}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #ProjId
        #SalesId
      ENDINDEXFIELDS
      
      #StatusCustAccIdx
      PROPERTIES
        Name                #StatusCustAccIdx
        Origin              #{2B100005-016E-1000-7441-06E50F55056F}
        LegacyId            #5
      ENDPROPERTIES
      
      INDEXFIELDS
        #SalesStatus
        #CustAccount
      ENDINDEXFIELDS
      
      #InvoiceAccStatusIdx
      PROPERTIES
        Name                #InvoiceAccStatusIdx
        Origin              #{2B130006-016E-1000-6DB1-5FCC7B828353}
        LegacyId            #6
      ENDPROPERTIES
      
      INDEXFIELDS
        #InvoiceAccount
        #SalesStatus
      ENDINDEXFIELDS
      
      #ReturnNumIdx
      PROPERTIES
        Name                #ReturnNumIdx
        ConfigurationKey    #ReturnItem
        Origin              #{2B0C0007-016E-1000-D1BE-376FD6804E75}
        LegacyId            #7
      ENDPROPERTIES
      
      INDEXFIELDS
        #ReturnItemNum
      ENDINDEXFIELDS
      
      #SalesTypeIdx
      PROPERTIES
        Name                #SalesTypeIdx
        Origin              #{2B0C0009-016E-1000-FA81-2E5FD7667970}
        LegacyId            #9
      ENDPROPERTIES
      
      INDEXFIELDS
        #SalesType
        #SalesId
      ENDINDEXFIELDS
      
      #AgreementHeaderIdx
      PROPERTIES
        Name                #AgreementHeaderIdx
        Origin              #{2B120014-016E-1000-09A6-8E2BD269E89A}
        LegacyId            #20
      ENDPROPERTIES
      
      INDEXFIELDS
        #MatchingAgreement
      ENDINDEXFIELDS
      
      #CustCreatedDateIdx
      PROPERTIES
        Name                #CustCreatedDateIdx
        Origin              #{BDCB732C-DC58-43E4-9904-8BA05D765B57}
        LegacyId            #36
      ENDPROPERTIES
      
      INDEXFIELDS
        #CustAccount
        #createdDateTime
      ENDINDEXFIELDS
      
      #SourceDocumentIdx
      PROPERTIES
        Name                #SourceDocumentIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{05851D24-F058-410A-B94B-2197C602A559}
        LegacyId            #80
      ENDPROPERTIES
      
      INDEXFIELDS
        #SourceDocumentHeader
        #dataAreaId
      ENDINDEXFIELDS
      
      #ConsTarget_JPIdx
      PROPERTIES
        Name                #ConsTarget_JPIdx
        Origin              #{ED4E4437-387A-42F0-B108-8480F0DD745F}
        LegacyId            #8006
      ENDPROPERTIES
      
      INDEXFIELDS
        #InvoiceAccount
        #ConsTarget_JP
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #Agreement
        PROPERTIES
          Name                #Agreement
          Table               #AgreementHeader
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AgreementHeader
          Role                #AgreementHeader_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #MatchingAgreement
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankAccount_LV
        PROPERTIES
          Name                #BankAccount_LV
          Table               #BankAccountTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #BankAccount_LV
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankAccount_LV
            RelatedField        #AccountID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BankCentralBankPurpose
        PROPERTIES
          Name                #BankCentralBankPurpose
          Table               #BankCentralBankPurpose
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BankCentralBankPurposeCode
            RelatedField        #Code
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CashDisc
        PROPERTIES
          Name                #CashDisc
          Table               #CashDisc
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CashDisc
            RelatedField        #CashDiscCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CommissionCustomerGroup
        PROPERTIES
          Name                #CommissionCustomerGroup
          Table               #CommissionCustomerGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CommissionGroup
            RelatedField        #GroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CommissionSalesGroup
        PROPERTIES
          Name                #CommissionSalesGroup
          Table               #CommissionSalesGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SalesGroup
            RelatedField        #GroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Common
        PROPERTIES
          Name                #Common
          Table               #Common
          Validate            #No
          RelationshipType    #Link
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AddressRefRecId
            RelatedField        #RecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AddressRefTableId
            RelatedField        #TableId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ContactPerson
        PROPERTIES
          Name                #ContactPerson
          Table               #ContactPerson
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ContactPersonId
            RelatedField        #ContactPersonId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CountyOrigDest
        PROPERTIES
          Name                #CountyOrigDest
          Table               #LogisticsAddressCounty
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CountyOrigDest
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CountyOrigDest
            RelatedField        #CountyId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CreditCard
        PROPERTIES
          Name                #CreditCard
          Table               #CreditCardCust
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CreditCardCustRefId
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CurBankAccount_LV
        PROPERTIES
          Name                #CurBankAccount_LV
          Table               #BankAccountTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #CurBankAccount_LV
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CurBankAccount_LV
            RelatedField        #AccountID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Currency
        PROPERTIES
          Name                #Currency
          Table               #Currency
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CurrencyCode
            RelatedField        #CurrencyCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustBankAccount_LV
        PROPERTIES
          Name                #CustBankAccount_LV
          Table               #CustBankAccount
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InvoiceAccount
            RelatedField        #CustAccount
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CustBankAccount_LV
            RelatedField        #AccountID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustDirectDebitMandate
        PROPERTIES
          Name                #CustDirectDebitMandate
          Table               #CustDirectDebitMandate
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #DirectDebitMandate
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustGroup
        PROPERTIES
          Name                #CustGroup
          Table               #CustGroup
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustGroup
            RelatedField        #CustGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustInvoiceJour
        PROPERTIES
          Name                #CustInvoiceJour
          Table               #CustInvoiceJour
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CustInvoiceId
            RelatedField        #InvoiceId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustLedger
        PROPERTIES
          Name                #CustLedger
          Table               #CustLedger
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PostingProfile
            RelatedField        #PostingProfile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustLineDiscountGroup
        PROPERTIES
          Name                #CustLineDiscountGroup
          Table               #PriceDiscGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustLineDiscountGroup
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #LineDisc
            RelatedField        #GroupId
            SourceEDT           #CustLineDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Type
            SourceEDT           #CustLineDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Module
            SourceEDT           #CustLineDiscCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustMarkupGroup
        PROPERTIES
          Name                #CustMarkupGroup
          Table               #MarkupGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustMarkupGroup
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkupGroup
            RelatedField        #GroupId
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #MarkupGroup
            RelatedField        #Module
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustMultiLineDiscountGroup
        PROPERTIES
          Name                #CustMultiLineDiscountGroup
          Table               #PriceDiscGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustMultiLineDiscountGroup
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MultiLineDisc
            RelatedField        #GroupId
            SourceEDT           #CustMultiLineDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #2
            Table               #PriceDiscGroup
            RelatedField        #Type
            SourceEDT           #CustMultiLineDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Module
            SourceEDT           #CustMultiLineDiscCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPaymModeSpec
        PROPERTIES
          Name                #CustPaymModeSpec
          Table               #CustPaymModeSpec
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymSpec
            RelatedField        #Specification
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPaymModeTable
        PROPERTIES
          Name                #CustPaymModeTable
          Table               #CustPaymModeTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymMode
            RelatedField        #PaymMode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustPriceGroup
        PROPERTIES
          Name                #CustPriceGroup
          Table               #PriceDiscGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustPriceGroup
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PriceGroupId
            RelatedField        #GroupId
            SourceEDT           #CustPriceGroup
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #PriceDiscGroup
            RelatedField        #Type
            SourceEDT           #CustPriceGroup
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Module
            SourceEDT           #CustPriceGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTotalDiscountGroup
        PROPERTIES
          Name                #CustTotalDiscountGroup
          Table               #PriceDiscGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustTotalDiscountGroup
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #EndDisc
            RelatedField        #GroupId
            SourceEDT           #CustEndDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #3
            Table               #PriceDiscGroup
            RelatedField        #Type
            SourceEDT           #CustEndDiscCode
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Module
            SourceEDT           #CustEndDiscCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DefaultDimension
        PROPERTIES
          Name                #DefaultDimension
          Table               #DimensionAttributeValueSet
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DimensionAttributeValueSet
          Role                #DimensionAttributeValueSet_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DefaultDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DeliveryPostalAddress_FK
        PROPERTIES
          Name                #DeliveryPostalAddress_FK
          Table               #LogisticsPostalAddress
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LogisticsPostalAddress
          Role                #LogisticsPostalAddress_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DeliveryPostalAddress
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DlvMode
        PROPERTIES
          Name                #DlvMode
          Table               #DlvMode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DlvMode
            RelatedField        #Code
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DlvReason
        PROPERTIES
          Name                #DlvReason
          Table               #DlvReason
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DlvReason
            RelatedField        #Code
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DlvTerm
        PROPERTIES
          Name                #DlvTerm
          Table               #DlvTerm
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DlvTerm
            RelatedField        #Code
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InterCompany
        PROPERTIES
          Name                #InterCompany
          Table               #DataArea
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #InterCompany
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InterCompanyCompanyId
            RelatedField        #id
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #DataArea
            RelatedField        #isVirtual
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatPort
        PROPERTIES
          Name                #IntrastatPort
          Table               #IntrastatPort
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Port
            RelatedField        #PortId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatStatProc
        PROPERTIES
          Name                #IntrastatStatProc
          Table               #IntrastatStatProc
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #StatProcId
            RelatedField        #StatProcId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatTransactionCode
        PROPERTIES
          Name                #IntrastatTransactionCode
          Table               #IntrastatTransactionCode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TransactionCode
            RelatedField        #TransactionCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatTransportMode
        PROPERTIES
          Name                #IntrastatTransportMode
          Table               #IntrastatTransportMode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Transport
            RelatedField        #TransPortCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventLocation
        PROPERTIES
          Name                #InventLocation
          Table               #InventLocation
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventLocationId
            RelatedField        #InventLocationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventSite
        PROPERTIES
          Name                #InventSite
          Table               #InventSite
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventSiteId
            RelatedField        #SiteId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InvoiceCustomer
        PROPERTIES
          Name                #InvoiceCustomer
          Table               #CustTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #InvoiceCustomer
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InvoiceAccount
            RelatedField        #AccountNum
            SourceEDT           #CustInvoiceAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LanguageTable
        PROPERTIES
          Name                #LanguageTable
          Table               #LanguageTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #LanguageId
            RelatedField        #LanguageId
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #LanguageTable
            RelatedField        #LabelFile
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MarkupGroup
        PROPERTIES
          Name                #MarkupGroup
          Table               #MarkupGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #MarkupGroup
            RelatedField        #Module
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkupGroup
            RelatedField        #GroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MCRHoldCodeTrans
        PROPERTIES
          Name                #MCRHoldCodeTrans
          Table               #MCRHoldCodeTrans
          Validate            #No
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #SalesId
            RelatedField        #InventRefId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MCRInstallmentPlanSalesTable
        PROPERTIES
          Name                #MCRInstallmentPlanSalesTable
          Table               #MCRInstallmentPlanSalesTable
          Validate            #No
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #SalesId
            RelatedField        #SalesId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #NumberSequenceGroup
        PROPERTIES
          Name                #NumberSequenceGroup
          Table               #NumberSequenceGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #NumberSequenceGroup
            RelatedField        #numberSequenceGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OrderCustomer
        PROPERTIES
          Name                #OrderCustomer
          Table               #CustTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #OrderCustomer
          Role                #SalesTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustAccount
            RelatedField        #AccountNum
            SourceEDT           #CustAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymSched
        PROPERTIES
          Name                #PaymSched
          Table               #PaymSched
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PaymentSched
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PaymTerm
        PROPERTIES
          Name                #PaymTerm
          Table               #PaymTerm
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Payment
            RelatedField        #PaymTermId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsCustRebateGroup
        PROPERTIES
          Name                #PdsCustRebateGroup
          Table               #PdsCustRebateGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsCustRebateGroupId
            RelatedField        #PdsCustRebateGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsRebateProgramTMATable
        PROPERTIES
          Name                #PdsRebateProgramTMATable
          Table               #PdsRebateProgramTMATable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsRebateProgramTMAGroup
            RelatedField        #PdsRebateProgramTMAGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PlTaxDueTable
        PROPERTIES
          Name                #PlTaxDueTable
          Table               #PlTaxDueTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PlTaxDueTable
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxPeriodPaymentCode_PL
            RelatedField        #TaxPeriodPaymentCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PriceDiscChangePolicyRecId1
        PROPERTIES
          Name                #PriceDiscChangePolicyRecId1
          Table               #PriceDiscChangePolicy
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PriceDiscChangePolicy
          Role                #PriceDiscChangePolicy_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SystemEntryChangePolicy
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PriceDiscChangePolicyRecId2
        PROPERTIES
          Name                #PriceDiscChangePolicyRecId2
          Table               #PriceDiscChangePolicy
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PriceDiscChangePolicy_1
          Role                #PriceDiscChangePolicy_1_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ManualEntryChangepolicy
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjTable
        PROPERTIES
          Name                #ProjTable
          Table               #ProjTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ProjId
            RelatedField        #ProjId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PurchTable
        PROPERTIES
          Name                #PurchTable
          Table               #PurchTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PurchTable
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #SalesTable
            Field               #InterCompanyOrder
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #SalesTable
            Field               #InterCompanyCompanyId
          ENDPROPERTIES
          
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #SalesTable
            Field               #InterCompanyPurchId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PurchId
            RelatedField        #PurchId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PurchTableInterCompany
        PROPERTIES
          Name                #PurchTableInterCompany
          Table               #PurchTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PurchTableInterCompany
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE THISFIXED
          PROPERTIES
            Table               #SalesTable
            Field               #InterCompanyOrder
            Value               #1
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InterCompanyCompanyId
            RelatedField        #dataAreaId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InterCompanyPurchId
            RelatedField        #PurchId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReasonTableRef
        PROPERTIES
          Name                #ReasonTableRef
          Table               #ReasonTableRef
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CreditNoteReasonCode
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReturnReasonCode
        PROPERTIES
          Name                #ReturnReasonCode
          Table               #ReturnReasonCode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReturnReasonCodeId
            RelatedField        #ReasonCodeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesOrigin
        PROPERTIES
          Name                #SalesOrigin
          Table               #SalesOrigin
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SalesOriginId
            RelatedField        #OriginId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesPool
        PROPERTIES
          Name                #SalesPool
          Table               #SalesPool
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SalesPoolId
            RelatedField        #SalesPoolId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SalesTable
        PROPERTIES
          Name                #SalesTable
          Table               #SalesTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReturnReplacementId
            RelatedField        #SalesId
            SourceEDT           #ReturnReplacementId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ShipCarrierPostalAddress_FK
        PROPERTIES
          Name                #ShipCarrierPostalAddress_FK
          Table               #LogisticsPostalAddress
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LogisticsPostalAddress_1
          Role                #LogisticsPostalAddress_1_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ShipCarrierPostalAddress
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ShipCarrierTable
        PROPERTIES
          Name                #ShipCarrierTable
          Table               #ShipCarrierTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ShipCarrierId
            RelatedField        #CarrierId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #smmCampaignTable
        PROPERTIES
          Name                #smmCampaignTable
          Table               #smmCampaignTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #smmCampaignId
            RelatedField        #CampaignId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #smmSalesUnit
        PROPERTIES
          Name                #smmSalesUnit
          Table               #smmSalesUnit
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SalesUnitId
            RelatedField        #SalesUnitId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SourceDocumentHeader
        PROPERTIES
          Name                #SourceDocumentHeader
          Table               #SourceDocumentHeader
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #SourceDocumentHeader
          Role                #SourceDocumentHeader_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SourceDocumentHeader
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxGroupHeading
        PROPERTIES
          Name                #TaxGroupHeading
          Table               #TaxGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxGroup
            RelatedField        #TaxGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxServiceTariff
        PROPERTIES
          Name                #TaxServiceTariff
          Table               #TaxServiceTariff
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #TaxServiceTariff
          Role                #SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #ParentRecId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #ParentTableId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdGroupHeadingTCS_IN
        PROPERTIES
          Name                #TaxWithholdGroupHeadingTCS_IN
          Table               #TaxWithholdGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdGroupHeading_1
          Role                #TaxWithholdGroupHeading_1_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TCSGroup_IN
            RelatedField        #TaxWithholdGroup
            SourceEDT           #TaxWithholdGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxWithholdGroupHeadingTDS_IN
        PROPERTIES
          Name                #TaxWithholdGroupHeadingTDS_IN
          Table               #TaxWithholdGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #TaxWithholdGroupHeading
          Role                #TaxWithholdGroupHeading_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TDSGroup_IN
            RelatedField        #TaxWithholdGroup
            SourceEDT           #TaxWithholdGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TransportationDocument
        PROPERTIES
          Name                #TransportationDocument
          Table               #TransportationDocument
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroOne
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TransportationDocument
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerSalesResponsible_FK
        PROPERTIES
          Name                #WorkerSalesResponsible_FK
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #SalesResponsible
          Role                #SalesResponsible_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerSalesResponsible
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerSalesTaker_FK
        PROPERTIES
          Name                #WorkerSalesTaker_FK
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #SalesTaker
          Role                #SalesTaker_SalesTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerSalesTaker
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #SalesTable_IN(SalesTable)
      PROPERTIES
        Table               #SalesTable_IN
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTable_W(SalesTable)
      PROPERTIES
        Table               #SalesTable_W
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTableExtensionTH(SalesTable)
      PROPERTIES
        Table               #SalesTableExtensionTH
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTable_Intrastat(SalesTable)
      PROPERTIES
        Table               #SalesTable_Intrastat
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTable_RU(SalesTable)
      PROPERTIES
        Table               #SalesTable_RU
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTable_BR(SalesTable)
      PROPERTIES
        Table               #SalesTable_BR
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #SalesTaxTransactionExchangeRate(SalesTable)
      PROPERTIES
        Table               #SalesTaxTransactionExchangeRate
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #RetailSalesTableInstanceValue(RetailSalesTableInstanceSalesTable)
      PROPERTIES
        Table               #RetailSalesTableInstanceValue
        DeleteAction        #Cascade
        Relation            #RetailSalesTableInstanceSalesTable
      ENDPROPERTIES
      
      #SalesTableSymbol(SalesTable)
      PROPERTIES
        Table               #SalesTableSymbol
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #TaxServiceTariff(SalesTable)
      PROPERTIES
        Table               #TaxServiceTariff
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #ExportSalesOrder(SalesTable)
      PROPERTIES
        Table               #ExportSalesOrder
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #RetailSalesTable(SalesTable)
      PROPERTIES
        Table               #RetailSalesTable
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
      #TransportationDocument
      PROPERTIES
        Table               #TransportationDocument
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #BankLGGuaranteeCustomerSalesOrder(SalesTable)
      PROPERTIES
        Table               #BankLGGuaranteeCustomerSalesOrder
        DeleteAction        #Restricted
        Relation            #SalesTable
      ENDPROPERTIES
      
      #CustPaymSched
      PROPERTIES
        Table               #CustPaymSched
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendCreditInvoicingTable
      PROPERTIES
        Table               #CustVendCreditInvoicingTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #DocuRef
      PROPERTIES
        Table               #DocuRef
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InterCompanyPurchSalesReference
      PROPERTIES
        Table               #InterCompanyPurchSalesReference
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LedgerCov
      PROPERTIES
        Table               #LedgerCov
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #MarkupTrans
      PROPERTIES
        Table               #MarkupTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PrintMgmtDocInstance
      PROPERTIES
        Table               #PrintMgmtDocInstance
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #SalesJournalAutoSummary
      PROPERTIES
        Table               #SalesJournalAutoSummary
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #SourceDocumentHeader
      PROPERTIES
        Table               #SourceDocumentHeader
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #TaxWorkRegulation
      PROPERTIES
        Table               #TaxWorkRegulation
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PlInventPackageParm(SalesTable)
      PROPERTIES
        Table               #PlInventPackageParm
        DeleteAction        #Cascade
        Relation            #SalesTable
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #accountCustLedgerDimension
        #//BP Deviation documented
        #display LedgerDimensionDefaultAccount accountCustLedgerDimension(CustPostingProfile _postingProfile_RU = '')
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    return salesTableType.accountCustLedgerDimension(_postingProfile_RU);
        #}
      ENDSOURCE
      SOURCE #agreementDocumentTitle_RU
        #/// <summary>
        #///     Gets the document title of the related agreement.
        #/// </summary>
        #/// <returns>
        #///     The agreement document title.
        #/// </returns>
        #public display AgreementDocumentTitle agreementDocumentTitle_RU()
        #{
        #    return SalesAgreementHeader::find(this.MatchingAgreement).DocumentTitle;
        #}
      ENDSOURCE
      SOURCE #agreementHeaderExt_RU
        #/// <summary>
        #///     Retrieves the record ID of the <c>AgreementHeaderExt_RU</c> that is attached to the current sales order.
        #/// </summary>
        #/// <returns>
        #///     The agreement record ID.
        #/// </returns>
        #public AgreementHeaderExtRecId_RU agreementHeaderExt_RU()
        #{
        #    AgreementHeaderExtRecId_RU agreementHeaderExt;
        #
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        agreementHeaderExt = this.salesTable_RU().AgreementHeaderExt_RU;
        #    }
        #    return agreementHeaderExt;
        #}
      ENDSOURCE
      SOURCE #agreementIsLinked
        #display public SalesAgreementIsLinked agreementIsLinked()
        #{
        #    if (this.MatchingAgreement)
        #    {
        #        return NoYes::Yes;
        #    }
        #    return NoYes::No;
        #}
      ENDSOURCE
      SOURCE #amountDelivered
        #server display AmountCur  amountDelivered()
        #{
        #    SalesLine       salesLine;
        #    AmountCur       amountCur = 0;
        #
        #    while select salesLine
        #        where salesLine.SalesId     == this.SalesId
        #    {
        #        amountCur += salesLine.calcLineAmountExclTax(salesLine.SalesQty - salesLine.RemainSalesPhysical);
        #    }
        #
        #    return amountCur;
        #}
      ENDSOURCE
      SOURCE #amountInvoiced
        #server display AmountCur  amountInvoiced()
        #{
        #    CustInvoiceJour custInvoiceJour;
        #
        #    select sum(InvoiceAmount) from custInvoiceJour
        #        where custInvoiceJour.RefNum  == RefNum::SalesOrder
        #           && custInvoiceJour.SalesId == this.SalesId;
        #
        #    return custInvoiceJour.InvoiceAmount;
        #}
      ENDSOURCE
      SOURCE #amountMST
        #AmountMST amountMST(AmountCur _amountCur, TransDate _exchRateDate = systemDateGet())
        #{
        #    return Currency::mstAmount(_amountCur, this.CurrencyCode, _exchRateDate, this.fixedEuroTriangulation(), this.fixedExchRate(), this.fixedExchRateSecondary());
        #}
      ENDSOURCE
      SOURCE #amountOrderedNotInvoiced
        #server display AmountCur amountOrderedNotInvoiced()
        #{
        #    SalesLine  salesLine;
        #    AmountCur  ordered;
        #
        #    while select salesLine
        #        where salesLine.SalesId     == this.SalesId
        #    {
        #        ordered += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical+salesLine.RemainSalesFinancial);
        #    }
        #
        #    return ordered;
        #}
      ENDSOURCE
      SOURCE #amountRemainSalesFinancial
        #server display AmountCur  amountRemainSalesFinancial()
        #{
        #    SalesLine       salesLine;
        #    AmountCur       amountCur = 0;
        #
        #    while select salesLine
        #            index hint SalesLineIdx
        #            where salesLine.SalesId     == this.SalesId
        #    {
        #        amountCur += salesLine.calcLineAmountExclTax(salesLine.RemainSalesFinancial);
        #    }
        #
        #    return amountCur;
        #}
      ENDSOURCE
      SOURCE #amountRemainSalesPhysical
        #server display AmountCur  amountRemainSalesPhysical()
        #{
        #    SalesLine       salesLine;
        #    AmountCur       amountCur = 0;
        #
        #    while select salesLine
        #            index hint SalesLineIdx
        #            where salesLine.SalesId     == this.SalesId
        #    {
        #        amountCur += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical);
        #    }
        #
        #    return amountCur;
        #}
      ENDSOURCE
      SOURCE #calcDue_RU
        #[SysObsoleteAttribute('The method has been deprecated and is no longer used.', false)]
        #public void calcDue_RU()
        #{
        #    if (! this.PaymentSched)
        #    {
        #        this.FixedDueDate = PaymTerm::find(this.Payment).due(this.DeliveryDate, this.paymDayId());
        #    }
        #}
      ENDSOURCE
      SOURCE #calcEstimateForced
        #boolean calcEstimateForced()
        #{
        #    this.Touched = NoYes::Yes;
        #
        #    if (this.validateWrite())
        #    {
        #        this.update();
        #    }
        #    else
        #    {
        #        this.reread();
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #calculateTieredCharges
        #/// <summary>
        #/// Creates tiered misc. charges for the sales order.
        #/// </summary>
        #public void calculateTieredCharges()
        #{
        #    this.createMarkupTrans(false, true);
        #
        #    if (MarkupTrans::existTieredCharges(this.TableId, this.RecId))
        #    {
        #        info("@SYS4050024");
        #    }
        #    else
        #    {
        #        info("@SYS4050025");
        #    }
        #}
      ENDSOURCE
      SOURCE #canBeDirectlyInvoiced
        #/// <summary>
        #///    Determines whether the sales order can be directly invoiced through the Process Shipment feature.
        #/// </summary>
        #/// <returns>
        #///    true if the sales order has a payment term of COD or Credit card; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The Process shipment button is used for COD and credit card transactions.
        #///    If the payment type is a
        #///    credit card, the button will process the credit card and post the invoice.
        #///    If the payment type is
        #///    COD, the button with post the invoice.
        #///    The Invoice button is used to post all other transactions
        #///    that are not COD or credit card.
        #///    If the Process Shipment feature was used, the Invoice button will
        #///    print the invoice again.
        #/// </remarks>
        #boolean canBeDirectlyInvoiced()
        #{
        #    boolean     canBeInvoiced = false;
        #    PaymTerm    paymTerm;
        #
        #    paymTerm = this.payment();
        #    if (paymTerm.CreditCardPaymentType == CreditCardPaymentType::CreditCard ||
        #            paymTerm.PaymMethod == NetCurrent::COD)
        #    {
        #        canBeInvoiced = true;
        #    }
        #
        #    return canBeInvoiced;
        #}
      ENDSOURCE
      SOURCE #cancelPreAuthorization
        #server boolean cancelPreAuthorization()
        #{
        #    CreditCardAuthTrans     creditCardAuthTrans2Cancel;
        #    boolean ok;
        #
        #    if (!this.RecId)
        #    {
        #        return true;
        #    }
        #
        #    creditCardAuthTrans2Cancel = CreditCardAuthTrans::findValidPreApproval(this.SalesId);
        #    if (!creditCardAuthTrans2Cancel)
        #    {
        #        return true;
        #    }
        #    if (Box::okCancel("@SYS116762", DialogButton::Cancel)== DialogButton::Ok)
        #    {
        #        ok = CreditCardProcess::doVoidAuth(creditCardAuthTrans2Cancel);
        #        if (ok)
        #        {
        #            this.reread();
        #        }
        #        return ok;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canCreditNoteBeCreated
        #/// <summary>
        #/// Determines whether a credit note can be created for this sales order.
        #/// </summary>
        #/// <returns>
        #/// true if it is OK to create a credit note; otherwise, false.
        #/// </returns>
        #public boolean canCreditNoteBeCreated()
        #{
        #    return this.type().canCreditNoteBeCreated();
        #}
      ENDSOURCE
      SOURCE #canCreditNoteUseCreditCard
        #/// <summary>
        #/// Determines whether the a credit card can be used with a credit note.
        #/// </summary>
        #/// <returns>
        #/// true if a credit card can be used; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// To refund a prior sales invoice, the same credit card must be used as found on the original
        #/// invoice.No refund is allowed with a credit note if there is no original invoice.
        #/// </remarks>
        #public boolean canCreditNoteUseCreditCard()
        #{
        #    SalesTotals totals;
        #    AmountCur invoiceTotal;
        #    CreditCardAuthTrans creditCardAuthTrans;
        #
        #    // No problem if the total is not negative
        #    totals = SalesTotals::construct(this, SalesUpdate::All);
        #    totals.calc();
        #    invoiceTotal = conPeek(totals.displayFields(), TradeTotals::posTotalAmount());
        #    if (invoiceTotal >= 0)
        #    {
        #        return true;
        #    }
        #
        #    creditCardAuthTrans = CreditCardAuthTrans::findRefundCharge(this.SalesId);
        #
        #    // Have a refund but user tried to change credit cards
        #    if(creditCardAuthTrans && !CreditCard::sameCard(this, creditCardAuthTrans))
        #    {
        #        this.CreditCardCustRefId = CreditCardCust::findByUniqueCardId(creditCardAuthTrans.UniqueCardId).RecId; // put back the original credit card
        #        return checkFailed("@SYS330573");
        #    }
        #
        #    // No preauth, no credit card allowed
        #    if (!creditCardAuthTrans && this.CreditCardCustRefId)
        #    {
        #        this.Payment = CustTable::find(this.CustAccount).PaymTermId; // reset to default payment terms
        #        this.CreditCardCustRefId = 0; // clear the credit card
        #        return checkFailed("@SYS330574");
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canCustomerBeUpdated
        #boolean canCustomerBeUpdated(DocumentStatus _documentStatus)
        #{
        #    return CustTable::canCustomerBeUpdated(this.CustAccount, this.InvoiceAccount, _documentStatus);
        #}
      ENDSOURCE
      SOURCE #canDeliverySlipBeUpdatedBR
        #/// <summary>
        #/// Indicates whether a sales order can create delivery slips.
        #/// </summary>
        #/// <returns>
        #/// true if a delivery slip is found on the sales lines; otherwise false.
        #/// </returns>
        #public boolean canDeliverySlipBeUpdatedBR()
        #{
        #    SalesLine salesLine;
        #    SalesLine_BR salesLine_BR;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId == this.SalesId
        #            && salesLine.SalesStatus == SalesStatus::Backorder
        #        exists join salesLine_BR
        #            where  salesLine_BR.SalesLine == salesLine.RecId
        #                && salesLine_BR.DeliveryCFOPTable_BR != 0;
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #canReleaseToWarehouse
        #/// <summary>
        #/// Check sales order and customer status to determine whether sales order can release to warehouse
        #/// </summary>
        #/// <returns>
        #/// True if the order can release to warehouse
        #/// </returns>
        #public boolean canReleaseToWarehouse()
        #{
        #    boolean ret = true;
        #
        #    if (this.SalesStatus == SalesStatus::Invoiced    ||
        #        this.SalesStatus == SalesStatus::Canceled    ||
        #        this.SalesStatus == SalesStatus::Delivered   ||
        #        this.MCROrderStopped == NoYes::Yes)
        #    {
        #        ret = false;
        #    }
        #
        #    if (ret)
        #    {
        #        ret = CustTable::find(this.InvoiceAccount).Blocked != CustVendorBlocked::All;
        #        if (!ret)
        #        {
        #            warning(strFmt("@SYS7987", this.InvoiceAccount));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #canXMLBeSent
        #public boolean canXMLBeSent()
        #{
        #    boolean             ret;
        #    AifActionId         actionId;
        #    AifEndpointList     endpointList;
        #    AifConstraint       aifConstraint       = new AifConstraint();
        #    AifConstraintList   aifConstraintList   = new AifConstraintList();
        #
        #    actionId = AifSendService::getDefaultSendAction(classNum(ReturnReturnOrderOutService),AifSendActionType::SendByKey);
        #
        #    if (actionId)
        #    {
        #        aifConstraint.parmType(AifConstraintType::Customer);
        #        aifConstraint.parmId(this.CustAccount);
        #        aifConstraintList.addConstraint(aifConstraint);
        #
        #        endpointList = AifSendService::getEligibleEndpoints(actionId, aifConstraintList);
        #        if (endpointList.getEndpointCount() > 0)
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkAccount
        #boolean  checkAccount()
        #{
        #    CustVendorBlocked   blockLevel = CustTable::blocked(this.CustAccount);
        #
        #    switch (blockLevel)
        #    {
        #        case CustVendorBlocked::All:
        #            return checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
        #        case CustVendorBlocked::Invoice:
        #            warning(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
        #        break;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkAgainstCreditLimit
        #boolean checkAgainstCreditLimit(Common _salesLineOrTable = this, SalesTotals _salesTotals = null)
        #{
        #    boolean         ret = true;
        #    CustCreditLimit custCreditLimit;
        #
        #    if (this.isCreditCheckEligible())
        #    {
        #        setPrefix(strFmt("@SYS76767", this.SalesId));
        #
        #        custCreditLimit = CustCreditLimit::construct(_salesLineOrTable, _salesTotals);
        #
        #        ret = custCreditLimit.check();
        #
        #        // when checking for credit limit excess during order entry, the user is always able to continue
        #        // regardless of whether Warning or Error is chosen.
        #        ret = true;
        #
        #        this.Touched = NoYes::No;
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #checkAgreement_RU
        #/// <summary>
        #///     Validates the <c>AgreementHeaderExt_RU</c> field for sales order.
        #/// </summary>
        #/// <param name="_agreementHeaderExtRecId">
        #///     The record ID of the sales agreement; optional.
        #/// </param>
        #/// <returns>
        #///     true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
        #/// </returns>
        #public boolean checkAgreement_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = this.salesTable_RU().AgreementHeaderExt_RU)
        #{
        #    SalesAgreementHeader salesAgreementHeader;
        #    boolean ok = true;
        #
        #    if (SalesLine::exist(this.SalesId))
        #    {
        #        ok = checkFailed("@GLS220553");
        #    }
        #
        #    if (ok && _agreementHeaderExtRecId)
        #    {
        #        salesAgreementHeader = SalesAgreementHeaderExt_RU::salesAgreementHeader(_agreementHeaderExtRecId);
        #
        #        if (!salesAgreementHeader.canReleaseAgreement(this.ShippingDateRequested))
        #        {
        #            ok = checkFailed("@SYS103075");
        #        }
        #
        #        if (salesAgreementHeader.CustAccount != this.CustAccount)
        #        {
        #            ok = checkFailed(strFmt("@SYS112224",
        #                salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
        #        }
        #
        #        if (ok && this.InvoiceAccount && salesAgreementHeader.salesAgreementHeaderDefault().CustomerInvoiceAccount != this.InvoiceAccount)
        #        {
        #            ok = checkFailed(strFmt("@SYS112224",
        #                salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
        #        }
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkAndUpdateAvailableDlvDates
        #server boolean checkAndUpdateAvailableDlvDates()
        #{
        #    boolean ret;
        #    SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;
        #
        #    salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this);
        #    ret = salesCalcAvailableDlvDates.validateWritePrompt(this, false, false);
        #    this.doUpdate();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkCashPayment
        #boolean checkCashPayment()
        #{
        #    if (PaymTerm::isCashAccount(this.Payment) && this.PaymentSched )
        #    {
        #        return checkFailed(strFmt("@SYS25074"));
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkContactPerson
        #boolean checkContactPerson()
        #{
        #    ContactPerson   contactPerson;
        #
        #    if (this.ContactPersonId)
        #    {
        #        contactPerson = ContactPerson::find(this.ContactPersonId);
        #        if (contactPerson.CustAccount != this.CustAccount)
        #        {
        #            return false;
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkCreditCard
        #public boolean checkCreditCard()
        #{
        #    if (!CustParameters::useCreditCardModule())
        #    {
        #        return true;
        #    }
        #    if (!RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        #    {
        #        if (this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        #        {
        #            //--> Added by Red Maple
        #            if (MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId,this.TableId).PaymInfoTableId == tableNum(SalesTableCC))
        #            {
        #                return true;
        #            }
        #            //--> Red Maple End
        #
        #            if (!this.CreditCardCustRefId)
        #            {
        #                // The credit card number must be specfied
        #                return checkFailed("@SYS116746");
        #            }
        #
        #            if (this.CreditCardCustRefId && !CreditCard::checkExpireDate(CreditCardCust::find(this.CreditCardCustRefId).ExpiryDate))
        #            {
        #                // Credit card is expired
        #                return checkFailed("@SYS116750");
        #            }
        #
        #            if (this.SettleVoucher == SettlementType::OpenTransact)
        #            {
        #                // Can't auto settle credit card orders
        #                return checkFailed("@SYS328656");
        #            }
        #        }
        #        else
        #        {
        #            if (this.CreditCardCustRefId)
        #            {
        #                // The payment type must be credit card, since the credit card number has been specified
        #                return checkFailed("@SYS116747");
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkCreditCardPaymentType
        #public boolean checkCreditCardPaymentType()
        #{
        #    if (!this.type().canHaveCreditCard() &&
        #        this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        #    {
        #        return checkFailed(strFmt("@SYS127403", this.SalesType));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkCreditLimit
        #void checkCreditLimit(SalesTotals _salesTotals = null)
        #{
        #    SalesTableType::checkAgainstCreditLimit(this, _salesTotals);
        #}
      ENDSOURCE
      SOURCE #checkCreditNoteReason
        #/// <summary>
        #/// Checks the reason that a credit note is related to a <c>SalesTable</c> record.
        #/// </summary>
        #public void checkCreditNoteReason()
        #{
        #    #ISOCountryRegionCodes
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU,#isoPL,#isoHU,#isoCZ,#isoLT,#isoLV,#isoEE])
        #        && CustParameters::find().CreditNoteReasonReq)
        #    {
        #        this.checkCreditNoteReasonServer();
        #    }
        #}
      ENDSOURCE
      SOURCE #checkCreditNoteReasonServer
        #private server void checkCreditNoteReasonServer()
        #{
        #    SalesLine   salesLine;
        #
        #    // Find if a Credit note line is missing the Reason comment
        #    while select CreditNoteReasonCode, LineNum from salesLine
        #        order by LineNum
        #        where salesLine.SalesId == this.SalesId &&
        #            ((salesLine.RefReturnInvoiceTrans_W == 0 && salesLine.CreditNoteInternalRef_PL != 0) ||
        #            (salesLine.RefReturnInvoiceTrans_W != 0 && salesLine.CreditNoteInternalRef_PL == 0))
        #    {
        #        if (salesLine.CreditNoteReasonCode == 0 || ReasonTableRef::find(salesLine.CreditNoteReasonCode).ReasonComment == "")
        #        {
        #            throw error(strFmt("@GLS220466",salesLine.LineNum));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkCurrencyCode
        #client server void  checkCurrencyCode()
        #{
        #    MCRCustPaymTotals mcrCustPaymTotals;
        #
        #    if (this)
        #    {
        #        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #        {
        #            // If one or more payments disallows changing the currency,
        #            //restore the old currency.
        #            if (this.CurrencyCode != this.orig().CurrencyCode)
        #            {
        #                mcrCustPaymTotals =
        #                    MCRCustPaymTotals::construct(this.TableId, this.RecId);
        #
        #                if (mcrCustPaymTotals && !mcrCustPaymTotals.allowEditCurrency())
        #                {
        #                    warning("@MCR10940");
        #
        #                    this.CurrencyCode = this.orig().CurrencyCode;
        #                }
        #            }
        #        }
        #        if (this.CurrencyCode != this.orig().CurrencyCode &&
        #            SalesLine::existDifferentCurrency(this.SalesId,this.CurrencyCode))
        #        {
        #            warning("@SYS15290");
        #
        #            this.CurrencyCode = this.orig().CurrencyCode;
        #        }
        #
        #        if (this.CurrencyCode != this.orig().CurrencyCode &&
        #            MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
        #        {
        #            warning("@SYS24528");
        #
        #            this.CurrencyCode = this.orig().CurrencyCode;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkDelete
        #boolean checkDelete(
        #    boolean _useWarning = true,
        #    boolean _setWarningToLocked = false)
        #{
        #    return this.type().checkDelete(_useWarning, _setWarningToLocked);
        #}
      ENDSOURCE
      SOURCE #checkDelivery
        #boolean checkDelivery()
        #{
        #    if (!this.DlvMode)
        #    {
        #        // "Mode of delivery must be specified."
        #        return checkFailed(strFmt("@SYS116733"));
        #    }
        #
        #    if (!this.DlvTerm)
        #    {
        #        // "Delivery term must be specified."
        #        return checkFailed(strFmt("@SYS116734"));
        #    }
        #
        #    if (!this.ShipCarrierId)
        #    {
        #        // "Carrier must be specified."
        #        return checkFailed("@SYS116735");
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkIfUpdate
        #/// <summary>
        #/// Determines whether the various posting updates are allowed for the order.
        #/// </summary>
        #/// <param name="_packedCheckIfUpdateContract">
        #/// Specifies which of the posting update allowance values to obtain for the order; optional.
        #/// </param>
        #/// <returns>
        #/// A packed instance of the <c>SalesTableCanBeUpdatedContract</c> class.
        #/// </returns>
        #server container checkIfUpdate(container _packedCheckIfUpdateContract = conNull())
        #{
        #    container   canBeUpdated;
        #    if (
        #        this.company()
        #        != curext())
        #    {
        #        changecompany(
        #                      this.company()
        #                      )
        #        {
        #            canBeUpdated = this.type().checkIfUpdate(_packedCheckIfUpdateContract);
        #        }
        #    }
        #    else
        #    {
        #        canBeUpdated = this.type().checkIfUpdate(_packedCheckIfUpdateContract);
        #    }
        #
        #    return canBeUpdated;
        #}
      ENDSOURCE
      SOURCE #checkIntrastatFulfillDate_HU
        #/// <summary>
        #/// Validates Intrastat fulfillment date.
        #/// </summary>
        #/// <returns>
        #/// ture if Intrastat fulfillment date is valid; otherwise, false.
        #/// </returns>
        #public boolean checkIntrastatFulfillDate_HU()
        #{
        #    LogisticsAddressCountryRegionId country;
        #    IntrastatParameters             intrastatParameters;
        #    ProjTable                       projTable;
        #    ProjInvoiceTable                projInvoiceTable;
        #
        #    if (this.ProjId)
        #    {
        #        projTable           = ProjTable::find(this.ProjId);
        #        projInvoiceTable    = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
        #        country             = projInvoiceTable.invoiceAddress().CountryRegionId;
        #    }
        #    else
        #    {
        #        country             = this.deliveryAddress().CountryRegionId;
        #    }
        #
        #    intrastatParameters = IntrastatParameters::find();
        #
        #    if (! country)
        #    {
        #        return checkFailed(strFmt("@GLS107637"));
        #    }
        #
        #    if (! IntrastatCountryRegionParameters::isInEU(country))
        #    {
        #        return true;
        #    }
        #
        #    if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && ! this.IntrastatFulfillmentDate_HU)
        #    {
        #        return checkFailed(strFmt("@SYS4080012", fieldPName(SalesTable, IntrastatFulfillmentDate_HU)));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInventProfile_RU
        #public boolean checkInventProfile_RU(boolean _checkProfileId = false)
        #{
        #    SalesTable                  salesTableTmp;
        #    SalesTable_RU               salesTableTmpRU;
        #    SalesTable_RU               salesTableRU;
        #    SalesLine                   salesLine;
        #    InventDim                   inventDim;
        #    InventProfile_RU            inventProfile;
        #    SalesTable2LineParameters   salesTable2LineParameters;
        #    boolean                     ok = true;
        #
        #    salesTableTmp.data(this);
        #    salesTableTmp.salesTable_RU().setInventProfileId_RU();
        #
        #    salesTableRU = this.salesTable_RU();
        #    salesTableTmpRU = salesTableTmp.salesTable_RU();
        #
        #    if (salesTableRU.InventProfileType_RU != InventProfileType_RU::NotSpecified)
        #    {
        #        select firstonly salesLine
        #            where salesLine.SalesId                 == this.SalesId
        #        join InventProfileId_RU from inventDim
        #            where inventDim.InventDimId             == salesLine.InventDimId
        #        join TableId from inventProfile
        #            where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
        #               && inventProfile.InventProfileType   != salesTableRU.InventProfileType_RU;
        #
        #        if (salesLine)
        #        {
        #            ok = checkFailed(strFmt("@GLS113728",
        #                                    inventDim.InventProfileId_RU,
        #                                    salesTableRU.InventProfileType_RU));
        #        }
        #
        #        if (salesTableRU.InventProfileType_RU != InventProfileType_RU::General)
        #        {
        #            select firstonly RecId from salesLine
        #                where salesLine.SalesId == this.SalesId &&
        #                      (salesLine.StockedProduct == NoYes::No ||
        #                      (salesLine.SalesCategory               &&
        #                      !salesLine.ItemId));
        #
        #            if (salesLine.RecId)
        #            {
        #                ok = checkFailed(
        #                    strFmt("@GLS220092",
        #                        salesTableRU.InventProfileType_RU));
        #            }
        #        }
        #        else if (InventProfile_RU::find(salesTableTmpRU.InventProfileId_RU).StockInTransit == StockInTransit_RU::BoughtInTransit)
        #        {
        #            select firstonly RecId from salesLine
        #                where salesLine.SalesId == this.SalesId      &&
        #                      (salesLine.StockedProduct == NoYes::No ||
        #                      (salesLine.SalesCategory               &&
        #                      !salesLine.ItemId));
        #
        #            if (salesLine.RecId)
        #            {
        #                ok = checkFailed(
        #                    strFmt("@GLS220091",
        #                        salesTableRU.InventProfileId_RU));
        #            }
        #        }
        #    }
        #
        #    if (!_checkProfileId)
        #    {
        #        salesTable2LineParameters = SalesTable2LineParameters::find(tableNum(SalesTable_RU), fieldNum(SalesTable_RU, InventProfileId_RU), false);
        #        if (salesTable2LineParameters.Table2LineUpdate == TradeTable2LineUpdate::Never)
        #        {
        #            // force check for consistent
        #            _checkProfileId = true;
        #        }
        #    }
        #
        #    if (_checkProfileId && salesTableTmpRU.InventProfileId_RU)
        #    {
        #        if (salesTableRU.InventProfileUseRelated_RU == NoYes::No)
        #        {
        #            select firstonly RecId from salesLine
        #                where salesLine.SalesId             == this.SalesId
        #            join InventProfileId_RU from inventDim
        #                where inventDim.InventDimId         == salesLine.InventDimId &&
        #                      inventDim.InventProfileId_RU                           &&
        #                      inventDim.InventProfileId_RU  != salesTableTmpRU.InventProfileId_RU;
        #
        #            if (salesLine)
        #            {
        #                ok = checkFailed(strFmt("@GLS113730",
        #                                        inventDim.InventProfileId_RU,
        #                                        salesTableTmpRU.InventProfileId_RU));
        #            }
        #        }
        #        else
        #        {
        #            while select salesLine
        #                group by TableId
        #                where salesLine.SalesId             == this.SalesId
        #            join inventDim
        #                group by InventProfileId_RU
        #                where inventDim.InventDimId         == salesLine.InventDimId
        #                   && inventDim.InventProfileId_RU
        #                   && inventDim.InventProfileId_RU  != salesTableTmpRU.InventProfileId_RU
        #            {
        #                if (! InventProfileRelation_RU::find(salesTableTmpRU.InventProfileId_RU, inventDim.InventProfileId_RU))
        #                {
        #                    ok = checkFailed(strFmt("@GLS113729",
        #                                            inventDim.InventProfileId_RU,
        #                                            salesTableTmpRU.InventProfileId_RU));
        #                }
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkInvoiceAccount
        #boolean checkInvoiceAccount()
        #{
        #    MCRCustPaymTotals mcrCustPaymTotals;
        #    CustVendorBlocked   blockLevel = CustTable::blocked(this.InvoiceAccount);
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        if (this.RecId && this.InvoiceAccount != this.orig().InvoiceAccount)
        #        {
        #            // Check if one or more payments disallows modifying the invoice account.
        #            mcrCustPaymTotals =
        #                MCRCustPaymTotals::construct(this.TableId, this.RecId);
        #
        #            if (!mcrCustPaymTotals.allowEditInvoiceAccount())
        #            {
        #                error("@MCR11248");
        #                return false;
        #            }
        #        }
        #    }
        #
        #    switch (blockLevel)
        #    {
        #        case CustVendorBlocked::All:
        #            return checkFailed(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
        #        case CustVendorBlocked::Invoice:
        #            warning(strFmt(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel))));
        #        break;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInvoicePostingType_RU
        #public boolean checkInvoicePostingType_RU()
        #{
        #    boolean             ok = true;
        #    SalesLine           salesLine;
        #    SalesTable_RU       salesTableRU;
        #    InventDim           inventDim;
        #    InventProfile_RU    inventProfile;
        #    ;
        #    if (! this.RecId)
        #    {
        #        return ok;
        #    }
        #
        #    salesTableRU = this.salesTable_RU();
        #
        #    if (salesTableRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        #    {
        #        if (this.payment().Cash == NoYes::Yes)
        #        {
        #            ok = checkFailed("@GLS114805");
        #        }
        #
        #        ok = ok && InventProfile_RU::checkGITProfileType(salesTableRU.InventProfileType_RU);
        #
        #        if (ok)
        #        {
        #            select firstonly salesLine
        #                where salesLine.SalesId == this.SalesId
        #            join TableId from inventDim
        #                where inventDim.InventDimId == salesLine.InventDimId
        #            join InventProfileType from inventProfile
        #                where inventProfile.InventProfileId   == inventDim.InventProfileId_RU                   &&
        #                     (inventProfile.InventProfileType == InventProfileType_RU::CommissionAgent          ||
        #                      inventProfile.InventProfileType == InventProfileType_RU::CommissionPrincipalAgent ||
        #                      inventProfile.InventProfileType == InventProfileType_RU::Bailee);
        #
        #            if (salesLine)
        #            {
        #                ok = checkFailed(strFmt("@GLS114807", inventProfile.InventProfileType));
        #            }
        #        }
        #
        #        if (ok)
        #        {
        #            select firstonly RecId from salesLine
        #                where salesLine.SalesId == this.SalesId     &&
        #                     (salesLine.StockedProduct == NoYes::No ||
        #                     (!salesLine.ItemId                     &&
        #                      salesLine.SalesCategory));
        #
        #            if (salesLine.RecId)
        #            {
        #                ok = checkFailed("@GLS220090");
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #checkMarkupTrans_RU
        #server boolean checkMarkupTrans_RU()
        #{
        #    ;
        #    return MarkupTrans::checkMarkupTransCustVend_RU(this.TableId, this.RecId);
        #}
        #
      ENDSOURCE
      SOURCE #checkPayment
        #boolean checkPayment()
        #{
        #    #ISOCountryRegionCodes
        #    PaymTerm        paymTerm;
        #    CreditCardCust creditCardCust;
        #    CreditCardProcessors creditCardProcessors;
        #
        #    paymTerm = this.payment();
        #    if (paymTerm.PaymMethod == NetCurrent::COD && !this.returnItem())
        #    {
        #        if (!this.DlvMode)
        #        {
        #            return checkFailed(strFmt("@SYS24563"));
        #        }
        #
        #        if (this.PaymentSched)
        #        {
        #            return checkFailed(strFmt("@SYS24623"));
        #        }
        #    }
        #
        #    if (this.PaymentSched && this.FixedDueDate)
        #    {
        #        return checkFailed("@SYS69828");
        #    }
        #
        #    if (paymTerm.CreditCardPaymentType == CreditCardPaymentType::CreditCard && this.CreditCardCustRefId != 0)
        #    {
        #        creditCardCust = CreditCardCust::find(this.CreditCardCustRefId);
        #        creditCardProcessors = CreditCardProcessors::find(creditCardCust.CreditCardProcessors);
        #        if (creditCardCust && !CreditCardProcessors::validateCurrencyForProcessor(creditCardProcessors, this.CurrencyCode, creditCardCust.CreditCardTypeName) ||
        #                !this.checkPaymMode())
        #        {
        #            // The active credit card processor does not supports this currency.
        #            return checkFailed(strFmt("@SYS327527", creditCardProcessors.Name, this.CurrencyCode));
        #        }
        #
        #        if (this.PaymentSched)
        #        {
        #            return checkFailed("@SYS27358");
        #        }
        #    }
        #
        #    if (!this.ReceiptDateConfirmed              &&
        #        paymTerm.UseDeliveryDateForDueDate_ES   &&
        #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        #    {
        #        return checkFailed(strFmt("@SYS4000478", this.Payment));
        #    }
        #
        #    //--> Red Maple Credit Card Begin
        #    if (CreditCardParameters::findParameterWithTerminal(CreditCardTrans::resolveTerminalforSalesTable(this).TerminalId).PaymMode ==
        #        this.PaymMode)
        #    {
        #        CreditCardOrderHoldTable::checkHolds(this);
        #    }
        #    //<-- Red Maple Credit Card End
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkPaymMode
        #/// <summary>
        #/// Checks whether the payment mode is valid.
        #/// </summary>
        #/// <returns>
        #/// true if the payment mode is valid; otherwise, false.
        #/// </returns>
        #public boolean checkPaymMode()
        #{
        #    boolean ok = true;
        #    CustPaymModeTable custPaymModeTable;
        #    CustParameters custParameters;
        #    CreditCardCust creditCardCust;
        #    CreditCardProcessors creditCardProcessors;
        #
        #    if (this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        #    {
        #        creditCardCust = CreditCardCust::find(this.CreditCardCustRefId);
        #        creditCardProcessors = CreditCardProcessors::find(creditCardCust.CreditCardProcessors);
        #        custPaymModeTable = CustPaymModeTable::find(this.PaymMode);
        #
        #        if (custPaymModeTable.offsetLedgerDimension() &&
        #                !CreditCardProcessors::validateAccountForProcessor(creditCardProcessors, custPaymModeTable.paymACType(), custPaymModeTable.offsetLedgerDimension(), creditCardCust.CreditCardTypeName))
        #        {
        #            ok = false;
        #        }
        #        else if (custPaymModeTable.offsetLedgerDimension() == 0)
        #        {
        #            custParameters = CustParameters::find();
        #
        #            if (!CreditCardProcessors::validateAccountForProcessor(creditCardProcessors, custParameters.CreditCardPostingAccountType, custParameters.CreditCardPostingLedgerDimension, creditCardCust.CreditCardTypeName))
        #            {
        #                ok = false;
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkReservation
        #boolean checkReservation()
        #{
        #    SalesLine   salesLine;
        #    boolean     ok = true;
        #
        #    select firstonly salesLine
        #           index hint SalesLineIdx
        #           where salesLine.SalesId          == this.SalesId
        #           &&    salesLine.InventRefTransId != '';
        #    if (salesLine
        #    &&  this.Reservation == ItemReservation::Explosion)
        #    {
        #        ok = checkFailed("@SYS105404");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkUpdate
        #boolean  checkUpdate(boolean  useWarning        = true,
        #                     boolean _interCompanyCheck = true)
        #{
        #    return this.type().checkUpdate(useWarning,_interCompanyCheck);
        #}
      ENDSOURCE
      SOURCE #clearAddressReference
        #public void clearAddressReference()
        #{
        #    this.AddressRefRecId    = 0;
        #    this.AddressRefTableId  = 0;
        #}
      ENDSOURCE
      SOURCE #clearAllPriceDiscChangePolicies
        #/// <summary>
        #/// Removes all the previously set price discount change policies for the corresponding
        #/// <c>SalesTable</c> record.
        #/// </summary>
        #/// <remarks>
        #/// Removes the policies from both manual and system groups.
        #/// </remarks>
        #void clearAllPriceDiscChangePolicies()
        #{
        #    this.type().clearAllPriceDiscChangePolicies();
        #}
      ENDSOURCE
      SOURCE #clearingLedgerDimension
        #public LedgerDimensionDefaultAccount clearingLedgerDimension(CustPostingProfile _postingProfile_RU = '')
        #{
        #    SalesTableType salesTableType;
        #
        #    salesTableType = this.type();
        #    return salesTableType.clearingLedgerDimension(_postingProfile_RU);
        #}
      ENDSOURCE
      SOURCE #clearingPeriod
        #ClearingPeriod clearingPeriod()
        #{
        #    return this.custTable_InvoiceAccount().clearingPeriod();
        #}
      ENDSOURCE
      SOURCE #companyInfo
        #/// <summary>
        #/// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>CompanyInfo</c> record.
        #/// </returns>
        #public CompanyInfo companyInfo()
        #{
        #    return CompanyInfo::findDataArea(this.company());
        #}
      ENDSOURCE
      SOURCE #contactPerson
        #ContactPerson contactPerson(boolean _forUpdate = false)
        #{
        #    return ContactPerson::find(this.ContactPersonId, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #contactPersonName
        #display ContactPersonName contactPersonName()
        #{
        #    return ContactPerson::name(this.ContactPersonId);
        #}
      ENDSOURCE
      SOURCE #contributionMargin
        #server display ContributionMarginMST contributionMargin()
        #{
        #    SalesTotals             salesTotals;
        #    ContributionMarginMST   contributionMargin;
        #
        #    salesTotals = SalesTotals::construct(this, SalesUpdate::All);
        #    salesTotals.prepareBalanceCalculation();
        #    salesTotals.prepareCostValueCalculation();
        #    salesTotals.calc();
        #
        #    contributionMargin   = Currency::mstAmount(salesTotals.totalBalance() - salesTotals.totalEndDisc(), this.CurrencyCode);
        #    contributionMargin  -= salesTotals.totalCostValue();
        #
        #    return contributionMargin;
        #}
      ENDSOURCE
      SOURCE #convertCurrencyCode
        #server void convertCurrencyCode(CurrencyCode currencyCode, TradeCurencyConversion tradeCurencyConversion = TradeCurencyConversion::ExchRate)
        #{
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #
        #    SalesLine                 salesLine;
        #    MarkupTrans               markupTrans;
        #
        #    ttsbegin;
        #
        #    while select forupdate salesLine
        #          where salesLine.SalesId   == this.SalesId
        #    {
        #        salesLine.convertCurrencyCode(currencyCode, tradeCurencyConversion);
        #        salesLine.doUpdate();
        #
        #        // <GEERU>
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
        #            isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #        {
        #            salesLine.SysExtensionSerializerMap::postUpdate();
        #        }
        #        // </GEERU>
        #
        #        if (salesLine.MatchingAgreementLine && !AgreementLine::find(salesLine.MatchingAgreementLine).isLinkValid(salesLine,false))
        #        {
        #            salesLine.unLinkAgreementLine();
        #            info(strFmt("@SYS306908", this.SalesId, salesLine.ItemId));
        #        }
        #    }
        #
        #    while select forupdate markupTrans
        #          index hint TableRecIdIdx
        #          where markupTrans.TransTableId  == this.TableId &&
        #                markupTrans.TransRecId    == this.RecId   &&
        #               !markupTrans.IsDeleted
        #    {
        #        markupTrans.convertCurrencyCode(currencyCode);
        #        markupTrans.doUpdate();
        #    }
        #
        #    CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);
        #
        #    if (this.FixedExchRate)
        #    {
        #        info(strFmt("@SYS78763", this.SalesId));
        #    }
        #
        #    this.FixedExchRate  = 0;
        #
        #    this.CurrencyCode = currencyCode;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #copyAddressToLine
        #server void  copyAddressToLine(DialogButton    copyAddress,
        #                               SalesTable      salesTable,
        #                               DeliveryDateUpdateInLines deliveryDateUpdateInLines = DeliveryDateUpdateInLines::RevertDeliveryDateControl)
        #{
        #    SalesLine  salesLine;
        #
        #    if (copyAddress == DialogButton::Cancel)
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #
        #    while select forupdate salesLine
        #        where salesLine.SalesId == this.SalesId &&
        #            (copyAddress                 == DialogButton::YesToAll ||
        #             salesLine.DeliveryPostalAddress == salesTable.orig().DeliveryPostalAddress)
        #    {
        #        if (!salesLine.isDropShipmentPOLineInvoiceMatched()
        #         && !salesLine.isInterCompanyOrderLineInvoiceMatched())
        #        {
        #            salesLine.setAddressFromSalesTable(this);
        #
        #            if (salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None)
        #            {
        #                SalesLineDeliveryDateControlRecalculate::applyDeliveryDateControl(salesLine, deliveryDateUpdateInLines);
        #            }
        #
        #            if (#PdsMRCEnabled)
        #            {
        #                if (!salesLine.validateWrite(true))
        #                {
        #                    throw error("@PDS894");
        #                }
        #            }
        #
        #            salesLine.write();
        #        }
        #    }
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #copyDimension
        #/// <summary>
        #/// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </summary>
        #/// <param name="_defaultDimension">
        #/// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_dimensionCopy">
        #/// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
        #/// optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten.
        #/// </remarks>
        #
        #public DimensionDefault copyDimension(
        #    DimensionDefault _defaultDimension,
        #    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
        #                                                                  this.companyInfo().RecId
        #                                                                  )
        #    )
        #{
        #    return _dimensionCopy.copy(_defaultDimension);
        #}
      ENDSOURCE
      SOURCE #copyPaymentSched
        #server void copyPaymentSched(CustInvoiceJour custInvoiceJour)
        #{
        #    CustPaymSched       custPaymSched;
        #    CustVendPaymSched   custVendPaymSched;
        #
        #    ttsbegin;
        #
        #    select custPaymSched
        #    where custPaymSched.ExtTableId       == this.TableId &&
        #          custPaymSched.ExtRecId         == this.RecId;
        #
        #    if (custPaymSched.RecId)
        #    {
        #        custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, custInvoiceJour);
        #        custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #copyRMALines
        #/// <summary>
        #/// Copies the lines from a return order to a sales order.
        #/// </summary>
        #/// <param name="_returnTable">
        #/// A <c>SalesTable</c> record.
        #/// </param>
        #/// <param name="_copyRMALines">
        #/// A Boolean value that indicates whether the lines should be copied.
        #/// </param>
        #void copyRMALines(SalesTable _returnTable, NoYes _copyRMALines = NoYes::No)
        #{
        #    SalesLine       salesLine;
        #    SalesLine       replacementLine;
        #    SalesTable      returnTable = SalesTable::findRecId(_returnTable.RecId, true);
        #    InventDim       inventDim;
        #    SalesLine       origSalesLine;
        #    SalesLine_BR    salesLine_BR;
        #    SalesTableLinks     salesTableLinks;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #    MCRReturnSalesTable mcrReturnSalesTableLocal;
        #    boolean mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));
        #
        #    ttsbegin;
        #    if (mcrCallCenterEnabled)
        #    {
        #        returnTable.ReturnReplacementId = this.SalesId;
        #        if (RetailMCRChannelTable::mcrEnableOrderCompletion(_returnTable))
        #        {
        #            // Support credit being applied to the exchange and linking records.
        #            mcrReturnSalesTable = returnTable.mcrReturnSalesTable();
        #            mcrReturnSalesTable.ApplyCreditToExchange = NoYes::Yes;
        #            mcrReturnSalesTable.AdvanceExchange = MCRAdvanceExchange::DoNotRelease;
        #            mcrReturnSalesTable.AdvanceCredit = NoYes::No;
        #            returnTable.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
        #        }
        #
        #        if(this.ReturnReplacementId)
        #        {
        #            mcrReturnSalesTableLocal = this.mcrReturnSalesTable();
        #            salesTableLinks.MainSalesId = mcrReturnSalesTableLocal.OriginalSalesId;
        #            salesTableLinks.SubSalesId = this.ReturnReplacementId;
        #
        #            salesTableLinks.insert();
        #        }
        #
        #        returnTable.update();
        #    }
        #
        #    if (_copyRMALines == NoYes::Yes && returnTable.returnItem())
        #    {
        #        while select forupdate salesLine
        #            where salesLine.SalesId         == returnTable.SalesId
        #                && salesLine.StockedProduct == true
        #                && salesLine.ReturnStatus   != ReturnStatusLine::Canceled
        #        {
        #            replacementLine.clear();
        #
        #            replacementLine.SalesType = SalesType::Sales;
        #
        #            if (BrazilParameters::isEnabled())
        #            {
        #                // For BR returned orders the fiscal information needs to be retrieved from
        #                // the original sales order line.
        #                origSalesLine = null;
        #                origSalesLine = SalesLine::findInventTransId(salesLine.InventTransIdReturn);
        #                if (origSalesLine)
        #                {
        #                    salesLine_BR = salesLine.salesLine_BR();
        #                    salesLine_BR.TaxServiceCode_BR     = origSalesLine.salesLine_BR().TaxServiceCode_BR;
        #                    salesLine_BR.DeliveryCFOPTable_BR  = origSalesLine.salesLine_BR().DeliveryCFOPTable_BR;
        #                    salesLine.packSalesLine_BR(salesLine_BR);
        #
        #                    salesLine.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        #                }
        #            }
        #
        #
        #            // copy from return line
        #            replacementLine.initFromSalesLine(salesLine);
        #
        #            //This call is to utilize the alternative-item functionallity
        #            replacementLine.createAlternativeItem(replacementLine.inventDim(), replacementLine);
        #
        #            // update with replacement sales order information
        #            replacementLine.initFromSalesTable(this);
        #
        #            replacementLine.DefaultDimension = replacementLine.copyDimension(salesLine.DefaultDimension);
        #
        #            if (replacementLine.isStocked())
        #            {
        #                inventDim = replacementLine.inventDim();
        #                replacementLine.setDeliveryDateControlType(inventDim.InventDimId);
        #                replacementLine.initBarcode(inventDim);
        #                replacementLine.calcPackingUnit(inventDim);
        #                replacementLine.calcPackingUnitQty(inventDim);
        #            }
        #
        #            replacementLine.PdsCWQty    = -salesLine.PdsCWExpectedRetQty;
        #
        #            replacementLine.SalesQty    = -salesLine.ExpectedRetQty;
        #            replacementLine.SalesPrice  = Currency::curPrice2CurPrice(replacementLine.SalesPrice, salesLine.CurrencyCode, replacementLine.CurrencyCode);
        #            replacementLine.LineAmount  = -Currency::curAmount2CurAmount(replacementLine.LineAmount, salesLine.CurrencyCode, replacementLine.CurrencyCode);
        #
        #            SalesCalcAvailableDlvDates::initDateFields(replacementLine);
        #
        #            replacementLine.LineAmount  = replacementLine.calcLineAmount();
        #
        #            replacementLine.createLine(true, false, false, true, true, false, this.Reservation == ItemReservation::Automatic, true
        #                , ''                // _oldInventTransId
        #                , false             // _ignoreSalesTableInventDim
        #                , true              // _setLineNum
        #                , true              // _searchAgreementLine
        #                , null              // _smaServiceOrderTable
        #                , 0                 // _oldAgreementLineRecId
        #                , salesLine.InventTransId); // _mcrExchangeInventRefTransId
        #        }
        #    }
        #
        #    returnTable.ReturnReplacementId = this.SalesId;
        #    returnTable.update();
        #
        #    ttscommit;
        #}
        #
        #
      ENDSOURCE
      SOURCE #copyThirdPartyAddressFromCust
        #/// <summary>
        #/// Copies address to the <c>SalesTable</c> buffer.
        #/// </summary>
        #/// <remarks>
        #/// When the customer has third-party information, the user is prompted whether to copy to sales order.
        #/// </remarks>
        #void copyThirdPartyAddressFromCust()
        #{
        #    CustTable       fromCustTable;
        #    SalesLine       toSalesLine;
        #
        #    LogisticsPostalAddress address;
        #    LogisticsLocationDefault defaultLocation;
        #    LogisticsLocationRole thirdPartyShipRole;
        #    Addressing      oldThirdPartyBillingAddr;
        #
        #    ShipCarrierAddress shipCarrierAddress;
        #    LogisticsLocationEntity fromTpLocation;
        #
        #    fromCustTable = this.custTable_CustAccount();
        #
        #    address = LogisticsPostalAddress::findRecId(this.ShipCarrierPostalAddress);
        #    oldThirdPartyBillingAddr = address.Address;
        #
        #    if (this.ShipCarrierPostalAddress)
        #    {
        #        ttsbegin;
        #
        #        // Update the sales lines delivery information
        #        toSalesLine.skipDataMethods(true);
        #        update_recordset toSalesLine setting
        #            DeliveryName = fromCustTable.name(),
        #            ShipCarrierAccount = fromCustTable.ShipCarrierAccount,
        #            ShipCarrierAccountCode = fromCustTable.ShipCarrierAccountCode,
        #            ShipCarrierId = fromCustTable.ShipCarrierId,
        #            DlvMode = fromCustTable.DlvMode
        #            where toSalesLine.SalesId == this.SalesId;
        #
        #        ttscommit;
        #    }
        #
        #    fromTpLocation = LogisticsLocationEntity::findLocation(fromCustTable, LogisticsLocationRoleType::ShipCarrierThirdPartyShipping);
        #
        #    if (!(fromTpLocation && fromTpLocation.parmLocationRecId()))
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #
        #    defaultLocation = LogisticsLocationDefault::construct(fromCustTable);
        #    thirdPartyShipRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::ShipCarrierThirdPartyShipping);
        #    if (defaultLocation.defaultExists(thirdPartyShipRole))
        #    {
        #        address = LogisticsPostalAddress::findByLocation(defaultLocation.getDefaultLocation(thirdPartyShipRole).RecId);
        #        this.ShipCarrierPostalAddress = address.RecId;
        #    }
        #
        #    if (address)
        #    {
        #        shipCarrierAddress = ShipCarrierAddress::findByCustomerLocation(fromCustTable.AccountNum, address.Location);
        #    }
        #    else if (thirdPartyShipRole)
        #    {
        #        shipCarrierAddress = ShipCarrierAddress::findByCustomerLocation(fromCustTable.AccountNum, fromTpLocation.parmLocationRecId());
        #    }
        #
        #    this.ShipCarrierAccount = shipCarrierAddress.ShipCarrierAccount;
        #    this.ShipCarrierAccountCode = shipCarrierAddress.ShipCarrierAccountCode;
        #    this.ShipCarrierId = shipCarrierAddress.ShipCarrierId;
        #    if (shipCarrierAddress.DlvTermId == '')
        #    {
        #        this.DlvTerm = fromCustTable.DlvTerm;
        #    }
        #    else
        #    {
        #        this.DlvTerm = shipCarrierAddress.DlvTermId;
        #    }
        #
        #    if (shipCarrierAddress.DlvModeId == '')
        #    {
        #        this.DlvMode = fromCustTable.DlvMode;
        #    }
        #    else
        #    {
        #        this.DlvMode = shipCarrierAddress.DlvModeId;
        #    }
        #    this.ShipCarrierBlindShipment = shipCarrierAddress.ShipCarrierBlindShipment;
        #    this.ShipCarrierFuelSurcharge = fromCustTable.ShipCarrierFuelSurcharge;
        #    this.ShipCarrierResidential = shipCarrierAddress.ShipCarrierResidentialDest;
        #
        #    if (this.RecId)
        #    {
        #        this.update();
        #    }
        #    ttscommit;
        #
        #    if (this.tpAddress() != oldThirdPartyBillingAddr && SalesLine::exist(this.SalesId))
        #    {
        #        if (SalesTable::promptCopyThirdPartyBillingAddress() == DialogButton::Yes)
        #        {
        #            this.copyThirdPartyBillingAddressToLine();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #copyThirdPartyBillingAddressToLine
        #server void  copyThirdPartyBillingAddressToLine()
        #{
        #    SalesLine               salesLine;
        #    ShipCarrierAddress      shipCarrierAddress;
        #    LogisticsLocation       carrierLocation = LogisticsLocation::find(LogisticsPostalAddress::findRecId(this.ShipCarrierPostalAddress).Location);
        #    DlvModeId               custDlvModeId = this.custTable_CustAccount().DlvMode;
        #
        #    ttsbegin;
        #
        #    select firstonly ShipCarrierAccount,
        #                     ShipCarrierAccountCode,
        #                     ShipCarrierId,
        #                     DlvModeId
        #        from shipCarrierAddress
        #        where shipCarrierAddress.Location == carrierLocation.RecId;
        #
        #    while select forupdate salesLine
        #        where salesLine.SalesId == this.SalesId
        #    {
        #        if (!salesLine.isDropShipmentPOLineInvoiceMatched()
        #            && !salesLine.isInterCompanyOrderLineInvoiceMatched())
        #        {
        #            salesLine.SalesShipCarrierMap::setShipCarrierFromLogisticsLocation(
        #                carrierLocation,
        #                this.ShipCarrierPostalAddress,
        #                shipCarrierAddress);
        #            salesLine.update();
        #        }
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #createCarrierInfoAndThirdPartyAddress
        #/// <summary>
        #/// Initializes third-party shipping address and carrier information.
        #/// </summary>
        #void createCarrierInfoAndThirdPartyAddress()
        #{
        #    CustTable               custTable;
        #    DlvMode                 dlvMode;
        #    LogisticsLocation       location;
        #    LogisticsLocationEntity locationEntity;
        #
        #    ttsbegin;
        #    if (isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)) &&
        #        !this.ShipCarrierPostalAddress)
        #    {
        #        custTable = CustTable::find(this.CustAccount);
        #
        #        location = LogisticsLocationDefault::findSimpleDefault(custTable, LogisticsLocationRole::findBytype(
        #            LogisticsLocationRoleType::ShipCarrierThirdPartyShipping));
        #        locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);
        #
        #        //if the delivery mode has not been changed in create form,
        #        //and the customer has those info, copy from custTable
        #        if (this.DlvMode == custTable.DlvMode && location)
        #        {
        #            this.selectForUpdate(true);
        #            this.ShipCarrierPostalAddress = locationEntity.getPostalAddress().RecId;
        #            this.update();
        #        }
        #        //otherwise, copy carrierID from dlvMode
        #        else
        #        {
        #            dlvMode = DlvMode::find(this.DlvMode);
        #            if (dlvMode && dlvMode.ShipCarrierId)
        #            {
        #                this.selectForUpdate(true);
        #                this.ShipCarrierPostalAddress = locationEntity.getPostalAddress().RecId;
        #                this.update();
        #            }
        #        }
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #createCustTrans_BR
        #/// <summary>
        #/// Returns if the invoice will create customer transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
        #/// </summary>
        #/// <returns>
        #/// Returns true is operation type is not set on <c>salesTable</c> or the operation type is configured to create customer transactions.
        #/// </returns>
        #public boolean createCustTrans_BR()
        #{
        #    return BrazilParameters::isEnabled() == false
        #        || this.salesTable_BR().SalesPurchOperationType_BR == 0
        #        || SalesPurchOperationType_BR::find(this.salesTable_BR().SalesPurchOperationType_BR).CreateFinancialTrans;
        #}
      ENDSOURCE
      SOURCE #createDate
        #/// <summary>
        #/// Retrieves the creation date of the current record.
        #/// </summary>
        #/// <returns>
        #/// The creation date of the current record.
        #/// </returns>
        #/// <remarks>
        #/// Retrieves the date only. Used in fact boxes.
        #/// </remarks>
        #display CreationDate  createDate()
        #{
        #    return DateTimeUtil::date(this.CreatedDateTime);
        #}
      ENDSOURCE
      SOURCE #createInventTrans_BR
        #/// <summary>
        #/// Returns if the invoice will create inventory transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
        #/// </summary>
        #/// <returns>
        #/// Returns true is operation type is not set on <c>salesTable</c> or the operation type is configured to inventory transactions.
        #/// </returns>
        #public boolean createInventTrans_BR()
        #{
        #    return BrazilParameters::isEnabled() == false
        #        || this.salesTable_BR().SalesPurchOperationType_BR == false
        #        || SalesPurchOperationType_BR::find(this.salesTable_BR().SalesPurchOperationType_BR).CreateInventTrans;
        #}
      ENDSOURCE
      SOURCE #createMarkupTrans
        #/// <summary>
        #/// Creates markups for the sales order.
        #/// </summary>
        #/// <param name="_deleteExistingMarkupTrans">
        #/// Determines whether to delete existing markups before creating the new.
        #/// </param>
        #/// <param name="_createTieredMarkups">
        #/// Determines whether to create tiered markups. If this parameter is true then _deleteExistingMarkupTrans will be reset to false.
        #/// In this case only existing tiered markups will be deleted before creating the new.
        #/// </param>
        #server public void createMarkupTrans(boolean _deleteExistingMarkupTrans = true,
        #                                     boolean _createTieredMarkups = false)
        #{
        #    Amount  totalLineAmount;
        #    boolean deleteMarkups = _deleteExistingMarkupTrans;
        #    NoYes   mcrReturnValue;
        #
        #    if (this.markupAllowed())
        #    {
        #        if (this.SalesType == SalesType::ReturnItem)
        #        {
        #            mcrReturnValue = true;
        #        }
        #        else
        #        {
        #            mcrReturnValue = false;
        #        }
        #
        #        ttsbegin;
        #
        #        if (_createTieredMarkups)
        #        {
        #            totalLineAmount = this.getTotalLineAmount();
        #            MarkupTrans::deleteTieredCharges(this.TableId, this.RecId);
        #            deleteMarkups = false;
        #        }
        #
        #        if (!_createTieredMarkups || totalLineAmount > 0)
        #        {
        #            Markup::insertMarkupTrans(HeadingLine::Heading,
        #                                      MarkupModuleType::Cust,
        #                                      this,
        #                                      this.CustAccount,
        #                                      this.MarkupGroup,
        #                                      this.CurrencyCode,
        #                                      this.LanguageId,
        #                                      '',
        #                                      this.MarkupGroup,
        #                                      false,
        #                                      deleteMarkups,
        #                                      this.DlvMode,
        #                                      DlvMode::find(this.DlvMode).MarkupGroup,
        #                                      totalLineAmount,
        #                                      mcrReturnValue
        #                                     );
        #
        #            if (this.DlvMode)
        #            {
        #                // Handle delivery charges
        #                Markup::insertMarkupTrans(HeadingLine::Heading,
        #                                        MarkupModuleType::Delivery,
        #                                        this,
        #                                        this.CustAccount,
        #                                        this.MarkupGroup,
        #                                        this.CurrencyCode,
        #                                        this.LanguageId,
        #                                        '',
        #                                        this.MarkupGroup,
        #                                        false,
        #                                        false,
        #                                        this.DlvMode,
        #                                        DlvMode::find(this.DlvMode).MarkupGroup,
        #                                        totalLineAmount
        #                                    );
        #            }
        #
        #            if (this.isInterCompanyOrder())
        #            {
        #                Markup::setMarkupKeepForIntercompany(this);
        #            }
        #        }
        #
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #createOneTimeAccount
        #client server void createOneTimeAccount()
        #{
        #    boolean resetTmpCustomerName;
        #
        #    if (!this.DeliveryName)
        #    {//DeliveryName is used as customer name and is mandatory.
        #     //The customer name is updated again in transferToOnetimeCustomer which is called as soon as the sales order is being created.
        #        this.DeliveryName = "@SYS23011";
        #        resetTmpCustomerName = true;
        #    }
        #
        #    this.CustAccount = CustTable::createOneTimeAccount(this);
        #    this.initFromCustTable();
        #
        #    if (resetTmpCustomerName)
        #    {
        #        this.DeliveryName = '';
        #        this.SalesName = '';
        #    }
        #
        #    if (!this.InvoiceAccount)
        #    {
        #        this.InvoiceAccount = this.CustAccount;
        #    }
        #}
      ENDSOURCE
      SOURCE #createPaymentSched
        #server void createPaymentSched()
        #{
        #    CustVendPaymSched   custVendPaymSched;
        #    SalesTotals         salesTotals = SalesTotals::construct(this, SalesUpdate::All);
        #
        #    salesTotals.prepareTotalAmountCalculation();
        #    salesTotals.calc();
        #
        #    custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust,this);
        #    custVendPaymSched.setSalesTotals(salesTotals);
        #    custVendPaymSched.createPaymSched(PaymSched::find(this.PaymentSched));
        #}
      ENDSOURCE
      SOURCE #createReplacementOrderAllowed
        #public boolean createReplacementOrderAllowed(SalesLine _salesLine = null)
        #{
        #    boolean ret = false;
        #    SalesLine localSalesLine = _salesLine as SalesLine;
        #
        #    if (this.isInterCompanyOrder()
        #    &&  this.InterCompanyDirectDeliveryOrig)
        #    {
        #        ret = false;
        #    }
        #    else if (this.ReturnStatus == ReturnStatusHeader::Created
        #         && !this.ReturnReplacementId
        #         && !this.interCompanyReplacementRegistered())
        #    {
        #        if (!localSalesLine.isStocked())
        #        {
        #            select firstonly localSalesLine
        #                where localSalesLine.SalesId == this.SalesId
        #                    && localSalesLine.StockedProduct;
        #
        #            ret = localSalesLine.RecId;
        #        }
        #        else
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #createReturnMarkupTrans
        #server void createReturnMarkupTrans()
        #{
        #    if (this.markupAllowed())
        #    {
        #       Markup::insertReturnMarkupTrans(HeadingLine::Heading,
        #                                       MarkupModuleType::Cust,
        #                                       this,
        #                                       this.CustAccount,
        #                                       this.MarkupGroup,
        #                                       this.LanguageId);
        #    }
        #}
      ENDSOURCE
      SOURCE #creditCardAuthorizationCode
        #/// <summary>
        #/// Returns the authorization code that came from the credit card processor.
        #/// </summary>
        #/// <returns>
        #/// The authorization code returned by the credit card processor.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display CreditCardAuthorization creditCardAuthorizationCode()
        #{
        #    return CreditCardAuthTrans::findValidPreApproval(this.SalesId).Authorization;
        #}
      ENDSOURCE
      SOURCE #creditCardBypassCreditLimit
        #boolean creditCardBypassCreditLimit()
        #{
        #    return (RetailParameters::isRetailEnabledAndInUse() && this.isRetailSale()) || this.payment().CreditCardCreditCheck == CreditCardCreditCheck::ByPass;
        #}
      ENDSOURCE
      SOURCE #creditCardDoPreAuthorize
        #/// <summary>
        #/// Authorizes a credit card for a sales order.
        #/// </summary>
        #/// <param name="_presentExtraMsg">
        #/// true to display extra messages; otherwise, false.
        #/// </param>
        #/// <returns>
        #/// true if the authorization process was sucessful or not needed; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Authorization is required for a sales order if:
        #/// 1) the credit cards feature is configured,
        #/// 2) the payment type of the sales order is card card and
        #/// 3) credit card processing is configured to require authorization.
        #/// </remarks>
        #public boolean creditCardDoPreAuthorize(boolean _presentExtraMsg = true)
        #{
        #    // Only pre-authorization credit card when needed
        #    if (this.isCreditCardPaymentType() && CustParameters::find().CreditCardPreAuthorization)
        #    {
        #        return CreditCardProcess::doPreAuth(this, _presentExtraMsg);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #creditCardPreauthorizationAmount
        #/// <summary>
        #/// Returns the preauthorization amount charged to the credit card.
        #/// </summary>
        #/// <returns>
        #/// The preauthorization amount for the credit card.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display CreditCardPreauthorizationAmount creditCardPreauthorizationAmount()
        #{
        #    return CreditCardAuthTrans::findValidPreApproval(this.SalesId).ApprovalAmountCur;
        #}
      ENDSOURCE
      SOURCE #customerEmail
        #display Email customerEmail()
        #{
        #    return this.custTable_CustAccount().email();
        #}
      ENDSOURCE
      SOURCE #customerName
        #display CustName customerName()
        #{
        #    return this.partyTable_CustAccount().Name;
        #}
      ENDSOURCE
      SOURCE #customerPhone
        #display Phone customerPhone()
        #{
        #    return this.custTable_CustAccount().phone();
        #}
      ENDSOURCE
      SOURCE #custTable_CustAccount
        #CustTable custTable_CustAccount(boolean _forUpdate = false)
        #{
        #    return CustTable::find(this.CustAccount, _forUpdate) as CustTable;
        #}
      ENDSOURCE
      SOURCE #custTable_InvoiceAccount
        #CustTable  custTable_InvoiceAccount(boolean  _forUpdate = false)
        #{
        #    return CustTable::find(this.InvoiceAccount, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #delete
        #public void  delete()
        #{
        #    // <GIN>
        #    #ISOCountryRegionCodes
        #    // </GIN>
        #    SalesTableType salesTableType;
        #    boolean unlinkLinesToo = true;
        #
        #    // Before deletion of release order, remove agreement links
        #    this.unlinkAgreement(unlinkLinesToo);
        #
        #    salesTableType = this.type();
        #    salesTableType.delete();
        #
        #    TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::SalesTable);
        #
        #    // Update the CRM transaction log
        #    smmTransLog::initTrans(this, smmLogAction::delete);
        #
        #    // <GIN>
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        #    }
        #    // </GIN>
        #}
      ENDSOURCE
      SOURCE #deliveryAddress
        #LogisticsPostalAddress deliveryAddress()
        #{
        #    return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
        #}
      ENDSOURCE
      SOURCE #deliveryAddressing
        #display LogisticsAddressing deliveryAddressing()
        #{
        #    return this.deliveryAddress().Address;
        #}
      ENDSOURCE
      SOURCE #deliveryCFOPTable_BR
        #/// <summary>
        #/// Retrieves the delivery cfop code of the sales order.
        #/// </summary>
        #/// <returns>
        #/// The delivery cfop code of the sales order.
        #/// </returns>
        #public RecId deliveryCFOPTable_BR()
        #{
        #    SalesLine salesLine;
        #    SalesLine_BR salesLine_BR;
        #
        #    select DeliveryCFOPTable_BR from salesLine_BR
        #        where salesLine_BR.DeliveryCFOPTable_BR != 0
        #        exists join salesLine
        #        where  salesLine.RecId == salesLine_BR.SalesLine
        #            && salesLine.SalesId == this.SalesId;
        #
        #    return salesLine_BR.DeliveryCFOPTable_BR;
        #}
      ENDSOURCE
      SOURCE #deliveryCNPJCPFNUM_BR
        #/// <summary>
        #/// Returns the delivery CNPJ or CPF for the current record.
        #/// </summary>
        #/// <returns>
        #/// Returns the CNPJ or CPF of the customer if the adddress is a primary address.
        #/// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
        #/// </returns>
        #public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
        #{
        #    DirPartyLocation dirPartyLocation;
        #
        #    if (!BrazilParameters::isEnabled())
        #        return '';
        #
        #    dirPartyLocation = DirPartyLocation::findByPartyLocation(this.custTable_CustAccount().Party, this.deliveryLocation());
        #
        #    if (!dirPartyLocation.RecId ||  dirPartyLocation.IsPrimary)
        #    {
        #        return this.custTable_CustAccount().cnpjcpfNum_BR;
        #    }
        #    else
        #    {
        #        return (select cnpjcpfNum_BR from logisticsLocationExt
        #            where logisticsLocationExt.Location == this.deliveryLocation()).cnpjcpfNum_BR;
        #    }
        #}
      ENDSOURCE
      SOURCE #deliveryDateDisplay
        #display DlvDate deliveryDateDisplay(DlvDate _blankDate = dateNull())
        #{
        #    if (this.ShippingDateConfirmed || this.ShippingDateRequested)
        #    {
        #        return this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
        #    }
        #
        #    if (prmisDefault(_blankDate))
        #    {
        #        return InventOrderEntryDeadlineTable::effectiveOrderDate(this.InventSiteId,CustTable::find(this.CustAccount).OrderEntryDeadlineGroupId);
        #    }
        #    return _blankDate;
        #}
      ENDSOURCE
      SOURCE #deliveryIENum_BR
        #/// <summary>
        #/// Returns the delivery IE for the current record.
        #/// </summary>
        #/// <returns>
        #/// Returns the IE of the customer if the adddress is a primary address.
        #/// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
        #/// </returns>
        #public display IENum_BR deliveryIENum_BR()
        #{
        #    DirPartyLocation dirPartyLocation;
        #
        #    if (!BrazilParameters::isEnabled())
        #        return '';
        #
        #    dirPartyLocation = DirPartyLocation::findByPartyLocation(this.custTable_CustAccount().Party, this.deliveryLocation());
        #
        #    if (!dirPartyLocation.RecId ||  dirPartyLocation.IsPrimary)
        #    {
        #        return this.custTable_CustAccount().ieNum_BR;
        #    }
        #    else
        #    {
        #        return (select ieNum_BR from logisticsLocationExt
        #            where logisticsLocationExt.Location == this.deliveryLocation()).ieNum_BR;
        #    }
        #}
      ENDSOURCE
      SOURCE #deliveryLocation
        #public LogisticsLocationRecId deliveryLocation()
        #{
        #    return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
        #}
      ENDSOURCE
      SOURCE #deliveryPhone
        #/// <summary>
        #/// Gets the telephone number that is associated with the delivery of a sales order.
        #/// </summary>
        #/// <returns>
        #/// The telephone number that is associated with the delivery of a sales order; otherwise, an empty
        #/// string.
        #/// </returns>
        #public Phone deliveryPhone()
        #{
        #    Phone                       phone;
        #    LogisticsLocationRecId      locationRecId;
        #    LogisticsLocation           locationChild;
        #    LogisticsElectronicAddress  logisticsElectronicAddress;
        #
        #    // First see if a contact person phone number is available
        #    if (this.ContactPersonId)
        #    {
        #        phone = this.contactPerson().phone();
        #        if (phone)
        #        {
        #            return phone;
        #        }
        #    }
        #
        #    // See if a phone number associated with the delivery location is available
        #    locationRecId = this.deliveryLocation();
        #    if (locationRecId)
        #    { // Find a phone number associated with the postal delivery location
        #        select firstonly TableId from locationChild
        #            where locationChild.ParentLocation  == locationRecId
        #                && locationChild.IsPostalAddress == NoYes::No
        #            join Locator from logisticsElectronicAddress
        #            where logisticsElectronicAddress.Location   == locationChild.RecId
        #                &&   logisticsElectronicAddress.Type       == LogisticsElectronicAddressMethodType::Phone
        #                &&   logisticsElectronicAddress.Locator    != '';
        #        phone = logisticsElectronicAddress.Locator;
        #        if (phone)
        #        {
        #            return phone;
        #        }
        #    }
        #
        #    return this.customerPhone();
        #}
      ENDSOURCE
      SOURCE #deliveryTransDateTime
        #TransDateTime deliveryTransDateTime()
        #{
        #    return DateTimeUtil::newDateTime(this.DeliveryDate,0,DateTimeUtil::getCompanyTimeZone());
        #}
      ENDSOURCE
      SOURCE #dispLastConsDate_JP
        #/// <summary>
        #/// Displays the latest consolidation date for this sales order.
        #/// </summary>
        #/// <returns>
        #/// Consolidation date.
        #/// </returns>
        #//BP Deviation documented
        #public display CustVendConsDate_JP dispLastConsDate_JP()
        #{
        #    return this.SalesPurchTable::getLastConsDate_JP();
        #}
        #
      ENDSOURCE
      SOURCE #dispLastConsId_JP
        #/// <summary>
        #/// Gets latest consolidation invoice Id for this purchase order.
        #/// </summary>
        #/// <returns>
        #/// Consolidation invoice Id.
        #/// </returns>
        #//BP Deviation documented
        #public display CustConsId_JP dispLastConsId_JP()
        #{
        #    return this.SalesPurchTable::getLastConsId_JP();
        #}
        #
      ENDSOURCE
      SOURCE #displayBankDocumentInfo
        #/// <summary>
        #/// Sets the title on top of the preview pane on the <c>BankLCExportListPage </c>form.
        #/// </summary>
        #/// <returns>
        #/// The title field of the preview pane.
        #/// </returns>
        #public display Caption displayBankDocumentInfo()
        #{
        #    return strFmt("@SYS327590", this.SalesId, this.BankDocumentType);
        #}
      ENDSOURCE
      SOURCE #displayProformaAmountForBankLC
        #/// <summary>
        #/// The display method to display the total proforma invoice amount of the sales order.
        #/// </summary>
        #/// <returns>
        #/// The total proforma invoice amount.
        #/// </returns>
        #display AmountCur displayProformaAmountForBankLC()
        #{
        #    return BankLCExport::amountProformaTotalInclTax(this.SalesId);
        #}
      ENDSOURCE
      SOURCE #dlvModeMandatory
        #boolean dlvModeMandatory()
        #{
        #    return this.type().dlvModeMandatory();
        #}
      ENDSOURCE
      SOURCE #editContactPersonName
        #client server edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
        #{
        #    ContactPersonName   name = _name;
        #    ContactPerson       contactPerson;
        #    DirPartyTable       partyTable;
        #    ContactPersonId     contactPersonId;
        #
        #    if (_set)
        #    {
        #        if (name)
        #        {
        #            contactPersonId = this.ContactPersonId;
        #            contactPerson = ContactPerson::find(_name);
        #            this.ContactPersonId = contactPerson.ContactPersonId;
        #            if (this.ContactPersonId)
        #            {
        #                name = contactPerson.personName();
        #            }
        #            else
        #            {
        #                select contactPerson
        #                        where contactPerson.CustAccount ==   this.CustAccount
        #                    join Name from partyTable
        #                        where partyTable.RecId == contactPerson.Party &&
        #                              partyTable.Name        like name;
        #                if (contactPerson)
        #                {
        #                    this.ContactPersonId=contactPerson.ContactPersonId;
        #                    name=partyTable.Name;
        #                }
        #            }
        #            if (contactPersonId != this.ContactPersonId)
        #            {
        #                if (this.checkContactPerson())
        #                {
        #                    this.initFromContactInfo();
        #                    if (this.dataSource())
        #                    {
        #                        this.dataSource().refresh();
        #                    }
        #                }
        #                else
        #                {
        #                    this.ContactPersonId = contactPersonId;
        #                }
        #
        #            }
        #        }
        #        else
        #        {
        #            this.ContactPersonId='';
        #        }
        #    }
        #    else
        #    {
        #        name = this.contactPersonName();
        #    }
        #
        #    return name;
        #}
      ENDSOURCE
      SOURCE #editCreditCard
        #// NOTE: The value in parameter _creditCardNumber is not a credit card number
        #// (EDT CreditCardNumber, type string) but rather the value of CreditCardCust.RecId converted
        #// to a string by the lookup form (CreditCardLookup) for the form field.
        #// There are two reasons for this:
        #// 1) Becuase this is an edit method, it must have a certain signature, RecId is not allowed.
        #// 2) We do not want to pass the real credit card number around on the client.
        #// The lookup for the credit card number field on a form returns the RecId and this
        #// method uses that value to lookup the CreditCardCust record.  Using that (non-HBI)
        #// record we then get the obscured credit card number (leading asterisks and last 4
        #// digits) and display that string.
        #[SysClientCacheDataMethodAttribute(true)]
        #client server edit CreditCardNumber editCreditCard(boolean _set, CreditCardNumber _creditCardNumber)
        #{
        #    RecId recId = str2int64(strRTrim(strLTrim(_creditCardNumber)));
        #    CreditCardNumber creditCardNumber;
        #    CreditCardCust creditCardCust;
        #
        #    boolean okToChange(RefRecId _creditCard)
        #    {
        #        if (this.CreditCardCustRefId == _creditCard) // same CC?
        #        {
        #            return true; // Yes, same one, no change
        #        }
        #        return this.cancelPreAuthorization(); // Yes, see if we need to cancel the PreAuth
        #    }
        #
        #    if (_set)
        #    {
        #        if (okToChange(recId))
        #        {
        #            if (recId)
        #            {
        #                creditCardCust = CreditCardCust::find(recId);
        #                if (creditCardCust.RecId && this.InvoiceAccount == creditCardCust.CustAccount)
        #                {
        #                    this.CreditCardCustRefId = creditCardCust.RecId;
        #                }
        #                else
        #                {
        #                    this.CreditCardCustRefId = 0;
        #                }
        #            }
        #            else
        #            {
        #                this.CreditCardCustRefId = 0;
        #            }
        #
        #            this.validateField(fieldNum(SalesTable, CreditCardCustRefId));
        #
        #            // ensure the credit card number is blanked out if its reference was cleared during
        #            // field validation
        #            if(this.CreditCardCustRefId == 0)
        #            {
        #                creditCardNumber = '';
        #            }
        #            else
        #            {
        #                creditCardNumber = CreditCard::creditCardNumber(this.CreditCardCustRefId);
        #            }
        #
        #            return creditCardNumber;
        #        }
        #    }
        #
        #    // Double check to make sure the record hasn't been deleted
        #    if (this.CreditCardCustRefId && CreditCardCust::exist(this.CreditCardCustRefId))
        #    {
        #        creditCardNumber = CreditCard::creditCardNumber(this.CreditCardCustRefId);
        #    }
        #    else
        #    {
        #        this.CreditCardCustRefId = 0;
        #    }
        #
        #    return creditCardNumber;
        #}
      ENDSOURCE
      SOURCE #editExportSales_PL
        #/// <summary>
        #/// Edits the export sales value for the sales order.
        #/// </summary>
        #/// <param name="_set">
        #/// A Boolean value that indicates whether the value has been modified.
        #/// </param>
        #/// <param name="_value">
        #/// The new export sales value.
        #/// </param>
        #/// <returns>
        #/// The export sales value.
        #/// </returns>
        #public edit PlExportSales editExportSales_PL(boolean _set, PlExportSales _value)
        #{
        #    #ISOCountryRegionCodes
        #    boolean isExportSalesOrder;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
        #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        #    {
        #        if (_set)
        #        {
        #            if (!ExportSalesOrder::existSalesOrder(this.SalesId))
        #            {
        #                if (_value)
        #                {
        #                    ExportSalesOrder::createFromSalesOrder(this.SalesId);
        #                }
        #            }
        #            else
        #            {
        #                if (!_value)
        #                {
        #                    ExportSalesOrder::deleteBySalesOrder(this.SalesId);
        #                }
        #            }
        #
        #            isExportSalesOrder = _value;
        #        }
        #        else
        #        {
        #            isExportSalesOrder = ExportSalesOrder::existSalesOrder(this.SalesId);
        #        }
        #    }
        #
        #    return isExportSalesOrder;
        #}
      ENDSOURCE
      SOURCE #editFixedExchRate
        #public edit SalesFixedExchRate editFixedExchRate(boolean set, SalesFixedExchRate _exchRate)
        #{
        #    ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
        #
        #    if (set)
        #    {
        #        this.FixedExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
        #    }
        #    else
        #    {
        #        _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.FixedExchRate);
        #    }
        #
        #    return _exchRate;
        #}
      ENDSOURCE
      SOURCE #editReasonCode
        #/// <summary>
        #/// Gets and sets the reason code.
        #/// </summary>
        #/// <param name="_set">
        #/// A Boolean value that indicates whether the reason code is set.
        #/// </param>
        #/// <param name="_reasonCode">
        #/// The new reason code when the <paramref name="set" /> value is true.
        #/// </param>
        #/// <returns>
        #/// The reason code of the record in the <c>ReasonTableRef</c> table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
        #{
        #    ReasonCode      reasonCode = strLRTrim(_reasonCode);
        #    RefRecId        originalReasonRefRecId;
        #    FormDataSource  formSalesTable;
        #
        #    if (_set)
        #    {
        #        if (this.CreditNoteReasonCode == 0)
        #        {
        #            this.CreditNoteReasonCode = ReasonTableRef::createFromCode(reasonCode);
        #        }
        #        else
        #        {
        #            if (reasonCode)
        #            {
        #                //The reasonCode value is not blank.
        #                // Save the current ReasonRefRecID for comparision.
        #                originalReasonRefRecId = this.CreditNoteReasonCode;
        #                this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);
        #
        #                if (this.CreditNoteReasonCode == originalReasonRefRecId)
        #                {
        #                    // The reason code has changed but the referenced record ID has not.
        #                    // Get the current FormDataSource and set forceWrite() to true so that
        #                    // data validation (validateWrite()) is performed on the updated reason code.
        #                    formSalesTable = this.dataSource();
        #                    if (formSalesTable)
        #                    {
        #                        formSalesTable.forceWrite(true);
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                // The reasonCode is blank.
        #                this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);
        #            }
        #        }
        #
        #        // Update the reason comment with the default comment value for the updated reason code.
        #        // A blank reasonCode will result in a blank comment because a blank reasonCode
        #        // will return an empty reasonTable buffer.
        #
        #        this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        #    }
        #    else
        #    {
        #        reasonCode = ReasonTableRef::find(this.CreditNoteReasonCode).Reason;
        #    }
        #
        #    return reasonCode;
        #}
      ENDSOURCE
      SOURCE #editReasonCodeTH
        #/// <summary>
        #///     Gets and sets the reason code.
        #/// </summary>
        #/// <param name="set">
        #///     true if the reason code is set; otherwise, set to false.
        #/// </param>
        #/// <param name="_reasonCode">
        #///     The new reason code when <paramref name="set" /> is true.
        #/// </param>
        #/// <returns>
        #///     The reason code of the record in the <c>ReasonTableRef</c> table.
        #/// </returns>
        #public edit ReasonCode editReasonCodeTH(boolean set, ReasonCode _reasonCode)
        #{
        #    return this.salesTableExtensionTH().editReasonCode(set, _reasonCode);
        #}
      ENDSOURCE
      SOURCE #editReasonComment
        #/// <summary>
        #/// Gets and sets the reason comment.
        #/// </summary>
        #/// <param name="set">
        #/// A Boolean value that indicates whether the reason code is set.
        #/// </param>
        #/// <param name="_reasonComment">
        #/// The new reason comment when the <paramref name="set" /> value is true.
        #/// </param>
        #/// <returns>
        #/// The reason comment of the record in the <c>ReasonTableRef</c> table.
        #/// </returns>
        #//BP Deviation Documented
        #public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
        #{
        #    ReasonComment   reasonComment = _reasonComment;
        #
        #    if (set)
        #    {
        #        // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
        #        // otherwise, update the existing record.
        #        if (this.CreditNoteReasonCode == 0)
        #        {
        #            this.CreditNoteReasonCode = ReasonTableRef::createFromComment(reasonComment);
        #        }
        #        else
        #        {
        #            this.CreditNoteReasonCode = ReasonTableRef::updateComment(reasonComment, this.CreditNoteReasonCode);
        #        }
        #    }
        #    else
        #    {
        #        reasonComment = ReasonTableRef::find(this.CreditNoteReasonCode).ReasonComment;
        #    }
        #
        #    return reasonComment;
        #}
      ENDSOURCE
      SOURCE #euroTriangulation
        #EUROTriangulation euroTriangulation(date _date = systemDateGet())
        #{
        #    if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        #    {
        #        if (this.settleExchRate())
        #        {
        #            return NoYes::No;
        #        }
        #    }
        #
        #    if (this.FixedExchRate)
        #    {
        #        return NoYes::No;
        #    }
        #
        #    return Currency::triangulation(this.CurrencyCode, _date);
        #}
      ENDSOURCE
      SOURCE #evaluateAddTmsChargeToRetailOrder
        #/// <summary>
        #/// Evaluates whether transportation charges can be added to the retail sales order
        #/// based on the <c>TMSDlvTerm</c> setup.
        #/// </summary>
        #/// <returns>
        #/// <c>NoYes::Yes</c> if the transportation charge can be added; <c>NoYes::No</c> otherwise.
        #/// </returns>
        #public NoYes evaluateAddTmsChargeToRetailOrder()
        #{
        #    NoYes ret;
        #
        #    if (this.isRetailSale())
        #    {
        #        ret = TMSDlvTerm::find(this.DlvTerm).AddChargeToRetailOrderPolicy;
        #    }
        #    else
        #    {
        #        ret = NoYes::Yes;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #evaluateAddTmsChargeToSalesOrder
        #/// <summary>
        #/// Evaluates whether transportation charges can be added to the sales order based on
        #/// the <c>TMSDlvTerm</c> setup.
        #/// </summary>
        #/// <returns>
        #/// <c>NoYes::Yes</c> if the transportation charge can be added; <c>NoYes::No</c> otherwise.
        #/// </returns>
        #public NoYes evaluateAddTmsChargeToSalesOrder()
        #{
        #    return TMSDlvTerm::find(this.DlvTerm).TransferChargesToOrder
        #        && this.evaluateAddTmsChargeToRetailOrder();
        #}
      ENDSOURCE
      SOURCE #exchRate
        #CustExchRate exchRate(date _date = systemDateGet(), boolean throwOnError = false)
        #{
        #    CustExchRate    exchRate = 0;
        #
        #    if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        #    {
        #        exchRate = this.settleExchRate(throwOnError);
        #    }
        #
        #    if (!exchRate)
        #    {
        #        if (this.FixedExchRate)
        #        {
        #            exchRate = this.FixedExchRate;
        #        }
        #        else
        #        {
        #            exchRate = Currency::exchRate(this.CurrencyCode, _date);
        #        }
        #    }
        #
        #    return exchRate;
        #}
      ENDSOURCE
      SOURCE #exchRateSecondary
        #ExchrateSecondary exchRateSecondary(date _date = systemDateGet())
        #{
        #    ExchRate exchRateSecondary;
        #
        #    if (this.SettleVoucher == SettlementType::SelectedTransact &&
        #        SalesParameters::find().UseSettleExchRate &&
        #        (SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId) > 0))
        #    {
        #        exchRateSecondary = 0;
        #    }
        #    else if (this.FixedExchRate)
        #    {
        #        exchRateSecondary = 0;
        #    }
        #    else
        #    {
        #        exchRateSecondary = Currency::exchRateSecond(this.CurrencyCode, _date);
        #    }
        #
        #    return exchRateSecondary;
        #}
      ENDSOURCE
      SOURCE #existDirectDelivery
        #boolean existDirectDelivery()
        #{
        #    SalesLine   salesLine;
        #
        #    select firstonly RecId from salesLine where
        #        salesLine.SalesId           == this.SalesId &&
        #        salesLine.InventRefId       != ''           &&
        #        salesLine.DeliveryType      == TradeLineDlvType::DropShip;
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existingJournals
        #/// <summary>
        #/// Indicates whether the journals exist for a <c>SalesTable</c> record.
        #/// </summary>
        #/// <param name="_journalTypes">
        #/// A packed set of journal types to check; optional.
        #/// </param>
        #/// <param name="_continueOnFound">
        #/// A Boolean value that indicates whether the check must continue after the first journal is found;
        #/// optional.
        #/// </param>
        #/// <returns>
        #/// A container that contains a set of Boolean values that indicate if a journal exists.
        #/// </returns>
        #server container existingJournals(
        #    container   _journalTypes    = conNull(),
        #    boolean     _continueOnFound        = true)
        #{
        #    container   existingJournalContainer;
        #    Set         journalsToCheckSet;
        #    boolean     checkQuotation;
        #    boolean     checkConfirmation;
        #    boolean     checkPickingList;
        #    boolean     checkPackingSlip;
        #    boolean     checkInvoice;
        #    boolean     found;
        #    boolean     checkInvoice4Payment;
        #    boolean     checkFacture;
        #
        #    #ISOCountryRegionCodes
        #
        #    boolean     isCountryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #
        #    void setExistJournal(boolean _exists, int _pos)
        #    {
        #        existingJournalContainer = conPoke(existingJournalContainer, _pos, _exists);
        #        if (_exists)
        #        {
        #            found = true;
        #        }
        #    }
        #
        #    if (_journalTypes)
        #    {
        #        journalsToCheckSet = Set::create(_journalTypes);
        #    }
        #    checkQuotation       = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Quotation)   : true;
        #    checkConfirmation    = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Confirmation): true;
        #    checkPickingList     = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::PickingList) : true;
        #    checkPackingSlip     = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::PackingSlip) : true;
        #    checkInvoice         = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Invoice)     : true;
        #    if (isCountryRegion_RU)
        #    {
        #        checkInvoice4Payment = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Invoice4Paym_RU) : true;
        #        checkFacture         = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Facture_RU)      : true;
        #
        #        existingJournalContainer = [false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false];
        #    }
        #    else
        #    {
        #        existingJournalContainer = [false,
        #                                    false,
        #                                    false,
        #                                    false,
        #                                    false];
        #    }
        #
        #    if (checkQuotation)
        #    {
        #        setExistJournal(this.lastQuotation() != '', SalesTableType::posQuotation());
        #    }
        #    if (checkConfirmation && (_continueOnFound || !found))
        #    {
        #        setExistJournal(this.lastConfirm() != '', SalesTableType::posConfirmation());
        #    }
        #    if (checkPickingList && (_continueOnFound || !found))
        #    {
        #        setExistJournal(this.lastPickingList() != '', SalesTableType::posPickingList());
        #    }
        #    if (checkPackingSlip && (_continueOnFound || !found))
        #    {
        #        setExistJournal(this.lastPackingSlip() != '', SalesTableType::posPackingSlip());
        #    }
        #    if (checkInvoice && (_continueOnFound || !found))
        #    {
        #        setExistJournal(this.lastInvoice() != '', SalesTableType::posInvoice());
        #    }
        #    if (isCountryRegion_RU)
        #    {
        #        if (checkInvoice4Payment && (_continueOnFound || !found))
        #        {
        #            setExistJournal(this.lastInvoice4Paym_RU() != '', SalesTableType::posInvoice4Paym_RU());
        #        }
        #        if (checkFacture && (_continueOnFound || !found))
        #        {
        #            setExistJournal(this.lastFacture_RU() != '', SalesTableType::posFacture_RU());
        #        }
        #    }
        #
        #    return existingJournalContainer;
        #}
      ENDSOURCE
      SOURCE #existInterCompanyPurch
        #boolean existInterCompanyPurch()
        #{
        #    InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        #
        #    select firstonly RecId from interCompanyPurchSalesReference
        #           index hint SalesPurchIdx
        #           where interCompanyPurchSalesReference.SalesId == this.SalesId;
        #
        #    return interCompanyPurchSalesReference.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #existInterCompanySales
        #boolean existInterCompanySales(boolean _checkOnlyOne = false)
        #{
        #    InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        #    PurchTable                      purchTable;
        #
        #    select forceplaceholders firstonly RecId from interCompanyPurchSalesReference
        #           index hint SalesPurchIdx
        #           where interCompanyPurchSalesReference.SalesId == this.SalesId
        #    join RecId from purchTable
        #           index hint PurchIdx
        #           where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
        #           &&    purchTable.InterCompanyOrder
        #           &&   (!_checkOnlyOne
        #             || ( _checkOnlyOne && purchTable.InterCompanyOriginalSalesId == this.SalesId));
        #
        #    return purchTable.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #existMarkedSettlement
        #boolean existMarkedSettlement(FieldId _fieldId)
        #{
        #    if (this.SettleVoucher && SpecTrans::getSpecTransCount(this.DataAreaId, this.TableId, this.RecId))
        #    {
        #        switch(_fieldId)
        #        {
        #            case fieldNum(SalesTable, CustAccount):     error("@SYS99928");
        #                                                        break;
        #
        #            case fieldNum(SalesTable, InvoiceAccount):  error("@SYS100001");
        #                                                        break;
        #
        #            default:                                    return false;
        #        }
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #existNonCanceledLines
        #public boolean existNonCanceledLines()
        #{
        #    SalesLine   salesLine;
        #
        #    select firstonly RecId from salesLine where salesLine.SalesId == this.SalesId && salesLine.ReturnStatus != ReturnStatusLine::Canceled;
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existRegisteredReceivedInvoicedLines
        #public boolean existRegisteredReceivedInvoicedLines()
        #{
        #    boolean                           ret;
        #    SalesLine                         salesLine;
        #    InterCompanyPurchSalesReference   interCompanyPurchSalesReference;
        #    PurchTable                        purchTable;
        #    SalesTable                        salesTable;
        #    ReturnDispositionCode             returnDispositionCode;
        #
        #    select firstonly RecId from salesLine
        #           where salesLine.SalesId      == this.SalesId
        #           &&   (salesLine.ReturnStatus == ReturnStatusLine::Registered
        #              || salesLine.ReturnStatus == ReturnStatusLine::Quarantine
        #              || salesLine.ReturnStatus == ReturnStatusLine::Received
        #              || salesLine.ReturnStatus == ReturnStatusLine::Invoiced)
        #        notexists join returnDispositionCode
        #            where returnDispositionCode.DispositionCodeId == salesLine.ReturnDispositionCodeId
        #            &&    returnDispositionCode.DispositionAction == DispositionAction::CreditOnly
        #            &&    salesLine.ReturnStatus                  == ReturnStatusLine::Received;
        #
        #    ret = salesLine.RecId != 0;
        #
        #    if (!ret)
        #    {
        #        while select RecId from interCompanyPurchSalesReference
        #              where interCompanyPurchSalesReference.SalesId == this.SalesId
        #        join InterCompanyCompanyId, InterCompanySalesId from purchTable
        #             where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
        #             &&    purchTable.InterCompanyOrder
        #        {
        #            changecompany(purchTable.InterCompanyCompanyId)
        #            {
        #                salesTable = null;
        #                salesTable = SalesTable::find(purchTable.InterCompanySalesId);
        #                ret = salesTable.existRegisteredReceivedInvoicedLines();
        #            }
        #            if (ret)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existSalesLine
        #boolean existSalesLine()
        #{
        #    Query       query;
        #    QueryRun    queryRun;
        #    SalesLine   salesLine;
        #
        #    query = this.querySalesLine();
        #    query.dataSourceTable(tableNum(SalesLine)).firstOnly(true);
        #
        #    queryRun = new QueryRun(query);
        #    while (queryRun.next())
        #    {
        #        if (queryRun.changed(tableNum(SalesLine)))
        #        {
        #            salesLine = queryRun.get(tableNum(SalesLine)) as SalesLine;
        #            if (salesLine.RecId)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existShippedNotInvoiced
        #public boolean existShippedNotInvoiced()
        #{
        #    SalesLine                   salesLine;
        #    InventTrans                 inventTrans;
        #    InventTransOriginSalesLine  inventTransOriginSalesLine;
        #
        #    select firstonly RecId from inventTrans
        #        where inventTrans.StatusIssue   == StatusIssue::Deducted
        #           || inventTrans.StatusReceipt == StatusReceipt::Received
        #        exists join inventTransOriginSalesLine
        #            where inventTransOriginSalesLine.InventTransOrigin == inventTrans.InventTransOrigin
        #            exists join salesLine
        #                where salesLine.DataAreaId    == inventTransOriginSalesLine.SalesLineDataAreaId
        #                   && salesLine.InventTransId == inventTransOriginSalesLine.SalesLineInventTransId
        #                   && salesLine.SalesId       == this.SalesId;
        #
        #    return (inventTrans.RecId!= 0);
        #}
      ENDSOURCE
      SOURCE #factureJourSortedList_RU
        #public RecordSortedList factureJourSortedList_RU()
        #{
        #    return this.SalesPurchTable::factureJourSortedList_RU();
        #}
        #
      ENDSOURCE
      SOURCE #fieldChanged
        #boolean  fieldChanged(FieldId  fieldId)
        #{
        #    boolean  ok = false;
        #
        #    if (!this.RecId)
        #    {
        #        ok = true;
        #    }
        #
        #    if (this.orig().(fieldId) != this.(fieldId))
        #    {
        #        ok = true;
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #fixedEuroTriangulation
        #UnknownNoYes fixedEuroTriangulation()
        #{
        #    if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        #    {
        #        if (this.settleExchRate())
        #        {
        #            return UnknownNoYes::No;
        #        }
        #    }
        #
        #    if (this.FixedExchRate)
        #    {
        #        return UnknownNoYes::No;
        #    }
        #
        #    return UnknownNoYes::Unknown;
        #}
      ENDSOURCE
      SOURCE #fixedExchRate
        #CustExchRate fixedExchRate(boolean throwOnError = false)
        #{
        #    ExchRate exchRate = 0;
        #
        #    if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        #    {
        #        exchRate = this.settleExchRate(throwOnError);
        #    }
        #
        #    if (!exchRate)
        #    {
        #        exchRate = this.FixedExchRate;
        #    }
        #
        #    return exchRate;
        #}
      ENDSOURCE
      SOURCE #fixedExchRateSecondary
        #ExchrateSecondary fixedExchRateSecondary()
        #{
        #/*
        #//  Should always return zero
        #    return (this.FixedExchRate ? 0 : 0);
        #*/
        #    return (0);
        #}
      ENDSOURCE
      SOURCE #getCountryRegionIdByDocumentStatus
        #public LogisticsAddressCountryRegionId getCountryRegionIdByDocumentStatus()
        #{
        #    switch(this.DocumentStatus)
        #    {
        #        case DocumentStatus::PackingSlip:
        #            return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).CountryRegionId;
        #        case DocumentStatus::Invoice:
        #            return this.custTable_InvoiceAccount().postalAddress().CountryRegionId;
        #        default:
        #            return this.custTable_CustAccount().postalAddress().CountryRegionId;
        #    }
        #}
      ENDSOURCE
      SOURCE #getDeliveryEntityRecord
        #/// <summary>
        #///     Gets the delivery entity record based on the postal address.
        #/// </summary>
        #/// <returns>
        #///    A <c>CustTable</c> record.
        #/// </returns>
        #public Common getDeliveryEntityRecord()
        #{
        #    return this.TradePostalAddress::getDeliveryEntityRecord();
        #}
      ENDSOURCE
      SOURCE #getFinalDiscPriceDate
        #/// <summary>
        #/// Calculates date for which total discount should be calculated according to the price date type
        #/// setting.
        #/// </summary>
        #/// <returns>
        #/// The date for which total discount has to be calculated.
        #/// </returns>
        #/// <remarks>
        #/// The price date type can be set up to use today, the requested shipping date, or the requested
        #/// receipt date as price date.
        #/// </remarks>
        #PriceDate getFinalDiscPriceDate()
        #{
        #    SalesParameters         salesParameters;
        #    PriceDate                  priceDate;
        #    #ISOCountryRegionCodes
        #    PriceDate                  priceDate_RU;
        #    PriceAgreementDate_RU   priceAgreementDate;
        #    SalesLine               salesLine;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        priceAgreementDate = this.SalesPurchTable::getPriceAgreementDate();
        #        if (! priceAgreementDate)
        #        {
        #            select minof(PriceAgreementDate_RU) from salesLine
        #                where salesLine.SalesId == this.SalesId;
        #
        #            priceAgreementDate = salesLine.PriceAgreementDate_RU;
        #        }
        #
        #        if (priceAgreementDate)
        #        {
        #            return priceAgreementDate;
        #        }
        #    }
        #
        #    salesParameters = SalesParameters::find();
        #
        #    switch (salesParameters.PriceDateType)
        #    {
        #        case SalesPriceDateType::ShippingDateRequested:
        #            priceDate = (select minof(ShippingDateRequested) from salesLine
        #                            where salesLine.SalesId == this.SalesId).ShippingDateRequested;
        #            break;
        #
        #        case SalesPriceDateType::ReceiptDateRequested:
        #            priceDate = (select minof(ReceiptDateRequested) from salesLine
        #                            where salesLine.SalesId == this.SalesId).ReceiptDateRequested;
        #            break;
        #
        #        default:
        #            priceDate = systemDateGet();
        #            break;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        priceDate_RU = this.SalesPurchTable::priceDate_RU();
        #
        #        if (priceDate_RU != dateNull())
        #        {
        #            return priceDate_RU;
        #        }
        #    }
        #
        #    return priceDate;
        #}
      ENDSOURCE
      SOURCE #getTotalLineAmount
        #/// <summary>
        #/// Aggregates line amounts for all lines of the sales order.
        #/// </summary>
        #/// <returns>
        #/// Total amount of all lines.
        #/// </returns>
        #public Amount getTotalLineAmount()
        #{
        #    SalesLine salesLine;
        #
        #    select sum(LineAmount) from salesLine
        #        where salesLine.SalesId == this.SalesId;
        #
        #    return salesLine.LineAmount;
        #}
      ENDSOURCE
      SOURCE #getTransationEntity_RU
        #/// <summary>
        #/// Get entity of transaction.
        #/// </summary>
        #/// <param name="_roleType">
        #/// The value of <c>LogisticsLocationRoleType</c> base enum.
        #/// </param>
        #/// <returns>
        #/// Entity of transaction
        #/// </returns>
        #public Common getTransationEntity_RU(LogisticsLocationRoleType _roleType)
        #{
        #
        #    SalesTotals salesTotals;
        #    boolean     isCreditNote    = false;
        #
        #
        #    Common getLadingEntity()
        #    {
        #        if(this.InventLocationId)
        #        {
        #            return InventLocation::find(this.InventLocationId);
        #        }
        #        if(this.salesTable_RU().ConsignorAccount_RU)
        #        {
        #            return VendTable::find(this.salesTable_RU().ConsignorAccount_RU);
        #        }
        #        return CompanyInfo::find();
        #    }
        #
        #    Common getUnladingEntity()
        #    {
        #        return CustTable::find(this.salesTable_RU().ConsigneeAccount_RU ?
        #                               this.salesTable_RU().ConsigneeAccount_RU :
        #                               this.CustAccount);
        #    }
        #
        #    //check if credit note
        #
        #    salesTotals = SalesTotals::construct(this);
        #    salesTotals.calc();
        #    isCreditNote = salesTotals.totalAmount() < 0;
        #
        #    switch(_roleType)
        #    {
        #        case LogisticsLocationRoleType::Lading_W :
        #            return isCreditNote ? getUnladingEntity() : getLadingEntity();
        #
        #        case LogisticsLocationRoleType::Unlading_W :
        #            return isCreditNote ? getLadingEntity() : getUnladingEntity();
        #    }
        #
        #    return CompanyInfo::find();
        #}
      ENDSOURCE
      SOURCE #hasCODPaymentMethod
        #/// <summary>
        #/// Indicates whether the payment method of the sales order is COD.
        #/// </summary>
        #/// <returns>
        #/// true if the payment method is COD; otherwise, false.
        #/// </returns>
        #public boolean hasCODPaymentMethod()
        #{
        #    return this.payment().PaymMethod == NetCurrent::COD;
        #}
      ENDSOURCE
      SOURCE #hasIssueFiscalDocument_BR
        #/// <summary>
        #/// Determines whether issues has fiscal documents.
        #/// </summary>
        #/// <returns>
        #/// true if issues has fiscal documents; otherwise, false.
        #/// </returns>
        #public boolean hasIssueFiscalDocument_BR()
        #{
        #    if (RetailParameters::isRetailEnabledAndInUse()
        #        && this.isRetailStatement_BR())
        #    {
        #        return false;
        #    }
        #    else if (this.SalesType == SalesType::ReturnItem)
        #    {
        #        return this.custTable_CustAccount().GenerateIncomingFiscalDocument_BR;
        #    }
        #    else
        #    {
        #        return this.SalesType != SalesType::ReturnItem;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #hasLinesWithoutRefrence_MY
        #/// <summary>
        #/// Determines whether any lines don't have original invoice.
        #/// </summary>
        #/// <returns>
        #/// true if any lines don't have original invoice; otherwise, false.
        #/// </returns>
        #public boolean hasLinesWithoutRefrence_MY()
        #{
        #    SalesLine           salesLine;
        #    SalesLine_W         salesLine_W;
        #
        #    select firstOnly salesLine
        #        where salesLine.SalesId             == this.SalesId
        #        notexists join salesLine_W
        #        where salesLine_W.SalesLine         == salesLine.RecId
        #           && salesLine_W.RefInvoiceId_MY   != "";
        #    if (salesLine)
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #hasLinesWithRefrence_MY
        #/// <summary>
        #/// Determines whether any lines have original invoice.
        #/// </summary>
        #/// <returns>
        #/// true if any lines have original invoice; otherwise, false.
        #/// </returns>
        #public boolean hasLinesWithRefrence_MY()
        #{
        #    SalesLine           salesLine;
        #    SalesLine_W         salesLine_W;
        #
        #    select firstOnly salesLine
        #        where salesLine.SalesId             == this.SalesId
        #        exists join salesLine_W
        #        where salesLine_W.SalesLine         == salesLine.RecId
        #           && salesLine_W.RefInvoiceId_MY   != "";
        #    if (salesLine)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #hasPriceDiscChangePolicy
        #/// <summary>
        #/// Indicates whether price discount policies exist for a specified record.
        #/// </summary>
        #/// <returns>
        #/// true if price discount policies exist; otherwise, false.
        #/// </returns>
        #public boolean hasPriceDiscChangePolicy()
        #{
        #    return this.type().hasPriceDiscChangePolicy();
        #}
      ENDSOURCE
      SOURCE #icCheckUpdateHeaderDiscounts
        #/// <summary>
        #///     Determines if prices and disounts can be updated in the context of intercompany.
        #/// </summary>
        #/// <returns>
        #///     true if the context is not intercompany or if the context is intercompany and prices and discounts can be updated; otherwise, false.
        #/// </returns>
        #public boolean icCheckUpdateHeaderDiscounts()
        #{
        #    return !this.isInterCompanyOrder()
        #        || (this.SalesType != SalesType::ReturnItem
        #            && !this.isInterCompanyPOInvoiceMatched()
        #            && this.interCompanyEndpointActionPolicy().PriceDiscountSearch);
        #}
      ENDSOURCE
      SOURCE #initBankAccounts_LV
        #public void initBankAccounts_LV()
        #{
        ##isoCountryRegionCodes
        #
        #    CurrencyCode standardCurrency;
        #    BankAccountID bankAccount;
        #    BankAccountID curBankAcc;
        #
        #    if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        #    {
        #        this.CustBankAccount_LV = CustBankAccount::findDefault_LV(this.InvoiceAccount, this.CurrencyCode).AccountID;
        #    }
        #
        #    if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
        #    {
        #        standardCurrency = CompanyInfo::standardCurrency();
        #        bankAccount = BankAccountTable::findDefault_LV(standardCurrency).AccountID;
        #        curBankAcc = BankAccountTable::findDefault_LV(this.CurrencyCode).AccountID;
        #
        #        if(curBankAcc || BankParameters::checkCurrCodeControl_W())
        #        {
        #            this.CurBankAccount_LV = standardCurrency != this.CurrencyCode ? curBankAcc : '';
        #        }
        #
        #        this.BankAccount_LV = bankAccount ? bankAccount : CompanyInfo::find().Bank;
        #    }
        #}
      ENDSOURCE
      SOURCE #initDefaultReturnAddress
        #public void initDefaultReturnAddress()
        #{
        #    CompanyInfo companyInfo = CompanyInfo::find();
        #    LogisticsLocationRecId locationRecId;
        #
        #    this.DeliveryName = companyInfo.Name;
        #
        #    locationRecId = LogisticsLocationDefault::warehouseSiteDefaultLocation(LogisticsLocationRoleType::Delivery,
        #        this.InventLocationId, this.InventSiteId);
        #    if (locationRecId)
        #    {
        #        this.setLocation(locationRecId);
        #    }
        #    else
        #    {
        #        // Warehouse and site didn't have location, use company location
        #        companyInfo = CompanyInfo::find();
        #        locationRecId = LogisticsLocationDefault::findSimpleDefault(companyInfo,
        #            LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;
        #
        #        this.DeliveryPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(locationRecId);
        #        this.AddressRefRecId        = companyInfo.RecId;
        #        this.AddressRefTableId      = companyInfo.TableId;
        #        this.setDeliveryName();
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromContactInfo
        #void initFromContactInfo()
        #{
        #    ContactPerson contactPerson = this.contactPerson();
        #
        #    if (contactPerson)
        #    {
        #        this.url = contactPerson.url();
        #        this.Email = contactPerson.email();
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromCustConfirmJour
        #void  initFromCustConfirmJour(CustConfirmJour  custConfirmJour)
        #{
        #    this.DlvTerm                = custConfirmJour.DlvTerm;
        #    this.DlvMode                = custConfirmJour.DlvMode;
        #    this.LanguageId             = custConfirmJour.LanguageId;
        #    this.Payment                = custConfirmJour.Payment;
        #    this.CashDisc               = custConfirmJour.CashDiscCode;
        #    this.CurrencyCode           = custConfirmJour.CurrencyCode;
        #    this.DefaultDimension       =  this.copyDimension(custConfirmJour.DefaultDimension);
        #    this.InclTax                = custConfirmJour.InclTax;
        #}
      ENDSOURCE
      SOURCE #initFromCustInvoiceJour
        #void initFromCustInvoiceJour(CustInvoiceJour custInvoiceJour)
        #{
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #    #ISOCountryRegionCodes
        #
        #    SalesTable_BR salesTable_BR;
        #    // <GMY>
        #    SalesTable_W    salesTable_W;
        #    // </GMY>
        #
        #    this.LanguageId                 = custInvoiceJour.LanguageId;
        #    this.Payment                    = custInvoiceJour.Payment;
        #    this.NumberSequenceGroup        = custInvoiceJour.NumberSequenceGroup;
        #    this.CashDisc                   = custInvoiceJour.CashDiscCode;
        #
        #    if (TaxParameters::find().CashDiscOnInvoice)
        #    {
        #        this.CashDiscPercent        = custInvoiceJour.CashDiscPercent;
        #    }
        #
        #    this.CurrencyCode               = custInvoiceJour.CurrencyCode;
        #    this.DlvTerm                    = custInvoiceJour.DlvTerm;
        #    this.DlvMode                    = custInvoiceJour.DlvMode;
        #    this.DefaultDimension           = this.copyDimension(custInvoiceJour.DefaultDimension);
        #    this.InclTax                    = custInvoiceJour.InclTax;
        #    this.SalesOriginId              = custInvoiceJour.SalesOriginId;
        #    this.setShipCarrierInformation(null, null, custInvoiceJour);
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        #    {
        #        this.IntrastatAddValue_LV       = custInvoiceJour.custInvoiceJour_W().IntrastatAddValue_LV;
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        salesTable_BR = this.salesTable_BR();
        #        salesTable_BR.ServiceCodeOnDlvAddress_BR    = custInvoiceJour.custInvoiceJour_BR().ServiceCodeOnDlvAddress_BR;
        #        salesTable_BR.SalesPurchOperationType_BR    = custInvoiceJour.custInvoiceJour_BR().SalesPurchOperationType_BR;
        #        salesTable_BR.cfpsId_BR                     = custInvoiceJour.fiscalDocument_BR().cfpsId;
        #        salesTable_BR.CustFinalUser_BR              = custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR;
        #        salesTable_BR.PresenceType                  = custInvoiceJour.custTable_InvoiceAccount().PresenceType_BR;
        #        this.packSalesTable_BR(salesTable_BR);
        #    }
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        if(this.SalesType == SalesType::ReturnItem)
        #        {
        #            mcrReturnSalesTable = this.mcrReturnSalesTable();
        #            mcrReturnSalesTable.OriginalSalesId = custInvoiceJour.SalesId;
        #            this.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
        #        }
        #    }
        #
        #    // <GMY>
        #    if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        #    {
        #        salesTable_W                = this.salesTable_W();
        #        salesTable_W.InvoiceType_MY = custInvoiceJour.custInvoiceJour_W().InvoiceType_MY;
        #        this.packSalesTable_W(salesTable_W);
        #    }
        #    // </GMY>
        #}
      ENDSOURCE
      SOURCE #initFromCustPackingSlipJour
        #void  initFromCustPackingSlipJour(CustPackingSlipJour custPackingSlipJour)
        #{
        #    this.LanguageId                 = custPackingSlipJour.LanguageId;
        #    this.DlvTerm                    = custPackingSlipJour.DlvTerm;
        #    this.DlvMode                    = custPackingSlipJour.DlvMode;
        #    this.DlvReason                  = custPackingSlipJour.DlvReason;
        #    this.DefaultDimension           = this.copyDimension(custPackingSlipJour.DefaultDimension);
        #    this.setShipCarrierInformation(null, custPackingSlipJour);
        #}
      ENDSOURCE
      SOURCE #initFromCustQuotationJour
        #void  initFromCustQuotationJour(CustQuotationJour  custQuotationJour)
        #{
        #    this.DlvTerm                = custQuotationJour.DlvTerm;
        #    this.DlvMode                = custQuotationJour.DlvMode;
        #    this.LanguageId             = custQuotationJour.LanguageId;
        #    this.Payment                = custQuotationJour.Payment;
        #    this.CashDisc               = custQuotationJour.CashDiscCode;
        #    this.CurrencyCode           = custQuotationJour.CurrencyCode;
        #    this.DefaultDimension       = this.copyDimension(custQuotationJour.DefaultDimension);
        #    this.InclTax                = custQuotationJour.InclTax;
        #}
      ENDSOURCE
      SOURCE #initFromCustTable
        #server void initFromCustTable()
        #{
        #    #isoCountryRegionCodes
        #
        #    container salesTableContainer;
        #    CustTable custTable;
        #
        #    // pack the raw RU values from the form data source into the
        #    // extension container to ensure the latest values are sent to IL
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        this.packSalesTable_RU(this.salesTable_RU().data());
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        this.packSalesTable_BR(this.salesTable_BR().data());
        #    }
        #
        #    if (SalesTable_W::isLegalEntityInCountryRegion())
        #    {
        #        this.packSalesTable_W(this.salesTable_W().data());
        #    }
        #
        #    salesTableContainer  = SalesTable::initFromCustTableServer(buf2Con(this, true));
        #
        #    this.con2buf(salesTableContainer);
        #
        #    // copy the raw RU fields using this.data().salesTable_RU() from the
        #    // extension to the buffer instance using this.salesTable_RU().data(<input>)
        #    // because packing and unpacking causes a disconnect
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        this.salesTable_RU().data(this.data().salesTable_RU());
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        this.salesTable_BR().data(this.data().salesTable_BR());
        #    }
        #
        #    if (SalesTable_W::isLegalEntityInCountryRegion())
        #    {
        #        this.salesTable_W().data(this.data().salesTable_W());
        #    }
        #
        #    if (#PdsRebateEnabled)
        #    {
        #        custTable = this.custTable_CustAccount();
        #
        #        this.PdsRebateProgramTMAGroup = custTable.PdsRebateTMAGroup;
        #        this.PdsCustRebateGroupId     = custTable.PdsCustRebateGroupId;
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromCustTableMandatoryFields
        #server void  initFromCustTableMandatoryFields()
        #{
        #    CustTable               custTable  = this.custTable_CustAccount();
        #    DirPartyTable           partyTable = this.partyTable_CustAccount();
        #    LogisticsLocation       location;
        #    LogisticsLocationEntity locationEntity;
        #
        #    this.CustGroup                  = custTable.CustGroup;
        #
        #    location = LogisticsLocationDefault::findSimpleDefault(custTable, LogisticsLocationRole::findBytype(
        #        LogisticsLocationRoleType::Delivery));
        #    if (location.RecId)
        #    {
        #        locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);
        #        this.DeliveryPostalAddress  = locationEntity.getPostalAddress().RecId;
        #        this.AddressRefRecId        = custTable.RecId;
        #        this.AddressRefTableId      = custTable.TableId;
        #
        #        this.setDeliveryName();
        #
        #        LogisticsLocationSelectForm_SalesTable::construct(this).copyShipCarrierInfo(location);
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromPayment
        #void initFromPayment()
        #{
        #    // Use the installment plan payment schedule if an installment plan exists.
        #    if ((!isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #        || (!MCRInstallmentPlanSalesTable::existSalesId(this.SalesId)))
        #    {
        #        this.PaymentSched = this.payment().PaymSched;
        #    }
        #
        #    this.FixedDueDate = dateNull();
        #}
      ENDSOURCE
      SOURCE #initFromProjInvoiceJour
        #void initFromProjInvoiceJour(ProjInvoiceJour projInvoiceJour)
        #{
        #    // <GMY>
        #    SalesTable_W    salesTable_W;
        #    // </GMY>
        #
        #    this.LanguageId                 = projInvoiceJour.LanguageId;
        #    this.Payment                    = projInvoiceJour.Payment;
        #    this.NumberSequenceGroup        = projInvoiceJour.NumberSequenceGroupId;
        #    this.CashDisc                   = projInvoiceJour.CashDiscCode;
        #
        #    if (TaxParameters::find().CashDiscOnInvoice)
        #    {
        #        this.CashDiscPercent        = projInvoiceJour.CashDiscPercent;
        #    }
        #    this.CurrencyCode               = projInvoiceJour.CurrencyId;
        #    this.DlvTerm                    = projInvoiceJour.DlvTerm ? projInvoiceJour.DlvTerm : this.DlvTerm;
        #    this.DlvMode                    = projInvoiceJour.DlvMode ? projInvoiceJour.DlvMode : this.DlvMode;
        #    this.DefaultDimension           = this.copyDimension(projInvoiceJour.DefaultDimension);
        #
        #    // <GMY>
        #    if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        #    {
        #        salesTable_W                = this.salesTable_W();
        #        salesTable_W.InvoiceType_MY = projInvoiceJour.InvoiceType_MY;
        #        this.packSalesTable_W(salesTable_W);
        #    }
        #    // </GMY>
        #}
      ENDSOURCE
      SOURCE #initFromProjInvoiceTable
        #void initFromProjInvoiceTable()
        #{
        #    ProjTable           projTable;
        #    ProjInvoiceTable    projInvoiceTable;
        #    #ISOCountryRegionCodes
        #
        #    projTable               = this.projTable();
        #    projInvoiceTable        = projTable.projInvoice();
        #
        #    this.TransactionCode    = projInvoiceTable.TransactionCodeId;
        #    if (this.Listcode == Listcode::IncludeNot)
        #    {
        #        this.Listcode = projInvoiceTable.ListCodeId;
        #    }
        #    this.DefaultDimension   = this.copyDimension(projTable.DefaultDimension);
        #    this.Payment            = projInvoiceTable.Payment;
        #
        #    this.FixedExchRate = ProjInvoiceCurrency::find(projInvoiceTable.ProjInvoiceProjId,this.CurrencyCode).ExchRate;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        #    {
        #        this.BankCentralBankPurposeCode = projInvoiceTable.BankCentralBankPurposeCode;
        #        this.BankCentralBankPurposeText = projInvoiceTable.BankcentralBankPurposeText;
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #initFromProjTable
        #void initFromProjTable(ProjTable _projTable)
        #{
        #    LogisticsLocationEntity location;
        #    ProjPriceGroupID        projPriceGroupID;
        #
        #    if (_projTable.RecId)
        #    {
        #        this.ProjId             = _projTable.ProjId;
        #        this.CustAccount        = _projTable.type().custAccount();
        #
        #        this.initFromCustTable();
        #
        #        this.InvoiceAccount     = _projTable.type().invoiceAccount();
        #        this.initInvoiceAccount();
        #        this.CurrencyCode               = _projTable.currencyId();
        #
        #        this.initFromProjInvoiceTable();
        #
        #        this.InclTax                    = NoYes::No;
        #
        #        location = LogisticsLocationEntity::constructFromLocationRecId(_projTable.DeliveryLocation);
        #
        #        this.DeliveryName = location.getPostalAddress().displayLocationDescription();
        #        this.DeliveryPostalAddress = location.getPostalAddress().RecId;
        #
        #        projPriceGroupID = ProjTable::findPriceGroup(this.ProjId);
        #        if (projPriceGroupID)
        #        {
        #            this.PriceGroupId = projPriceGroupID;
        #        }
        #
        #        if (BrazilParameters::isEnabled())
        #        {
        #            this.salesTable_BR().data(this.data().salesTable_BR());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromSalesAgreementHeader
        #/// <summary>
        #/// Initiates a <c>SalesTable</c> record with values that are based on <c>SalesAgreementHeader</c>
        #/// record.
        #/// </summary>
        #/// <param name="_salesAgreementHeader">
        #/// Record of <c>SalesAgreementHeader</c> to copy initial values from
        #/// </param>
        #/// <param name="_copyDeliveryLocation">
        #/// When set to true delivery location is copyed from <c>SalesAgreementHeader</c> Default is true.
        #/// </param>
        #public void initFromSalesAgreementHeader( SalesAgreementHeader  _salesAgreementHeader, boolean _copyDeliveryLocation = true)
        #{
        #    AgreementHeaderDefault          agreementHeaderDefault;
        #    SalesAgreementHeaderDefault     salesAgreementHeaderDefault;
        #    CashDisc                        cashDisc;
        #    #ISOCountryRegionCodes
        #    SalesAgreementHeaderExt_RU      salesAgreementHeaderExt;
        #    SalesTable_RU                   salesTableRU;
        #    SalesTable_W                    salesTable_W;
        #
        #    select firstonly DeliveryMode
        #                    ,DeliveryTerm
        #                    ,DeliveryName
        #                    ,DeliveryPostalAddress
        #                    ,PaymentTerms
        #                    ,PaymentSchedule
        #                    ,CashDiscountCode
        #                    ,ContactPerson
        #                    ,MiscChargeGroup
        #                    ,Project
        #                    ,ExternalReference
        #        from agreementHeaderDefault
        #        where agreementHeaderDefault.AgreementHeader == _salesAgreementHeader.RecId
        #        outer join firstonly CustomerInvoiceAccount
        #                      ,Campaign
        #                      ,SalesUnit
        #                      ,SalesPool
        #                      ,WorkerSalesResponsible
        #                      ,CommissionSalesGroup
        #                      ,CommissionCustomerGroup
        #                      ,FixedExchangeRate
        #                      ,CustomerMethodOfPayment
        #                      ,CustomerPaymentSpec
        #                      ,CustomerRequisitionNumber
        #                      ,EntryCertificateRequired_W
        #                      ,IssueOwnEntryCertificate_W
        #            from  salesAgreementHeaderDefault
        #            where salesAgreementHeaderDefault.SalesAgreementHeader == _salesAgreementHeader.RecId
        #        outer join firstonly RecId,
        #                             InventProfileType,
        #                             InventProfileId,
        #                             CustPostingProfile,
        #                             SalesInvoicePostingType
        #            from salesAgreementHeaderExt
        #            where salesAgreementHeaderExt.AgreementHeader == _salesAgreementHeader.RecId
        #            ;
        #
        #    if (agreementHeaderDefault.CashDiscountCode)
        #    {
        #        // When CashDiscountCode is set for agreement header, query cash discount record to set proper cashDiscPercent value
        #        cashDisc = CashDisc::find(agreementHeaderDefault.CashDiscountCode);
        #    }
        #
        #    this.MatchingAgreement = _salesAgreementHeader.RecId;
        #
        #    this.DefaultDimension = this.mergeDimension(_salesAgreementHeader.DefaultDimension, this.DefaultDimension);
        #
        #    if (_copyDeliveryLocation)
        #    {
        #        this.DeliveryName = agreementHeaderDefault.DeliveryName;
        #        this.DeliveryPostalAddress = agreementHeaderDefault.DeliveryPostalAddress;
        #    }
        #
        #    this.CurrencyCode   = _salesAgreementHeader.Currency;
        #    this.LanguageId     = _salesAgreementHeader.Language;
        #
        #    this.DlvMode         = agreementHeaderDefault.DeliveryMode;
        #    this.DlvTerm         = agreementHeaderDefault.DeliveryTerm;
        #    this.Payment         = agreementHeaderDefault.PaymentTerms;
        #    this.PaymentSched    = agreementHeaderDefault.PaymentSchedule;
        #    this.MarkupGroup     = agreementHeaderDefault.MiscChargeGroup;
        #    this.ProjId          = agreementHeaderDefault.Project;
        #    this.CustomerRef     = agreementHeaderDefault.ExternalReference;
        #    this.CashDisc        = agreementHeaderDefault.CashDiscountCode;
        #    this.CashDiscPercent = (cashDisc.RecId) ? cashDisc.Percent : 0.0;
        #    this.ContactPersonId = agreementHeaderDefault.ContactPerson;
        #
        #    this.SmmCampaignId      = salesAgreementHeaderDefault.Campaign;
        #    this.SalesUnitId        = salesAgreementHeaderDefault.SalesUnit;
        #    this.SalesPoolId        = salesAgreementHeaderDefault.SalesPool;
        #    this.WorkerSalesResponsible = salesAgreementHeaderDefault.WorkerSalesResponsible;
        #    this.SalesGroup         = salesAgreementHeaderDefault.CommissionSalesGroup;
        #    this.CommissionGroup    = salesAgreementHeaderDefault.CommissionCustomerGroup;
        #    this.FixedExchRate      = salesAgreementHeaderDefault.FixedExchangeRate;
        #    this.PaymMode           = salesAgreementHeaderDefault.CustomerMethodOfPayment;
        #    this.PaymSpec           = salesAgreementHeaderDefault.CustomerPaymentSpec;
        #    this.PurchOrderFormNum  = salesAgreementHeaderDefault.CustomerRequisitionNumber;
        #
        #    if (salesAgreementHeaderDefault.CustomerInvoiceAccount)
        #    {
        #        // Copy CustomerInvoiceAccount ONLY when it is not-empty in Agreement!
        #        this.InvoiceAccount     = salesAgreementHeaderDefault.CustomerInvoiceAccount;
        #    }
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        salesTableRU = this.salesTable_RU();
        #
        #        salesTableRU.AgreementHeaderExt_RU = salesAgreementHeaderExt.RecId;
        #
        #        this.DefaultDimension = this.copyDimension(_salesAgreementHeader.DefaultDimension);
        #
        #        if (salesAgreementHeaderExt.InventProfileType || salesAgreementHeaderExt.InventProfileId)
        #        {
        #            salesTableRU.InventProfileType_RU = salesAgreementHeaderExt.InventProfileType;
        #            salesTableRU.InventProfileId_RU   = salesAgreementHeaderExt.InventProfileId;
        #        }
        #
        #        if (salesAgreementHeaderExt.CustPostingProfile)
        #        {
        #            this.PostingProfile = salesAgreementHeaderExt.CustPostingProfile;
        #        }
        #
        #        salesTableRU.initInvoicePostingType_RU(_salesAgreementHeader.custTable(), salesAgreementHeaderExt);
        #
        #        this.packSalesTable_RU(salesTableRU);
        #    }
        #
        #    if (SalesTable_W::isLegalEntityInCountryRegion())
        #    {
        #        salesTable_W = this.salesTable_W();
        #        salesTable_W.EntryCertificateRequired_W = salesAgreementHeaderDefault.EntryCertificateRequired_W;
        #        salesTable_W.IssueOwnEntryCertificate_W = salesAgreementHeaderDefault.IssueOwnEntryCertificate_W;
        #        this.packSalesTable_W(salesTable_W);
        #    }
        #
        #    TMSSalesTable::initFromTMSSalesAgreement(this.SalesId, _salesAgreementHeader.RecId);
        #}
      ENDSOURCE
      SOURCE #initFromSalesBasket
        #void initFromSalesBasket(SalesBasket salesBasket)
        #{
        #    this.ContactPersonId        = salesBasket.ContactPersonId;
        #
        #    this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        #    this.ShippingDateRequested   = salesBasket.DeliveryDate;
        #    this.ReceiptDateRequested    = salesBasket.DeliveryDate;
        #}
      ENDSOURCE
      SOURCE #initFromSalesQuotationTable
        #/// <summary>
        #/// Initializes a record in the <c>SalesTable</c> table from a record in the <c>SalesQuotationTable</c>
        #/// table.
        #/// </summary>
        #/// <param name="_salesQuotationTable">
        #/// The record in the <c>SalesQuotationTable</c> table from which to initialize.
        #/// </param>
        #void initFromSalesQuotationTable(SalesQuotationTable    _salesQuotationTable)
        #{
        #    SalesTable_BR           salesTable_BR;
        #    MCRSalesTable           mcrSalesTable;
        #    MCRSalesQuotationTable  mcrSalesQuotationTable;
        #    RetailSalesQuotationTable retailQuotation;
        #    RetailSalesTable          retailSales;
        #
        #    this.QuotationId                = _salesQuotationTable.QuotationId;
        #
        #    this.CustAccount                = _salesQuotationTable.CustAccount;
        #    this.initFromCustTable();
        #
        #    this.CurrencyCode               = _salesQuotationTable.CurrencyCode;
        #
        #    if (_salesQuotationTable.InvoiceAccount)
        #    {
        #        this.InvoiceAccount         =  _salesQuotationTable.InvoiceAccount;
        #    }
        #
        #    this.SmmCampaignId              = _salesQuotationTable.CampaignId;
        #
        #    this.SalesName                  = _salesQuotationTable.QuotationName;
        #    this.DeliveryDate               = _salesQuotationTable.ShippingDateRequested;
        #    this.Deadline                   = _salesQuotationTable.QuotationExpiryDate;
        #
        #    this.ContactPersonId            = _salesQuotationTable.ContactPersonId;
        #    this.CustomerRef                = _salesQuotationTable.CustomerRef;
        #    this.PurchOrderFormNum          = _salesQuotationTable.CustPurchaseOrder;
        #    this.DefaultDimension           = this.copyDimension(_salesQuotationTable.DefaultDimension);
        #    this.DeliveryName               = _salesQuotationTable.DeliveryName;
        #
        #    this.TransactionCode            = _salesQuotationTable.TransactionCode;
        #    this.Transport                  = _salesQuotationTable.Transport;
        #    this.Port                       = _salesQuotationTable.Port;
        #    this.StatProcId                 = _salesQuotationTable.StatProcId;
        #    this.Listcode                   = _salesQuotationTable.Listcode;
        #    this.CountyOrigDest             = _salesQuotationTable.CountyOrigDest;
        #
        #    if (_salesQuotationTable.DeliveryPostalAddress)
        #    {
        #        this.DeliveryPostalAddress  = _salesQuotationTable.DeliveryPostalAddress;
        #        this.AddressRefRecId        = _salesQuotationTable.AddressRefRecId;
        #        this.AddressRefTableId      = _salesQuotationTable.AddressRefTableId;
        #    }
        #
        #    this.vatNum                     = _salesQuotationTable.vatNum;
        #    this.TaxGroup                   = _salesQuotationTable.TaxGroup;
        #    this.InclTax                    = _salesQuotationTable.InclTax;
        #
        #    this.CashDisc                   = _salesQuotationTable.CashDisc;
        #
        #    this.CashDiscPercent            = _salesQuotationTable.CashDiscPercent;
        #
        #    this.DiscPercent                = _salesQuotationTable.DiscPercent;
        #    this.EndDisc                    = _salesQuotationTable.EndDisc;
        #    this.LineDisc                   = _salesQuotationTable.LineDisc;
        #    this.MultiLineDisc              = _salesQuotationTable.MultiLineDisc;
        #    this.CommissionGroup            = _salesQuotationTable.CommissionGroup;
        #
        #    this.DlvMode                    = _salesQuotationTable.DlvMode;
        #    this.DlvTerm                    = _salesQuotationTable.DlvTerm;
        #    this.DlvReason                  = _salesQuotationTable.DlvReason;
        #
        #    this.SalesGroup                 = _salesQuotationTable.SalesGroup;
        #    this.PriceGroupId               = _salesQuotationTable.PriceGroupId;
        #    this.LanguageId                 = _salesQuotationTable.LanguageId;
        #    this.MarkupGroup                = _salesQuotationTable.MarkupGroup;
        #    this.Payment                    = _salesQuotationTable.Payment;
        #    if(_salesQuotationTable.Payment)
        #    {
        #        this.PaymentSched           = _salesQuotationTable.payment().PaymSched;
        #    }
        #
        #    this.PostingProfile             = _salesQuotationTable.PostingProfile;
        #    this.WorkerSalesResponsible     = _salesQuotationTable.WorkerSalesResponsible;
        #    this.WorkerSalesTaker           = _salesQuotationTable.WorkerSalesTaker;
        #    this.SalesUnitId                = _salesQuotationTable.SalesUnitId;
        #    this.SalesOriginId              = _salesQuotationTable.SalesOriginId;
        #
        #    this.ShippingDateRequested      = _salesQuotationTable.ShippingDateRequested;
        #    this.ReceiptDateRequested       = _salesQuotationTable.ReceiptDateRequested;
        #    this.InventLocationId           = _salesQuotationTable.InventLocationId;
        #    this.setInventSiteId(_salesQuotationTable.InventSiteId);
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        salesTable_BR = this.salesTable_BR();
        #        salesTable_BR.CustFinalUser_BR              = _salesQuotationTable.CustFinalUser_BR;
        #        salesTable_BR.SalesPurchOperationType_BR    = _salesQuotationTable.SalesPurchOperationType_BR;
        #        salesTable_BR.FineCode_BR                   = _salesQuotationTable.FineCode_BR;
        #        salesTable_BR.InterestCode_BR               = _salesQuotationTable.InterestCode_BR;
        #        this.packSalesTable_BR(salesTable_BR);
        #    }
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        mcrSalesTable = this.mcrSalesTable();
        #        mcrSalesQuotationTable           = _salesQuotationTable.mcrSalesQuotationTable();
        #        // Copy the source code.
        #
        #        if (mcrSalesTable.SourceId != mcrSalesQuotationTable.SourceId)
        #        {
        #            mcrSalesTable.SourceId = mcrSalesQuotationTable.SourceId;
        #            this.mcrPackMCRSalesTable(mcrSalesTable);
        #        }
        #    }
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        #    {
        #        retailQuotation = _salesQuotationTable.retailSalesQuotationTable();
        #        if (retailQuotation && retailQuotation.RetailChannel)
        #        {
        #            retailSales = this.retailSalesTable();
        #            retailSales.RetailChannel = retailQuotation.RetailChannel;
        #            retailSales.TotalManualDiscountAmount = retailQuotation.TotalManualDiscountAmount;
        #            retailSales.TotalManualDiscountPercentage = retailQuotation.TotalManualDiscountPercentage;
        #            retailSales.RetailLoyaltyCard = retailQuotation.RetailLoyaltyCard;
        #
        #            this.retailPackRetailSalesTable(retailSales);
        #        }
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #initFromSalesTable
        #void initFromSalesTable(SalesTable salesTable)
        #{
        #    SalesTable_BR           salesTable_BR;
        #    MCRSalesTableShipping   mcrSalesTableShippingLocal;
        #    MCRSalesTableShipping   mcrSalesTableShipping;
        #    MCRSalesTable           mcrSalesTableLocal;
        #    MCRSalesTable           mcrSalesTable;
        #    // <GMY>
        #    SalesTable_W            salesTable_W;
        #    // </GMY>
        #
        #    RetailSalesTable retailSalesTable;
        #    #ISOCountryRegionCodes
        #
        #    this.Payment                    = salesTable.Payment;
        #    this.PaymMode                   = salesTable.PaymMode;
        #    this.PaymSpec                   = salesTable.PaymSpec;
        #    this.NumberSequenceGroup        = salesTable.NumberSequenceGroup;
        #    this.CashDisc                   = salesTable.CashDisc;
        #    this.CashDiscBaseDays           = salesTable.CashDiscBaseDays;
        #    this.CashDiscBaseDate           = salesTable.CashDiscBaseDate;
        #    this.CashDiscPercent            = salesTable.CashDiscPercent;
        #    this.CurrencyCode               = salesTable.CurrencyCode;
        #    this.DlvTerm                    = salesTable.DlvTerm;
        #    this.DlvMode                    = salesTable.DlvMode;
        #    this.DlvReason                  = salesTable.DlvReason;
        #    this.DefaultDimension           = this.copyDimension(salesTable.DefaultDimension);
        #    this.setTaxGroup(salesTable.TaxGroup);
        #    this.InclTax                    = salesTable.InclTax;
        #    this.Transport                  = salesTable.Transport;
        #    this.Port                       = salesTable.Port;
        #    this.StatProcId                 = salesTable.StatProcId;
        #    this.DiscPercent                = salesTable.DiscPercent;
        #    this.DeliveryName               = salesTable.DeliveryName;
        #
        #    if (this.CustAccount == salesTable.CustAccount)
        #    {
        #        this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;
        #    }
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        if (salesTable.salesTable_RU().AgreementHeaderExt_RU)
        #        {
        #            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
        #        }
        #    }
        #
        #    if (RetailParameters::isRetailEnabledAndInUse())
        #    {
        #        retailSalesTable = this.retailSalesTable();
        #        retailSalesTable.RetailLoyaltyCard    = salesTable.retailSalesTable().RetailLoyaltyCard;
        #        this.packRetailSalesTable(retailSalesTable);
        #    }
        #    this.AddressRefRecId            = salesTable.AddressRefRecId;
        #    this.AddressRefTableId          = salesTable.AddressRefTableId;
        #    this.setShipCarrierInformation(salesTable);
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        mcrSalesTableShippingLocal  = this.mcrSalesTableShipping();
        #        mcrSalesTableShipping       = salesTable.mcrSalesTableShipping();
        #        mcrSalesTableLocal          = this.mcrSalesTable();
        #        mcrSalesTable               = salesTable.mcrSalesTable();
        #
        #        this.DeliveryPostalAddress               = salesTable.DeliveryPostalAddress;
        #        this.DeliveryName                        = salesTable.DeliveryName;
        #
        #        if (mcrSalesTableShippingLocal.Expedite != mcrSalesTableShipping.Expedite
        #            || mcrSalesTableShippingLocal.ShipComplete != mcrSalesTableShipping.ShipComplete)
        #        {
        #            mcrSalesTableShippingLocal.Expedite      = mcrSalesTableShipping.Expedite;
        #            mcrSalesTableShippingLocal.ShipComplete  = mcrSalesTableShipping.ShipComplete;
        #            this.mcrPackMCRSalesTableShipping(mcrSalesTableShippingLocal);
        #        }
        #
        #        if (mcrSalesTableLocal.PostageGroupID != mcrSalesTable.PostageGroupID)
        #        {
        #            mcrSalesTableLocal.PostageGroupID        = mcrSalesTable.PostageGroupID;
        #            this.mcrPackMCRSalesTable(mcrSalesTableLocal);
        #        }
        #    }
        #    if (BrazilParameters::isEnabled())
        #    {
        #        salesTable_BR = this.salesTable_BR();
        #        salesTable_BR.SalesPurchOperationType_BR    = salesTable.salesTable_BR().SalesPurchOperationType_BR;
        #        salesTable_BR.ServiceCodeOnDlvAddress_BR    = salesTable.salesTable_BR().ServiceCodeOnDlvAddress_BR;
        #        salesTable_BR.CustFinalUser_BR              = salesTable.salesTable_BR().CustFinalUser_BR;
        #        salesTable_BR.PresenceType                  = this.custTable_CustAccount().PresenceType_BR;
        #        this.packSalesTable_BR(salesTable_BR);
        #    }
        #
        #    if (this.InvoiceAccount == salesTable.InvoiceAccount)
        #    {
        #        this.DirectDebitMandate = salesTable.DirectDebitMandate;
        #    }
        #
        #    // <GMY>
        #    if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        #    {
        #        salesTable_W                = this.salesTable_W();
        #        salesTable_W.InvoiceType_MY = salesTable.salesTable_W().InvoiceType_MY;
        #        this.packSalesTable_W(salesTable_W);
        #    }
        #    // </GMY>
        #}
      ENDSOURCE
      SOURCE #initInvoiceAccount
        #void  initInvoiceAccount()
        #{
        #    CustTable      custTable;
        #    #ISOCountryRegionCodes
        #
        #    custTable = this.custTable_InvoiceAccount();
        #
        #    this.NumberSequenceGroup    = custTable.NumberSequenceGroup;
        #    this.Payment                = custTable.PaymTermId;
        #    this.initFromPayment();
        #    if (custTable.PaymSched)
        #    {
        #        this.PaymentSched   = custTable.PaymSched;
        #    }
        #    if (RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        #    {
        #        // Clearing base payment fields, use attached payment record logic instead.
        #        this.PaymMode               = '';
        #        this.PaymSpec               = '';
        #    }
        #    else
        #    {
        #        this.PaymMode               = custTable.PaymMode;
        #        this.PaymSpec               = custTable.PaymSpec;
        #    }
        #    this.CashDisc               = custTable.CashDisc;
        #    this.CashDiscBaseDays       = custTable.CashDiscBaseDays;
        #    this.setListCode();
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        #    {
        #        this.InvoiceRegister_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForSalesInvoice(this.InvoiceAccount);
        #        this.PackingSlipRegister_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForSalesPackingSlip(this.InvoiceAccount);
        #    }
        #}
      ENDSOURCE
      SOURCE #initReturnFromSalesTable
        #void initReturnFromSalesTable(SalesTable _other)
        #{
        #    this.CustAccount        = _other.CustAccount;
        #    this.CustGroup          = _other.CustGroup;
        #    this.InvoiceAccount     = _other.InvoiceAccount;
        #
        #    this.initFromCustTable();
        #    this.initFromSalesTable(_other);
        #
        #    this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        #    this.ShippingDateRequested   = _other.DeliveryDate;
        #    this.ReceiptDateRequested    = _other.DeliveryDate;
        #
        #    this.SalesId            = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        #    this.ReturnItemNum      = NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum()).num();
        #
        #    this.SalesType          = SalesType::ReturnItem;
        #    this.ReturnStatus       = ReturnStatusHeader::Created;
        #}
      ENDSOURCE
      SOURCE #initTaxDefaultsFromInvoiceAccount
        #/// <summary>
        #/// Copies fiscal data fields from the invoice account.
        #/// </summary>
        #private void initTaxDefaultsFromInvoiceAccount()
        #{
        #    CustTable      custTable;
        #    CustParameters custParameters;
        #
        #    custTable = this.custTable_InvoiceAccount();
        #
        #    this.vatNum = custTable.vatNum;
        #    this.setTaxGroup(TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup));
        #    this.CustGroup = custTable.CustGroup;
        #    custParameters = CustParameters::find();
        #    if (custParameters.CustNameFromVATNum)
        #    {
        #        this.setNameUsingVATNum(custTable.vatNum,
        #                                this.payerPostalAddress().CountryRegionId,
        #                                custTable.name(),
        #                                custParameters);
        #    }
        #    else
        #    {
        #        this.SalesName = custTable.name();
        #    }
        #}
      ENDSOURCE
      SOURCE #initValue
        #void initValue(SalesType _salesType = SalesParameters::find().OrderType)
        #{
        #    this.SalesType = _salesType;
        #
        #    super();
        #
        #    this.initValue_Server();
        #}
      ENDSOURCE
      SOURCE #initValue_Server
        #server void initValue_Server()
        #{
        #    SalesTableType salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.initValue();
        #
        #    if (smmLicense::crm())
        #    {
        #        this.WorkerSalesResponsible   = currentWorker();
        #        this.SalesUnitId              = smmUtility::getCurrentSalesUnit();
        #    }
        #    this.WorkerSalesTaker   = currentWorker();
        #
        #    //Add for Connector integration
        #    if(!this.daxIntegrationID)
        #    {
        #        this.daxIntegrationID = newGuid();
        #    }
        #}
      ENDSOURCE
      SOURCE #insert
        #void insert(boolean _skipMarkup = false)
        #{
        #    SalesTableType                  salesTableType;
        #    RetailEventNotificationSetting  retailEventNotificationSetting;
        #
        #    #ISOCountryRegionCodes
        #
        #    if (!this.SalesId)
        #    {
        #        throw(error(strFmt("@SYS26332", fieldId2pname(tableNum(SalesTable), fieldNum(SalesTable, SalesId)))));
        #    }
        #
        #    ttsbegin;
        #
        #    salesTableType = this.type();
        #    salesTableType.insert(_skipMarkup);
        #
        #    this.SysExtensionSerializerMap::postInsert();
        #
        #    TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, this.RecId, this.CustAccount, TradeBLWITypeOfForm::SalesTable);
        #    if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
        #        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        #    {
        #        if (CustTable::find(this.CustAccount).ExportSales_PL)
        #        {
        #            ExportSalesOrder::createFromSalesOrder(this.SalesId);
        #        }
        #    }
        #    ttscommit;
        #
        #    select firstOnly RecId  from retailEventNotificationSetting
        #        where retailEventNotificationSetting.dataAreaId == curext()
        #        && retailEventNotificationSetting.EventNotificationType == RetailEventNotificationType::ReplacementOrderCreation;
        #
        #    // If replacement order is created
        #    if ((this.SalesType == SalesType::Sales)
        #        && (this.ReturnItemNum != '')
        #        && retailEventNotificationSetting.RecId)
        #    {
        #        RetailEventNotificationAction::InsertRetailOENAction(
        #                        RetailEventNotificationType::ReplacementOrderCreation,
        #                        this.RecId,
        #                        this);
        #    }
        #    else // Else, any other type of order creation
        #    {
        #        RetailEventNotificationAction::InsertRetailOENAction(
        #                        RetailEventNotificationType::OrderCreation,
        #                        this.RecId,
        #                        this);
        #    }
        #}
      ENDSOURCE
      SOURCE #interCompanyAllowIndirectCreationOrig
        #public InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationOrig()
        #{
        #    InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationTxt;
        #
        #    if (this.InterCompanyDirectDeliveryOrig
        #    && !this.InterCompanyAllowIndirectCreationOrig)
        #    {
        #        interCompanyAllowIndirectCreationTxt = "@SYS95179";
        #    }
        #    return interCompanyAllowIndirectCreationTxt;
        #}
      ENDSOURCE
      SOURCE #interCompanyAllowIndirectCreationTxt
        #display InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationTxt()
        #{
        #    return this.interCompanyAllowIndirectCreationOrig();
        #}
      ENDSOURCE
      SOURCE #interCompanyCheckCurrency
        #boolean interCompanyCheckCurrency()
        #{
        #    MarkupTrans     markupTrans;
        #
        #    if (this.isInterCompanyOrder()
        #    &&  this.CurrencyCode != this.orig().CurrencyCode)
        #    {
        #        if (SalesLine::exist(this.SalesId))
        #        {
        #            return checkFailed(strFmt("@SYS105402"));
        #        }
        #
        #        select firstonly markupTrans
        #               index hint TableRecIdIdx
        #               where markupTrans.TransTableId == this.TableId
        #               &&    markupTrans.TransRecId   == this.RecId
        #               &&   !markupTrans.IsDeleted;
        #        if (markupTrans)
        #        {
        #            return checkFailed(strFmt("@SYS105402"));
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #interCompanyDirectDeliveryReturn
        #/// <summary>
        #///    Sets the InterCompanyAutoCreateOrders and InterCompanyAllowIndirectCreate fieldsto the value of the
        #///    InterCompanyDirectDelivery field.
        #/// </summary>
        #/// <remarks>
        #///    This method is used, when the InterCompanyDirectDelivery field is changed for a return order.
        #/// </remarks>
        #public void interCompanyDirectDeliveryReturn()
        #{
        #    this.InterCompanyAutoCreateOrders      = this.InterCompanyDirectDelivery;
        #    this.InterCompanyAllowIndirectCreation = this.InterCompanyDirectDelivery;
        #}
      ENDSOURCE
      SOURCE #interCompanyEndpointActionPolicy
        #/// <summary>
        #/// Gets the intercompany trading policy for the current <c>SalesTable</c> table record.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>InterCompanyEndpointActionPolicy</c> table; otherwise, an empty record.
        #/// </returns>
        #public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean   _forUpdate = false)
        #{
        #    InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;
        #
        #    changecompany (
        #                   this.company()
        #                   )
        #    {
        #        interCompanyEndpointActionPolicy = CustTable::find(this.CustAccount).interCompanyTradingPartner().interCompanyEndpointActionPolicy(_forUpdate);
        #    }
        #    return interCompanyEndpointActionPolicy;
        #}
      ENDSOURCE
      SOURCE #interCompanyNonICExist
        #public boolean interCompanyNonICExist()
        #{
        #    SalesLine   salesLine;
        #    PurchLine   purchLine;
        #
        #    select firstonly RecId from salesLine
        #           where salesLine.SalesId == this.SalesId
        #           &&   (salesLine.InventRefType != InventRefType::Purch
        #             || (salesLine.InventRefType == InventRefType::Purch
        #              && salesLine.InventRefTransId))
        #    notexists join purchLine
        #         where (purchLine.ItemRefType       == InventRefType::Sales
        #         &&    !purchLine.IsDeleted
        #         &&     purchLine.InventTransId     == salesLine.InventRefTransId
        #         &&     purchLine.InterCompanyInventTransId);
        #
        #    return salesLine.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #interCompanyOriginalSalesInfo
        #public server container interCompanyOriginalSalesInfo()
        #{
        #    InterCompanySalesType   salesType;
        #    SalesTable              salesTable;
        #    SalesStatus             salesStatus = SalesStatus::None;
        #    PurchTable              purchTable;
        #    PurchStatus             purchStatus = PurchStatus::None;
        #
        #    if (this.InterCompanyOrder
        #    &&  this.InterCompanyCompanyId)
        #    {
        #        changecompany(this.InterCompanyCompanyId)
        #        {
        #            if (this.InterCompanyOriginalSalesId)
        #            {
        #                select SalesType, SalesStatus from salesTable
        #                       index hint SalesIdx
        #                       where salesTable.SalesId == this.InterCompanyOriginalSalesId;
        #                salesType   = enum2str(salesTable.SalesType);
        #                salesStatus = salesTable.SalesStatus;
        #            }
        #
        #            select PurchStatus from purchTable
        #                   index hint PurchIdx
        #                   where purchTable.PurchId == this.InterCompanyPurchId;
        #            purchStatus = purchTable.PurchStatus;
        #        }
        #    }
        #    return [purchStatus,salesType,salesStatus];
        #}
      ENDSOURCE
      SOURCE #interCompanyOriginDisplay
        #display InterCompanyOriginDisplay interCompanyOriginDisplay()
        #{
        #    InterCompanyOriginDisplay   interCompanyOriginDisplay;
        #    DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));
        #
        #    if (this.InterCompanyOrder)
        #    {
        #        interCompanyOriginDisplay = dictEnum.value2Name(this.InterCompanyOrigin);
        #    }
        #    return interCompanyOriginDisplay;
        #}
      ENDSOURCE
      SOURCE #interCompanyPurchTable
        #PurchTable  interCompanyPurchTable(boolean  _forUpdate = false)
        #{
        #    PurchTable      purchTable;
        #
        #    if (this.InterCompanyOrder
        #    &&  this.InterCompanyCompanyId
        #    &&  this.InterCompanyPurchId)
        #    {
        #        changecompany(this.InterCompanyCompanyId)
        #        {
        #            purchTable = PurchTable::find(this.InterCompanyPurchId, _forUpdate);
        #        }
        #
        #    }
        #    return purchTable;
        #}
      ENDSOURCE
      SOURCE #interCompanyReplacementRegistered
        #private boolean interCompanyReplacementRegistered()
        #{
        #    boolean                 ret;
        #    SalesLine               salesLine;
        #    ReturnDispositionCode   returnDispositionCode;
        #
        #    while select forceplaceholders salesLine
        #          where salesLine.SalesId       == this.SalesId
        #          &&    salesLine.InventRefType == InventRefType::Purch
        #          &&    salesLine.InventRefTransId
        #    join returnDispositionCode
        #         where returnDispositionCode.DispositionCodeId == salesLine.ReturnDispositionCodeId
        #    {
        #        if (salesLine.interCompanySalesLineExist()
        #        &&  returnDispositionCode.createReplacement())
        #        {
        #            ret = true;
        #            break;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #interCompanyTradingValueMap
        #/// <summary>
        #/// Gets the intercompany trading value mapping for the current <c>SalesTable</c> table record.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>InterCompanyTradingValueMap</c> table; otherwise, an empty record.
        #/// </returns>
        #public InterCompanyTradingValueMap interCompanyTradingValueMap(boolean   _forUpdate = false)
        #{
        #    InterCompanyTradingValueMap interCompanyTradingValueMap;
        #
        #    changecompany (
        #                   this.company()
        #                   )
        #    {
        #        interCompanyTradingValueMap = CustTable::find(this.CustAccount).interCompanyTradingPartner().interCompanyTradingValueMap(_forUpdate);
        #    }
        #    return interCompanyTradingValueMap;
        #}
      ENDSOURCE
      SOURCE #interCompanyUpdateNow
        #boolean  interCompanyUpdateNow()
        #{
        #    boolean  ok;
        #    #isoCountryRegionCodes
        #    SalesTable_RU salesTableRU;
        #
        #    if (!this.RecId)
        #    {
        #        ok = true;
        #    }
        #
        #    if (this.orig().SalesType                       != this.SalesType
        #    ||  this.orig().CurrencyCode                    != this.CurrencyCode
        #    ||  this.orig().DlvTerm                         != this.DlvTerm
        #    ||  this.orig().DlvMode                         != this.DlvMode
        #    ||  this.orig().DeliveryDate                    != this.DeliveryDate
        #    ||  this.orig().ReceiptDateRequested            != this.ReceiptDateRequested
        #    ||  this.orig().ReceiptDateConfirmed            != this.ReceiptDateConfirmed
        #    ||  this.orig().ShippingDateRequested           != this.ShippingDateRequested
        #    ||  this.orig().ShippingDateConfirmed           != this.ShippingDateConfirmed
        #    ||  this.orig().DeliveryPostalAddress           != this.DeliveryPostalAddress
        #    ||  this.orig().DeliveryName                    != this.DeliveryName
        #    ||  this.orig().InterCompanyOriginalSalesId     != this.InterCompanyOriginalSalesId
        #    ||  this.orig().InterCompanyOriginalCustAccount != this.InterCompanyOriginalCustAccount
        #    ||  this.orig().InterCompanyDirectDelivery      != this.InterCompanyDirectDelivery
        #    ||  this.orig().InterCompanyDirectDeliveryOrig  != this.InterCompanyDirectDeliveryOrig
        #    ||  this.orig().PurchOrderFormNum               != this.PurchOrderFormNum
        #    ||  this.orig().CustomerRef                     != this.CustomerRef
        #    ||  this.orig().ReturnItemNum                   != this.ReturnItemNum
        #    ||  this.orig().DefaultDimension                != this.DefaultDimension
        #    ||  this.orig().DiscPercent                     != this.DiscPercent
        #    ||  this.orig().ReturnReasonCodeId              != this.ReturnReasonCodeId
        #    ||  this.orig().ReturnReplacementCreated        != this.ReturnReplacementCreated
        #    ||  this.orig().MatchingAgreement               != this.MatchingAgreement)
        #    {
        #        ok = true;
        #    }
        #    else
        #    {
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #        {
        #            salesTableRU = this.salesTable_RU();
        #            ok = salesTableRU.orig().InventProfileId_RU != salesTableRU.InventProfileId_RU;
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #invoiceName
        #display CustName invoiceName()
        #{
        #    return this.custTable_InvoiceAccount().name();
        #}
      ENDSOURCE
      SOURCE #isBankDocumentCreated
        #/// <summary>
        #/// Checks if a bank document has been created for this order.
        #/// </summary>
        #/// <returns>
        #/// true if it a bank document has been created; otherwise, false.
        #/// </returns>
        #public boolean isBankDocumentCreated()
        #{
        #    return this.isBankLCCreated()
        #        || this.isBankLGCreated();
        #}
      ENDSOURCE
      SOURCE #isBankLCCreated
        #/// <summary>
        #/// Checks if a bank LC has been created for this order.
        #/// </summary>
        #/// <returns>
        #/// true if a bank LC has been created; otherwise, false.
        #/// </returns>
        #public boolean isBankLCCreated()
        #{
        #    boolean     ret = false;
        #
        #    if (this.isMarkedForBankLC())
        #    {
        #        ret = BankLCExport::existBySalesTable(this.SalesId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBankLGCreated
        #/// <summary>
        #/// Checks if a bank LG has been created for this order.
        #/// </summary>
        #/// <returns>
        #/// true if a bank LG has been created; otherwise, false.
        #/// </returns>
        #public boolean isBankLGCreated()
        #{
        #    boolean     ret = false;
        #
        #    if (this.isMarkedForBankLG() && this.BankLGDocumentMap::isLinkedToGuarantee())
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isCancellingFiscalDocApproved_BR
        #/// <summary>
        #/// Checks if the fiscal document being cancelled is approved
        #/// </summary>
        #/// <returns>
        #/// True if the fiscal document being cancelled is approved, false otherwise
        #/// </returns>
        #public boolean isCancellingFiscalDocApproved_BR()
        #{
        #    SalesTable_BR       salesTable_BR;
        #    FiscalDocument_BR   fiscalDocumentBeingCancelled;
        #
        #    salesTable_BR = this.salesTable_BR();
        #
        #    if (!salesTable_BR.InvoiceRefRecID_BR)
        #    {
        #        return false;
        #    }
        #
        #    fiscalDocumentBeingCancelled = FiscalDocument_BR::findByRef(tableNum(CustInvoiceJour), salesTable_BR.InvoiceRefRecID_BR);
        #
        #    return fiscalDocumentBeingCancelled.Status == FiscalDocumentStatus_BR::Approved;
        #}
      ENDSOURCE
      SOURCE #isCancellingSalesReturn_BR
        #/// <summary>
        #///     Verifies whether the sales order is for cancelling a sales return previously entered.
        #/// </summary>
        #/// <returns>
        #///     true if the sales order is for cancelling a sales return; false otherwise.
        #/// </returns>
        #public boolean isCancellingSalesReturn_BR()
        #{
        #    SalesTable_BR       salesTable_BR;
        #    FiscalDocument_BR   fiscalDocumentBeingCancelled;
        #
        #    salesTable_BR = this.salesTable_BR();
        #
        #    if (!salesTable_BR.InvoiceRefRecID_BR)
        #    {
        #        return false;
        #    }
        #
        #    fiscalDocumentBeingCancelled = FiscalDocument_BR::findByRef(tableNum(CustInvoiceJour), salesTable_BR.InvoiceRefRecID_BR);
        #
        #    if (fiscalDocumentBeingCancelled.Direction == FiscalDocDirection_BR::Incoming)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #isCreditCardPaymentType
        #public boolean isCreditCardPaymentType()
        #{
        #    return isConfigurationkeyEnabled(configurationKeyNum(CreditCard)) && this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard;
        #}
      ENDSOURCE
      SOURCE #isCreditCheckEligible
        #/// <summary>
        #/// Checks to see whether the current sales order type is eligible for the credit limit check.
        #/// </summary>
        #/// <returns>
        #/// true if current sales order type is eligible fot the credit limit check; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Calls to the related types overwritten method.
        #/// </remarks>
        #boolean isCreditCheckEligible()
        #{
        #    return this.type().isCreditCheckEligible();
        #}
      ENDSOURCE
      SOURCE #isCreditNote_CZ
        #/// <summary>
        #///     Checks to see if any of the lines associated with the current header is a credit note.
        #/// </summary>
        #/// <returns>
        #///     True, if at least one line is a credit note.
        #/// </returns>
        #public boolean isCreditNote_CZ()
        #{
        #    SalesLine salesLine;
        #    SalesLine salesLineRefRet;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId == this.SalesId &&
        #                salesLine.InventTransIdReturn;
        #
        #    select firstonly RecId from salesLineRefRet
        #        where salesLineRefRet.SalesId == this.SalesId &&
        #                salesLineRefRet.RefReturnInvoiceTrans_W;
        #
        #
        #    return salesLine.RecId != 0 || salesLineRefRet.RecId != 0;
        #}
        #
        #
      ENDSOURCE
      SOURCE #isCreditNote_PL
        #/// <summary>
        #///     Checks to see if any of the lines associated with the current header is a credit note.
        #/// </summary>
        #/// <returns>
        #///     True, if at least one line is a credit note.
        #/// </returns>
        #public boolean isCreditNote_PL()
        #{
        #    #ISOCountryRegionCodes
        #    SalesLine salesLine;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL,#isoHU,#isoCZ,#isoLT,#isoLV,#isoEE]) && this.SalesId)
        #    {
        #        select firstonly RecId from salesLine
        #            where salesLine.SalesId == this.SalesId &&
        #                    salesLine.CreditNoteInternalRef_PL;
        #    }
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #isExcisable_IN
        #/// <summary>
        #///     Checks to see if any of the lines associated with the current header is a excise type.
        #/// </summary>
        #/// <returns>
        #///     True, if at least one line is of excise type.
        #/// </returns>
        #// <GIN>
        #public boolean isExcisable_IN()
        #{
        #    SalesLine       salesLine;
        #    TaxOnItem       taxOnItem;
        #    TaxTable        taxTable;
        #    SalesLine_IN    salesLine_IN;
        #
        #    select firstOnly RecId, SalesId, SalesQty from salesLine
        #        where salesLine.SalesId == this.SalesId &&
        #            salesLine.SalesType == SalesType::Sales &&
        #                salesLine.SalesQty > 0
        #    exists join salesLine_IN
        #        where salesLine_IN.SalesLine == salesLine.RecId &&
        #            (salesLine_IN.ExciseType_IN == ExciseType_IN::Manufacturer
        #                || salesLine_IN.ExciseType_IN == ExciseType_IN::Trader)
        #    exists join taxOnItem
        #        where taxOnItem.TaxItemGroup == salesLine.TaxItemGroup
        #    exists join taxTable
        #        where taxTable.TaxCode == taxOnItem.TaxCode &&
        #            taxTable.TaxType_IN == TaxType_IN::Excise;
        #
        #    return salesLine.RecId;
        #}
        #// </GIN>
      ENDSOURCE
      SOURCE #isInterCompanyOrder
        #boolean  isInterCompanyOrder()
        #{
        #    return (this.InterCompanyCompanyId != ''
        #        &&  this.InterCompanyOrder
        #        && !this.SkipUpdate
        #        &&  this.SalesType != SalesType::ItemReq);
        #}
      ENDSOURCE
      SOURCE #isInterCompanyPOInvoiceMatched
        #/// <summary>
        #/// Indicates whether a related intercompany purchase order was partially or fully invoiced.
        #/// </summary>
        #/// <returns>
        #/// true if the related intercompany purchase order was partially or fully invoiced; otherwise, false.
        #/// </returns>
        #public boolean isInterCompanyPOInvoiceMatched()
        #{
        #    boolean ret;
        #
        #    if (this.isInterCompanyOrder())
        #    {
        #        ret = (select firstonly crosscompany RecId from vendInvoicePurchLink
        #                where vendInvoicePurchLink.OrigPurchId == this.InterCompanyPurchId
        #                   && vendInvoicePurchLink.DataAreaId  == this.InterCompanyCompanyId).RecId != 0;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isMarkedForBankLC
        #/// <summary>
        #/// Indicates whether the sales order is marked for <c>Letter of Credit</c>.
        #/// </summary>
        #/// <returns>
        #/// true if the Sales order is marked for <c>Letter of Credit</c>; otherwise, false.
        #/// </returns>
        #public boolean isMarkedForBankLC()
        #{
        #    return this.BankDocumentType == BankDocumentType::LetterOfCredit
        #        || this.BankDocumentType == BankDocumentType::ImportCollection;
        #}
      ENDSOURCE
      SOURCE #isMarkedForBankLG
        #/// <summary>
        #/// Indicates whether the sales order is marked for <c>Letter of Guarantee</c>.
        #/// </summary>
        #/// <returns>
        #/// true if the sales order is marked for <c>Letter of Guarantee</c>; otherwise, false.
        #/// </returns>
        #public boolean isMarkedForBankLG()
        #{
        #    return this.BankDocumentType == BankDocumentType::LetterOfGuarantee;
        #}
      ENDSOURCE
      SOURCE #isOnlineOrder
        #private boolean isOnlineOrder()
        #{
        #    RetailOnlineChannelTable channelTable;
        #    RetailSalesTable retailSalesTable;
        #
        #    // find an online channel if this SO links to it
        #    select firstonly RecId from channelTable
        #        join SalesTable, RetailChannel from retailSalesTable
        #        where retailSalesTable.SalesTable == this.RecId
        #           && channelTable.RecId == retailSalesTable.RetailChannel;
        #
        #    return (channelTable.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #isRetailSale
        #/// <summary>
        #/// Indicates whether the <c>SalesTable</c> record is a Retail sales record
        #/// </summary>
        #/// <returns>
        #/// true if the <c>SalesTable</c> record is a Retail sales record; otherwise, false.
        #/// </returns>
        #public display NoYes isRetailSale()
        #{
        #    return this.retailSalesTable().RetailOrder == NoYes::Yes;
        #}
      ENDSOURCE
      SOURCE #isRetailStatement_BR
        #/// <summary>
        #/// Indicates whether the <c>SalesTable</c> record is originated from a Retail statement
        #/// </summary>
        #/// <returns>
        #/// True if the <c>SalesTable</c> record is originated from a Retail statement; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// All transactions originated at the POS have terminal ID populated. Customer orders
        #/// have also channel reference ID populate, but they are not posted through statements.
        #/// </remarks>
        #public NoYes isRetailStatement_BR()
        #{
        #    return this.retailSalesTable().RetailTerminalId != ''
        #        && this.retailSalesTable().ChannelReferenceId == '';
        #}
      ENDSOURCE
      SOURCE #jumpRefIntercompanyOriginalSalesOrder
        #/// <summary>
        #/// Serves as the jump reference for the original sales order that relates to the sales order.
        #/// </summary>
        #/// <param name="_caller">
        #/// The object that is calling the <c>SalesTable.jumpRefIntercompanyOriginalSalesOrder</c> method;
        #/// optional.
        #/// </param>
        #public void jumpRefIntercompanyOriginalSalesOrder(Object _caller = null)
        #{
        #    if (this.SalesType == SalesType::ReturnItem)
        #    {
        #        TradeInterCompany::construct(this,true).formRun(formStr(ReturnTable),_caller);
        #    }
        #    else
        #    {
        #        TradeInterCompany::construct(this,true).formRun(formStr(SalesTable),_caller);
        #    }
        #}
      ENDSOURCE
      SOURCE #jumpRefIntercompanyPurchaseOrder
        #/// <summary>
        #/// Serves as the jump reference for the intercompany purchase order that relates to the sales order.
        #/// </summary>
        #/// <param name="_caller">
        #/// The object that is calling the <c>SalesTable.jumpRefIntercompanyPurchaseOrder</c> method; optional.
        #/// </param>
        #public void jumpRefIntercompanyPurchaseOrder(Object _caller = null)
        #{
        #    TradeInterCompany::construct(this).formRun(formStr(PurchTable),_caller);
        #}
      ENDSOURCE
      SOURCE #jumpRefReturnItemNum
        #void jumpRefReturnItemNum(Object object)
        #{
        #    Args            args;
        #    FormRun         formRun;
        #    SalesTable      salesTable;
        #
        #    salesTable = this.SalesType != SalesType::ReturnItem ? SalesTable::findReturnItemNum(this.ReturnItemNum) : this;
        #
        #    args = new Args(formStr(ReturnTable));
        #    args.record(salesTable);
        #    args.caller(object);
        #
        #    // Menu item info will be used by security framework, when setting access rights to form datasources
        #    args.menuItemType(MenuItemType::Display);
        #    args.menuItemName(menuitemDisplayStr(ReturnTableDetails));
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    formRun.run();
        #    formRun.detach();
        #}
      ENDSOURCE
      SOURCE #lastConfirm
        #[SysClientCacheDataMethodAttribute(true)]
        #server display CustConfirmDocNum lastConfirm()
        #{
        #    CustConfirmSalesLink    custConfirmSalesLink;
        #    CustConfirmJour         custConfirmJour;
        #
        #    select firstonly TableId from custConfirmSalesLink
        #            index hint origSalesIdx
        #            order by ConfirmDate desc, ConfirmId desc
        #            where custConfirmSalesLink.OrigSalesId == this.SalesId
        #        join ConfirmDocNum from custConfirmJour
        #            where custConfirmJour.ConfirmId     == custConfirmSalesLink.ConfirmId   &&
        #                  custConfirmJour.ConfirmDate   == custConfirmSalesLink.ConfirmDate;
        #    return custConfirmJour.ConfirmDocNum;
        #}
      ENDSOURCE
      SOURCE #lastConfirmDate
        #[SysClientCacheDataMethodAttribute(true)]
        #server display TransDate lastConfirmDate()
        #{
        #    return (select maxof(ConfirmDate) from custConfirmSalesLink
        #                index hint origSalesIdx
        #                where custConfirmSalesLink.OrigSalesId == this.SalesId).ConfirmDate;
        #}
      ENDSOURCE
      SOURCE #lastFacture_RU
        ##define.FactureNumPosition(1)
        #public FactureExternalId_RU lastFacture_RU()
        #{
        #    return conPeek(this.lastFactureNumDate_RU(), #FactureNumPosition);
        #}
      ENDSOURCE
      SOURCE #lastFactureNumDate_RU
        #private container lastFactureNumDate_RU()
        #{
        #    FactureJour_RU       jour;
        #    RecordSortedList     list = new RecordSortedList(tableNum(FactureJour_RU)),
        #                         tmpList;
        #    CustInvoiceSalesLink invoiceSalesLink;
        #    CustInvoiceJour      invoiceJour;
        #
        #    // to avoid BP warning
        #    void dummy()
        #    {
        #    }
        #    ;
        #    select firstonly RecId from jour;
        #    if(! jour.RecId)
        #        return [ "", dateNull() ];
        #
        #    list.sortOrder(fieldNum(FactureJour_RU, FactureDate),
        #                   fieldNum(FactureJour_RU, FactureId),
        #                   fieldNum(FactureJour_RU, ModifiedDateTime),
        #                   fieldNum(FactureJour_RU, RecId));
        #
        #    while select RecId from invoiceSalesLink
        #        index hint origSalesIdx
        #        where invoiceSalesLink.OrigSalesId == this.SalesId
        #    join invoiceJour
        #        where invoiceJour.SalesId          == invoiceSalesLink.SalesId   &&
        #              invoiceJour.InvoiceId        == invoiceSalesLink.InvoiceId &&
        #              invoiceJour.InvoiceDate      == invoiceSalesLink.InvoiceDate
        #    {
        #        tmpList = invoiceJour.factureJourSortedList_RU();
        #        tmpList.first(jour);
        #        if (jour)
        #        {
        #            while (tmpList.next(jour))
        #            {
        #                dummy();
        #            } // last element
        #
        #            if (! list.find(jour))
        #            {
        #                list.ins(jour);
        #            }
        #        }
        #    }
        #
        #    list.first(jour);
        #    while (list.next(jour))
        #    {
        #        dummy();
        #    }  // last element
        #
        #    return [ jour.FactureExternalId, jour.FactureDate ];
        #}
      ENDSOURCE
      SOURCE #lastInvoice
        #/// <summary>
        #/// Returns the document number of the last invoice posted for this sales order.
        #/// </summary>
        #/// <param name="_skipVendorFulfilledInvoices">
        #/// true if sales invoices that have been fulfilled by intercompany invoices should be skipped; otherwise, false.
        #/// </param>
        #/// <returns>
        #/// The document number of the last invoice posted for this sales order.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #server display InvoiceId lastInvoice(boolean _skipVendorFulfilledInvoices = false)
        #{
        #    ProjInvoiceItem         projInvoiceItem;
        #    CustInvoiceSalesLink    custInvoiceSalesLink;
        #    VendInvoiceJour         vendInvoiceJour;
        #    container               vendInvoiceCompany = [this.InterCompanyCompanyId];
        #    InvoiceId               firstInvoiceId;
        #
        #    if (!this.ProjId)
        #    {
        #        while select InvoiceId from custInvoiceSalesLink
        #            index hint origSalesIdx
        #            order by InvoiceDate desc, InvoiceId desc
        #               where custInvoiceSalesLink.OrigSalesId == this.SalesId
        #        {
        #            if (_skipVendorFulfilledInvoices)
        #            {
        #                // Return the most recent sales invoice without a corresponding vendor invoice
        #                select crossCompany:vendInvoiceCompany RecId from vendInvoiceJour
        #                    where vendInvoiceJour.PurchId == this.InterCompanyPurchId &&
        #                          vendInvoiceJour.InvoiceId == custInvoiceSalesLink.InvoiceId;
        #
        #                if (vendInvoiceJour.RecId == 0)
        #                {
        #                    return custInvoiceSalesLink.InvoiceId;
        #                }
        #
        #                if (firstInvoiceId == '')
        #                {
        #                    firstInvoiceId = custInvoiceSalesLink.InvoiceId;
        #                }
        #            }
        #            else
        #            {
        #                return custInvoiceSalesLink.invoiceId;
        #            }
        #        }
        #
        #        // If we didn't find any sales invoice without a corresponding vendor invoice, return the first invoice ID
        #        return firstInvoiceId;
        #    }
        #
        #    // This is invoiced from Project
        #    return (select firstonly ProjInvoiceId
        #            from projInvoiceItem
        #            index hint InvoiceIdx
        #            order by InvoiceDate desc, ProjInvoiceId desc
        #            where projInvoiceItem.SalesId == this.SalesId).ProjInvoiceId;
        #}
      ENDSOURCE
      SOURCE #lastInvoice4Paym_RU
        #//BP deviation documented
        #server display Invoice4PaymId_RU lastInvoice4Paym_RU()
        #{
        #    CustInvoice4PaymSalesLink_RU custInvoice4PaymSalesLink_RU;
        #
        #    return (select reverse firstonly Invoice4PaymId from custInvoice4PaymSalesLink_RU
        #                index hint OrigSalesIdx
        #                order by Invoice4PaymDate
        #                where custInvoice4PaymSalesLink_RU.OrigSalesId == this.SalesId).Invoice4PaymId;
        #}
      ENDSOURCE
      SOURCE #lastInvoice4PaymDate_RU
        #//BP deviation documented
        #server display TransDate lastInvoice4PaymDate_RU()
        #{
        #    CustInvoice4PaymSalesLink_RU custInvoice4PaymSalesLink_RU;
        #
        #    return (select maxof(Invoice4PaymDate) from custInvoice4PaymSalesLink_RU
        #                index hint OrigSalesIdx
        #                where custInvoice4PaymSalesLink_RU.OrigSalesId == this.SalesId).Invoice4PaymDate;
        #}
      ENDSOURCE
      SOURCE #lastInvoiceDate
        #[SysClientCacheDataMethodAttribute(true)]
        #server display TransDate lastInvoiceDate()
        #{
        #    ProjInvoiceItem projInvoiceItem;
        #
        #    if (!this.ProjId)
        #    {
        #        return (select maxof(InvoiceDate) from custInvoiceSalesLink
        #                    index hint origSalesIdx
        #                    where  custInvoiceSalesLink.OrigSalesId == this.SalesId).InvoiceDate;
        #    }
        #
        #    // This is invoiced from Project
        #    return (select maxof(InvoiceDate)
        #            from projInvoiceItem
        #            where projInvoiceItem.SalesId==this.SalesId).InvoiceDate;
        #}
      ENDSOURCE
      SOURCE #lastJournals
        #server container lastJournals()
        #{
        #    #ISOCountryRegionCodes
        #
        #    container  c;
        #
        #    c = conIns(c, SalesTableType::posQuotation(),       [this.lastQuotation(),      this.lastQuotationDate()]);
        #    c = conIns(c, SalesTableType::posConfirmation(),    [this.lastConfirm(),        this.lastConfirmDate()]);
        #    c = conIns(c, SalesTableType::posPickingList(),     [this.lastPickingList(),    this.lastPickingListDate()]);
        #    c = conIns(c, SalesTableType::posPackingSlip(),     [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        #    c = conIns(c, SalesTableType::posInvoice(),         [this.lastInvoice(),        this.lastInvoiceDate()]);
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        c += ["", dateNull()];
        #        c += ["", dateNull()];
        #        c = conIns(c, SalesTableType::posInvoice4Paym_RU(), [this.lastInvoice4Paym_RU(),this.lastInvoice4PaymDate_RU()]);
        #        c = conIns(c, SalesTableType::posFacture_RU(),      this.lastFactureNumDate_RU());
        #    }
        #
        #    return c;
        #}
      ENDSOURCE
      SOURCE #lastPackingSlip
        #[SysClientCacheDataMethodAttribute(true)]
        #server display PackingSlipId lastPackingSlip()
        #{
        #    return (select firstonly PackingSlipId from custPackingSlipSalesLink
        #                index hint origSalesIdx
        #                order by DeliveryDate desc, PackingSlipId desc
        #                where custPackingSlipSalesLink.OrigSalesId  == this.SalesId).PackingSlipId;
        #}
      ENDSOURCE
      SOURCE #lastPackingSlipDate
        #[SysClientCacheDataMethodAttribute(true)]
        #server display TransDate  lastPackingSlipDate()
        #{
        #    return (select maxof(DeliveryDate) from custPackingSlipSalesLink
        #                index hint origSalesIdx
        #                where custPackingSlipSalesLink.OrigSalesId  == this.SalesId).DeliveryDate;
        #}
      ENDSOURCE
      SOURCE #lastPickingList
        #[SysClientCacheDataMethodAttribute(true)]
        #server display WMSPickingRouteID  lastPickingList()
        #{
        #    return (select firstonly PickingRouteId from wmsPickingRouteLink
        #                order by ActivationDateTime desc, PickingRouteId desc
        #                where wmsPickingRouteLink.OrigInventTransRefId == this.SalesId).PickingRouteId;
        #}
      ENDSOURCE
      SOURCE #lastPickingListDate
        #[SysClientCacheDataMethodAttribute(true)]
        #server display TransDate  lastPickingListDate()
        #{
        #    WMSPickingRoute     wmsPickingRoute;
        #    WMSPickingRouteLink wmsPickingRouteLink;
        #    utcdatetime         dateTime;
        #
        #    select maxof(ActivationDateTime) from wmsPickingRouteLink
        #        where wmsPickingRouteLink.OrigInventTransRefId == this.SalesId;
        #
        #    dateTime = wmsPickingRouteLink.ActivationDateTime;
        #
        #    if (!dateTime)
        #    {
        #        select maxof(EndDateTime) from wmsPickingRoute
        #            exists join wmsPickingRouteLink
        #                where wmsPickingRouteLink.PickingRouteId        == wmsPickingRoute.PickingRouteID
        #                &&    wmsPickingRouteLink.ActivationDateTime    == wmsPickingRoute.ActivationDateTime
        #                &&    wmsPickingRouteLink.OrigInventTransRefId  == this.SalesId;
        #
        #        dateTime = wmsPickingRoute.EndDateTime;
        #    }
        #
        #    dateTime = DateTimeUtil::applyTimeZoneOffset(dateTime,DateTimeUtil::getUserPreferredTimeZone());
        #    return DateTimeUtil::date(dateTime);
        #}
      ENDSOURCE
      SOURCE #lastQuotation
        #[SysClientCacheDataMethodAttribute(true)]
        #client server display QuotationDocNum lastQuotation()
        #{
        #    CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;
        #    CustQuotationConfirmJour        custQuotationConfirmJour;
        #
        #    if (this.QuotationId)
        #    {
        #        select firstonly TableId from custQuotationConfirmSalesLink
        #                order by QuotationDate desc, QuotationConfirmId desc
        #                where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId
        #            join QuotationDocNum from custQuotationConfirmJour
        #                where custQuotationConfirmJour.QuotationConfirmId   == custQuotationConfirmSalesLink.QuotationConfirmId   &&
        #                      custQuotationConfirmJour.QuotationDate        == custQuotationConfirmSalesLink.QuotationDate &&
        #                      custQuotationConfirmJour.QuotationType        == QuotationType::Sales;
        #    }
        #    return custQuotationConfirmJour.QuotationDocNum;
        #}
      ENDSOURCE
      SOURCE #lastQuotationDate
        #[SysClientCacheDataMethodAttribute(true)]
        #client server display TransDate lastQuotationDate()
        #{
        #    TransDate   lastQuotationDate;
        #
        #    if (this.QuotationId)
        #    {
        #        lastQuotationDate = (select maxof(QuotationDate) from custQuotationConfirmSalesLink
        #                where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId).QuotationDate;
        #    }
        #    return lastQuotationDate;
        #}
      ENDSOURCE
      SOURCE #lineMapping
        #/// <summary>
        #/// Retrieves the table ID of the table considered the line table in the current header-line
        #/// relationship.
        #/// </summary>
        #/// <returns>
        #/// ID of the <c>SalesLine</c> table.
        #/// </returns>
        #public RefTableId lineMapping()
        #{
        #    return tableNum(SalesLine);
        #}
      ENDSOURCE
      SOURCE #lineNumForCreditNote
        #/// <summary>
        #/// Gets the line number of the sales credit note line.
        #/// </summary>
        #/// <returns>
        #/// The line number.
        #/// </returns>
        #public server LineNum lineNumForCreditNote()
        #{
        #    SalesLine   tmpSalesLine;
        #    LineNum     lineCount = 0;
        #
        #    select RecId from tmpSalesLine
        #        where tmpSalesLine.SalesId == this.SalesId &&
        #            tmpSalesLine.CreditNoteInternalRef_PL != 0;
        #
        #    if (tmpSalesLine.RecId)
        #    {
        #        // Force the new line to have the last LineNum
        #        select count (LineNum) from tmpSalesLine
        #            where tmpSalesLine.SalesId == this.SalesId;
        #
        #        lineCount = tmpSalesLine.LineNum;
        #    }
        #
        #    return lineCount;
        #}
      ENDSOURCE
      SOURCE #markupAllowed
        #public boolean markupAllowed()
        #{
        #    return this.type().markupAllowed();
        #}
      ENDSOURCE
      SOURCE #mayBankDocumentTypeBeBankLCExport
        #/// <summary>
        #/// Checks whether the Bank document type can be set to the types of Bank LC Export.
        #/// </summary>
        #/// <returns>
        #/// true if it is allowed; otherwise, false.
        #/// </returns>
        #public boolean mayBankDocumentTypeBeBankLCExport()
        #{
        #    return this.SalesType           == SalesType::Sales
        #        && this.SalesStatus         == SalesStatus::Backorder
        #        && this.InterCompanyOrder   == NoYes::No;
        #}
      ENDSOURCE
      SOURCE #mayBankDocumentTypeBeBankLG
        #/// <summary>
        #/// Indicates whether the <c>Bank</c> document type can be set to the types of <c>Bank LG</c>.
        #/// </summary>
        #/// <returns>
        #/// true if the document type can be set to the specified types; otherwise, false.
        #/// </returns>
        #public boolean mayBankDocumentTypeBeBankLG()
        #{
        #    // It is not allowed to create LG on sales order if
        #    // the related project's bank document type is set to LG.
        #    return !(this.ProjId && ProjTable::find(this.ProjId).isMarkedForBankLG());
        #}
      ENDSOURCE
      SOURCE #mayConfirmationBeUpdated
        #boolean mayConfirmationBeUpdated()
        #{
        #    return this.type().mayConfirmationBeUpdated();
        #}
      ENDSOURCE
      SOURCE #mayInvoice4PaymBeUpdated_RU
        #public boolean mayInvoice4PaymBeUpdated_RU()
        #{
        #    return this.type().mayInvoice4PaymBeUpdated_RU();
        #}
        #
      ENDSOURCE
      SOURCE #mayInvoiceBeUpdated
        #boolean mayInvoiceBeUpdated()
        #{
        #    return this.type().mayInvoiceBeUpdated();
        #}
      ENDSOURCE
      SOURCE #mayPackingSlipBeUpdated
        #boolean mayPackingSlipBeUpdated()
        #{
        #    return this.type().mayPackingSlipBeUpdated();
        #}
      ENDSOURCE
      SOURCE #mayPickingListBeRegistered
        #boolean mayPickingListBeRegistered()
        #{
        #    return this.type().mayPickingListBeRegistered();
        #}
      ENDSOURCE
      SOURCE #mayPickingListBeUpdated
        #boolean mayPickingListBeUpdated()
        #{
        #    return this.type().mayPickingListBeUpdated();
        #}
      ENDSOURCE
      SOURCE #mayProjectPackingSlipBeUpdated
        #boolean mayProjectPackingSlipBeUpdated()
        #{
        #    return this.type().mayProjectPackingSlipBeUpdated();
        #}
      ENDSOURCE
      SOURCE #mcrAllowOpenOrder
        #/// <summary>
        #/// Determines if the sales order is allowed to remain in the open order
        #/// status.
        #/// </summary>
        #/// <returns>
        #/// true if the sales order is allowed to remain in the open order status; otherwise, false.
        #/// </returns>
        #boolean mcrAllowOpenOrder()
        #{
        #    return this.type().mcrAllowOpenOrder();
        #}
      ENDSOURCE
      SOURCE #mcrAllowStatusRollback
        #/// <summary>
        #///     Validates if the sales order status can be rolled back or not.
        #/// </summary>
        #/// <returns>
        #///     true if the sales order status can be rolled back; otherwise, false.
        #/// </returns>
        #public server boolean mcrAllowStatusRollback()
        #{
        #    boolean ok = true;
        #    SalesLine salesLineLocal;
        #    MCRSalesLineDropShipment mcrSalesLineDropShipmentLocal;
        #
        #    if (this.SalesStatus != SalesStatus::Backorder)
        #    {
        #        // If the order is a return and the status is no longer open,
        #        // don't allow the user to rollback which also makes it so the modify button is disabled.
        #        if (this.SalesType == SalesType::ReturnItem)
        #        {
        #            ok = false;
        #        }
        #        else
        #        {
        #            select firstonly RecId from salesLineLocal
        #                where salesLineLocal.SalesId == this.SalesId
        #                    && salesLineLocal.SalesStatus == SalesStatus::Canceled;
        #            if (salesLineLocal)
        #            {
        #                ok = false;
        #            }
        #            else
        #            {
        #                // Allow changes as long as PO has not been released to the vendor.
        #                // If any line is a drop ship and released to the customer, do not allow rollback
        #                select firstonly RecId from salesLineLocal
        #                    where salesLineLocal.SalesId == this.SalesId
        #                        exists join mcrSalesLineDropShipmentLocal
        #                            where mcrSalesLineDropShipmentLocal.DropShipment == NoYes::Yes
        #                                && mcrSalesLineDropShipmentLocal.DropShipStatus != MCRDropShipStatus::ToBeDropShipped
        #                                && mcrSalesLineDropShipmentLocal.SalesLine == salesLineLocal.RecId;
        #                if (salesLineLocal)
        #                {
        #                    ok = false;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #mcrAnySalesLinesNegative
        #/// <summary>
        #/// Checks if any <c>SalesLine</c> records have a negative quantity.
        #/// </summary>
        #/// <returns>
        #/// true if there are any <c>SalesLine</c> records that have a negative quantity; otherwise, false.
        #/// </returns>
        #boolean mcrAnySalesLinesNegative()
        #{
        #    SalesLine salesLine;
        #    boolean   ret = false;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId == this.SalesId
        #            && salesLine.LineDeliveryType  != LineDeliveryType::OrderLineWithMultipleDeliveries
        #            && salesLine.SalesStatus       != SalesStatus::Canceled && salesLine.SalesQty          <  0;
        #
        #    if (salesLine.RecId)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mcrApplyPostageDisc
        #/// <summary>
        #/// Calculates and applies any postage discounts to the postage of an order.
        #/// </summary>
        #/// <param name="_totalPostageValue">
        #/// Current value of postage for a sales order.
        #/// </param>
        #/// <param name="_orderTotal">
        #/// Total order value for a sales order.
        #/// </param>
        #/// <returns>
        #/// The amount the postage value was discounted.
        #/// </returns>
        #public AmountCur mcrApplyPostageDisc(AmountCur _totalPostageValue, AmountCur _orderTotal)
        #{
        #    AmountCur   discAmount;
        #    AmountCur   discPercent;
        #    AmountCur   discountedAmount;
        #
        #    if (_totalPostageValue)
        #    {
        #        [discAmount, discPercent] = PriceDisc::mcrFindPostageDisc(this, _orderTotal);
        #
        #        //Customization can be made to reduce postage amount by postage discount.
        #    }
        #
        #    return discountedAmount;
        #}
      ENDSOURCE
      SOURCE #mcrCheckShipComplete
        #/// <summary>
        #/// Determines whether the sales order should be shipped as a whole
        #/// </summary>
        #/// <returns>
        #/// true if the order should be shipped as a whole; otherwise, false.
        #/// </returns>
        #public boolean mcrCheckShipComplete()
        #{
        #    InventTrans         inventTrans;
        #    SalesLine           salesLine;
        #    boolean             ret = false;
        #    InventTransOrigin   inventTransOrigin;
        #    MCRSalesLine        mcrSalesLine;
        #
        #    if (!this.mcrSalesTableShipping().ShipComplete)
        #    {
        #        // If ship complete flag not on then check passes.
        #        ret = true;
        #    }
        #    else
        #    {
        #        // If there is an open quantity on any lines, the order is not going to ship complete.
        #        select firstonly RecId from inventTrans
        #            where (inventTrans.StatusIssue == StatusIssue::OnOrder
        #                || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
        #            join RecId from inventTransOrigin
        #            join RecId from salesLine
        #            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        #                && inventTransOrigin.InventTransId == salesLine.InventTransId
        #                && salesLine.SalesId == this.SalesId
        #                && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
        #            outer join RecId from mcrSalesLine
        #            where mcrSalesLine.SalesLine == salesLine.RecId
        #                && !mcrSalesLine.ContinuityScheduleId;
        #
        #        if (!inventTrans.RecId)
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mcrCreateExchangeHeader
        #/// <summary>
        #/// Creates an exchange sales order.
        #/// </summary>
        #/// <param name="_salesTableOriginal">
        #/// The original <c>SalesTable</c> record for which this method is creating an exchange; optional.
        #/// </param>
        #/// <param name="_salesParameters">
        #/// The <c>SalesParameters</c> record used in the creation of the exchange order.
        #/// </param>
        #/// <returns>
        #/// The newly created <c>SalesTable</c> record for the exchange order.
        #/// </returns>
        #public SalesTable mcrCreateExchangeHeader(SalesTable _salesTableOriginal = null, SalesParameters _salesParameters = null)
        #{
        #    NumberSeq           numberSeq;
        #    SalesTable          salesTableCopy;
        #    SalesTable          salesTableExchange;
        #    SalesTable          salesTableOriginal;
        #    SalesParameters     salesParameters;
        #    SalesTableLinks     salesTableLinks;
        #    MCROrderParameters  mcrOrderParameters = MCROrderParameters::find();
        #    Catalog             catalog;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #    MCRReturnSalesTable mcrReturnSalesTableLocal;
        #    MCRSalesTable       mcrSalesTable, mcrSalesTableOriginal;
        #
        #    if (this.ReturnReplacementId)
        #    {
        #        return this.mcrSalesTableExchange();
        #    }
        #
        #    try
        #    {
        #        ttsbegin;
        #
        #        if (_salesTableOriginal)
        #        {
        #            salesTableOriginal = _salesTableOriginal;
        #        }
        #        else
        #        {
        #            salesTableOriginal = this.mcrSalesTableOriginal();
        #        }
        #
        #        if (_salesParameters)
        #        {
        #            salesParameters = _salesParameters;
        #        }
        #        else
        #        {
        #            salesParameters = SalesParameters::find();
        #        }
        #
        #        // load exchange header.
        #        numberSeq = NumberSeq::newGetNum(SalesParameters::numRefSalesId(), false, true);
        #        mcrSalesTable = salesTableExchange.mcrSalesTable();
        #        mcrSalesTableOriginal = salesTableOriginal.mcrSalesTable();
        #        salesTableExchange.SalesId = numberSeq.num();
        #        salesTableExchange.SalesType = SalesType::Sales;
        #        salesTableExchange.SalesStatus = SalesStatus::Backorder;
        #
        #        if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::Original)
        #        {
        #            mcrSalesTable.SourceId = mcrSalesTableOriginal.SourceId;
        #
        #            // If the original source code is not valid, use the default one specified in sales parameters.
        #            catalog = Catalog::find(MCRSourceCodeSetup::find(mcrSalesTable.SourceId).Catalog);
        #
        #            if (!mcrOrderParameters.mcrAllowExpiredSourceCode
        #                && (catalog.ValidFrom > systemDateGet()
        #                || catalog.ValidTo < systemDateGet()) )
        #            {
        #                mcrSalesTable.SourceId = mcrOrderParameters.mcrDefaultExchangeSourceID;
        #            }
        #        }
        #        else if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::DefaultSourceCode)
        #        {
        #            mcrSalesTable.SourceId = mcrOrderParameters.mcrDefaultExchangeSourceID;
        #        }
        #
        #        // Default to the original sales order.
        #        salesTableExchange.DlvMode = salesTableOriginal.DlvMode;
        #
        #        salesTableExchange.CustAccount = this.CustAccount;
        #        salesTableExchange.initFromCustTable();
        #
        #        if (salesTableOriginal.InvoiceAccount)
        #        {
        #            salesTableExchange.InvoiceAccount = salesTableOriginal.InvoiceAccount;
        #        }
        #        mcrReturnSalesTable = salesTableExchange.mcrReturnSalesTable();
        #        mcrReturnSalesTable.IsExchange = NoYes::Yes;
        #        salesTableExchange.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
        #        SalesCalcAvailableDlvDates::initDateFields(salesTableExchange);
        #
        #        salesTableExchange.SmmCampaignId = salesTableOriginal.SmmCampaignId;
        #        salesTableExchange.ContactPersonId = salesTableOriginal.ContactPersonId;
        #        mcrSalesTable.SmmTMCallListId = mcrSalesTableOriginal.SmmTMCallListId;
        #        salesTableExchange.mcrPackMCRSalesTable(mcrSalesTable);
        #
        #        // Default to the original sales order.
        #        if (salesTableOriginal.DlvMode)
        #        {
        #            salesTableExchange.DlvMode = salesTableOriginal.DlvMode;
        #        }
        #
        #        if (salesTableExchange.validateWrite())
        #        {
        #            salesTableExchange.insert();
        #
        #            // Link exchange order to return.
        #            salesTableCopy.data(this);
        #            this.selectForUpdate(true);
        #            this.reread();
        #            this.data(salesTableCopy);
        #            this.ReturnReplacementId = salesTableExchange.SalesId;
        #            this.ReturnReplacementCreated = NoYes::Yes;
        #
        #            if (RetailMCRChannelTable::mcrEnableOrderCompletion(_salesTableOriginal))
        #            {
        #                mcrReturnSalesTableLocal = this.mcrReturnSalesTable();
        #                mcrReturnSalesTableLocal.ApplyCreditToExchange = NoYes::Yes;
        #                mcrReturnSalesTableLocal.AdvanceExchange = MCRAdvanceExchange::DoNotRelease;
        #                mcrReturnSalesTableLocal.AdvanceCredit = NoYes::No;
        #                this.mcrPackMCRReturnSalesTable(mcrReturnSalesTableLocal);
        #            }
        #            this.doUpdate();
        #
        #            if (this.ReturnReplacementId)
        #            {
        #                salesTableLinks.MainSalesId = this.mcrReturnSalesTable().OriginalSalesId;
        #                salesTableLinks.SubSalesId = this.ReturnReplacementId;
        #
        #                if (salesTableLinks.validateWrite())
        #                {
        #                    salesTableLinks.insert();
        #                }
        #                else
        #                {
        #                    throw error("@SYS104318");
        #                }
        #            }
        #        }
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Deadlock)
        #    {
        #        retry;
        #    }
        #    catch (Exception::Error)
        #    {
        #        ttsabort;
        #        throw error("@SYS93835");
        #    }
        #
        #    return salesTableExchange;
        #}
      ENDSOURCE
      SOURCE #mcrDeliveryInfo
        #/// <summary>
        #/// Gets the customer's default delivery address.
        #/// </summary>
        #/// <returns>
        #/// The delivery information for the customer's default delivery address.
        #/// </returns>
        #public display MCRString100 mcrDeliveryInfo()
        #{
        #    str deliveryInfo;
        #
        #    if (this.DeliveryName)
        #    {
        #        deliveryInfo = this.DeliveryName;
        #    }
        #    if (this.deliveryAddress())
        #    {
        #       deliveryInfo = deliveryInfo + '\n' + this.deliveryAddress().Address + " ";
        #    }
        #    return deliveryInfo;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayCustCreditMax
        #/// <summary>
        #/// Displays the maximum credit allowed for the specified customer.
        #/// </summary>
        #/// <returns>
        #/// The maximum credit allowed for the specified customer.
        #/// </returns>
        #public display CustCreditMaxMST mcrDisplayCustCreditMax()
        #{
        #    return CustTable::find(this.CustAccount).CreditMax;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayDeliveryName
        #/// <summary>
        #///  Displays the delivery name from the <c>SalesTable</c> unless the order lines
        #///  ship to a different address.
        #/// </summary>
        #/// <returns>
        #/// The delivery name on the <c>SalesTable</c> if the order lines have the same ship to address;
        #/// otherwise, a message saying to check the line delivery information.
        #/// </returns>
        #public display CustName mcrDisplayDeliveryName()
        #{
        #    if (this.mcrLineHasDifferentAddress())
        #    {
        #        return "@MCR12684";
        #    }
        #    else
        #    {
        #        return this.DeliveryName;
        #    }
        #
        #}
        #
      ENDSOURCE
      SOURCE #mcrDisplayLastShipDate
        #/// <summary>
        #/// Displays the last date something was shipped on the order.
        #/// </summary>
        #/// <returns>
        #/// The last date something was shipped on the order.
        #/// </returns>
        #public display TransDate mcrDisplayLastShipDate()
        #{
        #    CustPackingSlipJour custPackingSlipJour;
        #    TransDate           dateCreated = dateNull();
        #
        #    select maxof(CreatedDateTime) from custPackingSlipJour
        #        where   custPackingSlipJour.RefNum == RefNum::SalesOrder
        #            && custPackingSlipJour.SalesId == this.SalesId;
        #
        #    if (custPackingSlipJour)
        #    {
        #        dateCreated = DateTimeUtil::date(custPackingSlipJour.CreatedDateTime);
        #    }
        #    return dateCreated;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayMiscChargesTotal
        #/// <summary>
        #/// Displays the total amount of miscellaneous charges.
        #/// </summary>
        #/// <returns>
        #/// The total amount of miscellaneous charges.
        #/// </returns>
        #public display MarkupSumSales mcrDisplayMiscChargesTotal()
        #{
        #    MCRSalesOrderTotals  mcrSalesOrderTotals;
        #
        #    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #
        #    return mcrSalesOrderTotals.getTotalMarkup();
        #}
      ENDSOURCE
      SOURCE #mcrDisplayOnHold
        #/// <summary>
        #/// Displays the image for a held order.
        #/// </summary>
        #/// <returns>
        #/// The image for a held order.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display MCRResourceNum mcrDisplayOnHold()
        #{
        #    #MCRresAppl
        #    int image = 0;
        #
        #    if (this.mcrOrderStopped
        #        && MCRHoldCodeTrans::findActiveOrderHolds(this.SalesId))
        #    {
        #        image = #MCRImage_OnHold;
        #    }
        #    return image;
        #}
        #
      ENDSOURCE
      SOURCE #mcrDisplayOrderNotes
        #/// <summary>
        #/// Collects all of the order notes into one string and display them.
        #/// </summary>
        #/// <returns>
        #/// A string of all of the order notes.
        #/// </returns>
        #public display Notes mcrDisplayOrderNotes()
        #{
        #    DocuRef             docuRef;
        #    MCROrderParameters  mcrOrderParameters;
        #    TextBuffer          textBuffer = new TextBuffer();
        #    SelectableDataArea  refCompanyID = curext();
        #    TransDate           dateCreated;
        #    SalesParameters     salesParameters = SalesParameters::find();
        #
        #    mcrOrderParameters = MCROrderParameters::find();
        #
        #    // Don't show fraud or hold code notes because these are shown on other tabs.
        #    while select docuRef order by RecId desc
        #        where   docuRef.RefCompanyId == refCompanyID
        #            && docuRef.RefTableId == tableNum(SalesTable)
        #            && docuRef.RefRecId == this.RecId
        #            && docuRef.TypeId != salesParameters.mcrHoldCodeNoteType
        #            && docuRef.TypeId != mcrOrderParameters.mcrFraudCommentTypeId
        #    {
        #        textBuffer.appendText("@MCR28844");
        #        textBuffer.appendText(' ');
        #        textBuffer.appendText(docuRef.CreatedBy);
        #        textBuffer.appendText(' ');
        #        textBuffer.appendText("@MCR31247");
        #        textBuffer.appendText(' ');
        #        dateCreated = DateTimeUtil::date(docuRef.CreatedDateTime);
        #        textBuffer.appendText(date2StrUsr(dateCreated, DateFlags::FormatAll));
        #        textBuffer.appendText(' ');
        #        textBuffer.appendText("@SYS77038");
        #        textBuffer.appendText(' ');
        #        textBuffer.appendText(docuRef.Notes);
        #        textBuffer.appendText('\n\n');
        #    }
        #    return textBuffer.getText();
        #}
      ENDSOURCE
      SOURCE #mcrDisplayOrderTotal
        #/// <summary>
        #/// Displays the total amount of the sales order.
        #/// </summary>
        #/// <returns>
        #/// The total amount of the sales order.
        #/// </returns>
        #public display AmountCur mcrDisplayOrderTotal()
        #{
        #    MCRSalesOrderTotals  mcrSalesOrderTotals;
        #
        #    if (this.RecId)
        #    {
        #        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #        return mcrSalesOrderTotals.getTotalOrder();
        #    }
        #    else
        #    {
        #        return 0;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrDisplayOrderTotalLessTax
        #/// <summary>
        #///  Gets the order total less tax.
        #/// </summary>
        #/// <returns>
        #/// The order total less tax.
        #/// </returns>
        #public display AmountCur mcrDisplayOrderTotalLessTax()
        #{
        #    MCRSalesOrderTotals     mcrSalesOrderTotals;
        #    AmountCur               totalWithoutTax;
        #
        #    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #    totalWithoutTax = mcrSalesOrderTotals.getTotalOrder() - mcrSalesOrderTotals.getTotalTax();
        #
        #    return totalWithoutTax;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayOverallOldestOverUnderpaidDate
        #/// <summary>
        #/// Gets the oldest order payment created date that is over the customers credit limit.
        #/// </summary>
        #/// <returns>
        #/// The oldest order payment created date that is over the customers credit limit.
        #/// </returns>
        #public display TransDate mcrDisplayOverallOldestOverUnderpaidDate()
        #{
        #    MCRCustPaymTable    mcrCustPaymTable;
        #    TransDate           dateCreated = dateNull();
        #
        #    select minof(CreatedDateTime) from mcrCustPaymTable
        #        where (mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted);
        #
        #    if (mcrCustPaymTable)
        #    {
        #        dateCreated = DateTimeUtil::date(mcrCustPaymTable.CreatedDateTime);
        #    }
        #    return dateCreated;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayOverallTotalOrders
        #/// <summary>
        #/// Gets the number of orders in the <c>MCRCustPaymTable</c> that are
        #/// over the customers credit limit.
        #/// </summary>
        #/// <returns>
        #/// The number of orders in the <c>MCRCustPaymTable</c> that are
        #/// over the customers credit limit.
        #/// </returns>
        #public display Integer mcrDisplayOverallTotalOrders()
        #{
        #    MCRCustPaymTable mcrCustPaymTable;
        #
        #    select count(RecId) from mcrCustPaymTable
        #        where (mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted);
        #
        #    return (any2int(mcrCustPaymTable.RecId));
        #}
      ENDSOURCE
      SOURCE #mcrDisplayPhone
        #/// <summary>
        #/// Displays the phone contact information of the customer on the sales order.
        #/// </summary>
        #/// <returns>
        #/// The phone contact information of the customer on the sales order.
        #/// </returns>
        #public display LogisticsElectronicAddressLocator mcrDisplayPhone()
        #{
        #    LogisticsLocation           logisticsLocation;
        #    LogisticsElectronicAddress  logisticsElectronicAddress;
        #
        #    select firstonly RecId, ParentLocation from logisticsLocation
        #        where logisticsLocation.ParentLocation == this.deliveryAddress().Location
        #    join Locator, Location, Type from logisticsElectronicAddress
        #        where logisticsElectronicAddress.Location == logisticsLocation.RecId
        #        && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;
        #
        #    return logisticsElectronicAddress.Locator;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayProductTotal
        #/// <summary>
        #/// Displays the total amount of the product.
        #/// </summary>
        #/// <returns>
        #/// The total amount of the product.
        #/// </returns>
        #public display AmountCur mcrDisplayProductTotal()
        #{
        #    MCRSalesOrderTotals  mcrSalesOrderTotals;
        #
        #    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #
        #    return mcrSalesOrderTotals.getTotalProduct();
        #}
      ENDSOURCE
      SOURCE #mcrDisplayTaxTotal
        #/// <summary>
        #/// Displays the total tax amount for the sales order.
        #/// </summary>
        #/// <returns>
        #/// The total tax amount for the sales order.
        #/// </returns>
        #public display TaxAmountCur mcrDisplayTaxTotal()
        #{
        #    MCRSalesOrderTotals  mcrSalesOrderTotals;
        #
        #    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #
        #    return mcrSalesOrderTotals.getTotalTax();
        #}
      ENDSOURCE
      SOURCE #mcrDisplayTender
        #/// <summary>
        #/// Returns the tender type being used to pay for the order.
        #/// </summary>
        #/// <returns>
        #/// If only one payment then the tender used to pay for the order;
        #///     otherwise; a label indicating multiple.
        #/// </returns>
        #public display RetailTenderTypeId mcrDisplayTender()
        #{
        #    MCRCustPaymTable    mcrCustPaymTable;
        #    PaymMode            paymMethod;
        #
        #    while select TenderTypeId from mcrCustPaymTable
        #        where mcrCustPaymTable.RefTableId == this.TableId
        #        && mcrCustPaymTable.RefRecId == this.RecId
        #        && mcrCustPaymTable.Amount != 0
        #    {
        #        if (paymMethod)
        #        {
        #            return "@SYS78137";
        #        }
        #
        #        paymMethod = mcrCustPaymTable.TenderTypeId;
        #    }
        #
        #    return paymMethod;
        #}
      ENDSOURCE
      SOURCE #mcrDisplayTotalDisc
        #/// <summary>
        #/// Displays the total ending discount amount for the sales order.
        #/// </summary>
        #/// <returns>
        #/// The total ending discount amount for the sales order.
        #/// </returns>
        #public display SalesEndDiscAmount mcrDisplayTotalDisc()
        #{
        #    MCRSalesOrderTotals  mcrSalesOrderTotals;
        #
        #    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #
        #    return mcrSalesOrderTotals.getTotalDisc();
        #}
      ENDSOURCE
      SOURCE #mcrDlvModeModified
        #/// <summary>
        #/// Defaults the <c>MCRExpedite</c> flag based on the delivery mode.
        #/// </summary>
        #void mcrDlvModeModified()
        #{
        #    MCRExpedite             mcrExpedite;
        #    MCRSalesTableShipping   mcrSalesTableShipping = this.mcrSalesTableShipping();
        #
        #    mcrExpedite = DlvMode::find(this.DlvMode).mcrExpedite;
        #
        #    if (mcrSalesTableShipping.Expedite != mcrExpedite)
        #    {
        #        mcrSalesTableShipping.Expedite = mcrExpedite;
        #        this.mcrPackMCRSalesTableShipping(mcrSalesTableShipping);
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrEvalSalesOrderType
        #/// <summary>
        #/// Evaluates the sales order type.
        #/// </summary>
        #/// <returns>
        #/// The sales order type.
        #/// </returns>
        #/// <remarks>
        #/// A sales order based on the current MCR functionality can be of a few different types.
        #/// Regular order, that has custpaym record tie to the sales order.
        #/// Installment only  that has custpaymrecord tied custpaymsched lines and may or may not have
        #///  a record that needs to be authorized.
        #/// Continuity only that has a custpaym record tied to the continuity cust header and may or may not
        #///  a record that needs to be authorized.
        #/// Regular order and installment.If the installment has a record that needs to be authorized
        #/// Regular order and continuity.
        #/// Regular order, installment and continuity.
        #/// </remarks>
        #MCRSalesOrderType mcrEvalSalesOrderType()
        #{
        #    MCRSalesOrderTotals             mcrSalesOrderTotals;
        #    MCRSalesOrderType               mcrSalesOrderType;
        #    AmountCur                       totalOrderAmount;
        #    AmountCur                       totalOnInstallment;
        #    AmountCur                       totalContinuityAmt;
        #    AmountCur                       installmentTotal;
        #    AmountCur                       remainingOrder;
        #    AmountCur                       invoicedOrder;
        #    MCRCustPaymTable                mcrCustPaymTable;
        #    MCRSalesTable                   mcrSalesTable;
        #    boolean                         installmentExist;
        #
        #    if (this.mcrIsCallCenter())
        #    {
        #        mcrSalesTable = this.mcrSalesTable();
        #
        #        // Retrieve the custpaymtable record to ensure that some part of the order
        #        // was paid down before deciding that this order is an order and an installment.
        #        select firstonly mcrCustPaymTable
        #            where mcrCustPaymTable.RefTableId == tableNum(SalesTable)
        #            && mcrCustPaymTable.RefRecId == this.RecId
        #            && mcrCustPaymTable.Amount > 0;
        #
        #        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #
        #        // Assign all totals buckets from salesordertotals
        #        totalOrderAmount = mcrSalesOrderTotals.getTotalOrder();
        #        remainingOrder = mcrSalesOrderTotals.getRemainingOrder();
        #        invoicedOrder = mcrSalesOrderTotals.getInvoicedOrder();
        #
        #        if (invoicedOrder != 0)
        #        {
        #            totalOrderAmount = remainingOrder+invoicedOrder;
        #        }
        #        totalContinuityAmt = mcrSalesOrderTotals.getContinuityPayNow();
        #        totalOnInstallment = mcrSalesOrderTotals.getInstallmentEligibleRemaining();
        #        // Assign totals bucket from the installment totals if applicable.
        #        installmentTotal = mcrSalesOrderTotals.getInstallmentEligibleTotal();
        #
        #        installmentExist = MCRInstallmentPlanSalesTable::existSalesId(this.SalesId);
        #        if (!mcrSalesTable.ContinuityOrder
        #            && !installmentExist)
        #        {
        #            mcrSalesOrderType = MCRSalesOrderType::RegularOrder;
        #        }
        #        else if (mcrSalesTable.ContinuityOrder
        #            && !installmentExist)
        #        {
        #            // Determine if this is a continuity order and a regular order or
        #            // just a continuity order.
        #            if ((totalOrderAmount - totalContinuityAmt) == 0)
        #            {
        #                mcrSalesOrderType = MCRSalesOrderType::Continuityonly;
        #            }
        #            else
        #            {
        #                mcrSalesOrderType = MCRSalesOrderType::OrderAndContinuity;
        #            }
        #        }
        #        else if (!mcrSalesTable.ContinuityOrder
        #            && installmentExist)
        #        {
        #            // Set the sales order type to installment only unless
        #            // we determine otherwise.
        #            mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;
        #
        #            // For installments not only the sales order totals but the installment
        #            // totals also needs to be considered.
        #            if (installmentTotal == 0)
        #            {
        #                if (totalOrderAmount - totalOnInstallment == 0)
        #                {
        #                    mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;
        #                }
        #                else
        #                {
        #                    if (mcrCustPaymTable)
        #                    {
        #                        mcrSalesOrderType = MCRSalesOrderType::OrderAndInstallment;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                if (totalOrderAmount == installmentTotal)
        #                {
        #                    mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;
        #                }
        #                else
        #                {
        #                    if (mcrCustPaymTable)
        #                    {
        #                        mcrSalesOrderType = MCRSalesOrderType::OrderAndInstallment;
        #                    }
        #                }
        #            }
        #        }
        #        else if (mcrSalesTable.ContinuityOrder
        #            && installmentExist)
        #        {
        #            mcrSalesOrderType = MCRSalesOrderType::MixedOrder;
        #        }
        #    }
        #
        #    return mcrSalesOrderType;
        #}
      ENDSOURCE
      SOURCE #mcrExistNonOnAccountPaym
        #/// <summary>
        #/// Validates whether payments with types other than on account exist for the
        #/// sales order.
        #/// </summary>
        #/// <returns>
        #/// true if payments with types other than on account exist for the sales order;
        #/// otherwise, false.
        #/// </returns>
        #boolean mcrExistNonOnAccountPaym()
        #{
        #    MCRCustPaymTable    mcrCustPaymTable;
        #    boolean             nonOnAccountPaymentsExist = false;
        #
        #    select firstonly RecId from mcrCustPaymTable
        #        where mcrCustPaymTable.RefTableId == tableNum(SalesTable)
        #            && mcrCustPaymTable.RefRecId == this.RecId
        #            && mcrCustPaymTable.CustPaymType != MCRCustPaymType::OnAccount;
        #
        #        if (mcrCustPaymTable.RecId)
        #        {
        #            nonOnAccountPaymentsExist = true;
        #        }
        #
        #    return nonOnAccountPaymentsExist;
        #}
      ENDSOURCE
      SOURCE #mcrExistOpenReturn
        #/// <summary>
        #/// Determines whether an open return order exists for this sales order.
        #/// </summary>
        #/// <returns>
        #/// true if a return order exists; otherwise, false.
        #/// </returns>
        #public boolean mcrExistOpenReturn()
        #{
        #    SalesTable salesTable;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #
        #    select firstonly RecId from salesTable
        #        where salesTable.ReturnStatus == ReturnStatusHeader::Open
        #        exists join mcrReturnSalesTable
        #        where mcrReturnSalesTable.SalesTable == salesTable.RecId
        #            && mcrReturnSalesTable.OriginalSalesId == this.SalesId;
        #
        #    if (salesTable.RecId)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrFraudHold
        #/// <summary>
        #/// Validates whether the order has a fraud hold or not.
        #/// </summary>
        #/// <param name="_clearedHolds">
        #/// A <c>Boolean</c> value defining whether the method will check for cleared holds on the order.
        #/// </param>
        #/// <param name="_isNowOnHold">
        #/// A <c>Boolean</c> value defining whether the method will check to see if
        #/// the order is currently on hold; optional.
        #/// </param>
        #/// <returns>
        #/// A <c>Boolean</c> value defining whether the order has or has had fraud holds,
        #/// based on the passed parameters.
        #/// </returns>
        #/// <remarks>
        #/// Parameter is whether or not you want to only check cleared holds.
        #/// If <c>_clearedHolds</c> equals true:  returns true if order has fraud hold codes and has been cleared. else false
        #/// If <c>_clearedHolds</c> equals false: returns true if an order has ever had fraud hold codes. else false
        #/// If <c>_IsNowOnHold</c> equals true: returns true if an order is now on hold and hasn't been cleared yet.
        #/// </remarks>
        #boolean mcrFraudHold(boolean _clearedHolds, boolean _isNowOnHold = false)
        #{
        #    MCRHoldCodeTrans    mcrHoldCodeTrans;
        #    MCROrderParameters  mcrOrderParameters;
        #    boolean             ret = false;
        #
        #    // Go through the hold codes looking for hold codes that are fraud holds.
        #    mcrOrderParameters = MCROrderParameters::find();
        #
        #    while select mcrHoldCode, mcrCleared from mcrHoldCodeTrans
        #        where mcrHoldCodeTrans.InventRefId == this.SalesId
        #        && (mcrHoldCodeTrans.mcrHoldCode == mcrOrderParameters.mcrFraudHoldCode
        #        || mcrHoldCodeTrans.mcrHoldCode == mcrOrderParameters.mcrFraudManualHoldCode)
        #    {
        #        // If on hold but not cleared yet.
        #        if (_isNowOnHold == true)
        #        {
        #            if (mcrHoldCodeTrans.mcrCleared == NoYes::No)
        #            ret = true;
        #            break;
        #        }
        #        else
        #        {
        #
        #            if (_clearedHolds)
        #            {
        #                // If on hold but cleared
        #                if (mcrHoldCodeTrans.mcrCleared == NoYes::Yes)
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                // If order has ever been on hold.
        #                ret = true;
        #                break;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mcrGetDeclinedCCAuthRecords
        #/// <summary>
        #/// Builds a query to gather a list of declined credit card authorization
        #/// records attached to this sales order's payment records.
        #/// </summary>
        #/// <returns>
        #/// The <c>CustPaymTable</c> query that was built.
        #/// </returns>
        #Query mcrGetDeclinedCCAuthRecords()
        #{
        #    Query query = new Query();
        #    QueryBuildDataSource qbdsCustPaymTable, qbdsCCAuthTable;
        #
        #    qbdsCustPaymTable = query.addDataSource(tableNum(MCRCustPaymTable));
        #
        #    qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, RefTableId)).value(
        #                                queryValue(this.TableId));
        #    qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, RefRecId)).value(
        #                                queryValue(this.RecId));
        #    qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, CustPaymType)).value(
        #                                queryValue(MCRCustPaymType::CreditCard));
        #    qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, CustPaymType)).value(
        #                                queryValue(MCRCustPaymStatus::Declined));
        #
        #    qbdsCCAuthTable = qbdsCustPaymTable.addDataSource(tableNum(CreditCardAuthTrans));
        #    qbdsCCAuthTable.addLink(fieldNum(MCRCustPaymTable, RecId), fieldNum(CreditCardAuthTrans, mcrPaymRecId));
        #    qbdsCCAuthTable.addRange(fieldNum(CreditCardAuthTrans, ProcessorStatus)).value(
        #                                queryValue(CreditCardProcessorStatus::Declined));
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #mcrGetDeliveryAddresses
        #/// <summary>
        #/// Builds a query which will get all the unique delivery addresses used on all <c>SalesLine</c> records
        #/// on this order.
        #/// </summary>
        #/// <returns>
        #/// The <c>SalesLine</c> query for delivery addresses.
        #/// </returns>
        #Query mcrGetDeliveryAddresses()
        #{
        #    Query query = new Query();
        #    QueryBuildDataSource qbdsSalesLine;
        #
        #    qbdsSalesLine = query.addDataSource(tableNum(SalesLine));
        #
        #    qbdsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(this.SalesId);
        #
        #    qbdsSalesLine.addRange(fieldNum(SalesLine, LineDeliveryType)).
        #        value(SysQuery::valueNot(LineDeliveryType::OrderLineWithMultipleDeliveries));
        #
        #    qbdsSalesLine.orderMode(OrderMode::GroupBy);
        #
        #    qbdsSalesLine.addSortField(fieldNum(SalesLine, DeliveryName));
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #mcrGetNumExpeditedLines
        #/// <summary>
        #/// Gets the count of expedited lines on this sales order.
        #/// </summary>
        #/// <returns>
        #/// The count of expedited lines on this sales order.
        #/// </returns>
        #public int64 mcrGetNumExpeditedLines()
        #{
        #    SalesLine               salesLine;
        #    MCRSalesLine            mcrSalesLine;
        #
        #    select count(RecId) from salesLine
        #        where salesLine.SalesId == this.SalesId
        #        exists join mcrSalesLine
        #        where mcrSalesLine.SalesLine == salesLine.RecId
        #            && mcrSalesLine.Expedite;
        #
        #    return salesLine.RecId;
        #}
      ENDSOURCE
      SOURCE #mcrGetPaymStatus
        #/// <summary>
        #/// Calculates and returns the overall payment status for the sales order.
        #/// </summary>
        #/// <returns>
        #/// The overall payment status for the sales order.
        #/// </returns>
        #public display MCRCustPaymStatus mcrGetPaymStatus()
        #{
        #    MCRCustPaymStatus mcrCustPaymStatus = MCRCustPaymStatus::NotSubmitted;
        #    MCRCustPaymTotals mcrCustPaymTotals;
        #    MCRSalesTable     mcrSalesTable;
        #
        #    mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);
        #
        #    if (mcrCustPaymTotals)
        #    {
        #        mcrCustPaymStatus = mcrCustPaymTotals.getOverallPaymStatus();
        #        mcrSalesTable = MCRSalesTable::find(this.RecId);
        #        if (mcrSalesTable.ContinuityOrder
        #            && mcrSalesTable.ContinuityLineEval == MCRContinuityLineEval::PayAllLater
        #            && this.SalesStatus != SalesStatus::Canceled
        #            && mcrCustPaymStatus == MCRCustPaymStatus::NotSubmitted
        #            && mcrCustPaymTotals.existPaym())
        #        {
        #            return MCRCustPaymStatus::Authorized;
        #        }
        #    }
        #
        #    return mcrCustPaymStatus;
        #}
      ENDSOURCE
      SOURCE #mcrGetTotalPaymAmount
        #/// <summary>
        #/// Calculates and returns the sum of payment amounts for this sales order.
        #/// </summary>
        #/// <returns>
        #/// The sum of payment amounts for this sales order.
        #/// </returns>
        #public display Amount mcrGetTotalPaymAmount()
        #{
        #    MCRCustPaymTotals mcrCustPaymTotals;
        #
        #    mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);
        #
        #    if (mcrCustPaymTotals)
        #    {
        #        return mcrCustPaymTotals.getTotalPaymAmount();
        #    }
        #    else
        #    {
        #        return 0.0;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrHasExpeditedLines
        #/// <summary>
        #/// Indicates whether the order has one or more <c>SalesLine</c> records marked as expedited.
        #/// </summary>
        #/// <returns>
        #/// true if the order has one or more <c>SalesLine</c> records marked as expedited;
        #/// otherwise, false.
        #/// </returns>
        #display public MCRExpeditedOrder mcrHasExpeditedLines()
        #{
        #    SalesLine       salesLine;
        #    MCRSalesLine    mcrSalesLine;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId == this.SalesId
        #        exists join mcrSalesLine
        #        where mcrSalesLine.SalesLine == salesLine.RecId
        #            && mcrSalesLine.Expedite;
        #
        #    return (salesLine.RecId ? NoYes::Yes: NoYes::No);
        #}
      ENDSOURCE
      SOURCE #mcrHasMultipleCCPayments
        #/// <summary>
        #/// Gets the number of credit card payments associated with this order.
        #/// </summary>
        #/// <returns>
        #/// The number of credit card payments associated with this order.
        #/// </returns>
        #public display Integer mcrHasMultipleCCPayments()
        #{
        #    MCRCustPaymTable mcrCustPaymTable;
        #
        #    select count(RecId) from mcrCustPaymTable
        #        where mcrCustPaymTable.RefRecId == this.RecId
        #            && mcrCustPaymTable.RefTableId == this.TableId
        #            && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard;
        #
        #    return (any2int(mcrCustPaymTable.RecId));
        #}
      ENDSOURCE
      SOURCE #mcrHasReturn
        #/// <summary>
        #/// Determines whether the sales order has a return order associated with it.
        #/// </summary>
        #/// <returns>
        #/// true if the sales order has a return order associated with it; otherwise, false.
        #/// </returns>
        #public boolean mcrHasReturn()
        #{
        #    SalesTable          salesTableReturn;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #
        #    if (this.SalesId)
        #    {
        #        select firstonly salesTableReturn
        #            exists join mcrReturnSalesTable
        #            where mcrReturnSalesTable.SalesTable == salesTableReturn.RecId
        #                && mcrReturnSalesTable.OriginalSalesId == this.SalesId;
        #    }
        #
        #    if (salesTableReturn)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrHasShipped
        #/// <summary>
        #/// Checks if any part of the order has shipped.
        #/// </summary>
        #/// <returns>
        #/// true if any part of the order has shipped; otherwise, false.
        #/// </returns>
        #boolean mcrHasShipped()
        #{
        #    SalesLine           salesLine;
        #    InventTrans         inventTrans;
        #    boolean             hasShipped;
        #    InventTransOrigin   inventTransOrigin;
        #
        #     select firstonly RecId, InventTransId from salesLine
        #        where salesLine.SalesId == this.SalesId
        #        exists join inventTrans
        #        exists join inventTransOrigin
        #            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        #            && inventTransOrigin.InventTransId == salesLine.InventTransId
        #            && (inventTrans.StatusIssue == StatusIssue::Sold
        #            || inventTrans.StatusIssue == StatusIssue::Deducted);
        #
        #    hasShipped = (salesLine.RecId == 0) ? false: true;
        #
        #    return hasShipped;
        #}
      ENDSOURCE
      SOURCE #mcrHasTender
        #/// <summary>
        #/// Determines if one or more payments using the specified tender
        #///  are associated with this sales order.
        #/// </summary>
        #/// <param name="_tenderTypeId">
        #/// The tender for which to check the sales order.
        #/// </param>
        #/// <param name="_ignoreCanceled">
        #/// A <c>Boolean</c> value that defines whether the search should take into acount
        #/// canceled orders or not; optional.
        #/// </param>
        #/// <returns>
        #/// true if one or more payments using the specified tender
        #///     are associated with this sales order; otherwise, false.
        #/// </returns>
        #boolean mcrHasTender(RetailTenderTypeId _tenderTypeId, boolean _ignoreCanceled = true)
        #{
        #    MCRCustPaymTable mcrCustPaymTable;
        #
        #    if (_ignoreCanceled)
        #    {
        #        select firstonly RecId from mcrCustPaymTable
        #            where mcrCustPaymTable.RefTableId == this.TableId
        #                && mcrCustPaymTable.RefRecId == this.RecId
        #                && mcrCustPaymTable.TenderTypeId == _tenderTypeId
        #                && (mcrCustPaymTable.PercentAmount != 0.0
        #                || mcrCustPaymTable.Amount != 0.0
        #                || mcrCustPaymTable.PostedAmount != 0);
        #    }
        #    else
        #    {
        #        select firstonly RecId from mcrCustPaymTable
        #            where mcrCustPaymTable.RefTableId == this.TableId
        #                && mcrCustPaymTable.RefRecId == this.RecId
        #                && mcrCustPaymTable.TenderTypeId == _tenderTypeId;
        #    }
        #
        #    return mcrCustPaymTable.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #mcrInterCompanyAutoCreateOrders
        #/// <summary>
        #/// Generates intercompany orders.
        #/// </summary>
        #void mcrInterCompanyAutoCreateOrders()
        #{
        #    SalesLine   salesLineLocal;
        #    InventTable inventTable;
        #    VendTable   vendTable;
        #    boolean     interCompanyVendorFound;
        #
        #    if (this.InterCompanyAutoCreateOrders
        #        && (this.CreatedBy == curUserId()
        #        || this.ModifiedBy == curUserId()
        #        || !SalesTable::find(this.SalesId).InterCompanyAutoCreateOrders)
        #        && SalesTableType::construct(this).canCreatePurchOrder()
        #        && (!this.existInterCompanySales()))
        #    {
        #        while select SalesId from salesLineLocal
        #            where salesLineLocal.SalesId == this.SalesId && salesLineLocal.InventRefId == ''
        #            exists join inventTable
        #            where inventTable.ItemId == salesLineLocal.ItemId
        #            join  vendTable
        #            where vendTable.AccountNum == inventTable.PrimaryVendorId
        #        {
        #            if (vendTable.interCompanyTradingPartnerAccount())
        #            {
        #                interCompanyVendorFound = true;
        #                break;
        #            }
        #        }
        #        if (interCompanyVendorFound)
        #        {
        #            TradeInterCompany::autoCreateOrder(this);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrInterCompanyOrigSalesId
        #/// <summary>
        #/// Finds the corresponding <c>SalesId</c> for the intercompany direct delivery sales order
        #/// transaction based on the current sales order.
        #/// </summary>
        #/// <returns>
        #/// the corresponding <c>SalesId</c> for the intercompany direct delivery sales order
        #/// transaction based on the current sales order.
        #/// </returns>
        #SalesId mcrInterCompanyOrigSalesId()
        #{
        #    PurchTable          purchTable;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #
        #    select firstonly InterCompanyOriginalSalesId, InterCompanySalesId from purchTable
        #        exists join mcrReturnSalesTable
        #        where mcrReturnSalesTable.SalesTable == this.RecId
        #        && purchTable.InterCompanyOriginalSalesId == mcrReturnSalesTable.OriginalSalesId;
        #
        #    return purchTable.InterCompanySalesId;
        #}
      ENDSOURCE
      SOURCE #mcrIsCallCenter
        #/// <summary>
        #/// Returns whether the sales order is associated with a call center or not.
        #/// </summary>
        #/// <returns>
        #/// true if the sales order is a call center order; otherwise, false.
        #/// </returns>
        #public boolean mcrIsCallCenter()
        #{
        #    if (MCROrderParameters::isCallCenterEnabledAndInUse())
        #    {
        #        return RetailMCRChannelTable::findRecId(RetailSalesTable::findSalesTable(this).RetailChannel).RecId != 0;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrIsContParentOrderBillUpFront
        #/// <summary>
        #/// Checks whether or not the continuity parent order is bill up front.
        #/// </summary>
        #/// <returns>
        #/// true if the continuity parent order is bill up front; otherwise, false.
        #/// </returns>
        #boolean mcrIsContParentOrderBillUpFront()
        #{
        #    MCRContinuityCustLine   mcrContinuityCustLine;
        #    MCRContinuityCustHeader mcrContinuityCustHeader;
        #    boolean                 ret = false;
        #    MCRSalesTable           mcrSalesTable = this.mcrSalesTable();
        #
        #    if (mcrSalesTable.ContinuityChild)
        #    {
        #        // If it is paid, it was bill up front without schedule.
        #        if (mcrSalesTable.ContinuityLineEval == MCRContinuityLineEval::Paid)
        #        {
        #            ret = true;
        #        }
        #        else
        #        {
        #            select firstonly InventTransId, RecId from mcrContinuityCustLine
        #                where mcrContinuityCustLine.SalesId == this.SalesId
        #                    && mcrContinuityCustLine.InventTransId
        #                exists join mcrContinuityCustHeader
        #                where mcrContinuityCustHeader.InventTransId == mcrContinuityCustLine.InventTransId;
        #
        #            if (mcrContinuityCustLine.RecId)
        #            {
        #                ret = true;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #mcrIsOrderFullyReturned
        #/// <summary>
        #/// Validates whether or not all invoiced quantity on the order has been returned.
        #/// </summary>
        #/// <returns>
        #/// true if all invoiced quantity on the order has been returned; otherwise, false.
        #/// </returns>
        #boolean mcrIsOrderFullyReturned()
        #{
        #    boolean     fullyReturned = true;
        #    SalesLine   salesLine;
        #
        #    while select salesLine
        #        where salesLine.SalesId == this.SalesId
        #    {
        #        // If line is not fully returned.
        #        if (!salesLine.mcrIsLineFullyReturned())
        #        {
        #            fullyReturned = false;
        #            break;
        #        }
        #    }
        #
        #    return fullyReturned;
        #}
      ENDSOURCE
      SOURCE #mcrIsOrderInFuture
        #/// <summary>
        #/// Validates the future order processing dates.
        #/// </summary>
        #/// <returns>
        #/// true if the delivery date is greater than the number of days the user has set up on the
        #/// sales parameters form for future orders; otherwise, false.
        #/// </returns>
        #boolean mcrIsOrderInFuture()
        #{
        #    boolean             orderInFuture = false;
        #    MCRFutureOrderDays  days;
        #    MCROrderParameters  mcrOrderParameters;
        #    date                deliverydate;
        #    SalesLine           salesLine;
        #
        #    mcrOrderParameters = MCROrderParameters::find();
        #    // If future orders processing is on.
        #    if (mcrOrderParameters.mcrFutureOrder)
        #    {
        #        days = mcrOrderParameters.mcrFutureOrderDays;
        #        if (days>0)
        #        {
        #            // Obtain the erliest shipping date from the sales lines.
        #            select minof(ConfirmedDlv) from salesLine
        #                    where salesLine.SalesId == this.SalesId;
        #
        #            deliveryDate = salesLine.ConfirmedDlv;
        #            if ((deliveryDate -systemDateGet())>days)
        #            {
        #                orderInFuture = true;
        #            }
        #        }
        #    }
        #    return orderInFuture;
        #}
      ENDSOURCE
      SOURCE #mcrIsOrderInstallment
        #/// <summary>
        #/// Validates whether or not this order has an installment plan.
        #/// </summary>
        #/// <returns>
        #/// true if the order has an installment plan; otherwise, false.
        #/// </returns>
        #boolean mcrIsOrderInstallment()
        #{
        #    if (MCRInstallmentPlanSalesTable::existSalesId(this.SalesId)
        #        && !this.mcrSalesTable().ContinuityOrder)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrIsOrderOnFraudHold
        #/// <summary>
        #/// Validates whether or not the order is on fraud hold.
        #/// </summary>
        #/// <returns>
        #/// true if the order is on fraud hold; otherwise, false.
        #/// </returns>
        #boolean mcrIsOrderOnFraudHold()
        #{
        #    if (this.mcrOrderStopped == NoYes::Yes)
        #    {
        #        if (MCRHoldCodeTrans::isOrderOnFraudHold(this.SalesId))
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mcrLineHasDifferentAddress
        #/// <summary>
        #/// Checks for a different delivery address on the order lines.
        #/// </summary>
        #/// <returns>
        #/// true if there is a different delivery address on the order lines; otherwise, false.
        #/// </returns>
        #boolean mcrLineHasDifferentAddress()
        #{
        #    SalesLine   salesLine;
        #
        #    select firstonly salesLine
        #     where salesLine.SalesId == this.SalesId
        #        && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
        #        && salesLine.DeliveryName != this.DeliveryName;
        #
        #    if (salesLine && salesLine.deliveryAddress() == this.deliveryAddress())
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #mcrLineHasNonBillAddress
        #/// <summary>
        #/// Checks the order line delivery addresses against the sold-to address on the customer.
        #/// </summary>
        #/// <returns>
        #/// true if the order line delivery addresses differs from the sold-to address on the customer;
        #/// otherwise, false.
        #/// </returns>
        #boolean mcrLineHasNonBillAddress()
        #{
        #    SalesLine   salesLine;
        #    CustTable   custTable;
        #
        #    custTable = this.custTable_CustAccount();
        #
        #    select firstonly RecId from salesLine
        #     where salesLine.SalesId == this.SalesId
        #        && salesLine.DeliveryPostalAddress != custTable.invoiceAddress().RecId
        #        && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries;
        #
        #    if (salesLine.RecId)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #mcrOpenSalesOrder
        #/// <summary>
        #/// Updates that sales status to be that of an open order.
        #/// </summary>
        #void mcrOpenSalesOrder()
        #{
        #    MCRSalesTable           mcrSalesTable;
        #
        #    if (this.checkUpdate(false))
        #    {
        #        this.SalesStatus = SalesStatus::Backorder;
        #        if (RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        #        {
        #            this.mcrOrderStopped = NoYes::Yes;
        #        }
        #
        #        // Modification of a sales order nullifies out of
        #        // balance status as well as it's release
        #        mcrSalesTable = this.mcrSalesTable();
        #        if (mcrSalesTable.PaymOutOfBalance != MCRPaymOutOfBalance::None
        #            || mcrSalesTable.OutOfBalanceReleased != MCROutOfBalanceReleaseType::None)
        #        {
        #            mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::None;
        #            mcrSalesTable.OutOfBalanceReleased = MCROutOfBalanceReleaseType::None;
        #            this.mcrPackMCRSalesTable(mcrSalesTable);
        #        }
        #
        #        ttsbegin;
        #        this.update();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrOrderProcessed
        #/// <summary>
        #/// Determines if the current order has been processed.
        #/// </summary>
        #/// <returns>
        #/// true if it has been processed; otherwise, false.
        #/// </returns>
        #public boolean mcrOrderProcessed()
        #{
        #    MCRCustPaymTotals mcrCustPaymTotals;
        #
        #    // If order completion is not enabled, skip all logic.
        #    if (RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        #    {
        #        // if the status of the order being evaluated has had
        #        // its status changed to something other than backorder
        #        // or if there are payments return true
        #        if (this.SalesStatus == SalesStatus::Backorder
        #            && this.mcrOrderStopped == NoYes::Yes
        #            && !MCRHoldCodeTrans::findActiveOrderHolds(this.SalesId))
        #        {
        #            mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);
        #            if (!MCRCustPaymTable::exists(this.TableId, this.RecId)
        #                || !mcrCustPaymTotals.allPaymentsSubmitted())
        #            {
        #                return false;
        #            }
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #mcrOrderReleaseDate
        #/// <summary>
        #///  Gets the date on which a future order will be released.
        #/// </summary>
        #/// <returns>
        #/// The order realse date of the future order.
        #/// </returns>
        #public display TransDate mcrOrderReleaseDate()
        #{
        #    date                releaseDate;
        #    MCRFutureOrderDays  mcrFutureOrderDays;
        #    date                deliverydate;
        #    SalesLine           salesLine;
        #
        #    // Only if the order is in the future will the release
        #    // date need to be calculated.
        #    if (this.mcrIsOrderInFuture())
        #    {
        #        mcrFutureOrderDays = MCROrderParameters::find().mcrFutureOrderDays;
        #
        #        // Obtain the earliest shipping date from the sales lines
        #        select minof(ConfirmedDlv) from salesLine
        #                    where salesLine.SalesId == this.SalesId;
        #
        #        deliveryDate = salesLine.ConfirmedDlv;
        #
        #        releaseDate = deliveryDate-mcrFutureOrderDays;
        #    }
        #    else
        #    {
        #        releaseDate = DateTimeUtil::date(this.CreatedDateTime);
        #    }
        #
        #    return releaseDate;
        #}
      ENDSOURCE
      SOURCE #mcrPackMCRReturnSalesTable
        #/// <summary>
        #/// Packs the retail return sales table extension table into <c>MCRReturnSalesTable</c> field.
        #/// </summary>
        #/// <param name="_mcrReturnSalesTable">
        #/// Extension table to be packed.
        #/// </param>
        #public void mcrPackMCRReturnSalesTable(MCRReturnSalesTable _mcrReturnSalesTable)
        #{
        #    _mcrReturnSalesTable.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_mcrReturnSalesTable);
        #}
        #
      ENDSOURCE
      SOURCE #mcrPackMCRSalesTable
        #/// <summary>
        #/// Packs the retail sales table extension table into <c>MCRSalesTable</c> field.
        #/// </summary>
        #/// <param name="_mcrSalesTable">
        #/// Extension table to be packed.
        #/// </param>
        #public void mcrPackMCRSalesTable(MCRSalesTable _mcrSalesTable)
        #{
        #    _mcrSalesTable.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesTable);
        #}
        #
      ENDSOURCE
      SOURCE #mcrPackMCRSalesTableShipping
        #/// <summary>
        #/// Packs the retail sales table shipping extension table into <c>MCRSalesTableShipping</c> field.
        #/// </summary>
        #/// <param name="_mcrSalesTableShipping">
        #/// Extension table to be packed.
        #/// </param>
        #public void mcrPackMCRSalesTableShipping(MCRSalesTableShipping _mcrSalesTableShipping)
        #{
        #    _mcrSalesTableShipping.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesTableShipping);
        #}
        #
      ENDSOURCE
      SOURCE #mcrReturnSalesTable
        #/// <summary>
        #/// Recovers the retail return sales table record.
        #/// </summary>
        #/// <returns>
        #/// A record of <c>MCRReturnSalesTable</c>
        #/// </returns>
        #public MCRReturnSalesTable mcrReturnSalesTable()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRReturnSalesTable));
        #}
        #
      ENDSOURCE
      SOURCE #mcrSalesManualFraudHold
        #/// <summary>
        #/// Puts a sales order on manual fraud hold.
        #/// </summary>
        #/// <returns>
        #/// The form arguments from the fraud hold form.
        #/// </returns>
        #Args mcrSalesManualFraudHold()
        #{
        #    FormRun             formRun;
        #    Args                formArgs = new Args();
        #    str                 formArgsFormStr;
        #
        #    // Pop up form for user to enter a comment
        #    // as to why the order is going on fraud hold.
        #    formArgsFormStr = formStr(MCRFraudHoldCommentDialog);
        #    formArgs.name(formArgsFormStr);
        #    formArgs.record(this);
        #    formRun = classfactory.formRunClass(formArgs);
        #    formRun.init();
        #    formRun.run();
        #    formRun.wait();
        #
        #    if (formArgs.parmEnum()) // Put order on hold.
        #    {
        #        //Even if the args().parm() is empty, meaning the user did not enter a comment
        #        //the order should still be put on hold.
        #        SalesTable::mcrInsertFraudHold(this.SalesId, formRun.args().parm());
        #    }
        #    return formArgs;
        #}
      ENDSOURCE
      SOURCE #mcrSalesOrderDetailedStatus
        #/// <summary>
        #/// Displays the order sales status.
        #/// </summary>
        #/// <returns>
        #/// The detailed order status of the sales order.
        #/// </returns>
        #public display MCRSalesOrderDetailedStatus mcrSalesOrderDetailedStatus()
        #{
        #    MCRSalesOrderDetailedStatus status;
        #
        #    status = MCRSalesDetailedStatus::salesOrderDetailedStatus(this);
        #
        #    return status;
        #}
      ENDSOURCE
      SOURCE #mcrSalesTable
        #/// <summary>
        #/// Recovers the retail sales table record.
        #/// </summary>
        #/// <param name="_packNewExtensionTable">
        #/// A Boolean value that indicates whether to pack new extension table record; optional.
        #/// </param>
        #/// <returns>
        #/// A record of <c>MCRSalesTable</c>
        #/// </returns>
        #public MCRSalesTable mcrSalesTable(boolean _packNewExtensionTable = false)
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesTable), _packNewExtensionTable);
        #}
        #
      ENDSOURCE
      SOURCE #mcrSalesTableExchange
        #/// <summary>
        #/// Gets the <c>SalesTable</c> record marked as an exchange for this record.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A boolean that determines whether to select the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// The <c>SalesTable</c> record marked as an exchange for this record if one exists;
        #/// otherwise, and empty buffer.
        #/// </returns>
        #public SalesTable mcrSalesTableExchange(boolean _forUpdate = false)
        #{
        #    SalesTable  salesTableExchange;
        #
        #    salesTableExchange.selectForUpdate(_forUpdate);
        #
        #    select firstonly salesTableExchange
        #        where salesTableExchange.SalesId == this.ReturnReplacementId;
        #
        #    return salesTableExchange;
        #}
      ENDSOURCE
      SOURCE #mcrSalesTableOriginal
        #/// <summary>
        #/// Gets the original <c>SalesTable</c> record associated with this records.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A boolean that determines whether to select the table for update; optional.
        #/// </param>
        #/// <returns>
        #/// The original <c>SalesTable</c> record associated with this record if one exists;
        #/// otherwise, an empty buffer.
        #/// </returns>
        #public SalesTable mcrSalesTableOriginal(boolean _forUpdate = false)
        #{
        #    SalesTable          salesTableOriginal;
        #    MCRReturnSalesTable mcrReturnSalesTable;
        #
        #    salesTableOriginal.selectForUpdate(_forUpdate);
        #
        #    select firstonly salesTableOriginal
        #        exists join mcrReturnSalesTable
        #        where mcrReturnSalesTable.SalesTable == this.RecId
        #            && salesTableOriginal.SalesId == mcrReturnSalesTable.OriginalSalesId;
        #
        #    return salesTableOriginal;
        #}
      ENDSOURCE
      SOURCE #mcrSalesTableShipping
        #/// <summary>
        #/// Recovers the retail sales table shipping record.
        #/// </summary>
        #/// <param name="_packNewExtensionTable">
        #/// A Boolean value that indicates whether to pack new extension table record; optional.
        #/// </param>
        #/// <returns>
        #/// A record of <c>MCRSalesTableShipping</c>
        #/// </returns>
        #public MCRSalesTableShipping mcrSalesTableShipping(boolean _packNewExtensionTable = false)
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesTableShipping), _packNewExtensionTable);
        #}
        #
      ENDSOURCE
      SOURCE #mcrShowNotes
        #/// <summary>
        #///  Shows the existing notes field and allows editing.
        #/// </summary>
        #void mcrShowNotes()
        #{
        #    FormRun    formRun;
        #    Args       formArgs = new Args();
        #    str        formArgsFormStr;
        #    Common     formArgsRecord;
        #
        #    formArgsRecord = this;
        #    formArgsFormStr = formStr(MCRFraudHoldCommentDialog);
        #    formArgs.name(formArgsFormStr);
        #    formArgs.record(formArgsRecord);
        #    formRun = classfactory.formRunClass(formArgs);
        #    formRun.init();
        #    formRun.run();
        #    formRun.wait();
        #}
      ENDSOURCE
      SOURCE #mergeDimension
        #/// <summary>
        #/// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
        #/// field on this table and the provided dimension set.
        #/// </summary>
        #/// <param name="_primaryDefaultDimension">
        #/// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_secondaryDefaultDimension">
        #/// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
        #/// optional.
        #/// </param>
        #/// <param name="_dimensionMerge">
        #/// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
        #/// this table and the provided dimension set.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten when they are merged.
        #/// </remarks>
        #
        #public DimensionDefault mergeDimension(
        #    DimensionDefault _primaryDefaultDimension,
        #    DimensionDefault _secondaryDefaultDimension = 0,
        #    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
        #                                                                    this.companyInfo().RecId
        #                                                                    )
        #    )
        #{
        #    return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(FieldId _fieldId)
        #{
        #    SalesTableType  salesTableType;
        #
        #    super(_fieldId);
        #
        #    salesTableType = this.type();
        #    salesTableType.modifiedField(_fieldId);
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        // Default in the MCRExpedite flag based on the delivery mode.
        #        if (_fieldId == fieldNum(SalesTable, DlvMode))
        #        {
        #            this.mcrDlvModeModified();
        #        }
        #
        #        // Refresh to update any other form controls displaying this field.
        #        if (this.isFormDataSource())
        #        {
        #            this.dataSource().refresh();
        #        }
        #    }
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        #    {
        #        if (_fieldId == fieldNum(SalesTable, CustAccount))
        #        {
        #            RetailLoyaltyManager::UpdateLoyaltyGroupsForCustomerOrder(this.SalesId);
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #modifiedFieldDDC
        #/// <summary>
        #/// Processes the modified field event for delivery date control fields.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// The field ID for the modified field.
        #/// </param>
        #void modifiedFieldDDC(FieldId _fieldId) //Enhanced Delivery Date Control
        #{
        #    Object                      obj;
        #    SalesCalcAvailableDlvDates  calcAvailableDlvDates;
        #    container                   c;
        #
        #    if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
        #    {
        #        calcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this,_fieldId);
        #
        #        switch (_fieldId)
        #        {
        #            case fieldNum(SalesTable, DeliveryPostalAddress):        //fall through
        #            case fieldNum(SalesTable, DlvMode):                 //fall through
        #            case fieldNum(SalesTable, InventLocationId):
        #                if (!this.RecId)
        #                {
        #                    calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
        #                }
        #                break;
        #
        #            case fieldNum(SalesTable, DeliveryDateControlType):
        #                if (this.RecId)
        #                {
        #                    calcAvailableDlvDates.modifiedField(this);
        #                }
        #                else
        #                {
        #                    calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
        #                }
        #                break;
        #
        #            case fieldNum(SalesTable, ReceiptDateRequested):
        #                calcAvailableDlvDates.modifiedField(this);
        #
        #                if (this.ShippingDateRequested > this.ReceiptDateRequested)
        #                {
        #                    this.ShippingDateRequested = this.ReceiptDateRequested;
        #                }
        #                break;
        #
        #            case fieldNum(SalesTable, ShippingDateRequested):
        #                calcAvailableDlvDates.modifiedField(this);
        #
        #                if (this.ShippingDateRequested > this.ReceiptDateRequested)
        #                {
        #                    this.ReceiptDateRequested = this.ShippingDateRequested;
        #                }
        #                break;
        #
        #            case fieldNum(SalesTable, ShippingDateConfirmed):
        #                calcAvailableDlvDates.modifiedField(this);
        #
        #                if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
        #                {
        #                    this.ReceiptDateConfirmed = this.ShippingDateConfirmed;
        #                }
        #                break;
        #
        #            case fieldNum(SalesTable, ReceiptDateConfirmed):
        #                calcAvailableDlvDates.modifiedField(this);
        #
        #                if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
        #                {
        #                    this.ShippingDateConfirmed = this.ReceiptDateConfirmed;
        #                }
        #                break;
        #
        #            default:
        #        }
        #    }
        #
        #    if (this.isFormDataSource() && this.dataSource().formRun() && this.dataSource().formRun().name() == formStr(SalesCreateOrder))
        #    {
        #        obj = this.dataSource().formRun();
        #
        #        if (calcAvailableDlvDates && calcAvailableDlvDates.parmCancelModifiedField())
        #        {
        #            if (formHasMethod(obj,identifierStr(getInitialValuesDeliveryDate)))
        #            {
        #                c = obj.getInitialValuesDeliveryDate();
        #
        #                if (c)
        #                {
        #                    this.ShippingDateConfirmed   = conPeek(c, 1);
        #                    this.ShippingDateRequested   = conPeek(c, 2);
        #                    this.ReceiptDateConfirmed    = conPeek(c, 3);
        #                    this.ReceiptDateRequested    = conPeek(c, 4);
        #                    this.DeliveryDateControlType = conPeek(c, 5);
        #                }
        #            }
        #            else
        #            {
        #                this.(_fieldId) = this.orig().(_fieldId);
        #            }
        #        }
        #        else
        #        {
        #            if (formHasMethod(obj,identifierStr(setInitialValuesDeliveryDate)))
        #            {
        #                obj.setInitialValuesDeliveryDate();
        #            }
        #        }
        #    }
        #
        #    this.DeliveryDate = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
        #}
      ENDSOURCE
      SOURCE #modifiedInterCompanyOrder
        #public void modifiedInterCompanyOrder()
        #{
        #    if (this.InterCompanyOrder)
        #    {
        #        this.InterCompanyCompanyId = this.custTable_CustAccount().interCompanyTradingPartnerCompanyID();
        #        if (this.isMarkedForBankLC())
        #        {
        #            this.BankDocumentType = BankDocumentType::None;
        #        }
        #    }
        #    else
        #    {
        #        this.InterCompanyCompanyId = '';
        #    }
        #}
      ENDSOURCE
      SOURCE #modifiedInventSiteFromParent
        #public void modifiedInventSiteFromParent()
        #{
        #    this.InventStorageDimMap::modifiedInventSiteFromParent(this);
        #}
      ENDSOURCE
      SOURCE #modifiedOneTimeCustomer
        #void  modifiedOneTimeCustomer()
        #{
        #    if (!CustTable::createOneTimeAccountValidate())
        #    {
        #        this.OneTimeCustomer = NoYes::No;
        #    }
        #
        #    if (this.OneTimeCustomer && !this.CustAccount)
        #    {
        #        this.createOneTimeAccount();
        #    }
        #}
      ENDSOURCE
      SOURCE #modifiedProjId
        #void  modifiedProjId()
        #{
        #    ProjTable           projTable = ProjTable::find(this.ProjId);
        #    ProjFundingSource   projFundingSource;
        #
        #    this.initFromProjTable(projTable);
        #
        #    if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
        #    {
        #        // Project does not support Sales Orders / Item Requirements for multiple funded contracts
        #        select firstonly CustAccount, LanguageId from projFundingSource where projFundingSource.ContractId == projTable.ProjInvoiceProjId;
        #        this.LanguageId       = projFundingSource.LanguageId;
        #    }
        #
        #    this.OneTimeCustomer  = false;
        #}
      ENDSOURCE
      SOURCE #moduleType
        #ModuleInventPurchSales moduleType()
        #{
        #    return ModuleInventPurchSales::Sales;
        #}
      ENDSOURCE
      SOURCE #mustBeCovPlanned
        #boolean  mustBeCovPlanned()
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    return salesTableType.mustBeCovPlanned();
        #}
      ENDSOURCE
      SOURCE #mustDoCreditLimitAfterUpdate
        #/**
        #    The method returns true if creditlimit must be executed after salesTable.update().
        #**/
        #boolean mustDoCreditLimitAfterUpdate()
        #{
        #    SalesTable this_orig = this.orig();
        #
        #    return (this.InclTax            != this_orig.InclTax ||
        #            this.CustAccount        != this_orig.CustAccount
        #            || this.SalesType       != this_orig.SalesType
        #            || this.FixedExchRate   != this_orig.FixedExchRate
        #            );
        #}
      ENDSOURCE
      SOURCE #numberOfLines
        #public NumberOfRecords numberOfLines()
        #{
        #    return (select count(RecId) from salesLine where salesLine.SalesId == this.SalesId).RecId;
        #}
      ENDSOURCE
      SOURCE #packingSlipTotal
        #public Amount packingSlipTotal()
        #{
        #    SalesTotals_Sales   salesTotals = SalesTotals_Sales::construct(this, SalesUpdate::PackingSlip);
        #    container           displayFields = salesTotals.displayFieldsCurrency(salesTotals.currencyCode());
        #
        #    return conPeek(displayFields, TradeTotals::posTotalAmount());
        #}
      ENDSOURCE
      SOURCE #packRetailSalesTable
        #/// <summary>
        #/// Packs Retail extension table into <c>PackedExtensions</c> field
        #/// </summary>
        #/// <param name="_retailSalesTable">
        #/// Extension table to be packed
        #/// </param>
        #public void packRetailSalesTable(RetailSalesTable _retailSalesTable)
        #{
        #    _retailSalesTable.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_retailSalesTable);
        #}
      ENDSOURCE
      SOURCE #packSalesTable_BR
        #/// <summary>
        #/// Packs brazilian extension table into <c>PackedExtensions</c> field
        #/// </summary>
        #/// <param name="_salesTable_BR">
        #/// Extension table to be packed
        #/// </param>
        #public void packSalesTable_BR(SalesTable_BR _salesTable_BR)
        #{
        #    _salesTable_BR.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_salesTable_BR);
        #}
      ENDSOURCE
      SOURCE #packSalesTable_IN
        #/// <summary>
        #/// Packs indian extension table into <c>PackedExtensions</c> field
        #/// </summary>
        #/// <param name="_salesTable_IN">
        #/// Extension table to be packed
        #/// </param>
        #// <GIN>
        #public void packSalesTable_IN(SalesTable_IN _salesTable_IN)
        #{
        #    _salesTable_IN.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_salesTable_IN);
        #}
        #// </GIN>
      ENDSOURCE
      SOURCE #packSalesTable_Intrastat
        #/// <summary>
        #/// Packs <c>SalesTable_Intrastat</c> extension table record.
        #/// </summary>
        #/// <param name="_salesTable_Intrastat">
        #/// The extension table record to pack.
        #/// </param>
        #public void packSalesTable_Intrastat(SalesTable_Intrastat _salesTable_Intrastat)
        #{
        #    this.SysExtensionSerializerMap::packExtensionTable(_salesTable_Intrastat);
        #}
        #
      ENDSOURCE
      SOURCE #packSalesTable_RU
        #/// <summary>
        #/// Packs an <c>SalesTable_RU</c> record to the container field <C>PackedExtensions</C>.
        #/// </summary>
        #/// <param name="_salesTable_RU">
        #/// The source record of <c>SalesTable_RU</c> table.
        #/// </param>
        #public void packSalesTable_RU(SalesTable_RU _salesTable_RU)
        #{
        #    _salesTable_RU.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_salesTable_RU);
        #}
        #
      ENDSOURCE
      SOURCE #packSalesTable_W
        #/// <summary>
        #///    Packs an <c>SalesTable_W</c> record to the container field <C>PackedExtensions</C>.
        #/// </summary>
        #/// <param name="_salesTable_W">
        #///    The source record of <c>SalesTable_W</c> table.
        #/// </param>
        #public void packSalesTable_W(SalesTable_W _salesTable_W)
        #{
        #    _salesTable_W.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_salesTable_W);
        #}
        #
      ENDSOURCE
      SOURCE #partyTable_CustAccount
        #DirPartyTable partyTable_CustAccount(boolean _forUpdate = false)
        #{
        #    DirPartyTable   partyTable;
        #    CustTable       custTable;
        #
        #    if (this.CustAccount)
        #    {
        #        if (_forUpdate)
        #        {
        #            partyTable.selectForUpdate(_forUpdate);
        #        }
        #
        #        select firstonly partyTable
        #            exists join custTable
        #            where custTable.Party      == partyTable.RecId
        #               && custTable.AccountNum == this.CustAccount;
        #    }
        #    return partyTable;
        #}
      ENDSOURCE
      SOURCE #payer
        #CustTable payer(boolean  _forUpdate = false)
        #{
        #    return this.custTable_InvoiceAccount(_forUpdate);
        #}
      ENDSOURCE
      SOURCE #payerPostalAddress
        #LogisticsPostalAddress payerPostalAddress()
        #{
        #    return DirParty::primaryPostalAddress(this.custTable_InvoiceAccount().Party,this.deliveryTransDateTime());
        #}
      ENDSOURCE
      SOURCE #paymDayId
        #CustPaymDayId paymDayId()
        #{
        #    CustPaymDayId    paymDayId;
        #
        #    paymDayId = this.custTable_InvoiceAccount().PaymDayId;
        #
        #    if (!paymDayId)
        #    {
        #        paymDayId = this.payment().PaymDayId;
        #    }
        #
        #    return paymDayId;
        #}
      ENDSOURCE
      SOURCE #payment
        #PaymTerm payment(boolean _update = false)
        #{
        #    return PaymTerm::find(this.Payment, _update);
        #}
      ENDSOURCE
      SOURCE #paymModeModified
        #void paymModeModified()
        #{
        #    this.PaymModeMap::modifiedPaymMode();
        #}
      ENDSOURCE
      SOURCE #previewPaneTitle
        #/// <summary>
        #/// Sets the title on top of the preview pane.
        #/// </summary>
        #/// <returns>
        #/// The title field of the preview pane.
        #/// </returns>
        #display Caption previewPaneTitle()
        #{
        #    return strFmt("@SYS330566", this.SalesId);
        #}
      ENDSOURCE
      SOURCE #previewPaneTitleReturnItemNum
        #/// <summary>
        #/// Sets the title on top of the preview pane.
        #/// </summary>
        #/// <returns>
        #/// The title field of the preview pane.
        #/// </returns>
        #display Caption previewPaneTitleReturnItemNum()
        #{
        #    return strFmt("@SYS330566", this.ReturnItemNum);
        #}
      ENDSOURCE
      SOURCE #priceDiscChangePolicyExistOnLine
        #/// <summary>
        #/// Indicates whether a line record related to the current record has a price discount policy.
        #/// </summary>
        #/// <returns>
        #/// true if a line with a price discount policy exists; otherwise, false
        #/// </returns>
        #public boolean priceDiscChangePolicyExistOnLine()
        #{
        #    SalesLine salesLine;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId == this.SalesId
        #           && (salesLine.SystemEntryChangePolicy != 0
        #           || salesLine.ManualEntryChangepolicy != 0);
        #
        #    return salesLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #priceDiscChangePolicyUpdateLine
        #/// <summary>
        #/// Updates the price discount policy fields on a set of purchase line records related to the current
        #/// <c>SalesTable</c> record.
        #/// </summary>
        #/// <param name="_priceDiscChangePoliciesTmp">
        #/// A buffer of the temporary <c>PriceDiscChangePoliciesTmp</c> table.
        #/// </param>
        #public void priceDiscChangePolicyUpdateLine(PriceDiscChangePoliciesTmp  _priceDiscChangePoliciesTmp)
        #{
        #    SalesLine salesLine;
        #
        #    salesLine.skipDataMethods();
        #    update_recordset salesLine
        #    setting ManualEntryChangepolicy = _priceDiscChangePoliciesTmp.ManualEntryChangepolicy,
        #            SystemEntryChangePolicy = _priceDiscChangePoliciesTmp.SystemEntryChangePolicy,
        #            SystemEntrySource       = _priceDiscChangePoliciesTmp.SystemEntrySource
        #    join _priceDiscChangePoliciesTmp
        #        where _priceDiscChangePoliciesTmp.RefRecId == salesLine.RecId;
        #}
      ENDSOURCE
      SOURCE #projectedFreightCharge
        #public AmountCur projectedFreightCharge(AmountCur _amt = 0)
        #{
        #    CustParameters      custParameters = CustParameters::find();
        #    AmountCur           amtTotal, amtFreight, amtTax, amtMisc;
        #    SalesTotals_Sales   salesTotals;
        #
        #    if (custParameters.CreditCardEstShippingChargeType == CreditCardEstShippingChargeType::Fixed)
        #    {
        #        amtFreight = custParameters.CreditCardEstShippingChargeValue;
        #    }
        #    else
        #    {
        #        amtTotal = _amt;
        #        if (prmisDefault(_amt) || _amt == 0)
        #        {
        #            salesTotals = SalesTotals_Sales::construct(this, SalesUpdate::All);
        #            amtTotal    = salesTotals.totalAmount();
        #            amtTax      = salesTotals.totalTaxAmount();
        #            amtMisc     = salesTotals.totalMarkup();
        #        }
        #
        #        amtFreight = amtTotal - amtTax - amtMisc;
        #
        #        if (amtFreight > 0)
        #        {
        #            amtFreight = amtFreight * custParameters.CreditCardEstShippingChargeValue / 100;
        #            if (custParameters.CreditCardEstShippingChargeMax)
        #            {
        #                amtFreight = min(custParameters.CreditCardEstShippingChargeMax, amtFreight);
        #            }
        #        }
        #        else
        #        {
        #            amtFreight = 0;
        #        }
        #    }
        #
        #    return amtFreight;
        #}
      ENDSOURCE
      SOURCE #projTable
        #ProjTable projTable(boolean  _forUpdate = false)
        #{
        #    return ProjTable::find(this.ProjId, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #qualityOrderStatusDisplay
        #/// <summary>
        #///    Returns the status of the associated quality orders.
        #/// </summary>
        #/// <returns>
        #///    The current quality order status.
        #/// </returns>
        #display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
        #{
        #    InventQualityOrderTable orderTable;
        #
        #    if (!InventParameters::find().UseQualityManagement)
        #    {
        #        return InventTestOrderStatusDisplay::None;
        #    }
        #
        #    orderTable = InventQualityOrderTable::findLastQualityOrder(InventTestReferenceType::Sales, this.SalesId);
        #
        #    return orderTable ? orderTable.statusDisplay() : InventTestOrderStatusDisplay::None;
        #}
      ENDSOURCE
      SOURCE #querySalesLine
        #Query querySalesLine(boolean _update = false)
        #{
        #    DictRelation    dictRelation;
        #    DictField       externdictField;
        #    DictField       dictField;
        #    Query           query = new Query();
        #    Counter         c;
        #
        #    query.addDataSource(tableNum(SalesLine));
        #
        #    dictRelation = new DictRelation(tableNum(SalesLine));
        #    dictRelation.loadTableRelation(this.TableId);
        #
        #    if (dictRelation.lines())
        #    {
        #        for (c=1; c <= dictRelation.lines(); c++)
        #        {
        #            externdictField   = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
        #            dictField   = new DictField(tableNum(SalesLine),dictRelation.lineTableValue(c));
        #            query.dataSourceTable(tableNum(SalesLine)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
        #        }
        #    }
        #    query.dataSourceTable(tableNum(SalesLine)).update(_update);
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #referencePurchTable
        #/// <summary>
        #/// Gets a reference purchase table record.
        #/// </summary>
        #/// <returns>
        #/// A reference purchase table record.
        #/// </returns>
        #/// <remarks>
        #/// This method is used for finding the reference purchase table in the same legal entity in 3-leged
        #/// intercompany scenarios.
        #/// </remarks>
        #public PurchTable referencePurchTable()
        #{
        #    InterCompanyPurchSalesReference     interCompanyPurchSalesReference;
        #    PurchTable                          referencePurchTable;
        #
        #    select firstonly referencePurchTable order by InterCompanySalesId desc
        #        exists join interCompanyPurchSalesReference
        #        where interCompanyPurchSalesReference.PurchId == referencePurchTable.PurchId
        #        &&    interCompanyPurchSalesReference.SalesId == this.SalesId;
        #
        #    return referencePurchTable;
        #}
      ENDSOURCE
      SOURCE #removeReferenceToCancelledFiscalDoc_BR
        #/// <summary>
        #/// removes the reference to cancelled fiscal document for Brazil Localization.
        #/// </summary>
        #public server Void removeReferenceToCancelledFiscalDoc_BR()
        #{
        #    SalesTable_BR salesTable_BR;
        #
        #    ttsBegin;
        #    salesTable_BR = this.salesTable_BR();
        #    salesTable_BR.selectForUpdate(true);
        #    salesTable_BR.InvoiceRefRecId_BR = 0;
        #    salesTable_BR.update();
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #resetLinePolicies
        #/// <summary>
        #/// Resets price discount policies on the lines that are related to the current record.
        #/// </summary>
        #public void resetLinePolicies()
        #{
        #    SalesLine salesLine;
        #
        #    update_recordset salesLine
        #        setting SystemEntrySource       = PriceDiscSystemSource::None,
        #                SystemEntryChangePolicy = 0,
        #                ManualEntryChangepolicy = 0
        #    where salesLine.SalesId == this.SalesId;
        #}
      ENDSOURCE
      SOURCE #retailConcessionContractId
        #/// <summary>
        #/// Gets the Retail concession contract Id
        #/// </summary>
        #/// <returns>
        #/// The Retail concession contract Id
        #/// </returns>
        #public display RetailConcessionContractId retailConcessionContractId()
        #{
        #    return this.retailSalesTable().RetailConcessionContractId;
        #}
      ENDSOURCE
      SOURCE #retailPackRetailSalesTable
        #/// <summary>
        #/// Packs the retail sales table extension table into <c>RetailSalesTable</c> field.
        #/// </summary>
        #/// <param name="_retailSalesTable">
        #/// Extension table to be packed.
        #/// </param>
        #public void retailPackRetailSalesTable(RetailSalesTable _retailSalesTable)
        #{
        #    _retailSalesTable.SalesTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_retailSalesTable);
        #}
        #
      ENDSOURCE
      SOURCE #retailSalesTable
        #/// <summary>
        #/// Unpacks Retail extension table from <c>PackedExtensions</c> field
        #/// </summary>
        #/// <param name="_packNewExtensionTable">
        #/// A Boolean value that indicates whether to pack new extension table record; optional.
        #/// </param>
        #/// <returns>
        #/// The unpacked <c>RetailSalesTable</c> record
        #/// </returns>
        #public RetailSalesTable retailSalesTable(boolean _packNewExtensionTable = true)
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSalesTable), _packNewExtensionTable);
        #}
      ENDSOURCE
      SOURCE #returnChangeStatus
        #/// <summary>
        #/// Changes the return status.
        #/// </summary>
        #/// <param name="_newStatus">
        #/// The <c>ReturnStatusHeader</c> enumeration value to set.
        #/// </param>
        #public void returnChangeStatus(ReturnStatusHeader _newStatus)
        #{
        #    if (this.RecId
        #        && this.ReturnStatus != _newStatus)
        #    {
        #        this.ReturnStatus = _newStatus;
        #        this.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #returnCreateReplacement
        #/// <summary>
        #///    Checks whether a replacement order can be created for the sales table that is in scope.
        #/// </summary>
        #/// <returns>
        #///    true if no replacement order exists; otherwise, false.
        #/// </returns>
        #public boolean returnCreateReplacement()
        #{
        #    boolean ret = true;
        #
        #    if (this.ReturnReplacementCreated == NoYes::Yes
        #    || (this.InterCompanyOrder && this.InterCompanyDirectDeliveryOrig))
        #    {
        #        ret = false;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #returnExistReturnToCustLines
        #/// <summary>
        #/// Determines if Return to cust lines exist for the sales order.
        #/// </summary>
        #/// <returns>
        #/// true if Return to cust lines exist; otherwise,false.
        #/// </returns>
        #public boolean returnExistReturnToCustLines()
        #{
        #    SalesLine               returnToCustLine;
        #    ReturnDispositionCode   returnDispositionCode;
        #
        #    select firstonly RecId from returnToCustLine
        #        where returnToCustLine.SalesId         == this.SalesId
        #           && returnToCustLine.SalesType       == SalesType::ReturnItem
        #           && returnToCustLine.ExpectedRetQty  >  0
        #        exists join returnDispositionCode
        #            where returnDispositionCode.DispositionCodeId == returnToCustLine.ReturnDispositionCodeId
        #            &&    returnDispositionCode.DispositionAction == DispositionAction::ReturnToCust;
        #
        #    return returnToCustLine.RecId;
        #}
      ENDSOURCE
      SOURCE #returnItem
        #/// <summary>
        #/// Indicates if the current item is the return item.
        #/// </summary>
        #/// <returns>
        #/// true if the current item is return item; otherwise, false.
        #/// </returns>
        #boolean returnItem()
        #{
        #    return this.type().returnItem();
        #}
      ENDSOURCE
      SOURCE #returnReservationAllowedIsSet
        #public boolean returnReservationAllowedIsSet()
        #{
        #    SalesLine returnLine;
        #    boolean   ret;
        #
        #    select firstonly RecId from returnLine where returnLine.SalesId                == this.SalesId &&
        #                                                 returnLine.ReturnAllowReservation == NoYes::Yes;
        #
        #    ret = returnLine.RecId ? true : false;
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #returnValidateDeleteReplaceId
        #/// <summary>
        #/// Launches a dialog box that asks for confirmation of deletion of the specified return order in case
        #/// a replacement order exists.
        #/// </summary>
        #/// <returns>
        #/// true if the user confirms deletion; otherwise, false.
        #/// </returns>
        #boolean returnValidateDeleteReplaceId()
        #{
        #    boolean ret = true;
        #
        #    // Are you sure you want to delete return order %1. A replacement order is attached
        #    if (this.ReturnReplacementId && Box::yesNo(strFmt("@SYS106299", this.ReturnItemNum), DialogButton::No) == DialogButton::No)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #salesTable_BR
        #/// <summary>
        #/// Recovers brazilian extension table
        #/// </summary>
        #/// <returns>
        #/// A record of <c>SalesTable_BR</c>
        #/// </returns>
        #public SalesTable_BR salesTable_BR()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_BR));
        #}
        #
      ENDSOURCE
      SOURCE #salesTable_IN
        #/// <summary>
        #/// Recovers india extension table
        #/// </summary>
        #/// <returns>
        #/// A record of <c>SalesTable_IN</c>
        #/// </returns>
        #// <GIN>
        #public SalesTable_IN salesTable_IN()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_IN));
        #}
        #// </GIN>
        #
      ENDSOURCE
      SOURCE #salesTable_Intrastat
        #/// <summary>
        #/// Retrieves <c>SalesTable_Intrastat</c> extension table record.
        #/// </summary>
        #/// <returns>
        #/// The extension table record related to current record.
        #/// </returns>
        #public SalesTable_Intrastat salesTable_Intrastat()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_Intrastat));
        #}
        #
      ENDSOURCE
      SOURCE #salesTable_RU
        #/// <summary>
        #/// Gets extension table record for current base table record.
        #/// </summary>
        #/// <returns>
        #/// The extension table record.
        #/// </returns>
        #public SalesTable_RU salesTable_RU()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_RU));
        #}
        #
      ENDSOURCE
      SOURCE #salesTable_W
        #/// <summary>
        #///    Gets extension table record for current base table record.
        #/// </summary>
        #/// <returns>
        #///    The extension table record.
        #/// </returns>
        #public SalesTable_W salesTable_W()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_W));
        #}
        #
      ENDSOURCE
      SOURCE #salesTableExtensionTH
        #/// <summary>
        #/// Get the <c>SalesTableExtensionTH</c> table.
        #/// </summary>
        #/// <returns>
        #/// The table <c>SalesTableExtensionTH</c> associated with the current record.
        #/// </returns>
        #public SalesTableExtensionTH salesTableExtensionTH()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTableExtensionTH));
        #}
      ENDSOURCE
      SOURCE #sendReturnOrderElectronically
        #public void sendReturnOrderElectronically(XMLDocPurpose _xmlDocPurpose, AifSendMode _aifSendMode = AifSendMode::Async)
        #{
        #    AxdSendContext          axdSendContext      = AxdSendContext::construct();
        #    AifEntityKey            aifEntityKey        = AifEntityKey::construct();
        #    AifAction               aifAction;
        #    AifConstraint           aifConstraint       = new AifConstraint();
        #    AifConstraintList       aifConstraintList   = new AifConstraintList();
        #
        #    aifAction = AifAction::find(AifSendService::getDefaultSendAction(classNum(ReturnReturnOrderOutService),AifSendActionType::SendByKey));
        #
        #    aifEntityKey.parmTableId(this.TableId);
        #    aifEntityKey.parmRecId(this.RecId);
        #    aifEntityKey.parmKeyDataMap(SysDictTable::getKeyData(this));
        #
        #    axdSendContext.parmXMLDocPurpose(_xmlDocPurpose);
        #    axdSendContext.parmSecurity(false);
        #
        #    aifConstraint.parmType(AifConstraintType::Customer);
        #    aifConstraint.parmId(this.CustAccount);
        #    aifConstraintList.addConstraint(aifConstraint);
        #
        #    AifSendService::submitDefault(classNum(ReturnReturnOrderOutService),
        #                                    aifEntityKey,
        #                                    aifConstraintList,
        #                                    _aifSendMode,
        #                                    axdSendContext.pack());
        #}
      ENDSOURCE
      SOURCE #setAgreement_RU
        #/// <summary>
        #///     Initializes sales order from the agreement.
        #/// </summary>
        #public void setAgreement_RU()
        #{
        #    SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        #    SalesAgreementHeader salesAgreementHeader;
        #    SalesTable_RU salesTableRU;
        #
        #    salesTableRU = this.salesTable_RU();
        #
        #    if (salesTableRU.AgreementHeaderExt_RU)
        #    {
        #        salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU);
        #
        #        salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);
        #
        #        if (Box::yesNo("@SYS305724",DialogButton::Yes) == DialogButton::Yes)
        #        {
        #            // Transfer default settings from Agreement to SalesTable buffer...
        #            this.initFromSalesAgreementHeader(salesAgreementHeader);
        #        }
        #        else
        #        {
        #            this.DefaultDimension = this.copyDimension(salesAgreementHeader.DefaultDimension);
        #        }
        #    }
        #    else
        #    {
        #        this.MatchingAgreement = 0;
        #        this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
        #        this.transferCustAccount_Server(true);
        #        this.initInvoiceAccount();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #setDeliveryName
        #/// <summary>
        #/// Sets the delivery name field that is based on a specified logistic location.
        #/// </summary>
        #/// <param name="_skipDeliveryRoleCheck">
        #/// A flag indicating whether this is a new online Retail sale; optional;
        #/// </param>
        #public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
        #{
        #    this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
        #}
      ENDSOURCE
      SOURCE #setEstimate
        #/**
        #    Returns true if the estimated amount is calculated and has changed
        #**/
        #server boolean setEstimate(SalesTotals _salesTotals = null)
        #{
        #    SalesTotals             salesTotals;
        #    SalesUpdate             qtySpec;
        #    CustParameters          custParameters          = CustParameters::find();
        #    TypeOfCreditmaxCheck    typeOfCreditmaxCheck    = custParameters.CreditMaxCheck;
        #    boolean                 hasEstimatedChanged;
        #    AmountMST               estimatedOld;
        #    MCRSalesOrderTotals      mcrSalesOrderTotals;
        #
        #    hasEstimatedChanged = false;
        #    //Total estimate for the order would be calculated on order save, if credit limit check is enabled for the company.
        #    if (this.custTable_CustAccount().shouldEstimateBeCalculated())
        #    {
        #        qtySpec = (typeOfCreditmaxCheck == TypeOfCreditmaxCheck::BalanceDelivered ? SalesUpdate::PackingSlip :
        #                   typeOfCreditmaxCheck == TypeOfCreditmaxCheck::BalanceAll       ? SalesUpdate::All         : 0);
        #
        #        if (qtySpec && this.isCreditCheckEligible())
        #        {
        #            estimatedOld        = this.Estimate;
        #
        #            if (this.mcrIsCallCenter())
        #            {
        #                if (qtySpec == SalesUpdate::All)
        #                {
        #                    mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        #                    this.Estimate = Currency::amountCur2MST(mcrSalesOrderTotals.getRemainingOrder(), this.CurrencyCode);
        #                }
        #                else
        #                {
        #                    salesTotals         = SalesTotals::construct(this, qtySpec);
        #                    this.Estimate       = Currency::amountCur2MST(salesTotals.totalAmount(), this.CurrencyCode);
        #                }
        #            }
        #            else
        #            {
        #                salesTotals         = (_salesTotals == null) ? SalesTotals::construct(this, qtySpec) : _salesTotals;
        #                this.Estimate       = Currency::amountCur2MST(salesTotals.totalAmount(), this.CurrencyCode, this.fixedExchRate());
        #            }
        #
        #            hasEstimatedChanged = (this.Estimate != estimatedOld);
        #        }
        #    }
        #
        #    this.Touched = NoYes::No;
        #
        #    return hasEstimatedChanged;
        #}
      ENDSOURCE
      SOURCE #setInventSiteId
        #public void setInventSiteId(InventSiteId _inventSiteId)
        #{
        #    this.InventSiteId = _inventSiteId;
        #    this.modifiedInventSiteFromParent();
        #}
      ENDSOURCE
      SOURCE #setListCode
        #void setListCode()
        #{
        #    this.Listcode = EUSalesList::resolveListCode(this.deliveryAddress().CountryRegionId);
        #}
      ENDSOURCE
      SOURCE #setLocation
        #/// <summary>
        #/// Sets the delivery address information and related information.
        #/// </summary>
        #/// <param name="_location">
        #/// The record ID of the logistics location.
        #/// </param>
        #/// <param name="_skipDeliveryRoleCheck">
        #/// A flag indicating whether this is a new online Retail sale; optional;
        #/// </param>
        #/// <remarks>
        #/// If the <c>SalesType</c> enumeration value is <c>ReturnItem</c>, the address is set to the default
        #/// value of a receiving address.
        #/// </remarks>
        #void  setLocation(LogisticsLocationRecId _location, boolean _skipDeliveryRoleCheck = false)
        #{
        #    LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(_location);
        #    Common transferFromTable;
        #
        #    this.DeliveryPostalAddress = location.getPostalAddress().RecId;
        #
        #    if (location)
        #    {
        #        this.setDeliveryName(_skipDeliveryRoleCheck);
        #
        #        this.Email                      = location.getEmail();
        #        this.url                        = location.getURL();
        #
        #        if (this.SalesType == SalesType::ReturnItem)
        #        {
        #            transferFromTable = this.getDeliveryEntityRecord();
        #            this.AddressRefRecId = transferFromTable.RecId;
        #            this.AddressRefTableId = transferFromTable.TableId;
        #        }
        #        else
        #        {
        #            this.AddressRefRecId            = location.parmLocationRecId();
        #            this.AddressRefTableId          = tableNum(LogisticsLocation);
        #        }
        #    }
        #    this.setListCode();
        #    this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, _location));
        #}
      ENDSOURCE
      SOURCE #setNameUsingVATNum
        #private void setNameUsingVATNum(VATNum                              _vatNum,
        #                                LogisticsAddressCountryRegionId     _countryRegionId,
        #                                Name                                _name,
        #                                CustParameters                      _custParameters = CustParameters::find())
        #{
        #    TaxVATNumTable      taxVATNumTable;
        #    CountryRegionType   countryRegionType;
        #
        #    taxVATNumTable = TaxVATNumTable::find(_vatNum, _countryRegionId);
        #
        #    if (taxVATNumTable.Name)
        #    {
        #        this.SalesName      = taxVATNumTable.Name;
        #    }
        #    else
        #    {
        #        switch(_custParameters.MandatoryInvoiceVATNum)
        #        {
        #            case TaxVATNumCountryRegionType::None:
        #                this.SalesName = _name;
        #                break;
        #            case TaxVATNumCountryRegionType::DomesticEU:
        #                countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
        #                switch(countryRegionType)
        #                {
        #                    case CountryRegionType::Domestic:
        #                    case CountryRegionType::EU:
        #                        this.SalesName = '';
        #                        break;
        #                    default:
        #                        this.SalesName = _name;
        #                        break;
        #                }
        #                break;
        #            case TaxVATNumCountryRegionType::EU:
        #                countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
        #                switch(countryRegionType)
        #                {
        #                    case CountryRegionType::EU:
        #                        this.SalesName = '';
        #                        break;
        #                    default:
        #                        this.SalesName = _name;
        #                        break;
        #                }
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setPriceDiscChangePolicy
        #/// <summary>
        #/// Sets the price disc change policy.
        #/// </summary>
        #/// <param name="_policySource">
        #/// An outcome of the PriceDiscSystemSource enumeration specifying the source of the policy.
        #/// </param>
        #/// <param name="_fieldId">
        #/// The id of the field in question.
        #/// </param>
        #client server void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
        #{
        #    if (!this.isInterCompanyOrder())
        #    {
        #        this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Sales, _policySource, _fieldId);
        #    }
        #}
      ENDSOURCE
      SOURCE #setPriceDiscChangePolicyMultiLine
        #/// <summary>
        #/// Calls the <c>setPriceDiscChangePolicy</c> method with fixed price discount change parameters for
        #/// the multiline discount fields.
        #/// </summary>
        #public void setPriceDiscChangePolicyMultiLine()
        #{
        #    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesTable, MultiLineDisc));
        #}
      ENDSOURCE
      SOURCE #setPriceDiscSystemChangePolicy
        #/// <summary>
        #/// Determines the policy source for selected system sources.
        #/// </summary>
        #
        #void setPriceDiscSystemChangePolicy()
        #{
        #    if (this.ProjId)
        #    {
        #        this.setPriceDiscChangePolicy(PriceDiscSystemSource::Project);
        #    }
        #
        #    if (this.QuotationId)
        #    {
        #        this.setPriceDiscChangePolicy(PriceDiscSystemSource::SalesQuotation);
        #    }
        #}
      ENDSOURCE
      SOURCE #setReturnAddressFromInventLocationId
        #public boolean setReturnAddressFromInventLocationId(InventLocationId _inventLocationId)
        #{
        #    InventLocation                      inventLocation;
        #    LogisticsLocationRecId              inventLocationAddress;
        #
        #    boolean                             addressSet;
        #
        #    addressSet = false;
        #
        #    if (_inventLocationId)
        #    {
        #        inventLocation          = InventLocation::find(_inventLocationId);
        #        inventLocationAddress   = LogisticsLocationDefault::findSimpleDefault(inventLocation,
        #                                    LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;
        #
        #        if (inventLocationAddress)
        #        {
        #            this.setLocation(inventLocationAddress);
        #            addressSet = true;
        #        }
        #    }
        #
        #    if (!addressSet)
        #    {
        #        addressSet = this.setReturnAddressFromInventSiteId(this.InventSiteId);
        #    }
        #
        #    return addressSet;
        #}
      ENDSOURCE
      SOURCE #setReturnAddressFromInventSiteId
        #public boolean setReturnAddressFromInventSiteId(InventSiteId _inventSiteId)
        #{
        #    LogisticsLocationRecId          logisticsLocationRecId;
        #    boolean                         addressSet = false;
        #
        #    if (_inventSiteId)
        #    {
        #        logisticsLocationRecId = LogisticsLocationDefault::findSimpleDefault(InventSite::find(_inventSiteId), LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;
        #
        #        if (logisticsLocationRecId)
        #        {
        #            this.setLocation(logisticsLocationRecId);
        #            addressSet = true;
        #        }
        #    }
        #
        #    if (!addressSet)
        #    {
        #        this.initDefaultReturnAddress();
        #        addressSet = true;
        #    }
        #
        #    return addressSet;
        #}
      ENDSOURCE
      SOURCE #setShipCarrierFromLogisticsLocation
        #/// <summary>
        #/// Sets the ship carrier data both on the header and the line level, depending on the
        #/// <c>LogisticsLocation</c> data.
        #/// </summary>
        #/// <param name="_logisticsLocation">
        #/// A <c>LogisticsLocation</c> record of a ship carrier.
        #/// </param>
        #/// <param name="_addressRecId">
        #/// The <c>LogisticsPostalAddress</c> record ID of the ship carrier.
        #/// </param>
        #/// <param name="_shipCarrierAddress">
        #/// A <c>ShipCarrierAddress</c> record.
        #/// </param>
        #/// <remarks>
        #/// If the ship carrier address has delivery terms assigned, the delivery terms are transferred to the
        #/// sales header.
        #/// </remarks>
        #public void setShipCarrierFromLogisticsLocation(LogisticsLocation _logisticsLocation,  LogisticsPostalAddressRecId _addressRecId, ShipCarrierAddress _shipCarrierAddress = null)
        #{
        #    ShipCarrierAddress      shipCarrierAddress;
        #    CustTable               custTable = this.custTable_CustAccount();
        #
        #    if (_shipCarrierAddress)
        #    {
        #        shipCarrierAddress = _shipCarrierAddress;
        #    }
        #    else
        #    {
        #        shipCarrierAddress = ShipCarrierAddress::findByCustomerLocation(this.CustAccount, _logisticsLocation.RecId);
        #    }
        #
        #    this.SalesShipCarrierMap::setShipCarrierFromLogisticsLocation(
        #        _logisticsLocation,
        #        _addressRecId,
        #        shipCarrierAddress);
        #
        #    if (shipCarrierAddress.DlvTermId)
        #    {
        #        this.DlvTerm = shipCarrierAddress.DlvTermId;
        #    }
        #    else
        #    {
        #        this.DlvTerm = custTable.DlvTerm;
        #    }
        #
        #    this.ShipCarrierResidential     = shipCarrierAddress.ShipCarrierResidentialDest;
        #    this.ShipCarrierBlindShipment   = shipCarrierAddress.ShipCarrierBlindShipment;
        #    this.ShipCarrierFuelSurcharge   = custTable.ShipCarrierFuelSurcharge;
        #}
      ENDSOURCE
      SOURCE #setShipCarrierInformation
        #void setShipCarrierInformation(SalesTable           _salesTable,
        #                               CustPackingSlipJour  _custPackingSlipJour = null,
        #                               CustInvoiceJour      _custInvoiceJour = null)
        #{
        #    DlvMode     dlvMode;
        #    DlvModeId   dlvModeId;
        #
        #    if (_custPackingSlipJour)
        #    {
        #        dlvModeId   = _custPackingSlipJour.DlvMode;
        #    }
        #    else if (_custInvoiceJour)
        #    {
        #        dlvModeId   = _custInvoiceJour.DlvMode;
        #    }
        #    else
        #    {
        #        dlvModeId = _salesTable.DlvMode;
        #    }
        #
        #    dlvMode = DlvMode::find(dlvModeId);
        #
        #    this.ShipCarrierId              = dlvMode.ShipCarrierId;
        #    this.ShipCarrierAccountCode     = dlvMode.ShipCarrierAccountCode;
        #    this.ShipCarrierDlvType         = dlvMode.ShipCarrierDlvType;
        #
        #    if (_salesTable)
        #    {
        #        this.ShipCarrierAccount         = _salesTable.ShipCarrierAccount;
        #        this.ShipCarrierDeliveryContact = _salesTable.ShipCarrierDeliveryContact;
        #        this.ShipCarrierFuelSurcharge   = _salesTable.ShipCarrierFuelSurcharge;
        #        this.ShipCarrierBlindShipment   = _salesTable.ShipCarrierBlindShipment;
        #        this.ShipCarrierResidential     = _salesTable.ShipCarrierResidential;
        #    }
        #}
      ENDSOURCE
      SOURCE #setTaxGroup
        #void setTaxGroup(TaxGroup _taxGroup)
        #{
        #    SalesTableType salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.setTaxGroup(_taxGroup);
        #}
      ENDSOURCE
      SOURCE #settleExchRate
        #CustExchRate settleExchRate(boolean throwOnError = false)
        #{
        #    QueryRun        queryRun;
        #    CustTransOpen   custTransOpen;
        #    CustTrans       custTrans;
        #    CustExchRate    exchRate = 0;
        #    CustExchRate    custExchRate;
        #
        #    if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        #    {
        #        queryRun = SpecTrans::createQueryRunToRefTable(this.company(), this.TableId, this.RecId, tableNum(CustTransOpen));
        #
        #        queryRun.allowCrossCompany(true);
        #
        #        while (queryRun.next())
        #        {
        #            if (queryRun.changed(tableNum(CustTransOpen)))
        #            {
        #                custTransOpen = queryRun.get(tableNum(CustTransOpen)) as CustTransOpen;
        #                if (custTransOpen)
        #                {
        #                    custTrans = custTransOpen.custTrans();
        #                    custExchRate = round(custTrans.AmountMST * 100 / custTrans.AmountCur, 0.01);
        #                    if (!exchRate)
        #                    {
        #                        exchRate = custExchRate;
        #                    }
        #                    else
        #                    {
        #                        if (exchRate != custExchRate)
        #                        {
        #                            exchRate = 0;
        #                            if (throwOnError)
        #                            {
        #                                throw error("@SYS59594");
        #                            }
        #
        #                            checkFailed("@SYS59594");
        #                            break;
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return exchRate;
        #}
      ENDSOURCE
      SOURCE #shipCarrierLocation
        #/// <summary>
        #/// Gets the record ID of the record in the <c>LogisticsLocationRecId</c> table that is associated with
        #/// the selected ship carrier postal address.
        #/// </summary>
        #/// <returns>
        #/// The record ID of the record in the <c>LogisticsLocationRecId</c> table.
        #/// </returns>
        #public LogisticsLocationRecId shipCarrierLocation()
        #{
        #    return LogisticsPostalAddress::getLocation(this.ShipCarrierPostalAddress);
        #}
      ENDSOURCE
      SOURCE #shipCarrierThirdPartyName
        #Name shipCarrierThirdPartyName()
        #{
        #    return LogisticsLocationEntity::findLocation(this.custTable_CustAccount(), LogisticsLocationRoleType::ShipCarrierThirdPartyShipping).parmLocationDescription();
        #}
      ENDSOURCE
      SOURCE #showContactPerson
        #display ContactPersonName showContactPerson()
        #{
        #    return ContactPerson::find(this.ContactPersonId).personName();
        #}
      ENDSOURCE
      SOURCE #showDocHanIcon
        #// AOSRunMode::Called
        #display smmDocIconNum showDocHanIcon()
        #{
        #    #macrolib.resource
        #
        #    if ((select docuRef
        #           where docuRef.RefCompanyId == this.DataAreaId &&
        #                 docuRef.RefTableId   == this.TableId &&
        #                 docuRef.RefRecId     == this.RecId).RecId)
        #    {
        #        return #RES_NODE_DOC;
        #    }
        #
        #    return #RES_AM_NEW;
        #}
      ENDSOURCE
      SOURCE #smmAmountDeliveredMST
        #server display AmountMST smmAmountDeliveredMST()
        #{
        #    return this.amountMST(this.amountDelivered());
        #}
      ENDSOURCE
      SOURCE #smmAmountInvoicedMST
        #server display AmountMST smmAmountInvoicedMST()
        #{
        #    return this.amountMST(this.amountInvoiced());
        #}
      ENDSOURCE
      SOURCE #smmAmountOrderedNotInvoicedMST
        #server display AmountMST smmAmountOrderedNotInvoicedMST()
        #{
        #    return this.amountMST(this.amountOrderedNotInvoiced());
        #}
      ENDSOURCE
      SOURCE #taxModuleType
        #TaxModuleType taxModuleType()
        #{
        #    return TaxModuleType::Sales;
        #}
      ENDSOURCE
      SOURCE #timeZoneSite
        #display Timezone timeZoneSite()
        #{
        #    return InventSite::timeZoneSite(this.InventSiteId);
        #}
      ENDSOURCE
      SOURCE #tmsDisplayExpressBOL
        #/// <summary>
        #/// Displays the Customer's express bill of lading.
        #/// </summary>
        #/// <returns>
        #/// The customer's express bill of lading.
        #/// </returns>
        #// BP Deviation Documented
        #public display TMSExpressBillofLading tmsDisplayExpressBOL()
        #{
        #    return CustTable::find(this.CustAccount).ExpressBillOfLading;
        #}
      ENDSOURCE
      SOURCE #tmsDisplayRoute
        #/// <summary>
        #/// Displays the Route associated with the Sales order, if applicable.
        #/// </summary>
        #/// <returns>
        #/// The Route code if there is only one associated with the order, otherwise an empty string or "Multiple".
        #/// </returns>
        #/// <remarks>
        #/// Unfortunately we cannot cache this display method by either decorating this method with the
        #/// [SysClientCacheDataMethodAttribute(true)] attribute or adding this method to the cache on the
        #/// Sales Table Form. Reason behind is that it triggers many database calls for retrieving tmsDisplayRoute
        #/// data for all Sales orders that are in current query. Instead, custom cache is implemented in
        #/// the SaleTableForm class.
        #/// </remarks>
        #// BP Deviation Documented
        #public server display TMSRouteCode tmsDisplayRoute()
        #{
        #    SalesLine                   salesLine;
        #    TMSRouteSegmentLoadLine     segmentLine;
        #    TMSRouteCode                ret;
        #    int                         counter = 0;
        #
        #    while select RouteCode from segmentLine
        #        group by RouteCode
        #        exists join salesLine
        #            where salesLine.InventTransId   == segmentLine.InventTransId
        #               && salesLine.SalesId         == this.SalesId
        #    {
        #        ret = segmentLine.RouteCode;
        #        ++counter;
        #
        #        if (counter > 1)
        #        {
        #            break;
        #        }
        #    }
        #
        #    switch (counter)
        #    {
        #        case 0:
        #            ret = "";
        #            break;
        #        case 1:
        #            break;
        #        default:
        #            ret = "@SYS78137";
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #totalWeightAndVolume
        #/// <summary>
        #/// Calculates total weight and volume aggregated over all sales order lines.
        #/// </summary>
        #/// <returns>
        #/// Container with two elements: total wieght and total volume.
        #/// </returns>
        #public container totalWeightAndVolume()
        #{
        #    Volume      totalVolume;
        #    Weight      totalWeight;
        #    SalesLine   salesLine;
        #
        #    while select ItemId, QtyOrdered from salesLine
        #        where salesLine.SalesId == this.SalesId
        #    {
        #        totalWeight += salesLine.tmsWeight();
        #        totalVolume += salesLine.tmsVolume();
        #    }
        #
        #    return [totalWeight, totalVolume];
        #}
      ENDSOURCE
      SOURCE #tpAddress
        #Addressing tpAddress()
        #{
        #    return LogisticsLocationEntity::findPostalAddress(this.custTable_CustAccount(), LogisticsLocationRoleType::ShipCarrierThirdPartyShipping).Address;
        #}
      ENDSOURCE
      SOURCE #transferCustAccount
        #client server void  transferCustAccount(boolean _isReplacementOrder = false)
        #{
        #    boolean initFromCustTable = true;
        #
        #    #IsoCountryRegionCodes
        #
        #    if (this.CustAccount)
        #    {
        #        if (!_isReplacementOrder && SalesParameters::find().PromptTransfer &&
        #            Box::yesNo("@SYS418", DialogButton::Yes) != DialogButton::Yes)
        #        {
        #            initFromCustTable = false;
        #        }
        #
        #        this.transferCustAccount_Server(initFromCustTable);
        #
        #        // copy the raw RU fields using this.data().salesTable_RU() from the
        #        // extension to the buffer instance using this.salesTable_RU().data(<input>)
        #        // because the RPC causes a disconnect
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoRU]))
        #        {
        #            this.salesTable_RU().data(this.data().salesTable_RU());
        #        }
        #
        #        if (BrazilParameters::isEnabled())
        #        {
        #            this.salesTable_BR().data(this.data().salesTable_BR());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #transferCustAccount_Server
        #server void  transferCustAccount_Server(boolean _initFromCustTable)
        #{
        #    MCRCustPaymTable mcrCustPaymTableCancel;
        #
        #    if (_initFromCustTable)
        #    {
        #        this.initFromCustTable();
        #        if (this.CustAccount != this.InvoiceAccount)
        #        {
        #            this.transferInvoiceAccount();
        #        }
        #    }
        #    else
        #    {
        #        this.initFromCustTableMandatoryFields();
        #    }
        #    this.copyThirdPartyAddressFromCust();
        #    SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRPayment)))
        #    {
        #        // If Invoice Account has changed back out any existing payments
        #        // that are not for the new invoice account.
        #        while select RecId,RefRecId,RefTableId,CustAccount from mcrCustPaymTableCancel
        #            where mcrCustPaymTableCancel.RefRecId == this.RecId &&
        #                    mcrCustPaymTableCancel.RefTableId == this.TableId  &&
        #                    mcrCustPaymTableCancel.CustAccount != this.InvoiceAccount
        #        {
        #            MCRCustPaymTable::cancelPaym(mcrCustPaymTableCancel.RecId);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #transferInvoiceAccount
        #void transferInvoiceAccount()
        #{
        #    MCRCustPaymTable mcrCustPaymTableCancel;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #
        #        // Invoice account has changed so back out any existing payments
        #        // that are not for the new invoice account.
        #        while select RefRecId,RecId,TableId,CustAccount from mcrCustPaymTableCancel
        #            where mcrCustPaymTableCancel.RefRecId == this.RecId &&
        #                  mcrCustPaymTableCancel.RefTableId == this.TableId  &&
        #                  mcrCustPaymTableCancel.CustAccount != this.InvoiceAccount
        #        {
        #            MCRCustPaymTable::cancelPaym(mcrCustPaymTableCancel.RecId);
        #        }
        #    }
        #    if (SalesParameters::find().PromptTransfer)
        #    {
        #        if (Box::yesNo("@SYS19435"+'\n\n'+this.InvoiceAccount+'\n\n'+CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
        #        {
        #            this.initInvoiceAccount();
        #        }
        #    }
        #    else
        #    {
        #        this.initInvoiceAccount();
        #    }
        #
        #    if (this.transferTaxDefaultsFromInvoiceAcc())
        #    {
        #        this.initTaxDefaultsFromInvoiceAccount();
        #    }
        #}
      ENDSOURCE
      SOURCE #transferTaxDefaultsFromInvoiceAcc
        #private boolean transferTaxDefaultsFromInvoiceAcc()
        #{
        #    #ISOCountryRegionCodes
        #    boolean includeTaxDefaults;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        #    {
        #        switch(CustParameters::find().UseFiscalInvoiceAccount)
        #        {
        #            case UseFiscalInvoiceAccount::Always:
        #                includeTaxDefaults = true;
        #                break;
        #            case UseFiscalInvoiceAccount::Ask:
        #                if (Box::yesNo("@SYS112098"+'\n\n'+ this.InvoiceAccount+'\n\n'+ CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
        #                {
        #                    includeTaxDefaults = true;
        #                }
        #                break;
        #            case UseFiscalInvoiceAccount::Never:
        #                break;
        #        }
        #    }
        #    return includeTaxDefaults;
        #}
      ENDSOURCE
      SOURCE #transferToOnetimeCustomer
        #/// <summary>
        #/// Updates the related one time customer entity based on the sales order.
        #/// </summary>
        #server void transferToOnetimeCustomer()
        #{
        #    CustomerEntity customerEntity;
        #    if (this.OneTimeCustomer)
        #    {
        #        ttsbegin;
        #        customerEntity = DirParty::constructFromCommon(this.custTable_CustAccount(),
        #                                                       DateTimeUtil::getSystemDateTime(),
        #                                                       DirPartyType::None,
        #                                                       true,
        #                                                       false);
        #        customerEntity.initFromSalesTable(this);
        #        customerEntity.update();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #type
        #SalesTableType type()
        #{
        #    return SalesTableType::construct(this);
        #}
      ENDSOURCE
      SOURCE #unlinkAgreement
        #server private void unlinkAgreement(boolean _unlinkLines      = false,
        #                                    boolean _recalculatePrice = false
        #                                    ,boolean _doUpdateSalesTable = true
        #                                    ,boolean _doUpdateSalesLine  = true
        #                                    )
        #{
        #    AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;
        #    SalesLine                   salesLine;
        #    boolean                     restorePriceDiscChagnePolicy = true;
        #    SalesTable_RU               salesTableRU;
        #
        #    #ISOCountryRegionCodes
        #
        #
        #    if (this.MatchingAgreement)
        #    {
        #        ttsbegin;
        #
        #        if (_unlinkLines)
        #        {
        #            while select forupdate salesLine
        #                    where salesLine.SalesId == this.SalesId
        #            {
        #                if (salesLine.MatchingAgreementLine)
        #                {
        #                    if (_recalculatePrice)
        #                    {
        #                        SalesLine::modifySalesQty(salesLine,salesLine.inventDim());
        #                        restorePriceDiscChagnePolicy = false;
        #                    }
        #                    if (restorePriceDiscChagnePolicy)
        #                    {
        #                        // Set Price Discount Change Policy originated by PriceDiscSystemSource::Agreement.
        #                        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
        #                    }
        #
        #                    salesLine.unLinkAgreementLine(
        #                                                  _doUpdateSalesLine
        #                                                  );
        #                }
        #            }
        #        }
        #
        #        delete_from agreementReleaseHeaderMatch
        #        where agreementReleaseHeaderMatch.SalesTableSalesId == this.SalesId
        #           && agreementReleaseHeaderMatch.SalesTableDataAreaId == this.DataAreaId;
        #
        #        this.MatchingAgreement = 0;
        #
        #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #        {
        #            salesTableRU = this.salesTable_RU();
        #            salesTableRU.AgreementHeaderExt_RU = 0;
        #            this.packSalesTable_RU(salesTableRU);
        #
        #            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
        #        }
        #
        #        if (_doUpdateSalesTable)
        #        {
        #            this.doUpdate();
        #        }
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #unlinkAgreementPrompt
        #public boolean unlinkAgreementPrompt(
        #                                     boolean _doUpdateSalesTable = true
        #                                     )
        #{
        #    Dialog       dialog;
        #    DialogField  dialogField;
        #    boolean      linesExist;
        #
        #    if (this.MatchingAgreement)
        #    {
        #        linesExist = SalesLine::exist(this.SalesId);
        #        dialog = new Dialog();
        #        dialog.addText("@SYS305715");
        #        if (linesExist)
        #        {
        #            dialogField = dialog.addField(extendedTypeStr(NoYesId), "@SYS23228", "@SYS305716");
        #            dialogField.value(NoYes::Yes);
        #        }
        #        if (!dialog.run())
        #        {
        #            return false;
        #        }
        #
        #        if (linesExist)
        #        {
        #            this.unlinkAgreement(linesExist, dialogField.value()
        #                                 , _doUpdateSalesTable
        #                                 );
        #        }
        #        else
        #        {
        #            this.unlinkAgreement(linesExist, false
        #                                 , _doUpdateSalesTable
        #                                 );
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #update
        #public void  update()
        #{
        #    SalesTableType salesTableType;
        #    boolean calcEstimateAfterUpdate;
        #
        #    ttsbegin;
        #
        #    salesTableType = this.type();
        #
        #    this.Touched = NoYes::No;
        #
        #    calcEstimateAfterUpdate = this.mustDoCreditLimitAfterUpdate();
        #
        #    salesTableType.update();
        #
        #    this.SysExtensionSerializerMap::postUpdate();
        #
        #    if (calcEstimateAfterUpdate)
        #    {
        #        if (this.setEstimate())
        #        {
        #            this.doUpdate();
        #        }
        #
        #        if (CustParameters::find().salesCheckCreditOnHeader())
        #        {
        #            this.checkAgainstCreditLimit();
        #        }
        #    }
        #
        #    // Update the CRM transaction log
        #    smmTransLog::initTrans(this, smmLogAction::update);
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateBackStatus
        #void  updateBackStatus()
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateBackStatus();
        #}
      ENDSOURCE
      SOURCE #updateDeadline
        #void  updateDeadline(SalesDeadline  deadline)
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateDeadline(deadline);
        #}
      ENDSOURCE
      SOURCE #updateDeadlineOnLine
        #void updateDeadlineOnLine()
        #{
        #    SalesLine   salesLine;
        #
        #    ttsbegin;
        #
        #    update_recordset salesLine
        #        setting ReturnDeadline = this.ReturnDeadline
        #        where   salesLine.SalesId == this.SalesId;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateDocumentStatus
        #void  updateDocumentStatus(DocumentStatus  documentStatus)
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateDocumentStatus(documentStatus);
        #
        #    if (documentStatus == DocumentStatus::Confirmation)
        #    {
        #        RetailEventNotificationAction::InsertRetailOENAction(
        #                        RetailEventNotificationType::OrderConfirmation,
        #                        this.RecId,
        #                        this);
        #    }
        #}
      ENDSOURCE
      SOURCE #updateFinalDisc
        #server void  updateFinalDisc()
        #{
        #    SalesLine salesLine;
        #    boolean   processDisc = true;
        #
        #    // Do not calculate final discounts if they've been overridden.
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        if (this.mcrSalesTable().PriceOverride)
        #        {
        #            processDisc = false;
        #        }
        #    }
        #
        #    if (processDisc)
        #    {
        #        if (this.icCheckUpdateHeaderDiscounts()
        #               && this.PriceDiscHeading::updateFinalDisc(salesLine))
        #        {
        #            // This will trigger the creditlimit calculation when salesTable.validateWrite is called
        #            this.Touched = NoYes::Yes;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateLedgerCov
        #public void  updateLedgerCov()
        #{
        #    SalesTableType salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateLedgerCov();
        #}
      ENDSOURCE
      SOURCE #updateLineFieldsBasedOnHeaderChanges_BR
        #/// <summary>
        #/// It is responsible for updating the SalesLine when fiscal information
        #/// on header is changed
        #/// </summary>
        #public void updateLineFieldsBasedOnHeaderChanges_BR()
        #{
        #    SalesLine           salesLine;
        #    SalesLine_BR        salesLine_BR;
        #    CFOPValidation_BR   cfopValidation;
        #
        #    ttsbegin;
        #
        #    while select forupdate salesLine
        #        where salesLine.SalesId == this.SalesId
        #    {
        #
        #        cfopValidation = CFOPValidation_BR::construct(this);
        #
        #        salesLine_BR = salesLine.salesLine_BR();
        #        salesLine_BR.cfopTable_BR = cfopValidation.getDefaultCFOP();
        #        salesLine.packSalesLine_BR(salesLine_BR);
        #
        #        if (salesLine_BR.cfopTable_BR != salesLine_BR.orig().cfopTable_BR)
        #        {
        #            salesLine.setTaxGroupAndTaxItemGroupFields_BR();
        #
        #            salesLine_BR = salesLine.salesLine_BR();
        #            salesLine_BR.DeliveryCFOPTable_BR = CFOPTable_BR::find(salesLine_BR.cfopTable_BR).DeliveryCFOPTable_BR;
        #            salesLine.packSalesLine_BR(salesLine_BR);
        #
        #            salesLine.update();
        #
        #            salesLine.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        #        }
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateLineReasonCode
        #/// <summary>
        #/// Updates the reason code for the sales lines of a sales order.
        #/// </summary>
        #public server void updateLineReasonCode()
        #{
        #    SalesLine       tmpSalesLine;
        #    ReasonTableRef  reasonTableRefLine;
        #    ReasonCode      reasonCode;
        #
        #    reasonCode = ReasonTableRef::find(this.CreditNoteReasonCode).Reason;
        #
        #    ttsbegin;
        #
        #    while select forupdate CreditNoteReasonCode from tmpSalesLine
        #        where tmpSalesLine.SalesId == this.SalesId &&
        #            ((tmpSalesLine.RefReturnInvoiceTrans_W == 0 && tmpSalesLine.CreditNoteInternalRef_PL != 0) ||
        #            (tmpSalesLine.RefReturnInvoiceTrans_W != 0 && tmpSalesLine.CreditNoteInternalRef_PL == 0))
        #    {
        #        if (tmpSalesLine.CreditNoteReasonCode)
        #        {
        #            reasonTableRefLine = ReasonTableRef::find(tmpSalesLine.CreditNoteReasonCode, true);
        #            reasonTableRefLine.Reason = reasonCode;
        #            reasonTableRefLine.doUpdate();
        #        }
        #        else
        #        {
        #            if (reasonCode != "")
        #            {
        #                reasonTableRefLine.Reason = reasonCode;
        #                reasonTableRefLine.insert();
        #
        #                tmpSalesLine.CreditNoteReasonCode = reasonTableRefLine.RecId;
        #                tmpSalesLine.doUpdate();
        #            }
        #        }
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateLineReasonComment
        #/// <summary>
        #/// Updates the reason code comments for the sales lines of a sales order.
        #/// </summary>
        #public server void updateLineReasonComment()
        #{
        #    SalesLine       tmpSalesLine;
        #    ReasonComment   reasonComment;
        #
        #    reasonComment = ReasonTableRef::find(this.CreditNoteReasonCode).ReasonComment;
        #
        #    ttsbegin;
        #
        #    while select forupdate CreditNoteReasonCode from tmpSalesLine
        #        where tmpSalesLine.SalesId == this.SalesId &&
        #            ((tmpSalesLine.RefReturnInvoiceTrans_W == 0 && tmpSalesLine.CreditNoteInternalRef_PL != 0) ||
        #            (tmpSalesLine.RefReturnInvoiceTrans_W != 0 && tmpSalesLine.CreditNoteInternalRef_PL == 0))
        #    {
        #        tmpSalesLine.editReasonComment(true, reasonComment);
        #        tmpSalesLine.doUpdate();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateMultiLineDisc
        #server boolean  updateMultiLineDisc()
        #{
        #    SalesLine salesLine;
        #    boolean   ret;
        #
        #    if (this.PriceDiscHeading::updateMultiLineDisc(salesLine))
        #    {
        #        ret = true;
        #
        #        //This will trigger the creditlimit calculation when salesTable.validateWrite is called
        #        this.Touched = NoYes::Yes;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #updateSalesLineDelete
        #/// <summary>
        #/// Makes deletion-related updates to records in the <c>SalesTable</c> table.
        #/// </summary>
        #public void updateSalesLineDelete()
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateSalesLineDelete();
        #}
      ENDSOURCE
      SOURCE #updateSalesType
        #void  updateSalesType()
        #{
        #    SalesTableType  salesTableType;
        #
        #    salesTableType = this.type();
        #    salesTableType.updateSalesType();
        #}
      ENDSOURCE
      SOURCE #updateServiceCode_BR
        #/// <summary>
        #/// Updates lines service code values
        #/// </summary>
        #/// <param name="_servicecodeOnDlvAddress">
        #/// Defines the which method will be called to search <c>TaxServiceCode_BR</c>
        #/// </param>
        #server void updateServiceCode_BR(boolean _servicecodeOnDlvAddress)
        #{
        #    SalesLine                 salesLine;
        #
        #    ttsbegin;
        #
        #    while select forupdate salesLine
        #          where salesLine.SalesId   == this.SalesId
        #    {
        #        salesLine.setServiceCodeId_BR(_servicecodeOnDlvAddress);
        #        salesLine.doUpdate();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #boolean validateDelete(boolean _mcrCancel = false)
        #{
        #    boolean            ok = true;
        #    SalesTableType     salesTableType;
        #
        #    ok = super();
        #
        #    if (ok)
        #    {
        #        salesTableType = this.type();
        #        ok = salesTableType.validateDelete(_mcrCancel && this.mcrIsCallCenter());
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateField
        #boolean validateField(FieldId  _fieldId)
        #{
        #    boolean     ok = true;
        #    CustTable   custTable = CustTable::find(this.InvoiceAccount);
        #
        #    if (this.mcrIsCallCenter())
        #    {
        #        // A user may not turn on a price override via the checkbox,
        #        // they may only turn off the price override via the checkbox.
        #        if (_fieldId == fieldNum(MCRSalesTable, PriceOverride))
        #        {
        #            ok = ! this.mcrSalesTable().PriceOverride;
        #        }
        #
        #        // Warn that they are invoicing a merged customer
        #        if (_fieldId == fieldNum(SalesTable, InvoiceAccount))
        #        {
        #            if (custTable.mcrMergedParent)
        #            {
        #                warning(strFmt("@MCR12337",this.InvoiceAccount,custTable.mcrMergedParent));
        #                ok = false;
        #            }
        #        }
        #
        #        if (!this.LogisticsPostalAddressMap::validatePostalCode(_fieldId))
        #        {
        #            return false;
        #        }
        #    }
        #    ok = super(_fieldId) && ok;
        #
        #    if (ok)
        #    {
        #        ok = this.validateFieldServer(_fieldId);
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateFieldServer
        #/// <summary>
        #/// Validates a changed field on the server side.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// The field ID of the changed field.
        #/// </param>
        #/// <returns>
        #/// true if the validation succeeded; otherwise, false.
        #/// </returns>
        #public server boolean validateFieldServer(FieldId  _fieldId)
        #{
        #    boolean            ok;
        #    SalesTableType     salesTableType;
        #
        #    salesTableType = this.type();
        #    ok = salesTableType.validateField(_fieldId);
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean  validateWrite()
        #{
        #    boolean            ok = true;
        #
        #    ok = super();
        #    ok = ok && this.validateWriteServer();
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #validateWriteServer
        #server public boolean  validateWriteServer()
        #{
        #    boolean            ok = true;
        #    SalesTableType     salesTableType;
        #    MCROrderParameters mcrOrderParameters;
        #    smmCampaignTable   campaignTable;
        #    #ISOCountryRegionCodes
        #
        #    if (ok && !this.SalesId)
        #    {
        #        ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(SalesTable), fieldNum(SalesTable, SalesId))));
        #    }
        #    salesTableType = this.type();
        #
        #    if (ok && this.Touched)
        #    {
        #        ok = SalesTableType::checkAgainstCreditLimit(this);
        #    }
        #
        #    if (ok)
        #    {
        #        setPrefix(strFmt("@SYS25975", this.SalesId));
        #        ok = salesTableType.validateWrite();
        #    }
        #
        #    if (ok && this.InclTax && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]))
        #    {
        #        ok = this.SalesPurchTable::validateExcludeTaxFromInvoice();
        #    }
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        mcrOrderParameters = MCROrderParameters::find();
        #        // Check for sourceId if parameters set to mandatory.
        #        if (mcrOrderParameters.mcrSourceCodeRequired
        #            && this.SalesType != SalesType::ReturnItem
        #            && this.RecId
        #            && this.mcrSalesTable().SourceId == "")
        #        {
        #            ok = checkFailed("@MCR12004");
        #        }
        #
        #        // Don't allow user to create a sales order for a parent campaign.
        #        if (this.SmmCampaignId)
        #        {
        #            select firstonly RecId from campaignTable
        #                where campaignTable.CampaignParentId == this.SmmCampaignId;
        #            if (campaignTable.RecId)
        #            {
        #                ok = checkFailed("@MCR26162");
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #voidCreditCardPreauthorize
        #/// <summary>
        #/// Voids the credit card pre-authorization for a sales order.
        #/// </summary>
        #void voidCreditCardPreauthorize()
        #{
        #    CreditCardAuthTrans creditCardAuthTrans;
        #
        #    if (this.CreditCardCustRefId && this.isCreditCardPaymentType())
        #    {
        #        creditCardAuthTrans = CreditCardAuthTrans::findValidPreApproval(this.SalesId);
        #        if (creditCardAuthTrans != null)
        #        {
        #            CreditCardProcess::doVoidAuth(creditCardAuthTrans);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #whsCheckSalesLineDeliveryPostalAddress
        #/// <summary>
        #///     Validates the sales lines postal addresses for current sales order.
        #/// </summary>
        #/// <returns>
        #///     false if the <c>SalesLine</c> table <c>DeliveryPostalAddress</c> field is 0; otherwise, true.
        #/// </returns>
        #public boolean whsCheckSalesLineDeliveryPostalAddress()
        #{
        #    SalesLine   salesLine;
        #    boolean     ok = true;
        #
        #    select firstonly RecId from salesLine
        #        where salesLine.SalesId                == this.SalesId
        #            && salesLine.DeliveryPostalAddress == 0;
        #
        #    ok = salesLine.RecId == 0;
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #changeReturnStatus
        #public static Counter changeReturnStatus(FormDataSource _datasource, ReturnUpdateAction _updateAction)
        #{
        #    SalesTable          returnTable;
        #    SalesLine           returnLine;
        #    SalesTable          returnTableUpdate;
        #    Counter             numberOfRecords;
        #    SalesTable          salesTable;
        #    PurchTable          purchTable;
        #    PurchLine           purchLine;
        #
        #    ttsbegin;
        #
        #    for (returnTable = (_datasource.getFirst(true) ? _datasource.getFirst(true) : _datasource.cursor()) as SalesTable;
        #        returnTable;
        #        returnTable = _datasource.getNext() as SalesTable)
        #    {
        #        if (returnTable.ReturnStatus == ReturnStatusHeader::Created && !returnTable.existRegisteredReceivedInvoicedLines() && !returnTable.type().interCompanyIsDerivedOrder())
        #        {
        #            if (_updateAction == ReturnUpdateAction::Cancel)
        #            {
        #                while select forupdate returnLine
        #                      where returnLine.SalesId == returnTable.SalesId
        #                {
        #                    if (returnLine.interCompanySalesLineExist())
        #                    {
        #                        purchLine            = PurchLine::findInventTransId(returnLine.InventRefTransId,true);
        #                        purchTable           = PurchTable::find(purchLine.PurchId);
        #
        #                        purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
        #                        purchLine.delete(false);
        #
        #                        if (!purchTable.existPurchLine())
        #                        {
        #                            if (purchTable.InterCompanyCompanyId
        #                            &&  purchTable.InterCompanySalesId)
        #                            {
        #                                changecompany(purchTable.InterCompanyCompanyId)
        #                                {
        #                                    salesTable = null;
        #                                    salesTable = SalesTable::find(purchTable.InterCompanySalesId,true);
        #                                    if (salesTable)
        #                                        salesTable.delete();
        #                                }
        #                            }
        #                        }
        #                    }
        #
        #                    returnLine.SalesQty     = 0;
        #                    returnLine.CostPrice    = 0;
        #                    returnLine.ExpectedRetQty  = 0;
        #                    returnLine.salesQtyModified();
        #                    returnLine.DeliveryType = TradeLineDlvType::None;
        #                    returnLine.SkipUpdate   = InterCompanySkipUpdate::Internal;
        #                    returnLine.ReturnStatus = ReturnStatusLine::Canceled;   // This assignment is required to make sure that InventPendingQuantity gets cleaned up
        #                    returnLine.SalesStatus  = SalesStatus::Canceled;        // This assignment is required to make sure that InventPendingQuantity gets cleaned up
        #                    returnLine.ReturnClosedDate = systemDateGet();
        #                    returnLine.InventTransIdReturn = '';
        #                    returnLine.update();
        #                }
        #                if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #                {
        #                    returnLine.skipDataMethods(true);
        #                    update_recordset returnLine
        #                    setting          ReturnStatus         = ReturnStatusLine::Canceled,
        #                                     CostPrice            = 0,
        #                                     InventTransIdReturn  = '',
        #                                     SalesStatus          = SalesStatus::Canceled,
        #                                     ReturnClosedDate     = systemDateGet()
        #                    where returnLine.SalesId == returnTable.SalesId;
        #                }
        #
        #                SpecTransManager::construct(returnTable).deleteAll();
        #
        #                returnTableUpdate = SalesTable::find(returnTable.SalesId, true);
        #                returnTableUpdate.ReturnStatus               = ReturnStatusHeader::Canceled;
        #                returnTableUpdate.SalesStatus                = SalesStatus::Canceled;
        #                returnTableUpdate.InterCompanyDirectDelivery = false;
        #                returnTableUpdate.unlinkAgreement(true, false, false, true);
        #                returnTableUpdate.update();
        #            }
        #
        #            numberOfRecords++;
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return numberOfRecords;
        #}
      ENDSOURCE
      SOURCE #checkCustomsExportOrder_IN
        #/// <summary>
        #/// Checks whether in <c>SalesTable</c> table exist record wiht CustomsExportOrder_IN equal yes.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The sales id is used to find record.
        #/// </param>
        #/// <returns>
        #/// Returns true, if exist record; otherwise, false.
        #/// </returns>
        #public static boolean checkCustomsExportOrder_IN(SalesId  _salesId)
        #{
        #    ;
        #
        #    return _salesId
        #        && (select firstonly RecId from salesTable
        #            where salesTable.SalesId                == _salesId
        #               && (salesTable.DocumentStatus        == DocumentStatus::Invoice
        #               || salesTable.DocumentStatus         == DocumentStatus::ShippingBill_IN)
        #               && salesTable.CustomsExportOrder_IN  == NoYes::Yes).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #static boolean checkExist(SalesId  salesId)
        #{
        #    if (salesId && !SalesTable::exist(salesId))
        #    {
        #        return checkFailed(strFmt(SalesTable::txtNotExist(),salesId));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #createSalesTable_Replacement
        #/// <summary>
        #/// Creates a sales order replacement.
        #/// </summary>
        #/// <param name="_originalSalesTable">
        #/// The sales table with the original sales order.
        #/// </param>
        #/// <returns>
        #/// The replacement sales order.
        #/// </returns>
        #static server SalesTable createSalesTable_Replacement(SalesTable _originalSalesTable)
        #{
        #    SalesTable      salesTable;
        #
        #    ttsbegin;
        #    salesTable.SalesType            = SalesType::Sales;
        #    salesTable.initValue();
        #    salesTable.CustAccount          = _originalSalesTable.CustAccount;
        #    salesTable.initFromCustTable();
        #    salesTable.CurrencyCode         = _originalSalesTable.CurrencyCode;
        #    salesTable.ReturnItemNum        = _originalSalesTable.ReturnItemNum;
        #    salesTable.SalesId              = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        #
        #    if (_originalSalesTable.MatchingAgreement)
        #    {
        #        salesTable.MatchingAgreement = _originalSalesTable.MatchingAgreement;
        #        AgreementHeader::find(_originalSalesTable.MatchingAgreement).createAgreementReleaseHeaderMatch(salesTable);
        #    }
        #
        #    salesTable.insert();
        #
        #    ttscommit;
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #custOpenOrders
        #static SalesTable  custOpenOrders(CustAccount  custAccount, boolean  _forUpdate = false)
        #{
        #    SalesTable salesTable;
        #
        #    salesTable.selectForUpdate(_forUpdate);
        #
        #    select salesTable
        #           index hint CustIdx
        #           where salesTable.CustAccount  == custAccount                &&
        #                 (salesTable.SalesStatus == SalesStatus::None      ||
        #                  salesTable.SalesStatus == SalesStatus::Backorder ||
        #                  salesTable.SalesStatus == SalesStatus::Delivered);
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #deleteAllLines
        #public static void deleteAllLines(SalesId _salesId)
        #{
        #    SalesLine   salesLine;
        #
        #    ttsbegin;
        #
        #    delete_from salesLine where salesLine.SalesId == _salesId;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #exist
        #static boolean exist(SalesId  salesId)
        #{
        #    if (!salesId)
        #    {
        #        return false;
        #    }
        #
        #    return (select firstonly RecId from salesTable
        #                index hint SalesIdx
        #                where salesTable.SalesId == salesId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existCustOpenOrder
        #static boolean existCustOpenOrder(CustAccount custAccount)
        #{
        #    SalesTable salesTable;
        #
        #    return (select firstonly RecId from salesTable
        #                index hint CustIdx
        #                where salesTable.CustAccount  == custAccount                &&
        #                      (salesTable.SalesStatus == SalesStatus::None      ||
        #                       salesTable.SalesStatus == SalesStatus::Backorder ||
        #                       salesTable.SalesStatus == SalesStatus::Delivered)).RecId != 0;
        #
        #}
      ENDSOURCE
      SOURCE #existDlvModeNotInvoiced
        #/// <summary>
        #/// Determines whether the delivery mode is used on a non-invoiced sales order.
        #/// </summary>
        #/// <param name="_dlvModeId">
        #/// The <c>DlvModeId</c> value that specifies the delivery mode record.
        #/// </param>
        #/// <returns>
        #/// true if the deliver mode is used on a non-invoiced sales order; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// The check is made against the sales order header and all of the non-invoiced lines.
        #/// </remarks>
        #public static server boolean existDlvModeNotInvoiced(DlvModeId _dlvModeId)
        #{
        #    boolean         isReferenced;
        #    SalesTable      salesTable;
        #    SalesLine       salesLine;
        #
        #    if (_dlvModeId == '')
        #    {
        #        return false;
        #    }
        #
        #    select firstonly
        #        RecId from salesTable
        #    where
        #        ((salesTable.SalesStatus != SalesStatus::Invoiced) && (salesTable.SalesStatus != SalesStatus::Canceled)) &&
        #        salesTable.DlvMode == _dlvModeId;
        #
        #    isReferenced = (salesTable.RecId != 0);
        #    if (!isReferenced)
        #    {
        #        select firstonly
        #            RecId from salesLine
        #        where
        #            ((salesLine.SalesStatus != SalesStatus::Invoiced) && (salesLine.SalesStatus != SalesStatus::Canceled)) &&
        #            salesLine.DlvMode == _dlvModeId;
        #
        #        isReferenced = (salesLine.RecId != 0);
        #    }
        #
        #    return isReferenced;
        #}
      ENDSOURCE
      SOURCE #existsRegQrRecInvLines
        #public static boolean existsRegQrRecInvLines(SalesId _salesId)
        #{
        #    return (select firstonly salesLine where salesLine.SalesId == _salesId &&
        #                                salesLine.ReturnStatus > ReturnStatusLine::Awaiting &&
        #                                salesLine.ReturnStatus < ReturnStatusLine::Canceled).RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #find
        #static SalesTable find(SalesId          salesId,
        #                       boolean          _forUpdate = false,
        #                       ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
        #{
        #    SalesTable  salesTable;
        #
        #    if (salesId)
        #    {
        #        if (_forUpdate)
        #        {
        #            salesTable.selectForUpdate (_forUpdate);
        #            if (_concurrencyModel != ConcurrencyModel::Auto)
        #            {
        #                salesTable.concurrencyModel(_concurrencyModel);
        #            }
        #        }
        #        salesTable.selectLocked    (_forUpdate);
        #
        #        select firstonly salesTable
        #            where salesTable.SalesId == salesId;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findByBankLG
        #/// <summary>
        #/// Finds a record that is linked to a specified record in the <c>BankLGGuarantee</c> table.
        #/// </summary>
        #/// <param name="_bankLGRefRecId">
        #/// The record ID of the related record in the <c>BankLGGuarantee</c> table.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>SalesTable</c> table; otherwise, an empty record.
        #/// </returns>
        #public static SalesTable findByBankLG(
        #    BankLGRefRecId   _bankLGRefRecId,
        #    boolean          _forUpdate = false)
        #{
        #    SalesTable                          salesTable;
        #    BankLGGuaranteeCustomerSalesOrder   bankLGGuaranteeCustomerSalesOrder;
        #
        #    salesTable.selectForUpdate(_forUpdate);
        #
        #    if (_bankLGRefRecId)
        #    {
        #        select firstonly salesTable
        #            exists join bankLGGuaranteeCustomerSalesOrder
        #            where bankLGGuaranteeCustomerSalesOrder.CustomerSalesOrder  == salesTable.SalesId
        #                && bankLGGuaranteeCustomerSalesOrder.Guarantee          == _bankLGRefRecId;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findOrCreateSalesTable_ItemReq
        #static server SalesTable findOrCreateSalesTable_ItemReq(CustAccount _custAccount, CustCurrencyCode _currencyCode, ProjId _projId)
        #{
        #    SalesTable      salesTable;
        #    ProjTable       projTable;
        #    SalesTableType  salesTableType;
        #
        #    projTable = ProjTable::find(_projId);
        #
        #    if (_projId)
        #    {
        #        ttsbegin;
        #
        #        select firstonly forupdate salesTable
        #            where salesTable.ProjId         == ''                   &&
        #                  salesTable.CustAccount    == _custAccount         &&
        #                  salesTable.CurrencyCode   == _currencyCode        &&
        #                  salesTable.SalesType      == SalesType::ItemReq;
        #
        #        if (salesTable.RecId && !salesTable.numberOfLines())
        #        {
        #            salesTable.ProjId           = _projId;
        #
        #            salesTableType              = SalesTableType::construct(salesTable);
        #            salesTableType.initValue();
        #
        #            salesTable.CurrencyCode     = _currencyCode;
        #            salesTable.FixedExchRate    = ProjInvoiceCurrency::find(projTable.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
        #            salesTable.update();
        #        }
        #
        #        ttscommit;
        #    }
        #
        #    select firstonly salesTable
        #        where salesTable.ProjId         == _projId              &&
        #              salesTable.CustAccount    == _custAccount         &&
        #              salesTable.CurrencyCode   == _currencyCode        &&
        #              salesTable.SalesType      == SalesType::ItemReq;
        #
        #    if (!salesTable.RecId)
        #    {
        #        salesTable = projTable.createSalesTable_ItemReq(_currencyCode);
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findRecId
        #static SalesTable findRecId(RecId       recId,
        #                            boolean     _forUpdate = false )
        #{
        #    SalesTable salesTable;
        #
        #    salesTable.selectForUpdate(_forUpdate);
        #
        #    select salesTable
        #        where salesTable.RecId == recId;
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findReturnItemNum
        #static SalesTable findReturnItemNum(SalesReturnItemNum _returnItemNum, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
        #{
        #    SalesTable  salesTable;
        #
        #    if (_returnItemNum)
        #    {
        #        if (_forupdate)
        #        {
        #            salesTable.selectForUpdate(_forupdate);
        #            if (_concurrencyModel != ConcurrencyModel::Auto)
        #            {
        #                salesTable.concurrencyModel(_concurrencyModel);
        #            }
        #        }
        #
        #        salesTable.selectLocked(_forupdate);
        #
        #
        #        if (salesTable.mcrIsCallCenter())
        #        {
        #            select firstonly salesTable  where salesTable.ReturnItemNum == _returnItemNum &&
        #                                salesTable.SalesType == SalesType::ReturnItem;
        #        }
        #        else
        #        {
        #            select firstonly salesTable  where salesTable.ReturnItemNum == _returnItemNum &&
        #                                salesTable.ReturnStatus  != ReturnStatusHeader::None;
        #        }
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findSalesIdLocationSalesType
        #/// <summary>
        #/// Finds a <c>SalesTable</c> record, depending on the specified sales ID, location, and sales type.
        #/// </summary>
        #/// <param name="salesId">
        #/// A sales ID.
        #/// </param>
        #/// <param name="location">
        #/// A location.
        #/// </param>
        #/// <param name="salesType">
        #/// A sales type.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A <c>SalesTable</c> record if found; otherwise, an empty record.
        #/// </returns>
        #static SalesTable findSalesIdLocationSalesType(SalesId   salesId,RetailLocationEx2  location, SalesType salesType,
        #                       boolean  _forUpdate = false)
        #{
        #    SalesTable  salesTable;
        #    ;
        #
        #    if (salesId)
        #    {
        #        salesTable.selectForUpdate (_forUpdate);
        #        salesTable.selectLocked    (_forUpdate);
        #
        #        select firstonly salesTable
        #            index hint SalesIdx
        #            where salesTable.SalesId            == salesId
        #                && salesTable.SalesType         == salesType
        #                && salesTable.InventLocationId  == location;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #findSalesIdSalesType
        #/// <summary>
        #/// Finds a <c>SalesTable</c> record, depending on the specified sales ID and sales type.
        #/// </summary>
        #/// <param name="salesId">
        #/// A sales ID.
        #/// </param>
        #/// <param name="salesType">
        #/// A sales type.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// A <c>SalesTable</c> record if found; otherwise, an empty record.
        #/// </returns>
        #static SalesTable findSalesIdSalesType(SalesId   salesId,
        #                                          SalesType salesType,
        #                                          boolean   _forUpdate = false)
        #{
        #    SalesTable  salesTable;
        #    ;
        #
        #    if (salesId)
        #    {
        #        salesTable.selectForUpdate(_forUpdate);
        #        salesTable.selectLocked(_forUpdate);
        #
        #        select firstonly salesTable
        #            index hint SalesIdx
        #            where salesTable.SalesId   == salesId  &&
        #                  salesTable.SalesType == salesType;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #getExtFieldId_BR
        #/// <summary>
        #/// Retrieves the extended field ID representation.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// Normal field ID to be included in the extended representation.
        #/// </param>
        #/// <param name="_tableId">
        #/// field ID to be included in the extended representation; optional.
        #/// </param>
        #/// <returns>
        #/// The extended field ID.
        #/// </returns>
        #/// <remarks>
        #/// Extended field ID contains the table ID in the upper bits.
        #/// If no table ID is given the field is considered as being from <c>SalesTable</c>.
        #/// </remarks>
        #public static FieldId getExtFieldId_BR(FieldId _fieldId,
        #                                       TableId _tableId = tableNum(SalesTable))
        #{
        #    TableId internalTableId;
        #
        #    switch (_tableId)
        #    {
        #        case tableNum(SalesTable):
        #            internalTableId = 0;
        #            break;
        #
        #        case tableNum(SalesTable_BR):
        #            internalTableId = 1;
        #            break;
        #
        #        case tableNum(SalesTableExtensionTH):
        #            internalTableId = 2;
        #            break;
        #
        #        default:
        #            throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    return ((internalTableId << 24) | _fieldId);
        #}
      ENDSOURCE
      SOURCE #getFieldIdFromExt_BR
        #/// <summary>
        #/// Retrieves the field ID from extended field ID representation.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// Extended field ID to retrieve normal field ID from.
        #/// </param>
        #/// <returns>
        #/// Normal field ID.
        #/// </returns>
        #/// <remarks>
        #/// Extended field ID contains the table ID in the upper bits.
        #/// </remarks>
        #public static FieldId getFieldIdFromExt_BR(FieldId _fieldId)
        #{
        #    return (_fieldId & 0xffffff);
        #}
      ENDSOURCE
      SOURCE #getFulfillmentTypeAndRate
        #/// <summary>
        #/// Returns the type and rate of fulfillment needed for autoReleaseToWarhouse to release an order.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The identifier of the Sales Order to check.
        #/// </param>
        #/// <returns>
        #/// A container with the type and rate.
        #/// </returns>
        #[SysObsoleteAttribute('Use WHSFulfillmentRateRequirementsProvider::getFulfillmentTypeAndRate')]
        #static container getFulfillmentTypeAndRate(SalesId _salesId)
        #{
        #    return WHSFulfillmentRateRequirementsProvider::getFulfillmentTypeAndRate(SalesTable::find(_salesId));
        #}
      ENDSOURCE
      SOURCE #getTableIdFromExt_BR
        #/// <summary>
        #/// Retrieves the table ID from extended field ID representation.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// Extended field ID to retrieve table ID from.
        #/// </param>
        #/// <returns>
        #/// The table ID
        #/// </returns>
        #/// <remarks>
        #/// Extended field ID contains the table ID in the upper bits.
        #/// </remarks>
        #public static TableId getTableIdFromExt_BR(FieldId _fieldId)
        #{
        #    TableId internalTableId = (_fieldId >> 24);
        #    TableId tableId;
        #
        #    switch (internalTableId)
        #    {
        #        case 0:
        #            tableId = tableNum(SalesTable);
        #            break;
        #
        #        case 1:
        #            tableId = tableNum(SalesTable_BR);
        #            break;
        #
        #        case 2:
        #            tableId = tableNum(SalesTableExtensionTH);
        #            break;
        #
        #        default:
        #            throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    return tableId;
        #}
      ENDSOURCE
      SOURCE #initFromCustTableIL
        #/// <summary>
        #/// Initializes a record in the <c>SalesTable</c> table from the customer account in the
        #/// <c>SalesTable</c> table.
        #/// </summary>
        #/// <param name="_salesTableContainer">
        #/// A container that contains the record from the <c>SalesTable</c> table.
        #/// </param>
        #/// <returns>
        #/// An initialized record from the <c>SalesTable</c> table.
        #/// </returns>
        #/// <remarks>
        #/// This method is expected to be called only from the <c>SalesTable.initFromCustTable</c> method and
        #/// should be called to run in IL.
        #/// </remarks>
        #private static server container initFromCustTableIL(container _salesTableContainer)
        #{
        #    SalesTable              salesTable = con2Buf(_salesTableContainer);
        #    CustTable               custTable   = salesTable.custTable_CustAccount();
        #    DirPartyTable           partyTable;
        #    CustTable               custTable_InvoiceAccount;
        #    CustParameters          custParameters;
        #    DlvMode                 dlvMode;
        #    LogisticsLocationDefault custDefaultLocations;
        #    LogisticsLocationEntity locationEntity;
        #    SalesTable_W            salesTable_W;
        #    #ISOCountryRegionCodes
        #
        #    SalesTable_RU           salesTableRU;
        #
        #    SalesTable_BR           salesTable_BR;
        #
        #    MCRSalesTable           mcrSalesTable;
        #    MCRCustTable            mcrCustTable;
        #
        #    TaxInformationCustTable_IN  taxInformationCustTableLoc;
        #    TaxWithholdParameters_IN    taxWithholdParameters;
        #    boolean                     isIndiaTaxParameterMarked = TaxParameters::checkTaxParameters_IN();
        #    boolean                     isIndiaCountryEnabled     = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        #
        #    if (isIndiaCountryEnabled)
        #    {
        #        taxWithholdParameters = TaxWithholdParameters_IN::find();
        #    }
        #    custParameters = CustParameters::find();
        #
        #    if (custTable.Party)
        #    {
        #        select firstonly Name, LanguageId from partyTable where partyTable.RecId == custTable.Party;
        #    }
        #
        #    salesTable.CustAccount                = custTable.AccountNum;
        #    salesTable.SalesName                  = partyTable.Name;
        #    salesTable.DeliveryName               = partyTable.Name;
        #
        #    salesTable.InclTax                    = custTable.InclTax;
        #    salesTable.PriceGroupId               = custTable.PriceGroup;
        #    salesTable.LineDisc                   = custTable.LineDisc;
        #    salesTable.MultiLineDisc              = custTable.MultiLineDisc;
        #    salesTable.EndDisc                    = custTable.EndDisc;
        #    salesTable.MarkupGroup                = custTable.MarkupGroup;
        #
        #    salesTable.FreightZone                = custTable.FreightZone;
        #    salesTable.SalesGroup                 = custTable.SalesGroup;
        #    salesTable.CommissionGroup            = custTable.CommissionGroup;
        #    salesTable.InventLocationId           = custTable.InventLocation;
        #    salesTable.setInventSiteId(custTable.InventSiteId);
        #
        #    salesTable.LanguageId                 = partyTable.LanguageId;
        #
        #    salesTable.CurrencyCode               = custTable.Currency;
        #    salesTable.InvoiceAccount             = custTable.InvoiceAccount  ? custTable.InvoiceAccount
        #                                                                : custTable.AccountNum;
        #    custTable_InvoiceAccount              = salesTable.custTable_InvoiceAccount();
        #    salesTable.vatNum                     = custTable.vatNum;
        #    salesTable.EnterpriseNumber           = custTable.EnterpriseNumber;
        #    salesTable.NumberSequenceGroup        = custTable_InvoiceAccount.NumberSequenceGroup;
        #
        #    salesTable.DlvTerm                    = custTable.DlvTerm;
        #    salesTable.DlvMode                    = custTable.DlvMode;
        #    salesTable.DlvReason                  = custTable.DlvReason;
        #
        #    dlvMode                               = DlvMode::find(custTable.DlvMode);
        #    if (salesTable.DlvMode)
        #    {
        #        salesTable.ShipCarrierId              = dlvMode.ShipCarrierId;
        #        salesTable.ShipCarrierAccountCode     = dlvMode.ShipCarrierAccountCode;
        #        salesTable.ShipCarrierDlvType         = dlvMode.ShipCarrierDlvType;
        #    }
        #
        #    salesTable.initFromCustTableMandatoryFields();
        #    salesTable.setTaxGroup(TaxSales::custTaxGroup(salesTable.DlvTerm, custTable.TaxGroup, salesTable.deliveryLocation()));
        #
        #    if (custParameters.CustNameFromVATNum)
        #    {
        #        salesTable.setNameUsingVATNum(salesTable.vatNum,
        #                                salesTable.deliveryAddress().CountryRegionId,
        #                                salesTable.DeliveryName,
        #                                custParameters);
        #    }
        #
        #    salesTable.DefaultDimension           = salesTable.copyDimension(custTable.DefaultDimension);
        #    salesTable.CashDisc                   = custTable.CashDisc;
        #    salesTable.CashDiscBaseDays           = custTable.CashDiscBaseDays;
        #
        #    if (custTable.CashDisc)
        #    {
        #        salesTable.CashDiscPercent        = CashDisc::find(custTable.CashDisc).Percent;
        #    }
        #
        #    salesTable.Payment                    = custTable.PaymTermId;
        #    salesTable.initFromPayment();
        #    if (custTable.PaymSched)
        #    {
        #        salesTable.PaymentSched               = custTable.PaymSched;
        #    }
        #    salesTable.PaymMode                   = custTable.PaymMode;
        #    salesTable.PaymSpec                   = custTable.PaymSpec;
        #
        #    salesTable.PostingProfile             = CustParameters::find().PostingProfile;
        #
        #    salesTable.CreditCardCustRefId        = 0;
        #
        #    if (custTable.ContactPersonId)
        #    {
        #    salesTable.ContactPersonId            = custTable.ContactPersonId;
        #    salesTable.initFromContactInfo();
        #    }
        #    else
        #    {
        #        salesTable.url = custTable.url();
        #        salesTable.Email = custTable.email();
        #    }
        #
        #    salesTable.setListCode();
        #
        #    salesTable.SalesPoolId                = SalesParameters::find().SalesPoolId;
        #    if (custTable.SalesPoolId)
        #    {
        #        salesTable.SalesPoolId            = custTable.SalesPoolId;
        #    }
        #
        #    salesTable.GiroType                   = custTable.GiroType;
        #
        #    salesTable.ItemTagging                = custTable.rfidItemTagging;
        #    salesTable.CaseTagging                = custTable.rfidCaseTagging;
        #    salesTable.PalletTagging              = custTable.rfidPalletTagging;
        #
        #    salesTable.InterCompanyOrder          = custTable.interCompanyTradingRelationActive();
        #
        #    if (salesTable.InterCompanyOrder)
        #    {
        #        salesTable.InterCompanyCompanyId  = custTable.interCompanyTradingPartnerCompanyID();
        #    }
        #
        #    if (salesTable.SalesType == SalesType::ItemReq
        #    ||  salesTable.SalesType == SalesType::ReturnItem)
        #    {
        #        salesTable.InterCompanyAutoCreateOrders   = false;
        #        salesTable.InterCompanyDirectDelivery     = false;
        #    }
        #    else
        #    {
        #        salesTable.InterCompanyAutoCreateOrders   = custTable.InterCompanyAutoCreateOrders;
        #        salesTable.InterCompanyDirectDelivery     = custTable.InterCompanyDirectDelivery;
        #    }
        #    salesTable.InterCompanyAllowIndirectCreation  = custTable.InterCompanyAllowIndirectCreation;
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        #    {
        #        salesTable.BankCentralBankPurposeCode = custTable.BankCentralBankPurposeCode;
        #        salesTable.BankCentralBankPurposeText = custTable.BankCentralBankPurposeText;
        #    }
        #    salesTable.initBankAccounts_LV();
        #
        #    salesTable.ShipCarrierFuelSurcharge   = custTable.ShipCarrierFuelSurcharge;
        #    custDefaultLocations = LogisticsLocationDefault::construct(custTable);
        #
        #    if (custDefaultLocations.defaultExistsByType(LogisticsLocationRoleType::ShipCarrierThirdPartyShipping))
        #    {
        #        locationEntity = LogisticsLocationEntity::constructFromLocationRecId(
        #            custDefaultLocations.getDefaultLocationByType(LogisticsLocationRoleType::ShipCarrierThirdPartyShipping).RecId);
        #
        #        salesTable.setShipCarrierFromLogisticsLocation(locationEntity.getLogisticsLocation(), locationEntity.getPostalAddress().RecId);
        #    }
        #
        #    salesTable.TaxPeriodPaymentCode_PL    = custTable.TaxPeriodPaymentCode_PL;
        #    BankAccountTable::checkDefaultGiroBank_W(salesTable.CurrencyCode);
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        salesTableRU = salesTable.salesTable_RU();
        #
        #        if (custTable.InventProfileType_RU || custTable.InventProfileId_RU)
        #        {
        #            salesTableRU.InventProfileType_RU   = custTable.InventProfileType_RU;
        #            salesTableRU.InventProfileId_RU     = custTable.InventProfileId_RU;
        #        }
        #
        #        salesTableRU.initInvoicePostingType_RU(custTable);
        #
        #        if (!salesTable.DlvTerm)
        #        {
        #            salesTable.DlvTerm = custTable.DlvTerm;
        #        }
        #
        #        salesTable.packSalesTable_RU(salesTableRU);
        #    }
        #    if (isIndiaCountryEnabled)
        #    {
        #        taxInformationCustTableLoc            = custTable.getTaxInformationCustTable_IN();
        #        if (taxWithholdParameters.tcsInvoice)
        #        {
        #            salesTable.NatureOfAssessee_IN    = taxInformationCustTableLoc.NatureOfAssessee;
        #            salesTable.tcsGroup_IN            = taxInformationCustTableLoc.tcsGroup;
        #        }
        #        if (taxWithholdParameters.tdsInvoice)
        #        {
        #            salesTable.NatureOfAssessee_IN    = taxInformationCustTableLoc.NatureOfAssessee;
        #        }
        #        if (isIndiaTaxParameterMarked && custTable.isForeign())
        #        {
        #            salesTable.CustomsExportOrder_IN  = NoYes::Yes;
        #        }
        #    }
        #    if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        #    {
        #        if (custTable.ConsDay_JP != 0)
        #        {
        #            salesTable.ConsTarget_JP = NoYes::Yes;
        #        }
        #    }
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        #    {
        #        salesTable.UnitedVATInvoice_LT = custTable.UnitedVATInvoice_LT;
        #    }
        #    salesTable.FiscalDocType_PL = custTable.FiscalDocType_PL;
        #
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        #    {
        #        salesTable.InvoiceRegister_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForSalesInvoice(salesTable.CustAccount);
        #        salesTable.PackingSlipRegister_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForSalesPackingSlip(salesTable.CustAccount);
        #    }
        #
        #    if (BrazilParameters::isEnabled())
        #    {
        #        salesTable_BR = salesTable.salesTable_BR();
        #        salesTable_BR.CustFinalUser_BR              = custTable.CustFinalUser_BR;
        #        salesTable_BR.ServiceCodeOnDlvAddress_BR    = custTable.ServiceCodeOnDlvAddress_BR;
        #        salesTable_BR.FineCode_BR                   = custTable.FineCode_BR;
        #        salesTable_BR.InterestCode_BR               = custTable.InterestCode_BR;
        #        salesTable_BR.PresenceType                  = custTable.PresenceType_BR;
        #        salesTable.packSalesTable_BR(salesTable_BR);
        #    }
        #    if (CustPaymModeTable::find(custTable.PaymMode).IsSEPA)
        #    {
        #        salesTable.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(salesTable.InvoiceAccount);
        #    }
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        mcrCustTable = custTable.mcrCustTable();
        #        if (mcrCustTable.soAllocPriority
        #                || mcrCustTable.PostageGroupID)
        #        {
        #            mcrSalesTable = salesTable.mcrSalesTable();
        #
        #            // Default allocation priority from Customer
        #            mcrSalesTable.soAllocPriority = mcrCustTable.soAllocPriority;
        #
        #            // If there is no postage group ID, set it to the customer group
        #            mcrSalesTable.PostageGroupID = mcrCustTable.PostageGroupID ? mcrCustTable.PostageGroupID : custTable.CustGroup;
        #            salesTable.mcrPackMCRSalesTable(mcrSalesTable);
        #        }
        #
        #        salesTable.DefaultDimension = custTable.DefaultDimension;
        #    }
        #
        #    if (SalesTable_W::isLegalEntityInCountryRegion())
        #    {
        #        salesTable_W = salesTable.salesTable_W();
        #
        #        if (custParameters.EntryCertificateManagementEnabled_W)
        #            salesTable_W.EntryCertificateRequired_W = custTable.EntryCertificateRequired_W;
        #
        #        if (custParameters.EntryCertificateIssuingEnabled_W)
        #            salesTable_W.IssueOwnEntryCertificate_W = custTable.IssueOwnEntryCertificate_W;
        #
        #        salesTable.packSalesTable_W(salesTable_W);
        #    }
        #
        #    return buf2Con(salesTable, true);
        #}
      ENDSOURCE
      SOURCE #initFromCustTableServer
        #/// <summary>
        #/// Executes the <c>SalesTable::initFromCustTableIL</c> method after transitioning to IL.
        #/// </summary>
        #/// <param name="_packedSalesTable">
        #/// The packed <c>SalesTable</c> table on which to operate.
        #/// </param>
        #/// <returns>
        #/// The updated packed <c>SalesTable</c> buffer.
        #/// </returns>
        #/// <remarks>
        #/// This static method is required to make sure that the calls from the EP will transition to the
        #/// server tier before asserting the <c>XppILExecutePermission</c> class.
        #/// </remarks>
        #private static server container initFromCustTableServer(container _packedSalesTable)
        #{
        #    container               salesTableContainer;
        #    XppILExecutePermission  xppILExecutePermission;
        #
        #    // Transition to IL to update the sales quantity
        #    xppILExecutePermission = new XppILExecutePermission();
        #    xppILExecutePermission.assert();
        #    salesTableContainer = runTableMethodIL(tableStr(SalesTable),
        #                        tableStaticMethodStr(SalesTable, initFromCustTableIL),
        #                        _packedSalesTable);
        #    CodeAccessPermission::revertAssert();
        #
        #    return salesTableContainer;
        #}
      ENDSOURCE
      SOURCE #jumpRefSalesIdReturnTable
        #/// <summary>
        #/// Opens the sales return order form by using jump reference.
        #/// </summary>
        #/// <param name="_salesId">
        #/// A <c>SalesId</c> enumeration value that specifies the sales return order.
        #/// </param>
        #public static void jumpRefSalesIdReturnTable(SalesId _salesId)
        #{
        #    Args args = new Args();
        #
        #    args.record(SalesTable::find(_salesId));
        #
        #    new MenuFunction(menuitemDisplayStr(ReturnTableDetails), MenuItemType::Display).run(args);
        #}
      ENDSOURCE
      SOURCE #lookupCustomsExportOrder_IN
        #/// <summary>
        #/// Provides filtered lookup functionality for the <c>CustomsExportOrder_IN</c> field.
        #/// </summary>
        #/// <param name="_formControl">
        #/// A <c>FormStringControl</c> object.
        #/// </param>
        #public static void lookupCustomsExportOrder_IN(FormControl _formControl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _formControl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         queryBuildRange;
        #    ;
        #
        #    queryBuildDataSource    = query.addDataSource(tableNum(SalesTable));
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(SalesTable, CustomsExportOrder_IN));
        #    queryBuildRange.value(queryValue(NoYes::Yes));
        #
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(SalesTable, DocumentStatus));
        #    queryBuildRange.value(queryValue(DocumentStatus::Invoice));
        #
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(SalesTable, DocumentStatus));
        #    queryBuildRange.value(queryValue(DocumentStatus::ShippingBill_IN));
        #
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(SalesTable, CustomsShippingBill_IN));
        #    queryBuildRange.value(queryValue(NoYes::No));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesStatus));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupDispositionCodeId
        #/// <summary>
        #/// Provides filtered lookup functionality for the <c>DispositionCodeId</c> field.
        #/// </summary>
        #/// <param name="_salesId">
        #/// An extended data type that identifies a sales order.
        #/// </param>
        #/// <param name="_lookupCtrl">
        #/// A <c>FormStringControl</c> object.
        #/// </param>
        #public static client void lookupDispositionCodeId(
        #    SalesId             _salesId,
        #    FormStringControl   _lookupCtrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ReturnDispositionCode), _lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ReturnDispositionCode));
        #    QueryBuildRange         queryBuildRange;
        #
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReturnDispositionCode, DispositionAction));
        #    queryBuildRange.value(SysQuery::valueNot(DispositionAction::CreditOnly));
        #
        #    if (SalesTable::find(_salesId).ReturnReplacementCreated)
        #    {
        #        queryBuildRange.value(strFmt('!%1, !%2 , !%3', DispositionAction::CreditOnly, DispositionAction::ReplaceCredit, DispositionAction::ReplaceScrap));
        #    }
        #
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionCodeId));
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionAction));
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, Description));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupDispositionCodeIdNonStocked
        #/// <summary>
        #/// Provides filtered lookup functionality for the <c>DispositionCodeId</c> field for non-stocked items.
        #/// </summary>
        #/// <param name="_salesId">
        #/// An extended data type that identifies a sales order.
        #/// </param>
        #/// <param name="_lookupCtrl">
        #/// A <c>FormStringControl</c> object.
        #/// </param>
        #public static client void lookupDispositionCodeIdNonStocked(
        #    SalesId             _salesId,
        #    FormStringControl   _lookupCtrl)
        #{
        #
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ReturnDispositionCode), _lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ReturnDispositionCode));
        #    QueryBuildRange         queryBuildRange;
        #
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReturnDispositionCode, DispositionAction));
        #    queryBuildRange.value(SysQuery::valueNot(DispositionAction::CreditOnly));
        #    queryBuildRange.value(SysQuery::valueNot(DispositionAction::ReplaceCredit));
        #    queryBuildRange.value(SysQuery::valueNot(DispositionAction::ReplaceScrap));
        #
        #    queryBuildRange.value(strFmt('!%1, !%2 , !%3', DispositionAction::CreditOnly, DispositionAction::ReplaceCredit, DispositionAction::ReplaceScrap));
        #
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionCodeId));
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionAction));
        #    sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, Description));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupWMSReception
        #static void lookupWMSReception(FormStringControl ctrl, CustAccount custAccount)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         queryBuildRange;
        #
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(SalesTable));
        #
        #    if (custAccount)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount));
        #        queryBuildRange.value(queryValue(custAccount));
        #    }
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, SalesStatus));
        #    queryBuildRange.value(enum2Value(SalesStatus::Backorder));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupWMSReceptionRMA
        #/// <summary>
        #///    Provides filtered look up functionality to the ReturnItemNum field.
        #/// </summary>
        #/// <param name="ctrl">
        #///    The form string object.
        #/// </param>
        #/// <param name="_custAccount">
        #///    A CustTable table buffer; optional.
        #/// </param>
        #/// <remarks>
        #///    Look up Return orders.
        #/// </remarks>
        #static void lookupWMSReceptionRMA(FormStringControl ctrl, CustAccount _custAccount = '')
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         queryBuildRange;
        #
        #    ListEnumerator listEnumerator;
        #    List list = new List(Types::Int64);
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, ReturnItemNum));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(SalesTable));
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #    {
        #        list = List::create(SalesTable::mcrFindRefundChecksNotApprovedOrDeclined());
        #        listEnumerator = list.getEnumerator();
        #        listEnumerator.reset();
        #        // Also show sales tables with refund checks that have not been approved nor declined yet.
        #        while (listEnumerator.moveNext())
        #        {
        #            queryBuildDataSource.addRange(fieldNum(SalesTable, RecId)).value(queryValue(listEnumerator.current()));
        #        }
        #    }
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, ReturnStatus));
        #    queryBuildRange.value(strFmt("%1, %2", SysQuery::value(ReturnStatusHeader::Created), SysQuery::value(ReturnStatusHeader::Open)));
        #
        #    if (_custAccount)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount));
        #        queryBuildRange.value(SysQuery::value(_custAccount));
        #    }
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrCalcPostingProfile
        #/// <summary>
        #/// Determines and sets the posting profile of the passed in sales order.
        #/// </summary>
        #/// <param name="_salesTable">
        #/// The <c>SalesTable</c> record for which to set the posting profile.
        #/// </param>
        #/// <returns>
        #/// The posting profile that the sales order should be updated with.
        #/// </returns>
        #public static PostingProfile mcrCalcPostingProfile(SalesTable _salesTable)
        #{
        #    MCRCustPaymTable            mcrCustPaymTable, mcrCustPaymTable_Count;
        #    CustParameters              custParameters = CustParameters::find();
        #    MCROrderParameters          mcrOrderParameters = MCROrderParameters::find();
        #    MCRContinuityCustHeader     mcrContinuityCustHeader;
        #    PostingProfile              newProfile = _salesTable.PostingProfile;
        #
        #    if (_salesTable.PostingProfile == custParameters.PostingProfile
        #        || _salesTable.PostingProfile == custParameters.PrepaymentPostingProfile
        #        || _salesTable.PostingProfile == mcrOrderParameters.ContinuityPaymentProfile)
        #    {
        #        select firstonly RecId from mcrContinuityCustHeader
        #            where mcrContinuityCustHeader.SalesId == _salesTable.SalesId
        #                && mcrContinuityCustHeader.BillUpFront;
        #
        #        // If the order has a bill up front parent set the
        #        //posting profile to the continuity posting profile.
        #        if (mcrContinuityCustHeader.RecId)
        #        {
        #            newProfile = mcrOrderParameters.ContinuityPaymentProfile;
        #        }
        #        else
        #        {
        #            // If this order has 1 or more payments and none of them are not prepay
        #            // use the prepayment posting profile.
        #            select count(Amount) from mcrCustPaymTable_Count
        #                where mcrCustPaymTable_Count.RefTableId == _salesTable.TableId
        #                    && mcrCustPaymTable_Count.RefRecId == _salesTable.RecId
        #                    && mcrCustPaymTable_Count.Amount > 0;
        #
        #            if (mcrCustPaymTable_Count.Amount > 0)
        #            {
        #                select firstonly RecId from mcrCustPaymTable
        #                    where mcrCustPaymTable.RefRecId == _salesTable.RecId
        #                        && mcrCustPaymTable.RefTableId == _salesTable.TableId
        #                        && mcrCustPaymTable.Amount > 0
        #                        && mcrCustPaymTable.IsPrepay == NoYes::No;
        #
        #                if (mcrCustPaymTable.RecId)
        #                {
        #                    newProfile = custParameters.PostingProfile;
        #                }
        #                else
        #                {
        #                    newProfile = custParameters.PrepaymentPostingProfile;
        #                }
        #            }
        #        }
        #    }
        #
        #    // If the order does not have a posting profile and it was not determined
        #    // to be continuity or prepayment, set it to general posting profile.
        #    if (!newProfile)
        #    {
        #        newProfile = custParameters.PostingProfile;
        #    }
        #
        #    return newProfile;
        #}
      ENDSOURCE
      SOURCE #mcrContinuityLineEvalResult
        #/// <summary>
        #/// Gets the enumeration to indicate what type of continuity
        #/// order is being dealt with.
        #/// </summary>
        #/// <param name="_contLineEval">
        #/// A <c>Container</c> holding the continuity data necessary for finding the type
        #/// of the continuity.
        #/// </param>
        #/// <returns>
        #/// The type of continuity order.
        #/// </returns>
        #/// <remarks>
        #/// The <c>MCRContinuityLineEval</c> enumeration to indicate the type of continuity order.
        #/// </remarks>
        #public static MCRContinuityLineEval mcrContinuityLineEvalResult(container _contLineEval)
        #{
        #    if (conPeek(_contLineEval, 1) != 0)
        #    {
        #        if (conPeek(_contLineEval, 2)==0 && conPeek(_contLineEval, 3) == 0)
        #            return MCRContinuityLineEval::PayAllNow;
        #        if (conPeek(_contLineEval, 2)==0 && conPeek(_contLineEval, 3)!=0)
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #        if (conPeek(_contLineEval, 2)!=0 && conPeek(_contLineEval, 3)==0)
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #        if (conPeek(_contLineEval, 2)!=0 && conPeek(_contLineEval, 3)!=0)
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #    }
        #    if (conPeek(_contLineEval, 2) != 0)
        #    {
        #        if (((conPeek(_contLineEval, 1)==0
        #            && conPeek(_contLineEval, 3)==0))
        #            || ((conPeek(_contLineEval, 1)==0
        #            && conPeek(_contLineEval, 3)!=0)))
        #        {
        #        if (conPeek(_contLineEval, 4)!=0)
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #        else
        #            return MCRContinuityLineEval::PayAllLater;
        #        }
        #        if (conPeek(_contLineEval, 2) != 0)
        #        {
        #        if ((conPeek(_contLineEval, 1)!=0
        #            && conPeek(_contLineEval, 3)== 0)
        #            || (conPeek(_contLineEval, 1)!=0
        #            && conPeek(_contLineEval, 3 != 0)))
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #        }
        #    }
        #    if (conPeek(_contLineEval, 3)!=0)
        #    {
        #        if ((conPeek(_contLineEval, 1)==0
        #            && conPeek(_contLineEval, 2)==0)
        #            || (conPeek(_contLineEval, 1)==0
        #            && conPeek(_contLineEval, 2)!=0))
        #        {
        #            if (conPeek(_contLineEval, 4)==0)
        #                return MCRContinuityLineEval::PayAllLater;
        #            else
        #                return MCRContinuityLineEval::PayPartNowPartSched;
        #        }
        #        if ((conPeek(_contLineEval, 1)!=0
        #            && conPeek(_contLineEval, 2)==0)
        #            || (conPeek(_contLineEval, 1)!=0
        #            && conPeek(_contLineEval, 2)!=0))
        #        {
        #            return MCRContinuityLineEval::PayPartNowPartSched;
        #        }
        #    }
        #    return MCRContinuityLineEval::Blank;
        #}
      ENDSOURCE
      SOURCE #mcrEvalContOrderLines
        #/// <summary>
        #/// Loops through all sales lines associated with this sales order and returns a
        #/// container with the number if lines that are bill up fronts with no payment schedules, bill up front with
        #/// payment schedules, or regular items.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The <c>SalesId</c> of the sales order for wihich to count the continuity lines.
        #/// </param>
        #/// <returns>
        #/// The counts of the number if lines that are bill up fronts with no payment schedules, bill up front with
        #/// payment schedules, or regular items.
        #/// </returns>
        #public static container mcrEvalContOrderLines(SalesId _salesId)
        #{
        #    SalesLine   salesLine;
        #    int         billUpFrontPaymSched = 0;
        #    int         billUpFrontNoPaymSched = 0;
        #    int         nonBillUpFront = 0;
        #    int         regularItemLines = 0;
        #    InventTable inventTable;
        #    MCRInventTable mcrInventTable;
        #
        #    while select ItemId  from salesLine
        #        where  salesLine.SalesId == _salesId
        #        outer join RecId from inventTable
        #            where inventTable.ItemId == salesLine.ItemId
        #        outer join ContinuityScheduleId from mcrInventTable
        #            where mcrInventTable.InventTable == inventTable.RecId
        #
        #
        #    {
        #        // Is this item continuity.
        #        if (InventTable::mcrIsItemContinuity(salesLine.ItemId))
        #        {
        #            // If continuity item, is the attached schedule a bill up front
        #            // with no payment schedule.
        #            if (MCRContinuityScheduleHeader::isBillUPFrontWithNoPaymSched(mcrInventTable.ContinuityScheduleId))
        #            {
        #                billUpFrontNoPaymSched += 1;
        #            }
        #            else if (MCRContinuityScheduleHeader::isBillUPFrontWithPaymSched(mcrInventTable.ContinuityScheduleId))
        #            {
        #                billUpfrontPaymSched += 1;
        #            }
        #            else
        #            {
        #                nonBillUpFront += 1;
        #            }
        #        }
        #        else
        #        {
        #            regularItemLines += 1;
        #        }
        #    }
        #    return[billUpFrontNoPaymSched, billUpFrontPaymSched, nonBillUpFront, regularItemLines];
        #}
      ENDSOURCE
      SOURCE #mcrExistCustSalesOrder
        #/// <summary>
        #/// Determines whether an order exists for the passed customer.
        #/// </summary>
        #/// <param name="_custAccount">
        #/// The customer's account number for which this method determins if a sales order exists.
        #/// </param>
        #/// <returns>
        #/// true if a sales order exists for the passed customer; otherwise, false.
        #/// </returns>
        #public static boolean mcrExistCustSalesOrder(AccountNum _custAccount)
        #{
        #    SalesTable salesTable;
        #    if(_custAccount)
        #    {
        #        return (select firstonly RecId from salesTable
        #            where salesTable.CustAccount == _custAccount).RecId != 0;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #mcrFindRefundChecksNotApprovedOrDeclined
        #/// <summary>
        #/// Finds refund checks that have not been approved or declined.
        #/// </summary>
        #/// <returns>
        #/// A list of <c>SalesTable</c> records that have declined or
        #///     unapproved refund checks.
        #/// </returns>
        #private static container mcrFindRefundChecksNotApprovedOrDeclined()
        #{
        #    SalesTable              salesTable;
        #    MCRCustPaymTable        mcrCustPaymTable;
        #    List                    list = new List(Types::Int64);
        #
        #    //Also show sales tables with refund checks that have not been approved nor declined yet.
        #    while select RecId from salesTable
        #        where  (salesTable.ReturnStatus == ReturnStatusHeader::Created
        #                || salesTable.ReturnStatus == ReturnStatusHeader::Open)
        #                || salesTable.mcrOrderStopped == NoYes::Yes
        #        exists join mcrCustPaymTable
        #            where mcrCustPaymTable.RefTableId == salesTable.TableId
        #                && mcrCustPaymTable.RefRecId   == salesTable.RecId
        #                && mcrCustPaymTable.Status != MCRCustPaymStatus::Declined
        #                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::RefundCheck
        #    {
        #        list.addEnd(salesTable.RecId);
        #    }
        #
        #    return list.pack();
        #}
      ENDSOURCE
      SOURCE #mcrFindReturnByExchId
        #/// <summary>
        #/// Finds the returns sales order based on the passed in exchange order <c>SalesId</c>.
        #/// </summary>
        #/// <param name="_exchSalesId">
        #/// The <c>SalesId</c> of the exchange order  to use in finding the sales order recrod.
        #/// </param>
        #/// <param name="_forUpdate">
        #///  A <c>Boolean</c> value defining whether or not the <c>SalesTable</c> record
        #/// should be selected for update; optional.
        #/// </param>
        #/// <returns>
        #/// The sales order found by the exchange order <c>SalesId</c>.
        #/// </returns>
        #public static SalesTable mcrFindReturnByExchId(SalesId _exchSalesId, boolean  _forUpdate = false)
        #{
        #    SalesTable  salesTable;
        #
        #    if (_exchSalesId)
        #    {
        #        salesTable.selectForUpdate (_forUpdate);
        #
        #        select firstonly salesTable
        #            where salesTable.ReturnReplacementId == _exchSalesId;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #mcrFindSource
        #/// <summary>
        #/// Finds a sales order containing the passed <c>MCRSourceID</c>.
        #/// </summary>
        #/// <param name="_sourceId">
        #/// The <c>MCRSourceId</c> used to find a sales order.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A boolean that determines whether to select the record for update; optional.
        #/// </param>
        #/// <returns>
        #/// The <c>SalesTable</c> record containing the passed <c>MCRSourceId</c> if one exists;
        #/// otheriwse, an empty buffer.
        #/// </returns>
        #public static SalesTable mcrFindSource(MCRSourceID _sourceId, boolean  _forUpdate = false)
        #{
        #    SalesTable      salesTable;
        #    MCRSalesTable   mcrSalesTable;
        #
        #    if (_sourceId)
        #    {
        #        salesTable.selectForUpdate (_forUpdate);
        #
        #        select firstonly salesTable
        #        exists join mcrSalesTable
        #        where mcrSalesTable.SalesTable == salesTable.RecId
        #        && mcrSalesTable.SourceId == _sourceId;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #mcrGetOldestOutOfBalanceDate
        #/// <summary>
        #/// Gets the oldest sales order that is over or under paid.
        #/// </summary>
        #/// <param name="_status">
        #/// The out of balance status for which to search.
        #/// </param>
        #/// <returns>
        #/// The date that the oldest sales order that is over or under paid was created.
        #/// </returns>
        #static TransDate mcrGetOldestOutOfBalanceDate(MCRPaymOutOfBalance _status)
        #{
        #    SalesTable              salesTable;
        #    MCRSalesTable           mcrSalesTable;
        #    TransDate               dateCreated=dateNull();
        #
        #    select firstonly CreatedDateTime, RecId from salesTable
        #        order by CreatedDateTime
        #        where salesTable.SalesStatus == SalesStatus::Backorder
        #        exists join mcrSalesTable
        #        where mcrSalesTable.SalesTable == salesTable.RecId
        #            && mcrSalesTable.PaymOutOfBalance == _status;
        #
        #    if(salesTable.RecId)
        #    {
        #        dateCreated = DateTimeUtil::date(salesTable.CreatedDateTime);
        #    }
        #
        #    return dateCreated;
        #}
      ENDSOURCE
      SOURCE #mcrInsertFraudHold
        #private static void mcrInsertFraudHold(SalesId salesId, MCRHoldCodeComment _mcrHoldCodeComment)
        #{
        #    MCRHoldCodeTrans    mcrHoldCodeTrans;
        #
        #    ttsbegin;
        #    mcrHoldCodeTrans.InventRefId = salesId;
        #    mcrHoldCodeTrans.mcrHoldCode = MCROrderParameters::find().mcrFraudManualHoldCode;
        #    mcrHoldCodeTrans.mcrHoldCodeComment = _mcrHoldCodeComment;
        #
        #    if (mcrHoldCodeTrans.validateWrite())
        #    {
        #        mcrHoldCodeTrans.insert();
        #    }
        #    else
        #    {
        #        throw error("@SYS104318");
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #mcrIsOrderContinuityParent
        #/// <summary>
        #/// Determines if the <c>SalesTable</c> record, found by the passed sales ID,
        #/// is a continuity order parent.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The <c>SalesId</c> of the sales order for which this method determins if it is a
        #/// continuity order parent.
        #/// </param>
        #/// <returns>
        #/// True if the sales order containing the passed <c>SalesId</c> is a continuity order
        #/// parent; otherwise, false.
        #/// </returns>
        #public static boolean mcrIsOrderContinuityParent(SalesId _salesId)
        #{
        #    if (SalesTable::find(_salesId, false).mcrSalesTable().ContinuityOrder)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrJumpRef
        #/// <summary>
        #///  Passes records to the <c>SalesTable</c> menu function based on the passed record and string.
        #/// </summary>
        #/// <param name="_record">
        #/// The record to be passed to the <c>SalesTable</c> menu function.
        #/// </param>
        #/// <param name="_customerServiceParam">
        #/// Thestring parameter for the customer service form.
        #/// </param>
        #/// <param name="_caller">
        #/// The calling object; optional.
        #/// </param>
        #/// <returns>
        #/// The returned value from the <c>SalesTable</c> menu function.
        #/// </returns>
        #public static str mcrJumpRef(Common _record, MCRCustomerServiceParam _customerServiceParam, Object _caller = null)
        #{
        #    Args                    args;
        #    FormRun                 formRun;
        #    str                     rv;
        #    MCRSalesTableConfigure  salesTableConfigure = new MCRSalesTableConfigure();
        #
        #    args = new Args();
        #    args.parmEnum(NoYes::Yes);
        #    args.record(_record);
        #    salesTableConfigure.parmCustomerServiceParam(_customerServiceParam);
        #    args.parmObject(salesTableConfigure);
        #    args.caller(_caller);
        #    formRun = new MenuFunction(menuitemDisplayStr(salesTable), MenuItemType::Display).create(args);
        #    formRun.run();
        #    formRun.wait();
        #
        #    rv = args.parm();
        #    return rv;
        #}
      ENDSOURCE
      SOURCE #mcrlookupByInvoiceAccountInvoiceId
        #/// <summary>
        #/// looks up all sales orders that have the passed customer invoice account and are related to
        #/// the customer invoice journal with the passed invoice ID.
        #/// </summary>
        #/// <param name="_callingControl">
        #/// The calling form control.
        #/// </param>
        #/// <param name="_custInvoiceAccount">
        #/// The customer invoice account to search for.
        #/// </param>
        #/// <param name="_invoiceId">
        #/// The invoice number to search for.
        #/// </param>
        #public static void mcrlookupByInvoiceAccountInvoiceId(FormControl         _callingControl,
        #                                                    CustInvoiceAccount    _custInvoiceAccount,
        #                                                    InvoiceId             _invoiceId)
        #{
        #    SysTableLookup          sysTableLookup;
        #    Query                   query;
        #    QueryBuildDataSource    qbdsSalesTable;
        #    QueryBuildDataSource    qbdsCustInvoiceJour;
        #
        #    sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _callingControl);
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, InvoiceAccount));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesStatus));
        #
        #    query = new Query();
        #    qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        #
        #    if (_custInvoiceAccount)
        #    {
        #        qbdsSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount))
        #            .value(SysQuery::value(_custInvoiceAccount));
        #    }
        #
        #    // Sort by sales ID descending.
        #    qbdsSalesTable.addSortField(fieldNum(SalesTable, SalesId), SortOrder::Descending);
        #
        #    if (_invoiceId)
        #    {
        #        qbdsCustInvoiceJour = qbdsSalesTable.addDataSource(tableNum(CustInvoiceJour));
        #        qbdsCustInvoiceJour.relations(true);
        #        qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceId))
        #            .value(SysQuery::value(_invoiceId));
        #    }
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrlookupInWarehouseOrders
        #/// <summary>
        #/// Looks up sales orders that are no picked or in warehouse status.
        #/// </summary>
        #/// <param name="ctrl">
        #/// The form string control.
        #/// </param>
        #public static void mcrlookupInWarehouseOrders(FormStringControl ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         queryBuildRange;
        #
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        #    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(SalesTable));
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, SalesStatus));
        #    queryBuildRange.value(enum2Value(SalesStatus::Backorder));
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, mcrOrderStopped));
        #    queryBuildRange.value(enum2Value(NoYes::No));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrUnReserveOrderLines
        #/// <summary>
        #/// Un-reserves all of the sales order lines for the <c>SalesId</c> passed.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The <c>SalesId</c> for which to un-reserve any sales order lines that have been reserved.
        #/// </param>
        #public static void mcrUnReserveOrderLines(SalesId _salesId)
        #{
        #    SalesLine           salesLine;
        #    InventTrans         inventTrans;
        #    InventDim           inventDim;
        #    InventTransOrigin   inventTransOrigin;
        #
        #    // Get all of the lines which are reserved and un-reserve them.
        #    while select salesLine
        #        where salesLine.SalesId == _salesId
        #        join inventTrans
        #        exists join inventTransOrigin
        #        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        #            && inventTransOrigin.InventTransId == salesLine.InventTransId
        #            && inventTrans.StatusIssue == StatusIssue::ReservPhysical
        #        join inventDim
        #        where inventDim.InventDimId == inventTrans.InventDimId
        #    {
        #        MCRAutoallocatebo::unreserve(salesLine, inventTrans, inventDim, false);
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #mcrUpdateContinuityPayments
        #/// <summary>
        #/// Updates the continuity payment records when the
        #/// invoice account is modified.
        #/// </summary>
        #/// <param name="_salesTable">
        #/// The sales order record for which the continuity payment records need to be updated.
        #/// </param>
        #public static void mcrUpdateContinuityPayments(SalesTable _salesTable)
        #{
        #    MCRCustPaymTable            mcrCustPaymTableHeader;
        #    MCRContinuityCustHeader     mcrContinuityCustHeader;
        #    CustPaymSchedLine           custPaymSchedLine;
        #    CustPaymSched               custPaymSched;
        #    MCRCustPaymTable            mcrCustPaymTable;
        #
        #    // For all header records related to this order we need to update the assocated continuity
        #    //  payment records.
        #    while select forupdate mcrContinuityCustHeader
        #        where mcrContinuityCustHeader.SalesId == _salesTable.SalesId
        #    {
        #        // Find the payment associated with the continuity header.
        #        select forupdate mcrCustPaymTableHeader
        #            where mcrCustPaymTableHeader.RefRecId == mcrContinuityCustHeader.RecId
        #                && mcrCustPaymTableHeader.RefTableId == mcrContinuityCustHeader.TableId
        #                && mcrCustPaymTableHeader.CustAccount != _salesTable.InvoiceAccount;
        #
        #        // If a header payment was found update the account.
        #        if (mcrCustPaymTableHeader)
        #        {
        #            mcrCustPaymTableHeader.CustAccount = _salesTable.InvoiceAccount;
        #            ttsbegin;
        #            if (mcrCustPaymTableHeader.validateWrite())
        #            {
        #                mcrCustPaymTableHeader.update();
        #            }
        #            else
        #            {
        #                throw error("@SYS104318");
        #            }
        #            ttscommit;
        #        }
        #        // Regardless of whether or not a header payment record was found, need to make
        #        //  sure that a related payment schedule is correct.
        #        select firstonly RecId from custPaymSched
        #            where custPaymSched.ExtTableId == mcrContinuityCustHeader.TableId
        #                && custPaymSched.ExtRecId == mcrContinuityCustHeader.RecId;
        #
        #        // If there is a payment schedule related to the order update the record.
        #        if (custPaymSched.RecId)
        #        {
        #            // Find the lines associated with the payment schedule.
        #            while select RecId, TableId from custPaymSchedLine
        #                where custPaymSchedLine.ParentRecID == custPaymSched.RecId
        #                join forupdate mcrCustPaymTable
        #                where mcrCustPaymTable.RefRecId == custPaymSchedLine.RecId
        #                    && mcrCustPaymTable.RefTableId == custPaymSchedLine.TableId
        #                    && mcrCustPaymTable.CustAccount != _salesTable.InvoiceAccount
        #            {
        #                if (mcrCustPaymTable)
        #                {
        #                    mcrCustPaymTable.CustAccount = _salesTable.InvoiceAccount;
        #                    ttsbegin;
        #                    if ( mcrCustPaymTable.validateWrite())
        #                    {
        #                         mcrCustPaymTable.update();
        #                    }
        #                    else
        #                    {
        #                        throw error("@SYS104318");
        #                    }
        #                    ttscommit;
        #                }
        #            }
        #        }
        #
        #        ttsbegin;
        #        mcrContinuityCustHeader.CustAccount = _salesTable.InvoiceAccount;
        #        if (mcrContinuityCustHeader.validateWrite())
        #        {
        #            mcrContinuityCustHeader.update();
        #        }
        #        else
        #        {
        #            throw error("@SYS104318");
        #        }
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrUpdateSalesStatus
        #/// <summary>
        #/// Updates the status and order stopped flag of the passed <c>SalesTable</c> record.
        #/// </summary>
        #/// <param name="_salesTable">
        #/// The <c>SalesTable</c> record for which this methods updates status and stopped order flag.
        #/// </param>
        #/// <param name="_status">
        #/// The status to be set on the passed sales order.
        #/// </param>
        #/// <param name="_mcrOrderStopped">
        #/// The <c>NoYes</c> enumeration that determines whether the order is stopped; optional.
        #/// </param>
        #public static void mcrUpdateSalesStatus(SalesTable _salesTable,
        #                                        SalesStatus _status,
        #                                        MCROrderStopped _mcrOrderStopped = NoYes::No)
        #{
        #    if (_salesTable)
        #    {
        #        ttsbegin;
        #        _salesTable.selectForUpdate(true);
        #        _salesTable.reread();
        #        _salesTable.SalesStatus = _status;
        #        _salesTable.mcrOrderStopped = _mcrOrderStopped;
        #        _salesTable.update();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrUserName
        #/// <summary>
        #/// Gets the user name based on the <c>UserId</c>.
        #/// </summary>
        #/// <returns>
        #/// The user name.
        #/// </returns>
        #public static UserName mcrUserName()
        #{
        #    UserInfo userInfo;
        #
        #    select firstonly Name, Id from userInfo
        #        where userInfo.Id == curUserId();
        #
        #    return userInfo.Name;
        #}
      ENDSOURCE
      SOURCE #meetsFulfilmentRate
        #/// <summary>
        #/// Checks whether the Sales Order is fulfilled or not.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The identifier of the Sales Order to check.
        #/// </param>
        #/// <returns>
        #/// True if the Sales Order is fulfilled or doesn't have the fulfillment type, false otherwise.
        #/// </returns>
        #public static boolean meetsFulfilmentRate(SalesId _salesId)
        #{
        #    return WHSFulfillmentRateValidator::checkFulfillmentRate(SalesTable::find(_salesId), ErrorTolerance::Warning);
        #}
      ENDSOURCE
      SOURCE #promptConvertCurrencyCode
        #client static container promptConvertCurrencyCode(SalesTable _salesTable = null)
        #{
        #    DialogButton            dialogButton;
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        #    {
        #        dialogButton = Box::okCancel("@SYS54755", DialogButton::Ok);
        #
        #        if (dialogButton == DialogButton::Ok)
        #        {
        #            return [NoYes::Yes, TradeCurencyConversion::ExchRate];
        #        }
        #
        #        return [NoYes::No, TradeCurencyConversion::ExchRate];
        #    }
        #
        #    return TradeCurrencyConversionPrompt::newFromParm(_salesTable,
        #                                                      _salesTable.SalesId,
        #                                                      _salesTable.priceDiscChangePolicyExistOnLine()
        #                                                      ).promptConvertCurrencyCode();
        #}
      ENDSOURCE
      SOURCE #promptCopyDeliveryAddress
        #client static DialogButton  promptCopyDeliveryAddress()
        #{
        #    return Box::yesYesAllNoCancel("@SYS78472", DialogButton::Yes);
        #}
      ENDSOURCE
      SOURCE #promptCopyThirdPartyBillingAddress
        #client static DialogButton  promptCopyThirdPartyBillingAddress()
        #{
        #    return Box::yesNo("@SYS119160", DialogButton::Yes);
        #}
      ENDSOURCE
      SOURCE #returnUpdatedHeaderStatus
        #static void returnUpdatedHeaderStatus(SalesId _salesId, DocumentStatus _documentStatus = DocumentStatus::None)
        #{
        #    SalesLine                   salesLine;
        #    SalesTable                  salesTable;
        #    SalesTableType_ReturnItem   salesTableType_ReturnItem;
        #
        #    switch (_documentStatus)
        #    {
        #        case DocumentStatus::PackingSlip :
        #            select firstonly RecId from salesLine where salesLine.SalesId       == _salesId &&
        #                                                (salesLine.ReturnStatus == ReturnStatusLine::Received   ||
        #                                                 salesLine.ReturnStatus == ReturnStatusLine::Registered);
        #
        #            if (salesLine.RecId)
        #            {
        #                ttsbegin;
        #                salesTable = SalesTable::find(_salesId, true);
        #                salesTable.ReturnStatus = ReturnStatusHeader::Open;
        #                salesTable.update();
        #                ttscommit;
        #            }
        #            break;
        #
        #        case DocumentStatus::Invoice :
        #        case DocumentStatus::Facture_RU  :
        #
        #            select firstonly RecId from salesLine where salesLine.SalesId       == _salesId &&
        #                                                (salesLine.ReturnStatus == ReturnStatusLine::Awaiting   ||
        #                                                 salesLine.ReturnStatus == ReturnStatusLine::None       ||
        #                                                 salesLine.ReturnStatus == ReturnStatusLine::Quarantine ||
        #                                                 salesLine.ReturnStatus == ReturnStatusLine::Received   ||
        #                                                 salesLine.ReturnStatus == ReturnStatusLine::Registered);
        #
        #            if (!salesLine.RecId)
        #            {
        #                ttsbegin;
        #                salesTable = SalesTable::find(_salesId, true);
        #                salesTable.ReturnStatus = ReturnStatusHeader::Closed;
        #                salesTable.update();
        #                ttscommit;
        #            }
        #            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #            {
        #                // Check exchange holds to see if they can be released.
        #                if(!salesTable)
        #                {
        #                    salesTable = SalesTable::find(_salesId);
        #                }
        #
        #                if(salesTable.ReturnReplacementId)
        #                {
        #                    salesTableType_ReturnItem = SalesTableType_ReturnItem::construct(salesTable);
        #                    salesTableType_ReturnItem.mcrUpdateExchangeReturnHold();
        #
        #                }
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #returnUpdateReplacement
        #public static void returnUpdateReplacement(ReturnItemNum _returnItemNum, SalesId _replacementSalesId)
        #{
        #    SalesTable returnOrder;
        #
        #    ttsbegin;
        #    returnOrder = SalesTable::findReturnItemNum(_returnItemNum,true);
        #    returnOrder.ReturnReplacementCreated    = NoYes::Yes;
        #    returnOrder.ReturnReplacementId         = _replacementSalesId;
        #    returnOrder.update();
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #returnValidateReturnItemNum
        #/// <summary>
        #/// Validates the input to the return order field.
        #/// </summary>
        #/// <param name="_returnItemNum">
        #/// A <c>ReturnItemNum</c> type.
        #/// </param>
        #/// <returns>
        #/// true if the return order in question exists; otherwise, false.
        #/// </returns>
        #static boolean returnValidateReturnItemNum(ReturnItemNum _returnItemNum)
        #{
        #    boolean ret = true;
        #    SalesTable salesTable = SalesTable::findReturnItemNum(strLTrim(_returnItemNum));
        #
        #    if (_returnItemNum && !salesTable.RecId)
        #    {
        #        //Return order %1 doesn't exists
        #        ret = checkFailed(strFmt("@SYS115108", _returnItemNum));
        #    }
        #
        #    if (ret)
        #    {
        #        if (salesTable.ReturnStatus == ReturnStatusHeader::Created || salesTable.ReturnStatus == ReturnStatusHeader::Open)
        #        {
        #            ret = true;
        #        }
        #        else
        #        {                           //Only Return orders with status %1 or %2 are legal input.
        #            ret = checkFailed(strFmt("@SYS123163", ReturnStatusHeader::Created, ReturnStatusHeader::Open));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setSalesOrderReleasedStatus
        #/// <summary>
        #/// Sets the released status for a sales order.
        #/// </summary>
        #/// <param name="_salesId">
        #/// The sales Id of the sales order to be updated.
        #/// </param>
        #static void setSalesOrderReleasedStatus(SalesId _salesId)
        #{
        #    SalesLine           salesLine;
        #    WHSSalesLine        whsSalesLine;
        #    SalesTable          salesTable;
        #    WHSInventEnabled    whsInventEnabled;
        #
        #    WHSReleaseStatus    calculatedReleaseStatus;
        #
        #    ttsbegin;
        #
        #    // Find total released qty for the sales order
        #    // Find total qty of sales lines for WHS enabled items
        #    select sum(ReleasedQty) from whsSalesLine
        #        join sum(QtyOrdered) from salesLine
        #        where salesLine.InventTransId       == whsSalesLine.InventTransId
        #        &&    salesLine.SalesId             == _salesId
        #        &&    salesLine.LineDeliveryType    != LineDeliveryType::OrderLineWithMultipleDeliveries
        #            exists join whsInventEnabled
        #            where whsInventEnabled.ItemId   == salesLine.ItemId;
        #
        #    // If total released qty is not zero continue to find total sales line ordered qty
        #    if (whsSalesLine.ReleasedQty != 0)
        #    {
        #        // Compare total released qty and total ordered qty
        #        if (salesLine.QtyOrdered > whsSalesLine.ReleasedQty)
        #        {
        #            // If ordered qty is greater than the status is partial released
        #            calculatedReleaseStatus = WHSReleaseStatus::PartialReleased;
        #        }
        #        else if (salesLine.QtyOrdered == whsSalesLine.ReleasedQty)
        #        {
        #            // If ordered qty is equal to released qty then the status is released
        #            calculatedReleaseStatus = WHSReleaseStatus::Released;
        #        }
        #    }
        #    else
        #    {
        #        // If there is no released qty then the status is open
        #        calculatedReleaseStatus = WHSReleaseStatus::Open;
        #    }
        #
        #    salesTable.skipDataMethods(true);
        #    update_recordSet salesTable
        #        setting ReleaseStatus = calculatedReleaseStatus
        #        where salesTable.SalesId        == _salesId
        #           && salesTable.ReleaseStatus  != calculatedReleaseStatus;
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #shipCarrierPostPickup
        #static void shipCarrierPostPickup(
        #    SalesTable          _salesTable,
        #    DocumentStatus      _documentStatus)
        #{
        #    SalesFormLetter     salesFormLetter;
        #
        #
        #    if (_documentStatus != DocumentStatus::PackingSlip && _documentStatus != DocumentStatus::Invoice
        #        && _documentStatus != DocumentStatus::Facture_RU)
        #    {
        #        return;
        #    }
        #
        #    salesFormLetter = SalesFormLetter::construct(_documentStatus);
        #
        #    salesFormLetter.allowEmptyTable(salesFormLetter.initAllowEmptyTable(true));
        #
        #    salesFormLetter.transDate(systemDateGet());
        #
        #    salesFormLetter.update(_salesTable, systemDateGet(), SalesUpdate::All, AccountOrder::None, false, true);
        #
        #    salesFormLetter.runShipCarrier();
        #}
      ENDSOURCE
      SOURCE #txtNotExist
        #static str  txtNotExist()
        #{
        #    return "@SYS15067";
        #}
      ENDSOURCE
      SOURCE #updateDlvModeFromCarrierService
        #/// <summary>
        #///   Updates delivery mode on sales order and optionally on related sales lines.
        #/// </summary>
        #/// <param name="_salesId">
        #///   The sales order ID.
        #/// </param>
        #/// <param name="_carrierCode">
        #///   The carrier code.
        #/// </param>
        #/// <param name="_carrierServiceCode">
        #///   The carrier service code.
        #/// </param>
        #/// <param name="_updateLines">
        #///   true if sales lines should be updated; otherwise false; optional.
        #/// </param>
        #/// <remarks>
        #///   The delivery mode is assigned based on carrier code and carrier service.
        #/// </remarks>
        #public static server void updateDlvModeFromCarrierService(
        #    SalesId                 _salesId,
        #    TMSCarrierCode          _carrierCode,
        #    TMSCarrierServiceCode   _carrierServiceCode,
        #    boolean                 _updateLines = false)
        #{
        #    SalesTable salesTable;
        #    SalesLine  salesLine;
        #    DlvModeId   dlvModeId = TMSCarrierService::findDlvModeId(_carrierCode, _carrierServiceCode);
        #
        #    if (dlvModeId)
        #    {
        #        ttsbegin;
        #
        #        update_recordset salesTable
        #            setting DlvMode = dlvModeId
        #            where salesTable.SalesId == _salesId;
        #
        #        if (_updateLines)
        #        {
        #            salesLine.skipDataMethods(true);
        #            update_recordset salesLine
        #                setting DlvMode = dlvModeId
        #                where salesLine.SalesId == _salesId;
        #        }
        #
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: END
