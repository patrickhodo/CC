Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; 
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #ProjTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #ProjTable
      Label               #@SYS36368
      FormRef             #ProjTable
      ListPageRef         #ProjProjectsListPage
      SearchLinkRefName   #EPProjTableInfo
      TitleField1         #ProjId
      TitleField2         #Name
      ConfigurationKey    #ProjBasic
      SecurityKey         #ProjTables
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      TableGroup          #Main
      PrimaryIndex        #ProjectIdx
      ClusterIndex        #ProjectIdx
      ModifiedDateTime    #Yes
      DeveloperDocumentation  #@SYS124965
      Origin              #{2C090270-0000-1000-F7DF-7E6A5461626C}
      LegacyId            #624
    ENDPROPERTIES
    
    FIELDS
      FIELD #AlternateBudgetProject
        STRING
        PROPERTIES
          Name                #AlternateBudgetProject
          Label               #@SYS153317
          HelpText            #@SYS153318
          Table               #ProjTable
          Origin              #{B7EB387C-9F81-4B55-8DBF-0D97C1351BFF}
          LegacyId            #105
          ExtendedDataType    #ProjId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AssetId
        STRING
        PROPERTIES
          Name                #AssetId
          Table               #ProjTable
          Origin              #{8E887EF9-2361-4AF6-A5F5-221F049DD0AC}
          LegacyId            #101
          ExtendedDataType    #AssetId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #BankDocumentType
        ENUM
        PROPERTIES
          Name                #BankDocumentType
          Table               #ProjTable
          Origin              #{1DBD6C88-10D3-42A1-BF03-F11DA78003B6}
          LegacyId            #149
          EnumType            #BankLGDocumentType
        ENDPROPERTIES
        
      FIELD #CertifiedPayroll
        ENUM
        PROPERTIES
          Name                #CertifiedPayroll
          Label               #@GLS94038
          HelpText            #@GLS94019
          ConfigurationKey    #Payroll
          Table               #ProjTable
          Origin              #{2A103ECD-0270-1000-CF1B-F514FA97D359}
          LegacyId            #16077
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CheckBudget
        ENUM
        PROPERTIES
          Name                #CheckBudget
          Label               #@SYS153311
          HelpText            #@SYS153312
          ConfigurationKey    #ProjAdvCostControl
          Table               #ProjTable
          Origin              #{2B3015BD-4767-414F-AA5E-8FF30E9EEAE8}
          LegacyId            #25
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CompleteScheduled
        ENUM
        PROPERTIES
          Name                #CompleteScheduled
          Label               #@PSA10199
          HelpText            #@PSA10200
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{872D9A8E-CB56-488F-86CA-EEDA1A34D061}
          LegacyId            #16072
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ContractAmendment_SA
        REAL
        PROPERTIES
          Name                #ContractAmendment_SA
          Label               #@SYS321595
          HelpText            #@SYS322164
          Table               #ProjTable
          CountryRegionCodes  #SA
          Origin              #{E4007204-9B98-408F-BFDD-7743DCF1FB0D}
          LegacyId            #67
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #ContractDate_SA
        DATE
        PROPERTIES
          Name                #ContractDate_SA
          Label               #@SYS321592
          HelpText            #@SYS322162
          Table               #ProjTable
          CountryRegionCodes  #SA
          Origin              #{5F909424-62C5-4806-BF23-71A948027FD4}
          LegacyId            #65
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #ContractPeriod_SA
        STRING
        PROPERTIES
          Name                #ContractPeriod_SA
          Table               #ProjTable
          Origin              #{33835024-81E0-47BF-9E86-0D27389080D8}
          LegacyId            #68
          ExtendedDataType    #ProjContractPeriodZakat_SA
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #ContractValue_SA
        REAL
        PROPERTIES
          Name                #ContractValue_SA
          Label               #@SYS331870
          HelpText            #@SYS322163
          Table               #ProjTable
          CountryRegionCodes  #SA
          Origin              #{36D83464-F58A-4426-8D21-6671696D9BC9}
          LegacyId            #66
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #Created
        DATE
        PROPERTIES
          Name                #Created
          Label               #@SYS21858
          HelpText            #@SYS548
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{84592C8D-3E62-40C7-B9E2-CCBB3B03D046}
          LegacyId            #5
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #CreditCardId
        STRING
        PROPERTIES
          Name                #CreditCardId
          Table               #ProjTable
          Origin              #{03D3381A-FD35-4FAB-8131-2A1051DAD3D2}
          ExtendedDataType    #CreditCardId
        ENDPROPERTIES
        
      FIELD #CustAccount
        STRING
        PROPERTIES
          Name                #CustAccount
          HelpText            #@SYS864
          GroupPrompt         #@SYS24500
          Table               #ProjTable
          Origin              #{571E68EB-9DA6-42FF-9E5D-7C3176DA61CC}
          LegacyId            #8
          ExtendedDataType    #CustAccount
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DefaultDimension
        INT64
        PROPERTIES
          Name                #DefaultDimension
          Table               #ProjTable
          Origin              #{5B5876E7-59AD-4001-A0B5-E1C616EF2CC4}
          LegacyId            #58
          ExtendedDataType    #DimensionDefault
        ENDPROPERTIES
        
      FIELD #DeliveryLocation
        INT64
        PROPERTIES
          Name                #DeliveryLocation
          Visible             #No
          Table               #ProjTable
          Origin              #{A6735CE8-E5DB-411E-8B65-79B55D39AF84}
          LegacyId            #51
          ExtendedDataType    #LogisticsLocationRecId
        ENDPROPERTIES
        
      FIELD #DlvName
        STRING
        PROPERTIES
          Name                #DlvName
          Label               #@SYS22058
          HelpText            #@SYS17217
          Table               #ProjTable
          Origin              #{90124C90-F0E1-4804-9D02-058D31AF137E}
          LegacyId            #9
          ExtendedDataType    #CompanyName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #Email
        STRING
        PROPERTIES
          Name                #Email
          Table               #ProjTable
          Origin              #{856056FC-18FA-4339-AA10-BB5B9F72B756}
          LegacyId            #19
          ExtendedDataType    #Email
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #EndDate
        DATE
        PROPERTIES
          Name                #EndDate
          Table               #ProjTable
          Origin              #{238D7C9E-A89E-42EC-B684-21CA42D9C8C9}
          LegacyId            #7
          ExtendedDataType    #ProjEndDate
        ENDPROPERTIES
        
      FIELD #ExtensionDate
        DATE
        PROPERTIES
          Name                #ExtensionDate
          Table               #ProjTable
          Origin              #{56F0F958-4F52-48E8-82E8-0A9D4D28426B}
          LegacyId            #104
          ExtendedDataType    #ProjExtensionDate
        ENDPROPERTIES
        
      FIELD #Format
        STRING
        PROPERTIES
          Name                #Format
          Label               #@SYS333115
          HelpText            #@SYS62347
          Table               #ProjTable
          Origin              #{27470A96-45BC-4B63-94C0-7740A80402B7}
          LegacyId            #24
          ExtendedDataType    #NumberSequenceFormat
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Header
        ENUM
        PROPERTIES
          Name                #Header
          Table               #ProjTable
          Origin              #{349770C8-E5EA-4D52-BAE2-3B7B4267C0C3}
          LegacyId            #22
          ExtendedDataType    #ProjHeader
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #JobId
        STRING
        PROPERTIES
          Name                #JobId
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #JmgJob
          Table               #ProjTable
          Origin              #{3523523F-D139-428E-ACFE-82418C7DFB0A}
          LegacyId            #8001
          ExtendedDataType    #JmgJobId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #JobPayType
        ENUM
        PROPERTIES
          Name                #JobPayType
          ConfigurationKey    #JmgJob
          Table               #ProjTable
          Origin              #{A6190126-7B89-4BCD-938A-5777931D7C4F}
          LegacyId            #8003
          ExtendedDataType    #JmgJobPayType
          EnumType            #JmgJobPayTypeEnum
        ENDPROPERTIES
        
      FIELD #MinTimeIncrement
        REAL
        PROPERTIES
          Name                #MinTimeIncrement
          Table               #ProjTable
          Origin              #{C1047B05-4254-49A7-99B4-F247A50C69D4}
          LegacyId            #122
          ExtendedDataType    #TSMinTimeIncrement
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Table               #ProjTable
          AliasFor            #ProjId
          Origin              #{39447BAD-6716-44E1-BAC7-2BE4DAC8E900}
          LegacyId            #3
          ExtendedDataType    #ProjName
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #OCIP
        ENUM
        PROPERTIES
          Name                #OCIP
          Label               #@GLS93815
          HelpText            #@GLS93816
          Table               #ProjTable
          AnalysisLabel       #Payroll
          Origin              #{2A043ECC-0270-1000-4F43-495000000000}
          LegacyId            #16076
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #OCIPGL
        ENUM
        PROPERTIES
          Name                #OCIPGL
          Label               #@GLS93817
          HelpText            #@GLS93818
          ConfigurationKey    #Payroll
          Table               #ProjTable
          Origin              #{2A063ECE-0270-1000-4F43-4950474C0000}
          LegacyId            #16078
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PackedExtensions
        QUEUE
        PROPERTIES
          Name                #PackedExtensions
          SaveContents        #No
          Visible             #No
          Table               #ProjTable
          Origin              #{A7209DAF-B348-4787-B1B0-8B7B06ABE5ED}
          ExtendedDataType    #SysExtensionSerializerPackedContainer
        ENDPROPERTIES
        
      FIELD #ParentId
        STRING
        PROPERTIES
          Name                #ParentId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{3C20A019-2EB5-413A-A77F-44DA8D7E3E86}
          LegacyId            #21
          ExtendedDataType    #ProjParentId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProjBudgetaryControlOn
        ENUM
        PROPERTIES
          Name                #ProjBudgetaryControlOn
          Table               #ProjTable
          Origin              #{6B2A7A08-296D-40A0-98D1-814838E0246E}
          LegacyId            #99
          EnumType            #ProjBudgetaryControlOn
        ENDPROPERTIES
        
      FIELD #ProjBudgetInterval
        ENUM
        PROPERTIES
          Name                #ProjBudgetInterval
          Table               #ProjTable
          Origin              #{D3765A1D-3F33-4C3C-820C-C61ECB2D74E9}
          LegacyId            #106
          EnumType            #ProjBudgetInterval
        ENDPROPERTIES
        
      FIELD #ProjBudgetManagement
        ENUM
        PROPERTIES
          Name                #ProjBudgetManagement
          Table               #ProjTable
          Origin              #{1922490E-8C3F-45DC-B4A0-72DBF08C541E}
          EnumType            #ProjBudgetManagement
        ENDPROPERTIES
        
      FIELD #ProjBudgetOverrunOption
        ENUM
        PROPERTIES
          Name                #ProjBudgetOverrunOption
          Table               #ProjTable
          Origin              #{BBD9E483-E6CE-40DD-B2F8-9F84306C4E21}
          LegacyId            #96
          EnumType            #ProjBudgetOverrunOption
        ENDPROPERTIES
        
      FIELD #ProjCarryForwardNegativeBudget
        ENUM
        PROPERTIES
          Name                #ProjCarryForwardNegativeBudget
          Label               #@sys312846
          HelpText            #@sys312847
          Table               #ProjTable
          Origin              #{0984D65D-F159-4559-93E3-3BEF6E6777D9}
          LegacyId            #124
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ProjCarryForwardRemainingBudget
        ENUM
        PROPERTIES
          Name                #ProjCarryForwardRemainingBudget
          Label               #@sys312844
          HelpText            #@sys312845
          Table               #ProjTable
          Origin              #{69E3BB20-FE56-4A2E-9918-63733D6637BD}
          LegacyId            #123
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ProjectedEndDate
        DATE
        PROPERTIES
          Name                #ProjectedEndDate
          Table               #ProjTable
          Origin              #{A20AA962-F70C-41E6-B824-9FEB412DB6EE}
          LegacyId            #103
          ExtendedDataType    #ProjProjectedEndDate
        ENDPROPERTIES
        
      FIELD #ProjectedStartDate
        DATE
        PROPERTIES
          Name                #ProjectedStartDate
          Table               #ProjTable
          Origin              #{00307B62-6CE4-4E6F-937A-14C91ACFEFCB}
          LegacyId            #102
          ExtendedDataType    #ProjProjectedStartDate
        ENDPROPERTIES
        
      FIELD #ProjGroupId
        STRING
        PROPERTIES
          Name                #ProjGroupId
          HelpText            #@SYS19480
          Table               #ProjTable
          Origin              #{86634191-5CC9-45D1-B7F6-BE3C4A4E2DAD}
          LegacyId            #1
          ExtendedDataType    #ProjGroupId
        ENDPROPERTIES
        
      FIELD #ProjId
        STRING
        PROPERTIES
          Name                #ProjId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{F50C0DEE-BCC1-4F0D-BD37-CE6EC769A700}
          LegacyId            #2
          ExtendedDataType    #ProjId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProjInvoiceProjId
        STRING
        PROPERTIES
          Name                #ProjInvoiceProjId
          Table               #ProjTable
          Origin              #{E033D25F-9689-411D-A879-31B557FDD0B8}
          LegacyId            #13
          ExtendedDataType    #ProjInvoiceProjId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProjLedgerPosting
        ENUM
        PROPERTIES
          Name                #ProjLedgerPosting
          Label               #@SYS340029
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{9A11F2C8-0E8A-4446-B86C-76FF1F86A36C}
          LegacyId            #4
          EnumType            #ProjLedgerPosting
        ENDPROPERTIES
        
      FIELD #ProjLinePropertySearch
        ENUM
        PROPERTIES
          Name                #ProjLinePropertySearch
          Table               #ProjTable
          Origin              #{B2D9648F-47AA-4B69-8262-CE39029DD8A4}
          LegacyId            #49
          EnumType            #ProjLinePropertySearch
        ENDPROPERTIES
        
      FIELD #ProjPriceGroup
        STRING
        PROPERTIES
          Name                #ProjPriceGroup
          Label               #@SYS340030
          Table               #ProjTable
          Origin              #{0C2DDFFD-A01B-4975-B024-006EEC0C0846}
          LegacyId            #95
          ExtendedDataType    #ProjPriceGroupID
        ENDPROPERTIES
        
      FIELD #PSADoInvoiceCost
        ENUM
        PROPERTIES
          Name                #PSADoInvoiceCost
          Table               #ProjTable
          Origin              #{A32E210F-52B2-4340-B261-4A1268D141DF}
          LegacyId            #16036
          ExtendedDataType    #PSADoInvoiceCost
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSAForecastModelId
        STRING
        PROPERTIES
          Name                #PSAForecastModelId
          Label               #@PSA990
          AllowEdit           #No
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{D43EFC35-CEBD-4909-8392-721812145E12}
          LegacyId            #16032
          ExtendedDataType    #ForecastModelId
        ENDPROPERTIES
        
      FIELD #PSAForecastModelIdExternal
        STRING
        PROPERTIES
          Name                #PSAForecastModelIdExternal
          Label               #@PSA1833
          HelpText            #@PSA1830
          AllowEdit           #No
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{31283831-AC75-48FC-8284-81D045F04146}
          LegacyId            #16040
          ExtendedDataType    #ForecastModelId
        ENDPROPERTIES
        
      FIELD #PSAInvoiceMethod
        ENUM
        PROPERTIES
          Name                #PSAInvoiceMethod
          Table               #ProjTable
          Origin              #{11ACED8A-35B0-41D3-87A3-AD51E78F1216}
          LegacyId            #16034
          EnumType            #PSAInvoiceMethod
        ENDPROPERTIES
        
      FIELD #PSANotes
        STRING
        PROPERTIES
          Name                #PSANotes
          Label               #@SYS70989
          HelpText            #@PSA1676
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{1E5DD8A7-3113-4C27-A3ED-82BE60516257}
          LegacyId            #16037
          ExtendedDataType    #Notes
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #PSAPhone
        STRING
        PROPERTIES
          Name                #PSAPhone
          HelpText            #@SYS83764
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{CE4F3CCC-02D6-42B8-B507-2FE5CBC84867}
          LegacyId            #16041
          ExtendedDataType    #Phone
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PSAPReqControl
        ENUM
        PROPERTIES
          Name                #PSAPReqControl
          Table               #ProjTable
          Origin              #{D646A7AE-F953-4641-BE73-22ABDD6F3236}
          LegacyId            #16045
          EnumType            #PSAPReqControl
        ENDPROPERTIES
        
      FIELD #PSAPReqHourValidate
        ENUM
        PROPERTIES
          Name                #PSAPReqHourValidate
          HelpText            #@PSA2250
          Table               #ProjTable
          Origin              #{98C8A47F-7CDE-49C3-8447-DC9ED14306EB}
          LegacyId            #16044
          EnumType            #PSAPReqValidate
        ENDPROPERTIES
        
      FIELD #PSAPReqItemValidate
        ENUM
        PROPERTIES
          Name                #PSAPReqItemValidate
          HelpText            #@PSA2249
          Table               #ProjTable
          Origin              #{76A6AAE4-171C-42D0-99F3-78BA347989F7}
          LegacyId            #16043
          EnumType            #PSAPReqValidate
        ENDPROPERTIES
        
      FIELD #PSAProjStatus
        ENUM
        PROPERTIES
          Name                #PSAProjStatus
          Table               #ProjTable
          Origin              #{4F1EB685-EF41-47DB-A5F1-3B0B0840917C}
          LegacyId            #16038
          EnumType            #PSAProjStatus
        ENDPROPERTIES
        
      FIELD #PSAProjTask
        ENUM
        PROPERTIES
          Name                #PSAProjTask
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{84196FFF-9377-4BE4-9260-833C8E4D2282}
          LegacyId            #16022
          EnumType            #PSAProjTask
        ENDPROPERTIES
        
      FIELD #PSAReadyForInvoicing
        ENUM
        PROPERTIES
          Name                #PSAReadyForInvoicing
          Label               #@PSA898
          HelpText            #@PSA761
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{8E3CCF32-D362-4460-A992-C563025C01AA}
          LegacyId            #16035
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSAResSchedStatus
        ENUM
        PROPERTIES
          Name                #PSAResSchedStatus
          Table               #ProjTable
          Origin              #{5F52BDCC-6221-4E09-A3A6-D11C5BDF7B2F}
          LegacyId            #16071
          EnumType            #PSAResSchedStatus
        ENDPROPERTIES
        
      FIELD #PSARetainIncludeLower
        ENUM
        PROPERTIES
          Name                #PSARetainIncludeLower
          Label               #@PSA3087
          HelpText            #@PSA2790
          ConfigurationKey    #PSAARRetainage
          Table               #ProjTable
          Origin              #{93B00B9D-7D7C-4242-8E58-6A157452FB13}
          LegacyId            #16059
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSARetainPercent
        REAL
        PROPERTIES
          Name                #PSARetainPercent
          Label               #@PSA11194
          HelpText            #@PSA2792
          ConfigurationKey    #PSAARRetainage
          Table               #ProjTable
          Origin              #{F6F15FA7-C5A6-4236-910C-FFB9E9D041D4}
          LegacyId            #16058
          ExtendedDataType    #Percent
        ENDPROPERTIES
        
      FIELD #PSARetainScheduleId
        STRING
        PROPERTIES
          Name                #PSARetainScheduleId
          Table               #ProjTable
          Origin              #{FCB0E41B-D538-49CD-8CA4-9B69629C6A9C}
          LegacyId            #16057
          ExtendedDataType    #PSAProjRetainScheduleId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PSASchedCalendarId
        STRING
        PROPERTIES
          Name                #PSASchedCalendarId
          HelpText            #@PSA2544
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{CB7B06C4-BDE9-4D6F-80B6-1273C433377A}
          LegacyId            #16052
          ExtendedDataType    #CalendarId
        ENDPROPERTIES
        
      FIELD #PSASchedConstraintDate
        DATE
        PROPERTIES
          Name                #PSASchedConstraintDate
          HelpText            #@PSA2574
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{BF7A63D9-7B80-4A6F-B8D1-09780A173692}
          LegacyId            #16055
          ExtendedDataType    #PSAConstraintDate
        ENDPROPERTIES
        
      FIELD #PSASchedConstraintType
        ENUM
        PROPERTIES
          Name                #PSASchedConstraintType
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{DB40476B-3C70-47F7-867B-A8FCA4E5FCA0}
          LegacyId            #16054
          EnumType            #PSAConstraintType
        ENDPROPERTIES
        
      FIELD #PSASchedDefaultDate
        DATE
        PROPERTIES
          Name                #PSASchedDefaultDate
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{0E8A93BB-5B8E-43EE-B1A9-47E7A0C11784}
          LegacyId            #16064
          ExtendedDataType    #TransDate
        ENDPROPERTIES
        
      FIELD #PSASchedDuration
        REAL
        PROPERTIES
          Name                #PSASchedDuration
          Label               #@PSA10114
          HelpText            #@PSA2542
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{092561C3-EC85-45AE-BD7C-744C5577DC5C}
          LegacyId            #16050
          ExtendedDataType    #RealBase
        ENDPROPERTIES
        
      FIELD #PSASchedEffort
        REAL
        PROPERTIES
          Name                #PSASchedEffort
          Label               #@PSA10115
          HelpText            #@SYS4110016
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{AE941E9E-EFEF-4022-8535-59048A11F7CA}
          LegacyId            #16061
          ExtendedDataType    #Hours
        ENDPROPERTIES
        
      FIELD #PSASchedEndDate
        DATE
        PROPERTIES
          Name                #PSASchedEndDate
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{D5CFE1B3-9965-4632-B416-AD28BB03EA30}
          LegacyId            #16049
          ExtendedDataType    #SchedToDate
        ENDPROPERTIES
        
      FIELD #PSASchedFromTime
        TIME
        PROPERTIES
          Name                #PSASchedFromTime
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{75C60F4D-DAC1-4E88-8A24-5643C38E424D}
          LegacyId            #16062
          ExtendedDataType    #SchedFromTime
        ENDPROPERTIES
        
      FIELD #PSASchedIgnoreCalendar
        ENUM
        PROPERTIES
          Name                #PSASchedIgnoreCalendar
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{7C651F15-44A4-467C-B31E-E19B6823B3F1}
          LegacyId            #16053
          ExtendedDataType    #PSAIgnoreCalendar
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSASchedMilestone
        ENUM
        PROPERTIES
          Name                #PSASchedMilestone
          Label               #@SYS26744
          HelpText            #@PSA2581
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{113243F3-AFA1-4358-94AF-AAADF153BC61}
          LegacyId            #16047
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSASchedScheduled
        ENUM
        PROPERTIES
          Name                #PSASchedScheduled
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{6E400932-E175-48C4-A1EA-7F621D0A37AA}
          LegacyId            #16056
          EnumType            #PSAScheduled
        ENDPROPERTIES
        
      FIELD #PSASchedStartDate
        DATE
        PROPERTIES
          Name                #PSASchedStartDate
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{1173A212-EB4A-4C29-8843-0DD8F8999C3A}
          LegacyId            #16048
          ExtendedDataType    #SchedFromDate
        ENDPROPERTIES
        
      FIELD #PSASchedToTime
        TIME
        PROPERTIES
          Name                #PSASchedToTime
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{712B335D-0FF7-4207-A4D2-1D84A6DD1198}
          LegacyId            #16063
          ExtendedDataType    #SchedToTime
        ENDPROPERTIES
        
      FIELD #PSASchedUseDuration
        ENUM
        PROPERTIES
          Name                #PSASchedUseDuration
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{C07DBAFF-FB6A-46ED-A5FE-17ECC468C5A9}
          LegacyId            #16051
          ExtendedDataType    #PSADurationToEnd
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PSATeleFax
        STRING
        PROPERTIES
          Name                #PSATeleFax
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{F0C75E45-3681-4B75-A4D3-7F1F8C23D7BA}
          LegacyId            #16042
          ExtendedDataType    #TeleFax
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PSATimeMeasure
        ENUM
        PROPERTIES
          Name                #PSATimeMeasure
          Table               #ProjTable
          Origin              #{C77957CA-80B5-4997-958D-F68625D136DF}
          LegacyId            #16029
          EnumType            #PSAProjTimeMeasure
        ENDPROPERTIES
        
      FIELD #PSATrackCost
        ENUM
        PROPERTIES
          Name                #PSATrackCost
          Table               #ProjTable
          Origin              #{415EE9DD-A8DD-49B7-9F8D-8BE24A0A1D59}
          LegacyId            #16030
          EnumType            #PSAProjTrackCost
        ENDPROPERTIES
        
      FIELD #PSAUnitId
        STRING
        PROPERTIES
          Name                #PSAUnitId
          HelpText            #@PSA259
          ConfigurationKey    #Project3
          Table               #ProjTable
          Origin              #{8600B5B9-26EB-4B4E-BED5-06BF6E1186EF}
          LegacyId            #16028
          ExtendedDataType    #UnitOfMeasureSymbol
        ENDPROPERTIES
        
      FIELD #RequireActivityExpenseForecast
        ENUM
        PROPERTIES
          Name                #RequireActivityExpenseForecast
          Table               #ProjTable
          Origin              #{E42E9968-E6A1-4B89-B04B-090E23D284F0}
          LegacyId            #90
          ExtendedDataType    #RequireActivityExpenseForecast
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RequireActivityExpenseTrx
        ENUM
        PROPERTIES
          Name                #RequireActivityExpenseTrx
          Table               #ProjTable
          Origin              #{0661DBA2-7D27-4F3C-BDFC-6E98747ECE36}
          LegacyId            #87
          ExtendedDataType    #RequireActivityExpenseTrx
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RequireActivityHourForecast
        ENUM
        PROPERTIES
          Name                #RequireActivityHourForecast
          Table               #ProjTable
          Origin              #{E708AB9A-F3E8-4FE4-9FA9-3B08E8DDA42D}
          LegacyId            #89
          ExtendedDataType    #RequireActivityHourForecast
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RequireActivityHourTrx
        ENUM
        PROPERTIES
          Name                #RequireActivityHourTrx
          Table               #ProjTable
          Origin              #{B97B091B-D976-42F2-92F6-B2A63EF1DE80}
          LegacyId            #86
          ExtendedDataType    #RequireActivityHourTrx
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RequireActivityItemForecast
        ENUM
        PROPERTIES
          Name                #RequireActivityItemForecast
          Table               #ProjTable
          Origin              #{49619619-1AE8-4CC8-B6E8-942277F251C9}
          LegacyId            #91
          ExtendedDataType    #RequireActivityItemForecast
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #RequireActivityItemTrx
        ENUM
        PROPERTIES
          Name                #RequireActivityItemTrx
          Table               #ProjTable
          Origin              #{24DADE44-3B93-439B-8FDC-46CB0C9155F7}
          LegacyId            #88
          ExtendedDataType    #RequireActivityItemTrx
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #sortingId
        STRING
        PROPERTIES
          Name                #sortingId
          Table               #ProjTable
          Origin              #{8A2F3BBB-ABAC-4ABC-AB2C-E5B9BB946517}
          LegacyId            #26
          ExtendedDataType    #ProjSortingId
        ENDPROPERTIES
        
      FIELD #StartDate
        DATE
        PROPERTIES
          Name                #StartDate
          Table               #ProjTable
          Origin              #{E6EBAD16-F3F7-4922-96BA-796E115D4EDC}
          LegacyId            #6
          ExtendedDataType    #ProjStartDate
        ENDPROPERTIES
        
      FIELD #Status
        ENUM
        PROPERTIES
          Name                #Status
          Label               #@SYS56164
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{17532780-5E2C-4207-B872-EF9AC1CBF266}
          LegacyId            #30
          EnumType            #ProjStatus
        ENDPROPERTIES
        
      FIELD #Subject_SA
        STRING
        PROPERTIES
          Name                #Subject_SA
          Table               #ProjTable
          Origin              #{89F79130-9161-43D4-9AE9-1F2144F55BB9}
          LegacyId            #64
          ExtendedDataType    #ProjSubjectZakat_SA
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #SyncCreatedByExternal
        ENUM
        PROPERTIES
          Name                #SyncCreatedByExternal
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{0AC380DC-C4D7-4D6E-A1DA-4E9B794FCD96}
          LegacyId            #100
          ExtendedDataType    #SyncCreatedByExternal
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #SyncEntityId
        GUID
        PROPERTIES
          Name                #SyncEntityId
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{2C8D80D8-6F5E-44ED-B45B-16A359ACB106}
          LegacyId            #97
          ExtendedDataType    #SyncEntityId
        ENDPROPERTIES
        
      FIELD #SyncLastTransId
        GUID
        PROPERTIES
          Name                #SyncLastTransId
          Table               #ProjTable
          Origin              #{7A945285-16A0-467C-8DB4-AC11F38A0512}
          LegacyId            #29
          ExtendedDataType    #SyncTransId
        ENDPROPERTIES
        
      FIELD #SyncToCRM
        ENUM
        PROPERTIES
          Name                #SyncToCRM
          Mandatory           #Yes
          Table               #ProjTable
          Origin              #{74579086-47BB-496E-8F1F-E4258FA8BF78}
          ExtendedDataType    #ProjSyncToCRM
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #SyncVersion
        INT64
        PROPERTIES
          Name                #SyncVersion
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{ED9A1FE0-13D2-4482-81D7-E8D97F377B6B}
          LegacyId            #98
          ExtendedDataType    #SyncVersion
        ENDPROPERTIES
        
      FIELD #TaxGroupId
        STRING
        PROPERTIES
          Name                #TaxGroupId
          HelpText            #@SYS59045
          Table               #ProjTable
          Origin              #{C9B76738-F473-4DCC-9035-D12F25A4651E}
          LegacyId            #23
          ExtendedDataType    #TaxGroup
        ENDPROPERTIES
        
      FIELD #Template
        ENUM
        PROPERTIES
          Name                #Template
          Label               #@SYS60758
          HelpText            #@SYS60818
          Table               #ProjTable
          Origin              #{A0103514-B821-4824-B087-21894B50464C}
          LegacyId            #42
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TimePostDetailSummary
        ENUM
        PROPERTIES
          Name                #TimePostDetailSummary
          Label               #@SYS184065
          HelpText            #@SYS184081
          Visible             #No
          Table               #ProjTable
          Origin              #{8D6F9EAA-A6CC-476E-8E7D-F997EBF6286E}
          LegacyId            #121
          ExtendedDataType    #TSPostDetailSummary
          EnumType            #DetailSummary
        ENDPROPERTIES
        
      FIELD #Type
        ENUM
        PROPERTIES
          Name                #Type
          AllowEdit           #No
          Table               #ProjTable
          Origin              #{380CF916-3547-4AB6-95E4-E32EF890EA59}
          LegacyId            #37
          EnumType            #ProjType
        ENDPROPERTIES
        
      FIELD #UseAlternateProject
        ENUM
        PROPERTIES
          Name                #UseAlternateProject
          Label               #@SYS153315
          HelpText            #@SYS153316
          Table               #ProjTable
          Origin              #{20FB8C92-0EA2-41A1-9C2F-40CD8B2D108D}
          LegacyId            #94
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #UseBudgeting
        ENUM
        PROPERTIES
          Name                #UseBudgeting
          Label               #@SYS153313
          HelpText            #@SYS153314
          Table               #ProjTable
          Origin              #{FE013528-B16C-424A-83CF-2C9ADEFA0116}
          LegacyId            #93
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ValidateProjCategory
        ENUM
        PROPERTIES
          Name                #ValidateProjCategory
          Label               #@SYS11718
          Table               #ProjTable
          Origin              #{9C9BDCCB-4D68-4CB6-B405-D729CD6EB17B}
          LegacyId            #48
          ExtendedDataType    #ProjValidateOption
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #WIPProject
        STRING
        PROPERTIES
          Name                #WIPProject
          Table               #ProjTable
          Origin              #{033C57DD-830A-487E-9B79-D69467E5DD32}
          LegacyId            #34
          ExtendedDataType    #ProjWipId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #WorkerPSAArchitect
        INT64
        PROPERTIES
          Name                #WorkerPSAArchitect
          ConfigurationKey    #PSAContractLine
          Table               #ProjTable
          Origin              #{C7AF93CC-C6FF-452B-907C-113DCF9644F5}
          LegacyId            #16079
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #WorkerResponsible
        INT64
        PROPERTIES
          Name                #WorkerResponsible
          Table               #ProjTable
          Origin              #{EE594EB8-8089-4F8F-9242-CAF13C71948A}
          LegacyId            #140
          ExtendedDataType    #ProjResponsibleWorker
        ENDPROPERTIES
        
      FIELD #WorkerResponsibleFinancial
        INT64
        PROPERTIES
          Name                #WorkerResponsibleFinancial
          Table               #ProjTable
          Origin              #{49BAE54A-7053-4BC8-BDE1-0671641BF157}
          LegacyId            #139
          ExtendedDataType    #ProjResponsibleFinancialWorker
        ENDPROPERTIES
        
      FIELD #WorkerResponsibleSales
        INT64
        PROPERTIES
          Name                #WorkerResponsibleSales
          Table               #ProjTable
          Origin              #{50CC570D-F46B-4341-9477-00F74C3B0264}
          LegacyId            #141
          ExtendedDataType    #ProjResponsibleSalesWorker
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoSummary
        PROPERTIES
          Name                #AutoSummary
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjGroupId
          #Type
          #JobPayType
          #JobId
          #ProjectedEndDate
          #ProjectedStartDate
          #CustAccount
          #StartDate
          #EndDate
          #ParentId
          #Status
          #UseBudgeting
          #ProjPriceGroup
          #AssetId
          #TaxGroupId
          #ProjLedgerPosting
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #Name
          #Type
          #CustAccount
          #custName
          #WorkerResponsibleFinancial
          #WorkerResponsible
          #WorkerResponsibleSales
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #Type
          #ProjInvoiceProjId
          #CustAccount
          #ParentId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
          AutoPopulate        #No
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Address
        PROPERTIES
          Name                #Address
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #DlvName
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressLookUp
        PROPERTIES
          Name                #AddressLookUp
          Label               #@SYS88672
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #CustAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Administration
        PROPERTIES
          Name                #Administration
          Label               #@SYS9853
        ENDPROPERTIES
        
        GROUPFIELDS
          #Status
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AssetGroup
        PROPERTIES
          Name                #AssetGroup
          Label               #@SYS25653
        ENDPROPERTIES
        
        GROUPFIELDS
          #AssetId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BankDocument
        PROPERTIES
          Name                #BankDocument
          Label               #@SYS313653
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankDocumentType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BudgetaryControl
        PROPERTIES
          Name                #BudgetaryControl
          Label               #@SYS153335
        ENDPROPERTIES
        
        GROUPFIELDS
          #UseBudgeting
          #ProjBudgetaryControlOn
          #ProjBudgetOverrunOption
          #UseAlternateProject
          #AlternateBudgetProject
          #ProjBudgetInterval
          #ProjCarryForwardNegativeBudget
          #ProjCarryForwardRemainingBudget
          #ProjBudgetManagement
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CaseMoreInformation
        PROPERTIES
          Name                #CaseMoreInformation
          Label               #@SYS314356
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #ProjInvoiceProjId
          #ProjGroupId
          #Type
          #Header
          #Status
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CollaborationWorkspaceURL
        PROPERTIES
          Name                #CollaborationWorkspaceURL
          Label               #@SYS132439
        ENDPROPERTIES
        
        GROUPFIELDS
          #displayInternalURL
          #displayExternalURL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ContactInfo
        PROPERTIES
          Name                #ContactInfo
          Label               #@SYS21663
        ENDPROPERTIES
        
        GROUPFIELDS
          #Email
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ControlSystem
        PROPERTIES
          Name                #ControlSystem
          Label               #@SYS54063
        ENDPROPERTIES
        
        GROUPFIELDS
          #WIPProject
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CostControl
        PROPERTIES
          Name                #CostControl
          Label               #@SYS107921
        ENDPROPERTIES
        
        GROUPFIELDS
          #CheckBudget
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CreditCard
        PROPERTIES
          Name                #CreditCard
          Label               #@ACC1423
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditCardId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomerContacts
        PROPERTIES
          Name                #CustomerContacts
          Label               #@SYS112870
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjInvoiceProjId
          #CustAccount
          #contractCurrCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DateGroup
        PROPERTIES
          Name                #DateGroup
          Label               #@SYS7402
        ENDPROPERTIES
        
        GROUPFIELDS
          #Created
          #ProjectedStartDate
          #StartDate
          #ProjectedEndDate
          #ExtensionDate
          #EndDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS14926
        ENDPROPERTIES
        
        GROUPFIELDS
          #DefaultDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPMiniPage
        PROPERTIES
          Name                #EPMiniPage
          Label               #@SYS108232
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #ProjGroupId
          #Type
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #General
        PROPERTIES
          Name                #General
          Label               #@SYS35893
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSAUnitId
          #PSATimeMeasure
          #PSATrackCost
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Hierarchies
        PROPERTIES
          Name                #Hierarchies
          Label               #@SYS112869
        ENDPROPERTIES
        
        GROUPFIELDS
          #ParentId
          #Format
          #Header
          #Template
          #JobId
          #WIPProject
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #JobId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Integration
        PROPERTIES
          Name                #Integration
          Label               #@SYS104440
        ENDPROPERTIES
        
        GROUPFIELDS
          #SyncVersion
          #SyncEntityId
          #SyncCreatedByExternal
          #SyncLastTransId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Ledger
        PROPERTIES
          Name                #Ledger
          Label               #@SYS13356
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjLedgerPosting
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LineProperty
        PROPERTIES
          Name                #LineProperty
          Label               #@SYS50026
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjLinePropertySearch
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Payroll
        PROPERTIES
          Name                #Payroll
          Label               #@GLS92169
        ENDPROPERTIES
        
        GROUPFIELDS
          #OCIP
          #OCIPGL
          #CertifiedPayroll
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Piecework
        PROPERTIES
          Name                #Piecework
          Label               #@sys711
        ENDPROPERTIES
        
        GROUPFIELDS
          #JobPayType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PreviewPaneLeft
        PROPERTIES
          Name                #PreviewPaneLeft
          Label               #@SYS313169
        ENDPROPERTIES
        
        GROUPFIELDS
          #StartDate
          #EndDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PreviewPaneRight
        PROPERTIES
          Name                #PreviewPaneRight
          Label               #@SYS313169
        ENDPROPERTIES
        
        GROUPFIELDS
          #WorkerResponsible
          #WorkerResponsibleSales
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PriceGroup
        PROPERTIES
          Name                #PriceGroup
          Label               #@SYS13076
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjPriceGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Project
        PROPERTIES
          Name                #Project
          Label               #@SYS4534
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #ParentId
          #Header
          #Format
          #Type
          #Name
          #ProjInvoiceProjId
          #ProjGroupId
          #CustAccount
          #JobId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectIdentification
        PROPERTIES
          Name                #ProjectIdentification
          Label               #@SYS89920
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjInvoiceProjId
          #CustAccount
          #WIPProject
          #Status
          #WorkerResponsible
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectShort
        PROPERTIES
          Name                #ProjectShort
          Label               #@SYS4534
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #Type
          #ProjGroupId
          #Status
          #SyncToCRM
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjectTemplate
        PROPERTIES
          Name                #ProjectTemplate
          Label               #@SYS60758
        ENDPROPERTIES
        
        GROUPFIELDS
          #Template
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjId
        PROPERTIES
          Name                #ProjId
          Label               #@SYS318380
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSA
        PROPERTIES
          Name                #PSA
          Label               #@PSA43
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSANotes
          #PSAForecastModelId
          #PSAProjStatus
          #PSAProjTask
          #WorkerPSAArchitect
          #PSATeleFax
          #PSAPhone
          #PSAForecastModelIdExternal
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSABudgetControl
        PROPERTIES
          Name                #PSABudgetControl
          Label               #@PSA2232
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSAPReqItemValidate
          #PSAPReqHourValidate
          #PSAPReqControl
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSAContract
        PROPERTIES
          Name                #PSAContract
          Label               #@PSA143
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjInvoiceProjId
          #CustAccount
          #PSAInvoiceMethod
          #childExist
          #PSAReadyForInvoicing
          #PSADoInvoiceCost
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSAGroup
        PROPERTIES
          Name                #PSAGroup
          Label               #@PSA43
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSAResSchedStatus
          #CompleteScheduled
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSAProjectInfo
        PROPERTIES
          Name                #PSAProjectInfo
          Label               #@SYS50114
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProjId
          #Name
          #CustAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSAProjectOverview
        PROPERTIES
          Name                #PSAProjectOverview
          Label               #@SYS4534
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
          #childExist
          #ProjId
          #ParentId
          #Name
          #ProjInvoiceProjId
          #contractAmountFixedPrice
          #Status
          #Type
          #ProjGroupId
          #Header
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSARetainage
        PROPERTIES
          Name                #PSARetainage
          Label               #@PSA2704
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSARetainScheduleId
          #PSARetainPercent
          #PSARetainIncludeLower
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PSAScheduling
        PROPERTIES
          Name                #PSAScheduling
          Label               #@PSA2443
        ENDPROPERTIES
        
        GROUPFIELDS
          #PSASchedMilestone
          #PSASchedScheduled
          #PSASchedStartDate
          #PSASchedEndDate
          #PSASchedDuration
          #PSASchedUseDuration
          #PSASchedEffort
          #PSASchedIgnoreCalendar
          #PSASchedCalendarId
          #PSASchedConstraintDate
          #PSASchedConstraintType
          #PSASchedToTime
          #PSASchedFromTime
          #PSASchedDefaultDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RequireActivityForecast
        PROPERTIES
          Name                #RequireActivityForecast
          Label               #@SYS104382
        ENDPROPERTIES
        
        GROUPFIELDS
          #RequireActivityHourForecast
          #RequireActivityExpenseForecast
          #RequireActivityItemForecast
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RequireActivityTrx
        PROPERTIES
          Name                #RequireActivityTrx
          Label               #@SYS104381
        ENDPROPERTIES
        
        GROUPFIELDS
          #RequireActivityHourTrx
          #RequireActivityExpenseTrx
          #RequireActivityItemTrx
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ResponsibleWorker
        PROPERTIES
          Name                #ResponsibleWorker
          Label               #@SYS67464
        ENDPROPERTIES
        
        GROUPFIELDS
          #WorkerResponsibleSales
          #WorkerResponsible
          #WorkerResponsibleFinancial
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesTax
        PROPERTIES
          Name                #SalesTax
          Label               #@SYS67871
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Sorting
        PROPERTIES
          Name                #Sorting
          Label               #@SYS4138
        ENDPROPERTIES
        
        GROUPFIELDS
          #sortingId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #System
        PROPERTIES
          Name                #System
          Label               #@SYS4278
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #TimeRegistration
        PROPERTIES
          Name                #TimeRegistration
          Label               #@SYS138979
        ENDPROPERTIES
        
        GROUPFIELDS
          #TimePostDetailSummary
          #MinTimeIncrement
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Validation
        PROPERTIES
          Name                #Validation
          Label               #@SYS4440
        ENDPROPERTIES
        
        GROUPFIELDS
          #ValidateProjCategory
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebCategoryBrowsing
        PROPERTIES
          Name                #WebCategoryBrowsing
          Label               #@SYS74258
        ENDPROPERTIES
        
        GROUPFIELDS
          #Type
          #Status
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Zakat_SA
        PROPERTIES
          Name                #Zakat_SA
          Label               #@SYS321586
        ENDPROPERTIES
        
        GROUPFIELDS
          #Subject_SA
          #ContractDate_SA
          #ContractPeriod_SA
          #ContractValue_SA
          #ContractAmendment_SA
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ProjectIdx
      PROPERTIES
        Name                #ProjectIdx
        AllowDuplicates     #No
        Origin              #{2B0A0001-0270-1000-DC60-D37C65637449}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ProjId
      ENDINDEXFIELDS
      
      #CustIdx
      PROPERTIES
        Name                #CustIdx
        Origin              #{2B070002-0270-1000-4375-737449647800}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #CustAccount
        #ProjId
      ENDINDEXFIELDS
      
      #InvoiceProjectIdx
      PROPERTIES
        Name                #InvoiceProjectIdx
        Origin              #{2B110003-0270-1000-F7E1-BC5858CEDF14}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #ProjInvoiceProjId
        #ProjId
      ENDINDEXFIELDS
      
      #FatherIdx
      PROPERTIES
        Name                #FatherIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B090004-0270-1000-EEB5-866865724964}
        LegacyId            #4
      ENDPROPERTIES
      
      INDEXFIELDS
        #ParentId
        #ProjId
      ENDINDEXFIELDS
      
      #WIPProjIdx
      PROPERTIES
        Name                #WIPProjIdx
        Origin              #{2B0A0005-0270-1000-E337-B462726F6A49}
        LegacyId            #5
      ENDPROPERTIES
      
      INDEXFIELDS
        #WIPProject
      ENDINDEXFIELDS
      
      #FK_DimensionAttributeValueSet_ProjTable
      PROPERTIES
        Name                #FK_DimensionAttributeValueSet_ProjTable
        Origin              #{2B270006-0270-1000-86F8-ED917E710B4C}
        LegacyId            #6
      ENDPROPERTIES
      
      INDEXFIELDS
        #DefaultDimension
      ENDINDEXFIELDS
      
      #SyncEntityIdx
      PROPERTIES
        Name                #SyncEntityIdx
        Origin              #{2B0D0007-0270-1000-8FF4-AE283FD28669}
        LegacyId            #7
      ENDPROPERTIES
      
      INDEXFIELDS
        #SyncEntityId
      ENDINDEXFIELDS
      
      #AssetIdx
      PROPERTIES
        Name                #AssetIdx
        Origin              #{2B080008-0270-1000-4173-736574496478}
        LegacyId            #8
      ENDPROPERTIES
      
      INDEXFIELDS
        #AssetId
      ENDINDEXFIELDS
      
      #SyncLastTransIdx
      PROPERTIES
        Name                #SyncLastTransIdx
        Origin              #{2B10000A-0270-1000-2F54-20E049B6376E}
        LegacyId            #10
      ENDPROPERTIES
      
      INDEXFIELDS
        #SyncLastTransId
      ENDINDEXFIELDS
      
      #NameIdx
      PROPERTIES
        Name                #NameIdx
        Origin              #{2B07000E-0270-1000-4E61-6D6549647800}
        LegacyId            #14
      ENDPROPERTIES
      
      INDEXFIELDS
        #Name
      ENDINDEXFIELDS
      
      #HcmWorkerIdx
      PROPERTIES
        Name                #HcmWorkerIdx
        Origin              #{B623D2EB-5DC8-40E3-A6C9-E87F1C10E44A}
        LegacyId            #24
      ENDPROPERTIES
      
      INDEXFIELDS
        #WorkerResponsibleFinancial
      ENDINDEXFIELDS
      
      #HcmWorkerIdx1
      PROPERTIES
        Name                #HcmWorkerIdx1
        Origin              #{472EAE66-6966-47A9-B198-20E78E8DA777}
        LegacyId            #25
      ENDPROPERTIES
      
      INDEXFIELDS
        #WorkerResponsible
      ENDINDEXFIELDS
      
      #HcmWorkerIdx2
      PROPERTIES
        Name                #HcmWorkerIdx2
        Origin              #{7732EAE9-063C-4628-A6DF-1CE98097218C}
        LegacyId            #26
      ENDPROPERTIES
      
      INDEXFIELDS
        #WorkerResponsibleSales
      ENDINDEXFIELDS
      
      #jobididx
      PROPERTIES
        Name                #jobididx
        ConfigurationKey    #JmgJob
        Origin              #{2B081F41-0270-1000-6A6F-626964696478}
        LegacyId            #8001
      ENDPROPERTIES
      
      INDEXFIELDS
        #JobId
      ENDINDEXFIELDS
      
      #GroupStatusStartDateIdx
      PROPERTIES
        Name                #GroupStatusStartDateIdx
        Origin              #{2B173E81-0270-1000-AF1F-99479E15577A}
        LegacyId            #16001
      ENDPROPERTIES
      
      INDEXFIELDS
        #ProjGroupId
        #Status
        #StartDate
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #AssetTable
        PROPERTIES
          Name                #AssetTable
          Table               #AssetTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AssetId
            RelatedField        #AssetId
            SourceEDT           #AssetId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CreditCardTable
        PROPERTIES
          Name                #CreditCardTable
          Table               #CreditCardTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CreditCardId
            RelatedField        #CreditCardId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustTable
        PROPERTIES
          Name                #CustTable
          Table               #CustTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustAccount
            RelatedField        #AccountNum
            SourceEDT           #CustAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DefaultDimension
        PROPERTIES
          Name                #DefaultDimension
          Table               #DimensionAttributeValueSet
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DimensionAttributeValueSet
          Role                #DimensionAttributeValueSet_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DefaultDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DeliveryLocation_FK
        PROPERTIES
          Name                #DeliveryLocation_FK
          Table               #LogisticsLocation
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #LogisticsLocation
          Role                #LogisticsLocation_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DeliveryLocation
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ForecastModel
        PROPERTIES
          Name                #ForecastModel
          Table               #ForecastModel
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PSAForecastModelId
            RelatedField        #ModelId
            SourceEDT           #ForecastModelId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PSAForecastModelIdExternal
            RelatedField        #ModelId
            SourceEDT           #ForecastModelId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PriceDiscGroup
        PROPERTIES
          Name                #PriceDiscGroup
          Table               #PriceDiscGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ProjPriceGroup
            RelatedField        #GroupId
            SourceEDT           #ProjPriceGroupID
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #PriceDiscGroup
            RelatedField        #Type
            SourceEDT           #ProjPriceGroupID
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #PriceDiscGroup
            RelatedField        #Module
            SourceEDT           #ProjPriceGroupID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjGroup_1
        PROPERTIES
          Name                #ProjGroup_1
          Table               #ProjGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #ProjGroup_1
          Role                #ProjTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ProjGroupId
            RelatedField        #ProjGroupId
            SourceEDT           #ProjGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjInvoiceTable
        PROPERTIES
          Name                #ProjInvoiceTable
          Table               #ProjInvoiceTable
          EntityRelationshipRole  #@SYS124968
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ProjInvoiceTable
          Role                #ProjInvoiceTable_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ProjInvoiceProjId
            RelatedField        #ProjInvoiceProjId
            SourceEDT           #ProjInvoiceProjId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjSorting1
        PROPERTIES
          Name                #ProjSorting1
          Table               #ProjSorting
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #ProjSorting1
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #sortingId[1]
            RelatedField        #sortingId
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #ProjSorting
            RelatedField        #SortCode
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjSorting2
        PROPERTIES
          Name                #ProjSorting2
          Table               #ProjSorting
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #ProjSorting2
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #1
            Table               #ProjSorting
            RelatedField        #SortCode
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #sortingId[2]
            RelatedField        #sortingId
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjSorting3
        PROPERTIES
          Name                #ProjSorting3
          Table               #ProjSorting
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #ProjSorting3
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #2
            Table               #ProjSorting
            RelatedField        #SortCode
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #sortingId[3]
            RelatedField        #sortingId
            SourceEDT           #ProjSortingId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjTable_AlternateBudgetProject
        PROPERTIES
          Name                #ProjTable_AlternateBudgetProject
          Table               #ProjTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ProjTable_AlternateBudgetProject
          Role                #ProjTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AlternateBudgetProject
            RelatedField        #ProjId
            SourceEDT           #ProjId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjTable_Parent
        PROPERTIES
          Name                #ProjTable_Parent
          Table               #ProjTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ProjTable_Parent
          Role                #ProjTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ParentId
            RelatedField        #ProjId
            SourceEDT           #ProjParentId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjWIPTable
        PROPERTIES
          Name                #ProjWIPTable
          Table               #ProjWIPTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WIPProject
            RelatedField        #ProjId
            SourceEDT           #ProjWipId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjAttribute
        PROPERTIES
          Name                #PSAActivityProjAttribute
          Table               #PSAActivityProjAttribute
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PSAActivityProjAttribute
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjCertificate
        PROPERTIES
          Name                #PSAActivityProjCertificate
          Table               #PSAActivityProjCertificate
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PSAActivityProjCertificate
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjEducation
        PROPERTIES
          Name                #PSAActivityProjEducation
          Table               #PSAActivityProjEducation
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PSAActivityProjEducation
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjProject
        PROPERTIES
          Name                #PSAActivityProjProject
          Table               #PSAActivityProjProject
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PSAActivityProjProject
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjReqImportance
        PROPERTIES
          Name                #PSAActivityProjReqImportance
          Table               #PSAActivityProjReqImportance
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PSAActivityProjReqImportance
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSAActivityProjSkill
        PROPERTIES
          Name                #PSAActivityProjSkill
          Table               #PSAActivityProjSkill
          Validate            #No
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PSAActivityProjSkill
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TableId
            RelatedField        #RefTableId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #RecId
            RelatedField        #RefRecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PSACustomerRetentionTermTable
        PROPERTIES
          Name                #PSACustomerRetentionTermTable
          Table               #PSACustomerRetentionTermTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PSACustomerRetentionTermTable
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PSARetainScheduleId
            RelatedField        #RetentionTermId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxGroupHeading
        PROPERTIES
          Name                #TaxGroupHeading
          Table               #TaxGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #TaxGroupId
            RelatedField        #TaxGroup
            SourceEDT           #TaxGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #UnitOfMeasure
        PROPERTIES
          Name                #UnitOfMeasure
          Table               #UnitOfMeasure
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #UnitOfMeasure
          Role                #ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PSAUnitId
            RelatedField        #Symbol
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkCalendarTable
        PROPERTIES
          Name                #WorkCalendarTable
          Table               #WorkCalendarTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PSASchedCalendarId
            RelatedField        #CalendarId
            SourceEDT           #CalendarId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerPSAArchitect
        PROPERTIES
          Name                #WorkerPSAArchitect
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #HasTheRoleOfAnArchitect
          Role                #WhoseArchitectIs
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerPSAArchitect
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerRespFinancial
        PROPERTIES
          Name                #WorkerRespFinancial
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #HcmWorker
          Role                #HcmWorker_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerResponsibleFinancial
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerResponsible
        PROPERTIES
          Name                #WorkerResponsible
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #HcmWorker_1
          Role                #HcmWorker_1_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerResponsible
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WorkerRespSales
        PROPERTIES
          Name                #WorkerRespSales
          Table               #HcmWorker
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #HcmWorker_2
          Role                #HcmWorker_2_ProjTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WorkerResponsibleSales
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #SMASalesPriceSubscription(ProjTable)
      PROPERTIES
        Table               #SMASalesPriceSubscription
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #PSAComponentGroupAssignment
      PROPERTIES
        Table               #PSAComponentGroupAssignment
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjDefaultOffsetSetup(ProjTable)
      PROPERTIES
        Table               #ProjDefaultOffsetSetup
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #ProjTransferPrice(ProjTable)
      PROPERTIES
        Table               #ProjTransferPrice
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #PSAProjSchedRole
      PROPERTIES
        Table               #PSAProjSchedRole
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjCostPriceExpense
      PROPERTIES
        Table               #ProjCostPriceExpense
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjTableTaxExtensionIN(ProjTable)
      PROPERTIES
        Table               #ProjTableTaxExtensionIN
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #PayrollEarningStatementLine(ProjId)
      PROPERTIES
        Table               #PayrollEarningStatementLine
        DeleteAction        #Restricted
        Relation            #ProjId
      ENDPROPERTIES
      
      #BankLGGuaranteeProject(ProjTable)
      PROPERTIES
        Table               #BankLGGuaranteeProject
        DeleteAction        #Restricted
        Relation            #ProjTable
      ENDPROPERTIES
      
      #ForecastSales
      PROPERTIES
        Table               #ForecastSales
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjAllocateTrans
      PROPERTIES
        Table               #ProjAllocateTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjBudget
      PROPERTIES
        Table               #ProjBudget
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjCostSalesPrice
      PROPERTIES
        Table               #ProjCostSalesPrice
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjCostTrans
      PROPERTIES
        Table               #ProjCostTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjEmplTrans
      PROPERTIES
        Table               #ProjEmplTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjForecastCost
      PROPERTIES
        Table               #ProjForecastCost
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjForecastEmpl
      PROPERTIES
        Table               #ProjForecastEmpl
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjForecastOnAcc
      PROPERTIES
        Table               #ProjForecastOnAcc
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjForecastRevenue
      PROPERTIES
        Table               #ProjForecastRevenue
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjHourCostPrice
      PROPERTIES
        Table               #ProjHourCostPrice
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjHourSalesPrice
      PROPERTIES
        Table               #ProjHourSalesPrice
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjInvoiceCost
      PROPERTIES
        Table               #ProjInvoiceCost
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjInvoiceEmpl
      PROPERTIES
        Table               #ProjInvoiceEmpl
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjInvoiceItem
      PROPERTIES
        Table               #ProjInvoiceItem
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjInvoiceOnAcc
      PROPERTIES
        Table               #ProjInvoiceOnAcc
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjInvoiceRevenue
      PROPERTIES
        Table               #ProjInvoiceRevenue
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjItemTrans
      PROPERTIES
        Table               #ProjItemTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjItemTransCost
      PROPERTIES
        Table               #ProjItemTransCost
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjJournalTrans
      PROPERTIES
        Table               #ProjJournalTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjLinePropertySetup
      PROPERTIES
        Table               #ProjLinePropertySetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjOnAccTrans
      PROPERTIES
        Table               #ProjOnAccTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjPosting
      PROPERTIES
        Table               #ProjPosting
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjProposalCost
      PROPERTIES
        Table               #ProjProposalCost
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjProposalEmpl
      PROPERTIES
        Table               #ProjProposalEmpl
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjProposalItem
      PROPERTIES
        Table               #ProjProposalItem
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjProposalOnAcc
      PROPERTIES
        Table               #ProjProposalOnAcc
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjProposalRevenue
      PROPERTIES
        Table               #ProjProposalRevenue
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjPWPVendorRetentionSetting(ProjTable)
      PROPERTIES
        Table               #ProjPWPVendorRetentionSetting
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #ProjRevenueSalesPrice
      PROPERTIES
        Table               #ProjRevenueSalesPrice
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjRevenueTrans
      PROPERTIES
        Table               #ProjRevenueTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProjValEmplProjSetup
      PROPERTIES
        Table               #ProjValEmplProjSetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjValProjCategorySetUp
      PROPERTIES
        Table               #ProjValProjCategorySetUp
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProjWIPTable
      PROPERTIES
        Table               #ProjWIPTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #PSAProjFundingSourceRetain(ProjTable)
      PROPERTIES
        Table               #PSAProjFundingSourceRetain
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #PSAProjWorkComplete(ProjTable)
      PROPERTIES
        Table               #PSAProjWorkComplete
        DeleteAction        #Cascade
        Relation            #ProjTable
      ENDPROPERTIES
      
      #PSASchedEmplReservation
      PROPERTIES
        Table               #PSASchedEmplReservation
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #PurchTable
      PROPERTIES
        Table               #PurchTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #SalesTable
      PROPERTIES
        Table               #SalesTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #SMAAgreementTable
      PROPERTIES
        Table               #SMAAgreementTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #SMAServiceOrderTable
      PROPERTIES
        Table               #SMAServiceOrderTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #SMASubscriptionTable
      PROPERTIES
        Table               #SMASubscriptionTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #smmLeadRelTable
      PROPERTIES
        Table               #smmLeadRelTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #smmOpportunityRelTable
      PROPERTIES
        Table               #smmOpportunityRelTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #TSTimesheetLine
      PROPERTIES
        Table               #TSTimesheetLine
        DeleteAction        #Restricted
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #accountingCurrency
        #/// <summary>
        #/// Retrieves the accounting currency of the company of the selected project.
        #/// </summary>
        #/// <returns>
        #/// <c>CurrencyCode</c>
        #/// </returns>
        #/// <remarks>
        #/// This display method is used in the infopart to display the accounting currency of the selected project's company.
        #/// </remarks>
        #display CurrencyCode accountingCurrency()
        #{
        #    return CompanyInfo::standardCurrency();
        #}
      ENDSOURCE
      SOURCE #canBudgetControlBeModified
        #public boolean canBudgetControlBeModified(NoYes _activated)
        #{
        #    DialogButton dialogButton;
        #    boolean      ret;
        #
        #    if (_activated)
        #    {
        #        dialogButton = Box::yesNo(strFmt("@SYS300175", this.ProjId), DialogButton::Yes);
        #        if(dialogButton == DialogButton::Yes)
        #        {
        #            ret = true;
        #        }
        #    }
        #    else
        #    {
        #        dialogButton = Box::yesNo(strFmt("@SYS300176", this.ProjId), DialogButton::Yes);
        #        if(dialogButton == DialogButton::Yes)
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkAccount
        #private boolean checkAccount()
        #{
        #    CustVendorBlocked   blockLevel = CustTable::blocked(this.CustAccount);
        #
        #    if(this.Type == ProjType::TimeMaterial || this.Type == ProjType::FixedPrice)
        #    {
        #        switch (blockLevel)
        #        {
        #            case CustVendorBlocked::All:
        #                return checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
        #
        #            case CustVendorBlocked::Invoice:
        #                return checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
        #        }
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkAlternateProject
        #/// <summary>
        #///    Validates that the alternate project is defined for budget consumption.
        #/// </summary>
        #/// <returns>
        #///    true if the alternate budget project has successfully validated; otherwise, false.
        #/// </returns>
        #private boolean checkAlternateProject()
        #{
        #    #define.Zero('0')
        #    boolean     ret = true;
        #    ProjId      origParentId, altParentId;
        #    container   origProjParentContainer, altProjParentContainer;
        #    ProjTable   projTablelTemp;
        #    NoYesId     allowBudgetOutSideHierarchy;
        #
        #    projTablelTemp = ProjTable::find(this.AlternateBudgetProject);
        #    allowBudgetOutSideHierarchy = ProjParameters::find().AllowBudgetOutSideHierarchy;
        #
        #    // Project stage of selected project is Finished.
        #    if (projTablelTemp.Status == ProjStatus::Completed)
        #    {
        #        ret = checkFailed(strFmt("@SYS301172", this.AlternateBudgetProject, ProjStatus::Completed));
        #    }
        #
        #    // Restrain from selecting header project.
        #    if (ret && projTablelTemp.Header)
        #    {
        #        ret = checkFailed(strFmt("@SYS96612",this.AlternateBudgetProject));
        #    }
        #
        #    //allowBudgetOutSideHierarchy is marked and selected project type is not similar to the original project.
        #    if (ret && allowBudgetOutSideHierarchy && (projTablelTemp.Type != ProjTable::find(this.ProjId).Type || this.ProjId == this.AlternateBudgetProject))
        #    {
        #        ret = checkFailed(strFmt("@SYS307219", this.AlternateBudgetProject));
        #    }
        #
        #    if (!allowBudgetOutSideHierarchy)
        #    {
        #        origProjParentContainer = ProjTable::ancestors(this.ProjId);
        #        altProjParentContainer  = ProjTable::ancestors(this.AlternateBudgetProject);
        #
        #        origParentId =  conPeek(origProjParentContainer, conLen(origProjParentContainer));
        #        altParentId  =  conPeek(altProjParentContainer, conLen(altProjParentContainer));
        #
        #        // if original project has no parent.
        #        if (origParentId == #Zero)
        #        {
        #            origParentId = this.ProjId;
        #        }
        #
        #        // if alternate budget project has no parent.
        #        if (altParentId == #Zero)
        #        {
        #            altParentId = this.AlternateBudgetProject;
        #        }
        #
        #        // if selected alternate project is same as the original project or both have different parent.
        #        if (this.ProjId == this.AlternateBudgetProject || origParentId != altParentId)
        #        {
        #            ret = checkFailed(strFmt("@SYS307220", this.AlternateBudgetProject));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkTAndMTypeBillingRule
        #boolean checkTAndMTypeBillingRule()
        #{
        #    PSAContractLineItems        psaContractLineItems;
        #    PSAContractLineItemsSetup   psaContractLineItemsSetup;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    select firstonly ProjId, ContractLineNum from psaContractLineItemsSetup
        #        where psaContractLineItemsSetup.ProjId == this.ProjId
        #            join ContractLineNum, ProjInvoiceProjId, LineType from psaContractLineItems
        #                where psaContractLineItemsSetup.ContractLineNum == psaContractLineItems.ContractLineNum
        #                    && psaContractLineItems.ProjInvoiceProjId == this.ProjInvoiceProjId
        #                    && psaContractLineItems.LineType == PSAContractLineType::TAndM;
        #    }
        #
        #    return psaContractLineItemsSetup ? true : false;
        #}
        #
      ENDSOURCE
      SOURCE #checkValid
        #/// <summary>
        #///    Validates whether the current record in the table is valid by checking if the <c>ProjId</c> field contains a value.
        #/// </summary>
        #/// <returns>
        #///    true if the current record is valid; otherwise, false.
        #/// </returns>
        #public boolean checkValid()
        #{
        #    boolean ok = true;
        #
        #    if (!this.ProjId)
        #    {
        #        ok = checkFailed("@SYS50091");
        #    }
        #
        #    if (!this)
        #    {
        #        ok = checkFailed(strFmt(ProjTable::txtNotExist(), this.ProjId));
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #childExist
        #/// <summary>
        #/// Verifies whether sub projects exist for the current project record.
        #/// </summary>
        #/// <returns>
        #/// true if sub projects exist; otherwise, false.
        #/// </returns>
        #display ProjChild childExist()
        #{
        #    return ProjTable::child(this.ProjId);
        #}
      ENDSOURCE
      SOURCE #companyInfo
        #/// <summary>
        #/// Retrieves the <c>CompanyInfo</c> record associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>CompanyInfo</c> record.
        #/// </returns>
        #public CompanyInfo companyInfo()
        #{
        #    return CompanyInfo::findDataArea(this.company());
        #}
        #
      ENDSOURCE
      SOURCE #contractAmountFixedPrice
        #/// <summary>
        #///    Determines the latest total amount of the contract entered for the project before or on the
        #///    specified date.
        #/// </summary>
        #/// <param name="_periodFrom">
        #///    The date on which the contract amount is based. The default value is set with the <c>dateMax</c>
        #///    method; optional.
        #/// </param>
        #/// <returns>
        #///    The contract amount for the current fixed price project.
        #/// </returns>
        #/// <remarks>
        #///    This method is used when you determine profit on a fixed price project. If the current project
        #///    record is a fixed price project, it uses data in the <c>ProjControlPeriodTable</c> table to
        #///    determine the amount.
        #/// </remarks>
        #display ProjContractAmount contractAmountFixedPrice(ProjPeriodFrom _periodFrom  = dateMax())
        #{
        #    AmountMST               contractSum;
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    DictTable dictTable;
        #
        #    if (this.Type == ProjType::FixedPrice)
        #    {
        #        dictTable = new DictTable(tableNum(ProjControlPeriodTable));
        #        if (dictTable.rights() >= AccessType::View)
        #        {
        #            select reverse firstonly ProjId, PeriodFrom, ActualContract, ctcContract from projControlPeriodTable
        #                order by PeriodFrom
        #                where   projControlPeriodTable.ProjId       == this.ProjId
        #                &&      projControlPeriodTable.PeriodFrom   <= _periodFrom;
        #
        #
        #            contractSum  = projControlPeriodTable.ActualContract + projControlPeriodTable.ctcContract;
        #        }
        #    }
        #
        #    return contractSum;
        #}
      ENDSOURCE
      SOURCE #contractCurrCode
        #/// <summary>
        #///    Gets the currency code from the contract that is associated with this project.
        #/// </summary>
        #/// <returns>
        #///    The currency code from the contract that is associated with this project.
        #/// </returns>
        #public display CurrencyCode contractCurrCode()
        #{
        #    return ProjInvoiceTable::find(this.ProjInvoiceProjId).CurrencyId;
        #}
      ENDSOURCE
      SOURCE #contractName
        #// BP Deviation Documented
        #public display CompanyName contractName()
        #{
        #    return ProjInvoiceTable::find(this.ProjInvoiceProjId).Name;
        #
        #}
      ENDSOURCE
      SOURCE #contractValue
        #[
        #    SysClientCacheDataMethodAttribute(true)
        #]
        #public display ProjContractValueAmount contractValue()
        #{
        #    AmountCur           ret;
        #    ProjOnAccTrans      projOnAccTrans;
        #    ProjOnAccTransSale  projOnAccTransSale;
        #
        #    AccessType          projOnAccTransAllowedAccess;
        #    AccessType          projOnAccTransSaleAllowedAccess;
        #
        #
        #    projOnAccTransAllowedAccess = new DictTable(tableNum(ProjOnAccTrans)).rights();
        #    projOnAccTransSaleAllowedAccess = new DictTable(tableNum(ProjOnAccTransSale)).rights();
        #
        #    if(projOnAccTransAllowedAccess >= AccessType::View && projOnAccTransSaleAllowedAccess >= AccessType::View)
        #    {
        #        select sum(Amount) from projOnAccTransSale
        #            join TransId, ProjID, CurrencyId from projOnAccTrans
        #                where projOnAccTrans.TransId == projOnAccTransSale.TransId &&
        #                      projOnAccTrans.ProjID == this.ProjId &&
        #                      projOnAccTrans.CurrencyId == this.contractCurrCode();
        #
        #        ret = projOnAccTransSale.Amount;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #copyAdrFromInvoice
        #public void copyAdrFromInvoice(ProjInvoiceTable _projInvoiceTable)
        #{
        #    // use the address on the contract as PSA required.
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        this.DlvName                = _projInvoiceTable.Name;
        #        this.DeliveryLocation       = _projInvoiceTable.InvoiceLocation;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #copyAdrFromQuotation
        #/// <summary>
        #///    Initializes fields for the current project record with values from the sales quotation record.
        #/// </summary>
        #/// <param name="_salesQuotationTable">
        #///    The buffer of <c>SalesQuotationTable</c>
        #/// </param>
        #/// <remarks>
        #///    This method sets the delivery address fields for the current project record with the delivery
        #///    address from the quotation.
        #/// </remarks>
        #public void copyAdrFromQuotation(SalesQuotationTable    _salesQuotationTable)
        #{
        #    LogisticsLocation       logisticsLocation;
        #    LogisticsPostalAddress  logisticsPostalAddress;
        #
        #    if (!this.DeliveryLocation && _salesQuotationTable.DeliveryPostalAddress)
        #    {
        #        ttsbegin;
        #        // Create a location record
        #        logisticsLocation = LogisticsLocation::create(_salesQuotationTable.DeliveryName,true);
        #        this.DeliveryLocation = logisticsLocation.RecId;
        #
        #        // Copy Address to location record
        #        logisticsPostalAddress.data(_salesQuotationTable.deliveryAddress());
        #        logisticsPostalAddress.Location = logisticsLocation.RecId;
        #        logisticsPostalAddress.insert();
        #        ttscommit;
        #
        #        this.DlvName = _salesQuotationTable.DeliveryName;
        #    }
        #}
      ENDSOURCE
      SOURCE #copyDimension
        #/// <summary>
        #/// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </summary>
        #/// <param name="_defaultDimension">
        #/// A dimension set to apply to the <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_dimensionCopy">
        #/// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten.
        #/// </remarks>
        #public DimensionDefault copyDimension(
        #    DimensionDefault _defaultDimension,
        #    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        #    )
        #{
        #    return _dimensionCopy.copy(_defaultDimension);
        #}
        #
      ENDSOURCE
      SOURCE #costAmountFixedPrice
        #/// <summary>
        #///    Determines the latest total cost amount for the project before or on the date passed in if the current project record is a fixed price project by using data in the <c>ProjControlPeriodTable</c> table.
        #/// </summary>
        #/// <param name="_periodFrom">
        #///    The date on which the cost amount is based. The default value is set with the <c>dateMax</c> method; optional.
        #/// </param>
        #/// <returns>
        #///    The cost amount for the current fixed price project.
        #/// </returns>
        #/// <remarks>
        #///    This method is used when you determine profit on a fixed price project.
        #/// </remarks>
        #display CostAmountProject costAmountFixedPrice(ProjPeriodFrom _periodFrom  = dateMax())
        #{
        #    AmountMST               costAmount;
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    DictTable dictTable;
        #
        #    if (this.Type == ProjType::FixedPrice)
        #    {
        #        dictTable = new DictTable(tableNum(ProjControlPeriodTable));
        #        if (dictTable.rights() >= AccessType::View)
        #        {
        #            select reverse firstonly projControlPeriodTable
        #                order by PeriodFrom
        #                where   projControlPeriodTable.ProjId       == this.ProjId &&
        #                        projControlPeriodTable.PeriodFrom   <= _periodFrom;
        #
        #            costAmount = projControlPeriodTable.displayActualCostAmount() + projControlPeriodTable.ctcCostAmount;
        #        }
        #    }
        #
        #    return costAmount;
        #}
      ENDSOURCE
      SOURCE #createSalesTable_ItemReq
        #/// <summary>
        #///    Creates a <c>SalesTable</c> record that is associated and initialized with details from the current project.
        #/// </summary>
        #/// <param name="_currencyCode">
        #///    The currency code with which to create the <c>SalesTable</c> record.
        #/// </param>
        #/// <returns>
        #///    The <c>SalesTable</c> record.
        #/// </returns>
        #public server SalesTable createSalesTable_ItemReq(CustCurrencyCode _currencyCode)
        #{
        #    SalesTable      salesTable = null;
        #
        #    ttsbegin;
        #
        #    salesTable.clear();
        #
        #    salesTable.ProjId       = this.ProjId;
        #    salesTable.initValue(SalesType::ItemReq);
        #
        #    salesTable.SalesId      = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        #
        #
        #    salesTable.CurrencyCode = _currencyCode;
        #    salesTable.FixedExchRate = ProjInvoiceCurrency::find(this.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
        #
        #    if (!salesTable.validateWrite())
        #    {
        #        throw Exception::Error;
        #    }
        #
        #    salesTable.insert();
        #
        #    ttscommit;
        #
        #    return salesTable;
        #}
        #
      ENDSOURCE
      SOURCE #createSalesTable_ItemReqFromSQ
        #public server SalesTable createSalesTable_ItemReqFromSQ(SalesQuotationLine _salesQuotationLine)
        #{
        #    SalesTable      salesTable = null;
        #
        #    ttsbegin;
        #
        #    salesTable.clear();
        #
        #    salesTable.ProjId       = this.ProjId;
        #    salesTable.initValue(SalesType::ItemReq);
        #
        #    salesTable.initFromSalesQuotationTable(_salesQuotationLine.salesQuotationTable());
        #    salesTable.SalesId      = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        #
        #    salesTable.CurrencyCode = _salesQuotationLine.CurrencyCode;
        #    salesTable.FixedExchRate = ProjInvoiceCurrency::find(this.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
        #
        #    if (!salesTable.validateWrite())
        #    {
        #        throw Exception::Error;
        #    }
        #
        #    salesTable.insert();
        #
        #    ttscommit;
        #
        #    return salesTable;
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #createSalesTable_sales
        #/// <summary>
        #///    Creates a <c>SalesTable</c> record that is associated and initialized with details from the current
        #///    project.
        #/// </summary>
        #/// <param name="_currencyCode">
        #///    The currency code with which to create the <c>SalesTable</c> record.
        #/// </param>
        #/// <param name="_salesQuotationLine">
        #///    A <c>SalesQuotationLine</c> record with which to associate the <c>SalesTable</c> record; optional.
        #/// </param>
        #/// <returns>
        #///    The <c>SalesTable</c> record.
        #/// </returns>
        #/// <remarks>
        #///    This method also associates the new <c>Salestable</c> record with a <c>SalesQuotationLine</c>
        #///    record if it is passed in as a parameter.
        #/// </remarks>
        #public server SalesTable createSalesTable_sales(CustCurrencyCode _currencyCode, SalesQuotationLine _salesQuotationLine = null)
        #{
        #    SalesTable  salesTable = null;
        #
        #    ttsbegin;
        #
        #    salesTable.clear();
        #
        #    salesTable.ProjId       = this.ProjId;
        #    salesTable.initValue(SalesType::Sales);
        #
        #    salesTable.SalesId      = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        #
        #
        #    if (_salesQuotationLine)
        #    {
        #        salesTable.QuotationId = _salesQuotationLine.QuotationId;
        #    }
        #
        #    salesTable.CurrencyCode = _currencyCode;
        #    salesTable.FixedExchRate = ProjInvoiceCurrency::find(this.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
        #
        #    if (!salesTable.validateWrite())
        #    {
        #        throw Exception::Error;
        #    }
        #
        #    salesTable.insert();
        #
        #    ttscommit;
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #currencyId
        #/// <summary>
        #/// Retrieves the currency code for the invoice project associated with the current project if it
        #/// exists. Otherwise, retrieves the currency code for the current company.
        #/// </summary>
        #/// <returns>
        #/// The currency code.
        #/// </returns>
        #public CurrencyCode currencyId()
        #{
        #    if (this.ProjInvoiceProjId)
        #    {
        #        return ProjInvoiceTable::find(this.ProjInvoiceProjId).CurrencyId;
        #    }
        #
        #    return Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
        #}
      ENDSOURCE
      SOURCE #custName
        #/// <summary>
        #///    Retrieves the customer name.
        #/// </summary>
        #/// <returns>
        #///    The name of the customer.
        #/// </returns>
        #display CustName custName()
        #{
        #    return CustTable::find(this.CustAccount).name();
        #}
        #
      ENDSOURCE
      SOURCE #defaultFundingSource
        #public ProjFundingSourceRefId defaultFundingSource()
        #{
        #    ProjFundingSource   projFundingSource;
        #
        #    select firstonly ContractId, RecId from projFundingSource where projFundingSource.ContractId == this.ProjInvoiceProjId;
        #
        #    return projFundingSource.RecId;
        #}
      ENDSOURCE
      SOURCE #delete
        #void delete(boolean _skipSyncTrigger = false)
        #{
        #    // <GIN>
        #    #ISOCountryRegionCodes
        #    // </GIN>
        #    SyncProjTable           syncProjTable;
        #    CollabSiteManager       collabSiteManager;
        #    HierarchyTreeTable      hTreeTable;
        #    ProjTransferPrice       projTransferPrice, projTransferPriceTemp;
        #
        #    // Check to see if the associated dimension attribute value has been used
        #    // in a way that would prevent deletion.
        #    if (!DimensionValidation::canDeleteEntityValue(this))
        #    {
        #        throw error(strFmt("@SYS134392", this.ProjId));
        #    }
        #
        #    ttsbegin;
        #
        #    // Update the associated dimension attribute value.
        #    DimensionAttributeValue::updateForEntityValueDelete(this);
        #
        #    // Delete the associated SyncProjTable records
        #    while select forupdate syncProjTable where syncProjTable.ProjId == this.ProjId
        #    {
        #        syncProjTable.delete(_skipSyncTrigger, false);
        #    }
        #
        #    this.status().delete();
        #
        #    Hierarchy::deleteHierarchy(tableNum(ProjTable), this.RecId);
        #
        #    //delete collabsite
        #    collabSiteManager = CollabSiteManager::construct(this);
        #    collabSiteManager.deleteSite(false);
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        delete_from hTreeTable
        #        where hTreeTable.psaNameLink == this.ProjId;
        #    }
        #
        #    // delete transfer price
        #    while select crossCompany dataAreaId, projTable from projTransferPrice
        #        where projTransferPrice.ProjTable == this.RecId
        #    {
        #        changeCompany(projTransferPrice.dataAreaId)
        #        {
        #            projTransferPriceTemp = null;
        #            delete_from projTransferPriceTemp
        #                where projTransferPriceTemp.ProjTable == projTransferPrice.ProjTable;
        #        }
        #    }
        #
        #    // <GIN>
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        #    {
        #        this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        #    }
        #    // </GIN>
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #deleteBySyncService
        #public void deleteBySyncService(SyncAppId _sourceAppId)
        #{
        #    SyncApp syncApp;
        #
        #    // Disallow delete if the project is not integrated to an enabled application
        #    syncApp = SyncApp::find(_sourceAppId);
        #    if(!syncApp || !syncApp.Enabled)
        #        return;
        #
        #    this.delete(true);
        #}
        #
      ENDSOURCE
      SOURCE #displayExternalURL
        #display ProjCollabSiteExternalURL displayExternalURL()
        #{
        #    #DEFINE.HTTP("http://")
        #
        #    int                 i;
        #    CollabSiteTable     collabSiteTable;
        #    DictTable dictTable = new DictTable(tableNum(CollabSiteTable));
        #
        #    if (dictTable.rights() >= AccessType::View)
        #    {
        #        collabSiteTable = CollabSiteLink::getCollabSiteProject(this.ProjId);
        #        if (collabSiteTable)
        #        {
        #            i = strScan(collabSiteTable.ExternalURL, #HTTP, 1, strLen(collabSiteTable.ExternalURL));
        #            return (subStr(collabSiteTable.ExternalURL, i + strLen(#HTTP) ,strLen(collabSiteTable.ExternalURL)));
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #displayInternalURL
        #display ProjCollabSiteInternalURL displayInternalURL()
        #{
        #    #DEFINE.HTTP("http://")
        #
        #    int                 i;
        #    CollabSiteTable     collabSiteTable;
        #    DictTable dictTable = new DictTable(tableNum(CollabSiteTable));
        #
        #    if (dictTable.rights() >= AccessType::View)
        #    {
        #        collabSiteTable = CollabSiteLink::getCollabSiteProject(this.ProjId);
        #        if (collabSiteTable)
        #        {
        #            i = strScan(collabSiteTable.InternalURL, #HTTP, 1, strLen(collabSiteTable.InternalURL));
        #            return (subStr(collabSiteTable.InternalURL, i + strLen(#HTTP) ,strLen(collabSiteTable.InternalURL)));
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #editSubProj
        #/// <summary>
        #///    Updates a field in sub projects that belong to the current project record.
        #/// </summary>
        #/// <param name="_fieldId">
        #///    The ID for the field in the <c>ProjTable</c> table to update.
        #/// </param>
        #/// <param name="_newValue">
        #///    The new value to update the <c>fieldId</c> with in the sub projects.
        #/// </param>
        #/// <param name="_formerValue">
        #///    The original <c>fieldId</c> value of the parent project.
        #/// </param>
        #/// <param name="_arrayIdx">
        #///    The index of the element to update if the _<paramref name="fieldId" /> is an array field; optional.
        #/// </param>
        #/// <returns>
        #///    False if the user cancelled out of the dialog; true otherwise.
        #/// </returns>
        #/// <remarks>
        #///    This method opens a dialog box for the user to either update the field in all the sub projects or only in sub projects that have the same original value as the original value in current parent
        #///    project.
        #/// </remarks>
        #public boolean editSubProj(
        #    FieldId     _fieldId,
        #    anytype     _newValue,
        #    anytype     _formerValue,
        #    ArrayIdx    _arrayIdx   = 0)
        #{
        #    ProjTableEditSubProjPrompt  projTableEditSubProjPrompt;
        #    ProjTable                   projTableOrig = ProjTable::find(this.ProjId);
        #    boolean                     research;
        #
        #    if (_newValue != _formerValue && this.childExist() )
        #    {
        #        projTableEditSubProjPrompt = new ProjTableEditSubProjPrompt(this.ProjId,_fieldId,_newValue,_formerValue,_arrayIdx);
        #
        #        if (_arrayIdx)
        #        {
        #
        #            if (_fieldId == fieldNum(ProjTable,SortingId))
        #            {
        #                this.SortingId[_arrayIdx] = _newValue;
        #            }
        #
        #        }
        #        else
        #        {
        #            this.(_fieldId) = _newValue;
        #        }
        #
        #
        #        if (projTableEditSubProjPrompt.prompt())
        #        {
        #            projTableEditSubProjPrompt.run();
        #            research = true;
        #        }
        #        else
        #        {
        #            return false;
        #        }
        #
        #
        #        if (this.validateWrite())
        #        {
        #            this.update();
        #        }
        #
        #        if (this.isFormDataSource() && research)
        #        {
        #            this.dataSource().research();
        #            this.dataSource().findRecord(projTableOrig);
        #        }
        #    }
        #
        #    return true;
        #}
        #
        #
      ENDSOURCE
      SOURCE #exchRateSales
        #/// <summary>
        #///    Retrieves the exchange rate between the currency passed in and the currency for the invoice project of the current project record on a particular date.
        #/// </summary>
        #/// <param name="_transDate">
        #///    The date used to determine the exchange rate; optional.
        #/// </param>
        #/// <param name="_currencyCode">
        #///    The currency for which to determine the exchange rate; optional.
        #/// </param>
        #/// <returns>
        #///    The exchange rate.
        #/// </returns>
        #/// <remarks>
        #///    If one does not exist, it retrieves the exchange rate between the currency passed in and the currency used in the current company.
        #/// </remarks>
        #public ExchRate exchRateSales(
        #    TransDate       _transDate      = systemDateGet(),
        #    CurrencyCode    _currencyCode   = this.currencyId())
        #{
        #    if (ProjInvoiceCurrency::exist(this.ProjInvoiceProjId,_currencyCode))
        #    {
        #        return ProjInvoiceCurrency::find(this.ProjInvoiceProjId,_currencyCode).ExchRate;
        #    }
        #
        #    return Currency::exchRate(_currencyCode,_transDate);
        #}
        #
      ENDSOURCE
      SOURCE #formMethodDataSourceCreate
        #public void formMethodDataSourceCreate(FormRun _element, Object projTable_ds, ProjId _parentProjId='') //second parm must be of type object!
        #{
        #    this.numberSeqFormHandler(_element, projTable_ds).formMethodDataSourceCreatePre();
        #
        #    if (_parentProjId)
        #    {
        #        this.ProjId = ProjTable::generateNextSubProjectId(_parentProjId);
        #    }
        #    else
        #    {
        #        this.numberSeqFormHandler(_element, projTable_ds).formMethodDataSourceCreate();
        #    }
        #}
      ENDSOURCE
      SOURCE #formMethodDataSourceValidateWrite
        #public boolean formMethodDataSourceValidateWrite(FormRun _element, Object projTable_ds,boolean _superValue = true)
        #{
        #    boolean ret = true;
        #
        #    if (!this.numberSeqFormHandler(_element, projTable_ds).formMethodDataSourceValidateWrite(_superValue))
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formMethodDataSourceWrite
        #public void formMethodDataSourceWrite(FormRun _element, Object projTable_ds)//Second parm must be object
        #{
        #    this.numberSeqFormHandler(_element, projTable_ds).formMethodDataSourceWrite();
        #}
      ENDSOURCE
      SOURCE #getStartDateForItemReq
        #/// <summary>
        #/// Get start date for item requirement.
        #/// </summary>
        #/// <returns>
        #/// Projected start date if it's set, otherwise creation date.
        #/// </returns>
        #public Date getStartDateForItemReq()
        #{
        #    if (this.ProjectedStartDate)
        #    {
        #        return this.ProjectedStartDate;
        #    }
        #
        #    return this.Created;
        #}
      ENDSOURCE
      SOURCE #groupName
        #// BP Deviation Documented
        #public display Name groupName()
        #{
        #    return ProjGroup::find(this.ProjGroupId,false).Name;
        #}
      ENDSOURCE
      SOURCE #hasBudgetedTransactions
        #/// <summary>
        #///    Indicates whether the selected project has some posted transactions that are associated with the
        #///    budget.
        #/// </summary>
        #/// <returns>
        #///    true if any posted transactions exist; otherwise, false.
        #/// </returns>
        #public boolean hasBudgetedTransactions()
        #{
        #    boolean                         ret = false;
        #    ProjTransPosting                projTransPosting;
        #    ProjBudgetReductionHistory      projBudgetReductionHistory;
        #
        #    if (!this.Header)
        #    {
        #        select firstonly RecId from projBudgetReductionHistory
        #            exists join TransId, ProjId from projTransPosting
        #                    where projTransPosting.TransId == projBudgetReductionHistory.ProjTransId &&
        #                            projTransPosting.ProjId == this.ProjId;
        #
        #        if (projBudgetReductionHistory)
        #        {
        #                ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #hasCommittedOrPostedTransactions
        #/// <summary>
        #///    Indicates whether the selected project has posted or committed any associated transactions.
        #/// </summary>
        #/// <returns>
        #///    true if there are associated posted transactions; otherwise, false.
        #/// </returns>
        #public boolean hasCommittedOrPostedTransactions()
        #{
        #    boolean                         ret = false;
        #    ProjTransPosting                projTransPosting;
        #    ProjForecastReductionHistory    projForecastReductionHistory;
        #    ProjBudgetReductionHistory      projBudgetReductionHistory;
        #    CostControlTransCommittedCost   costControlTransCommittedCost;
        #
        #    if (!this.Header)
        #    {
        #        select firstonly RecId from projForecastReductionHistory
        #            exists join TransId, ProjId from projTransPosting
        #                    where projTransPosting.TransId == projForecastReductionHistory.ProjTransId &&
        #                          projTransPosting.ProjId == this.ProjId;
        #
        #        select firstonly RecId from projBudgetReductionHistory
        #            exists join TransId, ProjId from projTransPosting
        #                    where projTransPosting.TransId == projBudgetReductionHistory.ProjTransId &&
        #                          projTransPosting.ProjId == this.ProjId;
        #
        #        // As soon as a record is saved on purchase orders, sales orders e.t.c,  a record is inserted in this table
        #        select firstonly ProjId from costControlTransCommittedCost where costControlTransCommittedCost.ProjId == this.ProjId;
        #
        #        if (projForecastReductionHistory || projBudgetReductionHistory || costControlTransCommittedCost)
        #        {
        #             ret = true;
        #        }
        #
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #hasReservation
        #/// <summary>
        #/// Check if a project already has any reservation
        #/// </summary>
        #/// <returns>
        #/// A boolean value indicate if the project already has any reservation
        #/// </returns>
        #public boolean hasReservation()
        #{
        #    PSASchedEmplReservation psaSchedEmplReservation;
        #
        #    //---has reservation on project level
        #    select firstonly psaSchedEmplReservation
        #           where psaSchedEmplReservation.ProjId == this.ProjId
        #                 && psaSchedEmplReservation.ActivityNumber == "";
        #
        #    return psaSchedEmplReservation ? true : false;
        #}
      ENDSOURCE
      SOURCE #image
        #/// <summary>
        #///    Retrieves the image corresponding to a particular type of project.
        #/// </summary>
        #/// <param name="_projType">
        #///    The type of project. The default is the type of the current project record; optional.
        #/// </param>
        #/// <returns>
        #///    The image for a particular type of project.
        #/// </returns>
        #public ImageRes image(ProjType _projType = this.Type)
        #{
        #    #resAppl
        #    int retval;
        #
        #    switch(_projType)
        #    {
        #        case ProjType::TimeMaterial :
        #            retval = #ImageProjTimeMaterial;
        #            break;
        #
        #        case ProjType::FixedPrice   :
        #            retval = #ImageProjFixedPrice;
        #             break;
        #
        #        case ProjType::Internal     :
        #            retval = #ImageProjInternal;
        #            break;
        #
        #        case ProjType::Investment   :
        #            retval = #ImageProjInvestment;
        #            break;
        #
        #        case ProjType::Time         :
        #            retval = #ImageProjTime;
        #            break;
        #    }
        #
        #    return retval;
        #}
      ENDSOURCE
      SOURCE #imageDisplay
        #/// <summary>
        #///    Retrieves the image corresponding to the type of the current project.
        #/// </summary>
        #/// <returns>
        #///    The image for the current project.
        #/// </returns>
        #display ImageRes imageDisplay()
        #{
        #    return this.image();
        #}
      ENDSOURCE
      SOURCE #initFromCustTable
        #/// <summary>
        #///    Initializes fields for the current project record with values from the specified customer record.
        #/// </summary>
        #/// <param name="_custTable">
        #///    The customer record.
        #/// </param>
        #/// <remarks>
        #///    This method sets the delivery address fields for the current project record with the delivery
        #///    address for the customer. If a delivery address for the customer does not exist, it sets the
        #///    delivery address fields for the current project with the address for the customer.
        #/// </remarks>
        #public void initFromCustTable(CustTable _custTable)
        #{
        #    LogisticsLocationEntity location;
        #    LogisticsLocation       logisticsLocation;
        #    LogisticsPostalAddress  logisticsPostalAddress;
        #
        #    this.CustAccount = _custTable.AccountNum;
        #
        #    //create location and copy address to project
        #    logisticsLocation = LogisticsLocationDefault::getDefaultActiveLocationByType(_custTable,LogisticsLocationRoleType::Delivery);
        #
        #    // If an alt. deliverye address exist, we will use this as delivery address on the project
        #    if (!logisticsLocation.RecId)
        #    {
        #        // use the address on the customer.
        #        location = DirParty::primaryPostalAddressLocation(_custTable.Party,this.startDateTime());
        #    }
        #    else
        #    {
        #        location = LogisticsLocationEntity::constructFromLocationRecId(logisticsLocation.RecId);
        #    }
        #
        #    if (location && location.parmLocationRecId())
        #    {
        #        if (this.DeliveryLocation == 0)
        #        {
        #            ttsbegin;
        #            // Create a location record
        #            logisticsLocation = LogisticsLocation::create(location.parmLocationDescription(),true);
        #            this.DeliveryLocation = logisticsLocation.RecId;
        #
        #            // Copy Address to location record
        #            logisticsPostalAddress.data(location.getPostalAddress());
        #            logisticsPostalAddress.Location = logisticsLocation.RecId;
        #            logisticsPostalAddress.insert();
        #            ttscommit;
        #        }
        #        else
        #        {
        #            ttsbegin;
        #            logisticsLocation = LogisticsLocation::find(this.DeliveryLocation, true);
        #            logisticsLocation.Description = location.parmLocationDescription();
        #            logisticsLocation.update();
        #
        #            // Update address to new address
        #            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(this.DeliveryLocation, true);
        #
        #            // Delete LogisticsPostalAddress record only if it is not being referenced anywhere else.
        #            if (LogisticsLocationEntity::canDeletePostalAddress(logisticsPostalAddress.RecId,conNull(),false))
        #            {
        #                logisticsPostalAddress.delete();
        #            }
        #
        #            logisticsPostalAddress.clear();
        #            logisticsPostalAddress.data(location.getPostalAddress());
        #            logisticsPostalAddress.Location = logisticsLocation.RecId;
        #
        #            if (this.orig().CustAccount != this.CustAccount)
        #            {
        #                logisticsPostalAddress.ValidFrom = DateTimeUtil::utcNow();
        #            }
        #            logisticsPostalAddress.insert();
        #            ttscommit;
        #        }
        #        this.DlvName = location.parmLocationDescription();
        #    }
        #    else
        #    {
        #        this.DeliveryLocation = 0;
        #        this.DlvName = '';
        #    }
        #
        #
        #    this.Email      = _custTable.email();
        #    this.DefaultDimension   = _custTable.DefaultDimension;
        #}
      ENDSOURCE
      SOURCE #initFromInvoice
        #/// <summary>
        #///    Initializes fields for the current project record with values from the specified project invoice or
        #///    customer associated with the project.
        #/// </summary>
        #/// <param name="_projInvoiceTable">
        #///    The invoice project ID.
        #/// </param>
        #/// <remarks>
        #///    This method sets the <c>TaxGroupId</c> field for the current project record to the
        #///    <c>TaxGroupId</c> value for the invoice project. If a <c>TaxGroupId</c> value for the invoice
        #///    project does not exist, it sets the <c>TaxGroupId</c> field to the <c>TaxGroupId</c> value for the
        #///    customer associated to the current project.
        #/// </remarks>
        #public void initFromInvoice(ProjInvoiceTable _projInvoiceTable)
        #{
        #    CustTable           custTable;
        #    ProjFundingSource   projFundingSource;
        #
        #    this.ProjPriceGroup = _projInvoiceTable.ProjPriceGroup;
        #    this.TaxGroupId     = _projInvoiceTable.TaxGroupId;
        #
        #    // Retrieve information based on project customer
        #    custTable               = CustTable::find(this.CustAccount);
        #
        #    select firstonly DefaultDimension from projFundingSource
        #         where projFundingSource.ContractId == _projInvoiceTable.ProjInvoiceProjId &&
        #             projFundingSource.Party == custTable.Party;
        #
        #    if (this.ParentId)
        #    {
        #        this.DefaultDimension = DimensionDefaultingService::serviceMergeDefaultDimensions(projFundingSource.DefaultDimension, ProjTable::find(this.ParentId).DefaultDimension);
        #    }
        #    else
        #    {
        #        this.DefaultDimension   = projFundingSource.DefaultDimension;
        #    }
        #
        #    if (!this.TaxGroupId)
        #    {
        #        this.TaxGroupId = custTable.TaxGroup;
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromParent
        #public void initFromParent(ProjId _projId)
        #{
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        this.status().initFromParent(_projId);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initFromProjGroup
        #/// <summary>
        #///    Initializes the <c>ProjLedgerPosting</c> and <c>ProjLinePropertySearch</c> fields for the current project record with values of the equivalent fields of the <c>ProjGroup</c> record passed in as a
        #///    parameter.
        #/// </summary>
        #/// <param name="projGroup">
        #///    The project group.
        #/// </param>
        #public void initFromProjGroup(ProjGroup projGroup)
        #{
        #    this.ProjLedgerPosting         = projGroup.LedgerPosting;
        #    this.ProjLinePropertySearch    = projGroup.ProjLinePropertySearch;
        #    this.CheckBudget               = projGroup.CheckBudget;
        #}
        #
      ENDSOURCE
      SOURCE #initProjectFromCustomerAndInvoice
        #private server void initProjectFromCustomerAndInvoice(ProjInvoiceTable _projInvoice, boolean isCustomerTransferNeeded)
        #{
        #    if (isCustomerTransferNeeded)
        #    {
        #        this.initFromCustTable(CustTable::find(this.CustAccount, false));
        #    }
        #
        #    this.initFromInvoice(_projInvoice);
        #}
      ENDSOURCE
      SOURCE #initValue
        #public void initValue(boolean _callSuper = true)
        #{
        #    PSAParameters   tpsaParameters = PSAParameters::find();
        #    ProjParameters      projParameters  = ProjParameters::find();
        #
        #    this.Created                            = systemDateGet();
        #    this.ValidateProjCategory               = NoYes::Yes;
        #
        #    this.RequireActivityExpenseForecast     = projParameters.RequireActivityExpenseForecast;
        #    this.RequireActivityHourForecast        = projParameters.RequireActivityHourForecast;
        #    this.RequireActivityItemForecast        = projParameters.RequireActivityItemForecast;
        #
        #    this.RequireActivityExpenseTrx          = projParameters.RequireActivityExpenseTrx;
        #    this.RequireActivityHourTrx             = projParameters.RequireActivityHourTrx;
        #    this.RequireActivityItemTrx             = projParameters.RequireActivityItemTrx;
        #
        #    // for budgeting
        #    this.UseBudgeting                       = projParameters.UseBudgeting;
        #    this.ProjBudgetaryControlOn             = projParameters.ProjBudgetaryControlOn;
        #    this.ProjBudgetOverrunOption            = projParameters.ProjBudgetOverrunOption;
        #    this.ProjBudgetInterval                 = projParameters.ProjBudgetInterval;
        #    this.ProjCarryForwardNegativeBudget     = projParameters.ProjCarryForwardNegativeBudget;
        #    this.ProjCarryForwardRemainingBudget    = projParameters.ProjCarryForwardRemainingBudget;
        #    this.ProjBudgetManagement               = projParameters.ProjBudgetManagement;
        #
        #    if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        // Init from parameters.
        #        this.psapReqControl         = tpsaParameters.ReqControl;
        #        this.psapReqItemValidate    = tpsaParameters.ReqItemValidate;
        #        this.psapReqHourValidate    = tpsaParameters.ReqHourValidate;
        #
        #        super();
        #
        #        this.psaForecastModelIdExternal = ProjParameters::find().OriginalForecastModel;
        #    }
        #    this.MinTimeIncrement                   = projParameters.MinTimeIncrement;
        #    this.TimePostDetailSummary              = projParameters.PostDetailSummary;
        #
        #    this.Format                             = projParameters.DisplayFormat;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)) && _callSuper)
        #    {
        #        super();
        #    }
        #
        #    //Resource Schedule
        #    if(Global::isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        this.psaProjTask       = PSAProjTask::Project;
        #
        #        // Default calendar--resource scheduling enhancement
        #        if (!this.psaSchedCalendarId)
        #        {
        #            this.psaSchedCalendarId = PSAParameters::find().SchedDefaultCalendar;
        #            if(!WorkCalendarDate::isPickupDate(this.psaSchedCalendarId, systemDateGet()))
        #            {
        #                this.psaSchedStartDate  = WorkCalendar::findOpenDateForward(this.psaSchedCalendarId,systemDateGet(),this.psaSchedFromTime);
        #                this.psaSchedEndDate    = this.psaSchedStartDate;
        #            }
        #            else
        #            {
        #                this.psaSchedStartDate  = systemDateGet();
        #                this.psaSchedEndDate    = systemDateGet();
        #            }
        #            this.psaSchedDuration       = 1;
        #
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #insert
        #/// <summary>
        #///    Inserts a new project record into the table.
        #/// </summary>
        #public void insert()
        #{
        #    // Shop Floor Control - begin
        #    if (Global::isConfigurationkeyEnabled(configurationKeyNum(Jmgjob)))
        #    {
        #        this.JobId = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
        #    }
        #    // Shop Floor Control - end
        #
        #    this.status().insert();
        #
        #    if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        if (this.Type == ProjType::FixedPrice || this.Type == ProjType::TimeMaterial)
        #        {
        #            PSAProjFundingSourceRetain::initFromProjFundingSource(this.ProjInvoiceProjId, this.ProjId);
        #            PSAProjWorkComplete::initFromProjTable(this.ProjId);
        #        }
        #
        #        PSAActivityProjReqImportance::initFromProjTable(this);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #insertBySyncService
        #public void insertBySyncService(SyncAppId _sourceAppId, SyncProjUID _projUID, SyncEntityId _syncEntityId, NoYes _allowProjRESEdit = NoYes::No)
        #{
        #    int64 tmpVersion = 1;
        #    SyncProjTable syncProjTable;
        #    SyncApp syncApp;
        #
        #    // Skip insert if the project is not being integrated to an enabled application
        #    syncApp = SyncApp::find(_sourceAppId);
        #    if(!syncApp || !syncApp.Enabled)
        #    {
        #        return;
        #    }
        #
        #    // Shop Floor Control - begin
        #    if (Global::isConfigurationkeyEnabled(configurationKeyNum(Jmgjob)))
        #    {
        #        this.JobId = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
        #    }
        #    // Shop Floor Control - end
        #
        #    ttsbegin;
        #    // Set the flag that indicates the project was created by an external integrated application
        #    this.SyncCreatedByExternal = NoYes::Yes;
        #    // New guid for the integrated project from external application
        #    this.SyncEntityId = _syncEntityId;
        #    this.SyncVersion = tmpVersion;
        #
        #    this.insert();
        #
        #    // Created a record in SyncProjTable for integrated app (_integratedAppId)
        #    syncProjTable.clear();
        #    syncProjTable.ProjId = this.ProjId;
        #    syncProjTable.AppId = _sourceAppId;
        #    syncProjTable.Proj_UID = _projUID;
        #    syncProjTable.IntegratedProject = NoYes::Yes;
        #    syncProjTable.insert(true);
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #isBankDocumentCreated
        #/// <summary>
        #/// Determines whether a bank document has been created for this order.
        #/// </summary>
        #/// <returns>
        #/// true if it is created; otherwise, false
        #/// </returns>
        #public boolean isBankDocumentCreated()
        #{
        #    boolean ret = false;
        #
        #    if (this.isMarkedForBankLG())
        #    {
        #        if (this.BankLGDocumentMap::isLinkedToGuarantee())
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isCustomerTransferNeeded
        #private client boolean isCustomerTransferNeeded()
        #{
        #    boolean needed = false;
        #
        #    if (this.CustAccount)
        #    {
        #        if (ProjParameters::find().PromptTransferCustOnProject)
        #        {
        #            if (Box::yesNo("@SYS418" + '\n\n'+CustTable::promptAddress(this.CustAccount), DialogButton::Yes) == DialogButton::Yes)
        #            {
        #                needed = true;
        #            }
        #        }
        #        else
        #        {
        #            needed = true;
        #        }
        #    }
        #
        #    return needed;
        #}
      ENDSOURCE
      SOURCE #isMarkedForBankLG
        #/// <summary>
        #/// Checks whether the project is marked for letter of guarantee.
        #/// </summary>
        #/// <returns>
        #/// true if the project order is marked; otherwise, false.
        #/// </returns>
        #public boolean isMarkedForBankLG()
        #{
        #    return this.BankDocumentType == BankLGDocumentType::LetterOfGuarantee;
        #}
        #
      ENDSOURCE
      SOURCE #isWBSEditable
        #/// <summary>
        #/// Checks if the WBS for this Project is editable
        #/// </summary>
        #/// <returns>
        #/// True, if the WBS is editable; false otherwise.
        #/// </returns>
        #public boolean isWBSEditable()
        #{
        #    return this.Status != ProjStatus::Completed;
        #}
      ENDSOURCE
      SOURCE #latestCompletePct
        #/// <summary>
        #/// Gets the latest completion percentage  in the <c>ProjControlPeriodTable</c> table for the date that
        #/// is passed in as a parameter if the current project is a fixed price project.
        #/// </summary>
        #/// <param name="_periodFrom">
        #/// The date for which to get the completion percentage. The default value is set with the
        #/// <c>dateMax</c> method; optional.
        #/// </param>
        #/// <returns>
        #/// The completion percentage.
        #/// </returns>
        #display ProjControlCompletePct latestCompletePct(ProjPeriodFrom _periodFrom  = dateMax())
        #{
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    ProjControlCompletePct  completePct;
        #    DictTable dictTable;
        #
        #    if (this.Type == ProjType::FixedPrice)
        #    {
        #        dictTable = new DictTable(tableNum(ProjControlPeriodTable));
        #        if (dictTable.rights() >= AccessType::View)
        #        {
        #            select reverse firstonly ProjId, PeriodFrom, CompletePct from projControlPeriodTable
        #                order by PeriodFrom
        #                where projControlPeriodTable.ProjId     == this.ProjId      &&
        #                    projControlPeriodTable.PeriodFrom <= _periodFrom;
        #            completePct = projControlPeriodTable.CompletePct;
        #        }
        #    }
        #    return completePct;
        #}
        #
      ENDSOURCE
      SOURCE #latestPeriodFromFixedPrice
        #/// <summary>
        #/// Retrieves the latest begin date for the record in the <c>ProjControlPeriodTable</c> table earlier
        #/// than the date passed in as a parameter if the current project is a fixed price project.
        #/// </summary>
        #/// <param name="_periodFrom">
        #/// The default date is set with the <c>dateMax</c> method; optional.
        #/// </param>
        #/// <returns>
        #/// The begin date.
        #/// </returns>
        #display ProjPeriodFrom latestPeriodFromFixedPrice(ProjPeriodFrom _periodFrom  = dateMax())
        #{
        #    ProjPeriodFrom          periodFrom = dateNull();
        #    ProjControlPeriodTable  projControlPeriodTable;
        #
        #    if (this.Type == ProjType::FixedPrice)
        #    {
        #        select reverse firstonly ProjId, PeriodFrom from projControlPeriodTable
        #            order by PeriodFrom
        #            where    projControlPeriodTable.ProjId       == this.ProjId &&
        #                     projControlPeriodTable.PeriodFrom   <= _periodFrom;
        #
        #        periodFrom  = projControlPeriodTable.PeriodFrom;
        #    }
        #
        #    return periodFrom;
        #}
        #
      ENDSOURCE
      SOURCE #latestPeriodToFixedPrice
        #/// <summary>
        #///    Gets the latest end date for the record in the <c>ProjControlPeriodTable</c> table earlier than the
        #///    date passed in as a parameter if the current project is a fixed price project.
        #/// </summary>
        #/// <param name="_periodTo">
        #///    The date to compare with. The default value is set with the <c>dateMax</c> method; optional.
        #/// </param>
        #/// <returns>
        #///    The begin date.
        #/// </returns>
        #display ProjPeriodTo latestPeriodToFixedPrice(ProjPeriodTo _periodTo  = dateMax())
        #{
        #    ProjPeriodTo            periodTo;
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    ProjPeriodId            periodId;
        #
        #    if (this.Type == ProjType::FixedPrice)
        #    {
        #        select reverse firstonly projControlPeriodTable
        #            order by PeriodFrom
        #            where    projControlPeriodTable.ProjId     == this.ProjId      &&
        #                     projControlPeriodTable.PeriodFrom <= _periodTo;
        #
        #        periodId    = ProjWIPTable::find(ProjTable::find(this.ProjId).wipProject).PeriodId;
        #        periodTo    = ProjControlPeriodTable::periodTo(periodId, projControlPeriodTable.PeriodFrom);
        #    }
        #
        #    return periodTo;
        #}
      ENDSOURCE
      SOURCE #level
        #/// <summary>
        #///    Gets the hierarchy level of the current project record.
        #/// </summary>
        #/// <returns>
        #///    The level for the project.
        #/// </returns>
        #public Level level()
        #{
        #    ProjId      parentId    = this.ParentId;
        #    Level       level       = 1;
        #
        #    while (parentId)
        #    {
        #        parentId = ProjTable::find(parentId).ParentId;
        #        level++;
        #    }
        #
        #    return level;
        #}
      ENDSOURCE
      SOURCE #levelFormat
        #/// <summary>
        #///    Retrieves the project ID for the current project record if it is on the project hierarchy level that is passed in as a parameter.
        #/// </summary>
        #/// <param name="level">
        #///    The hierarchy level.
        #/// </param>
        #/// <returns>
        #///    The ID of the project. It returns blank if the current project is not on the hierarchy level that is passed in as a parameter.
        #/// </returns>
        #public NumberSequenceFormat levelFormat(Level level)
        #{
        #    ProjId                  projId      = this.ProjId;
        #    NumberSequenceFormat    levelFormat = '';
        #    boolean                 levelOk     = false;
        #
        #    while (!levelOk)
        #    {
        #        if (ProjTable::find(projId).level() == level)
        #        {
        #            levelOk     = true;
        #            levelFormat = projId;
        #        }
        #        else
        #        {
        #            projId = ProjTable::find(projId).ParentId;
        #        }
        #
        #        if (!projId)
        #        {
        #            levelOk = true;
        #        }
        #    }
        #
        #    return levelFormat;
        #}
      ENDSOURCE
      SOURCE #loadValuesServer
        #/// <summary>
        #/// Loads the values on server and returns the values in a container.
        #/// </summary>
        #/// <returns>
        #/// Returns a container containing values of functions eveluated on server tier.
        #/// </returns>
        #/// <remarks>
        #/// The values are used for enabling/disabling controls on the client.
        #/// </remarks>
        #public server container loadValuesServer()
        #{
        #    HierarchyTreeTable  hierarchyTreeTable;
        #    boolean             showSchedule;
        #    boolean             showRetention;
        #    boolean             canAssign;
        #    boolean             hasChildProject;
        #    boolean             hasWBS;
        #    PSASummaryActivity  psaSummaryActivity;
        #    boolean             hasBillingRules;
        #    boolean             hasBudgetedTransactions;
        #    boolean             isCtrlSalesOrderTableEnabled;
        #    boolean             collabRecordExist;
        #    boolean             isSupportsBudgeting;
        #    boolean             isFieldPwpThresholdPercent;
        #    boolean             canCreateInvoiceProposal;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        psaSummaryActivity = new PSASummaryActivity();
        #
        #        hierarchyTreeTable = psaSummaryActivity.isSummaryProject(this);
        #        hasChildProject    = ProjTable::child(this.ProjId);
        #        hasWBS             = HierarchyTreeTable::psaFindChildElement(hierarchyTreeTable.HierarchyId, hierarchyTreeTable.ElementNumber) ? true : false;
        #        showSchedule       = !(hasChildProject || hasWBS) || (!this.psaSchedCalendarId);
        #        showRetention      = (this.Type == ProjType::FixedPrice) || (this.Type == ProjType::TimeMaterial);
        #
        #        canAssign          = this.Status!=ProjStatus::Completed && this.psaSchedEffort > 0 && this.psaSchedDuration > 0
        #                              && this.psaSchedStartDate!=dateNull() && this.psaSchedEndDate!=dateNull() && !hasChildProject;
        #
        #        hasBillingRules    = PSAContractLineItems::hasBillingRules(this.ProjInvoiceProjId);
        #    }
        #
        #    hasBudgetedTransactions         = this.hasBudgetedTransactions();
        #
        #    isCtrlSalesOrderTableEnabled    = this.status().ctrlSalesOrderTable();
        #
        #    collabRecordExist               = CollabSiteLink::existCollabSiteProject(this.ProjId);
        #
        #    isSupportsBudgeting             = this.supportsBudgeting();
        #
        #    isFieldPwpThresholdPercent      = ProjTable::setFieldPwpThresholdPercent(this);
        #
        #    canCreateInvoiceProposal        = ProjStatusTypeRule::exist(this.Status, this.Type, ProjStatusRule::CreateInvoiceProposal);
        #
        #    return [showSchedule, showRetention, canAssign, hasBillingRules,
        #            hasBudgetedTransactions, isCtrlSalesOrderTableEnabled, collabRecordExist,
        #            isSupportsBudgeting, isFieldPwpThresholdPercent, canCreateInvoiceProposal, hasWBS];
        #
        #}
      ENDSOURCE
      SOURCE #margin
        #// Margin
        #AmountMST margin()
        #{
        #    projStatement   projStatement;
        #
        #    projStatement = projStatement::newProjTable(this);
        #
        #    return (projStatement.a100_Total_Revenue()-projStatement.a300_Total_Cost());
        #
        #}
      ENDSOURCE
      SOURCE #mergeDimension
        #/// <summary>
        #/// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
        #/// field on this table and the provided dimension set.
        #/// </summary>
        #/// <param name="_primaryDefaultDimension">
        #/// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_secondaryDefaultDimension">
        #/// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
        #/// optional.
        #/// </param>
        #/// <param name="_dimensionMerge">
        #/// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
        #/// this table and the provided dimension set.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten when they are merged.
        #/// </remarks>
        #public DimensionDefault mergeDimension(
        #    DimensionDefault _primaryDefaultDimension,
        #    DimensionDefault _secondaryDefaultDimension = 0,
        #    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId)
        #    )
        #{
        #    return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
        #}
        #
      ENDSOURCE
      SOURCE #modifiedField
        #/// <summary>
        #///    Calls methods appropriate to modified fields.
        #/// </summary>
        #/// <param name="_fieldId">
        #///    The ID of the field that is modified.
        #/// </param>
        #/// <remarks>
        #///    This method executes when any field in the table is modified.
        #/// </remarks>
        #public void modifiedField(FieldId _fieldId)
        #{
        #    ProjInvoiceTable        projInvoiceTable;
        #    ProjParameters          projParameters;
        #    DimensionDefault        originalDimensionDefault;
        #    LogisticsLocation       logisticsLocation;
        #
        #    ProjTable   tProjTable;
        #    #define.star('*')
        #    boolean                 isCustTransferNeeded;
        #
        #    super(_fieldId);
        #
        #    switch(_fieldId)
        #    {
        #        case fieldNum(ProjTable, ProjGroupId) :
        #            this.initFromProjGroup(ProjGroup::find(this.ProjGroupId));
        #            break;
        #
        #        case fieldNum(ProjTable, CustAccount) :
        #            originalDimensionDefault = this.DefaultDimension;
        #            this.transferCustAccount();
        #            if (this.RecId && this.ProjInvoiceProjId)
        #            {
        #                //restore the dimension value overwritten by this.transferCustAcount()
        #                this.DefaultDimension = originalDimensionDefault;
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, ProjInvoiceProjId) :
        #
        #            if (this.ProjInvoiceProjId)
        #            {
        #                projInvoiceTable = ProjInvoiceTable::find(this.ProjInvoiceProjId);
        #            }
        #            else
        #            {
        #                projInvoiceTable = null;
        #            }
        #
        #            this.CustAccount = projInvoiceTable.fundingSourceCustomerID();
        #
        #            isCustTransferNeeded = this.isCustomerTransferNeeded();
        #
        #            this.initProjectFromCustomerAndInvoice(projInvoiceTable, isCustTransferNeeded);
        #            break;
        #
        #        case fieldNum(ProjTable, Type) :
        #            if (this.orig().Type != this.Type)
        #            {
        #                this.ProjGroupId = '';
        #            }
        #            break;
        #
        #
        #        case fieldNum(ProjTable, Header) :
        #            if ((this.Header) && !(this.Format))
        #            {
        #                error("@SYS98827");
        #                this.Header = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, Format) :
        #            if ((this.Header) && !(this.Format))
        #            {
        #                this.Header = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, UseBudgeting) :
        #            if (this.UseBudgeting)
        #            {
        #                projParameters                          = ProjParameters::find();
        #                this.ProjCarryForwardRemainingBudget    = projParameters.ProjCarryForwardRemainingBudget;
        #                this.ProjCarryForwardNegativeBudget     = projParameters.ProjCarryForwardNegativeBudget;
        #                if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #                {
        #                    if(ProjTable::psaExistIncludeLower(this.ProjId, true) && ProjTable::psaExistInvoicedTrans(this.ProjId, true))
        #                    {
        #                        throw error("@PSA2960");
        #                    }
        #                    else
        #                    {
        #                        this.ProjCarryForwardRemainingBudget   = NoYes::No;
        #                        this.ProjCarryForwardNegativeBudget     = NoYes::No;
        #
        #                        update_recordset tProjTable
        #                        setting psaRetainIncludeLower   = NoYes::No,
        #                                psaRetainScheduleId     = '',
        #                                psaRetainPercent        = 0
        #                        where tProjTable.ProjId like (this.ProjId + #star)
        #                        &&  tProjTable.ProjId != this.ProjId;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                this.ProjCarryForwardRemainingBudget   = NoYes::No;
        #                this.ProjCarryForwardNegativeBudget     = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, ProjCarryForwardRemainingBudget) :
        #            if(!this.ProjCarryForwardRemainingBudget)
        #            {
        #                this.ProjCarryForwardNegativeBudget     = NoYes::No;
        #                if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #                {
        #                    update_recordset tProjTable
        #                        setting psaRetainIncludeLower   = NoYes::No,
        #                                psaRetainScheduleId     = '',
        #                                psaRetainPercent        = 0
        #                        where tProjTable.ProjId like (this.ProjId + #star)
        #                          &&  tProjTable.ProjId != this.ProjId;
        #                }
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, DeliveryLocation) :
        #            if(this.DeliveryLocation == 0)
        #            {
        #                this.DlvName = '';
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, DlvName) :
        #            if(this.DeliveryLocation != 0)
        #            {
        #                ttsbegin;
        #                logisticsLocation = LogisticsLocation::find(this.DeliveryLocation, true);
        #                logisticsLocation.Description = this.DlvName;
        #                logisticsLocation.update();
        #                ttscommit;
        #            }
        #            break;
        #        case fieldNum(ProjTable, psaSchedDuration):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                PSAProjProjSchedule::newSchedule().scheduleProj(this, this.psaSchedStartDate, this.psaSchedEndDate);
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, psaSchedStartDate):
        #        case fieldNum(ProjTable, psaSchedEndDate):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                if (this.psaSchedStartDate && this.psaSchedEndDate)
        #                {
        #                    this.psaSchedDuration = WorkCalendarCalculator::calcDuration(this.psaSchedStartDate, this.psaSchedEndDate, this.psaSchedCalendarId);
        #                }
        #                else
        #                {
        #                    this.psaSchedDuration = 0;
        #                }
        #            }
        #            break;
        #        case fieldNum(ProjTable, psaSchedCalendarId):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                if (this.psaSchedCalendarId)
        #                {
        #                    this.psaSchedStartDate = systemDateGet();
        #                    this.psaSchedEndDate   = systemDateGet();
        #                    this.psaSchedDuration  = 1;
        #                }
        #                else
        #                {
        #                    this.psaSchedStartDate = dateNull();
        #                    this.psaSchedEndDate   = dateNull();
        #                    this.psaSchedDuration  = 0;
        #                }
        #            }
        #            break;
        #        case fieldNum(ProjTable, psaSchedEffort):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                this.psaSchedScheduled = PSAResourceSchedulingBL::GetPSAScheduleStatus(this.psaSchedEffort, this.sumHardHours());
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #numberSeqFormHandler
        #public NumberSeqFormHandler numberSeqFormHandler(FormRun _element, FormDataSource projTable_DS)
        #{
        #    NumberSeqFormHandler    numberSeqFormHandler;
        #
        #    numberSeqFormHandler = NumberSeqFormHandler::newForm(ProjParameters::numRefProjId().NumberSequenceId,
        #                                                         _element,
        #                                                         projTable_DS,
        #                                                         fieldNum(ProjTable,ProjId)
        #                                                         );
        #
        #    return numberSeqFormHandler;
        #}
      ENDSOURCE
      SOURCE #party
        #DirPartyRecId party()
        #{
        #    return (this.CustAccount ? CustTable::find(this.CustAccount).Party : CompanyInfo::find().RecId);
        #}
      ENDSOURCE
      SOURCE #postalAddress
        #LogisticsPostalAddress postalAddress()
        #{
        #    return LogisticsLocationEntity::location2PostalAddress(this.DeliveryLocation);
        #}
      ENDSOURCE
      SOURCE #previewPaneTitle
        #/// <summary>
        #/// Retrieves the title on top of the preview pane.
        #/// </summary>
        #/// <returns>
        #/// The title field of the preview pane.
        #/// </returns>
        #display ProjName previewPaneTitle()
        #{
        #    return this.ProjId + ": " + this.Name;
        #}
      ENDSOURCE
      SOURCE #profitFixedPrice
        #/// <summary>
        #///    Calculates the profit on a fixed price project.
        #/// </summary>
        #/// <returns>
        #///    The <c>ProjProfit</c> value on a fixed price project.
        #/// </returns>
        #/// <remarks>
        #///    The profit is calculated by subtracting the value returned from the <c>CostAmountFixedPrice</c>
        #///    method from the value returned from the <c>ContractAmountFixedPrice</c> method.
        #/// </remarks>
        #display ProjProfit profitFixedPrice()
        #{
        #    return this.contractAmountFixedPrice() - this.costAmountFixedPrice();
        #}
      ENDSOURCE
      SOURCE #projAlternateBudgetLookup
        #/// <summary>
        #///    Modifies the lookup of the alternate project.
        #/// </summary>
        #/// <param name="_lookupFormRun">
        #///    A lookup form to be modified.
        #/// </param>
        #/// <returns>
        #///    A modified lookup form.
        #/// </returns>
        #FormRun projAlternateBudgetLookup(FormRun _lookupFormRun)
        #{
        #    #define.Zero('0')
        #    FormDataSource formDataSource;
        #    container ancestors;
        #    Query formquery;
        #    QueryBuildRange  queryRange;
        #    ProjId grandParent;
        #
        #    ancestors   = ProjTable::ancestors(this.ProjId);
        #    grandParent = conPeek(ancestors, conLen(ancestors));
        #    formDataSource = _lookupFormRun.objectSet();
        #    formquery = formDataSource.query();
        #    formquery.dataSourceNo(1).addRange(fieldNum(ProjTable, Status)).value(SysQuery::valueNot(ProjStatus::Completed));
        #
        #    if (grandParent == #Zero)
        #    {
        #        grandParent = this.ProjId;
        #    }
        #
        #    if (ProjParameters::find().AllowBudgetOutSideHierarchy)
        #    {
        #        formquery.dataSourceNo(1).addRange(fieldNum(ProjTable, ProjId)).value(SysQuery::valueNot(this.ProjId));
        #        formquery.dataSourceNo(1).addRange(fieldNum(ProjTable, Type)).value(queryValue(this.Type));
        #    }
        #    else
        #    {
        #        queryRange = formquery.dataSourceNo(1).addRange(fieldNum(ProjTable, ProjId));
        #        queryRange.value(strFmt('((%1 LIKE "%2*") && (%1 != "%3"))', fieldStr(ProjTable,ProjId),queryValue(grandParent), this.ProjId));
        #    }
        #
        #    return _lookupFormRun;
        #}
      ENDSOURCE
      SOURCE #projectClientIntegrationIcon
        #/// <summary>
        #/// Determines the ID of the icon to show for MS Project Integration status.
        #/// </summary>
        #/// <returns>
        #/// The ID of the icon for MS Project Integration status.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #display projMSProjClientIcon projectClientIntegrationIcon()
        #{
        #    if(ProjWBSLockBox::create().lockBoxFileExists(curext(), MSPFileSyncLinkType::Project, this.RecId, '', true))
        #    {
        #        return 1035;
        #    }
        #    else
        #    {
        #        return 0;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #projGroup
        #/// <summary>
        #/// Gets the <c>ProjGroup</c> record to which the current project record belongs.
        #/// </summary>
        #/// <returns>
        #/// The <c>ProjGroup</c> record to which the current project belongs.
        #/// </returns>
        #public ProjGroup projGroup()
        #{
        #    return ProjGroup::find(this.ProjGroupId);
        #}
      ENDSOURCE
      SOURCE #projGroupName
        #/// <summary>
        #/// Retrieves the Project group name.
        #/// </summary>
        #/// <returns>
        #/// The name of the project group.
        #/// </returns>
        #// BP deviation documented
        #display Name projGroupName()
        #{
        #    return this.projGroup().Name;
        #}
      ENDSOURCE
      SOURCE #projIdAndNameColumn
        #/// <summary>
        #/// Retrieves the project ID and name as one string.
        #/// </summary>
        #/// <returns>
        #/// The project ID, a semicolon, a space, and the name as one string, in that order.
        #/// </returns>
        #display Name projIdAndNameColumn()
        #{
        #    return strFmt('%1: %2',this.ProjId,ProjTable::name(this.ProjId));
        #}
      ENDSOURCE
      SOURCE #projInvoice
        #/// <summary>
        #///    Retrieves the invoice project that the current project record is associated with.
        #/// </summary>
        #/// <returns>
        #///    A <c>ProjInvoiceTable</c> record.
        #/// </returns>
        #public ProjInvoiceTable projInvoice()
        #{
        #    return ProjInvoiceTable::find(ProjTable::find(this.ProjId).ProjInvoiceProjId);
        #}
      ENDSOURCE
      SOURCE #projLinePropertyId
        #/// <summary>
        #///    Retrieves the line property ID that is associated with the specified <c>ProjTable</c> record and
        #///    optionally updates the corresponding <c>ProjLinePropertySetup</c> record for the line property ID
        #///    with the details of the <c>ProjTable</c> record passed in.
        #/// </summary>
        #/// <param name="_set">
        #///    A Boolean value that indicates whether to retrieve the line property ID or update the
        #///    <c>ProjLinePropertySetup</c> record.
        #/// </param>
        #/// <param name="_projTable">
        #///    The project record.
        #/// </param>
        #/// <param name="_projLinePropertyId">
        #///    The line property ID.
        #/// </param>
        #/// <returns>
        #///    The line property ID.
        #/// </returns>
        #edit ProjLinePropertyId projLinePropertyId(boolean               _set,
        #                                           ProjTable             _projTable,
        #                                           ProjLinePropertyId    _projLinePropertyId)
        #{
        #    ProjLinePropertyId  projLinePropertyId = '';
        #    DictTable dictTableProjLinePropertySetup;
        #    AccessType allowedAccess;
        #
        #    dictTableProjLinePropertySetup = new DictTable(tableNum(ProjLinePropertySetup));
        #    allowedAccess = dictTableProjLinePropertySetup.rights();
        #
        #    if ((_set) && (allowedAccess >= AccessType::Edit))
        #    {
        #        ProjLinePropertySetup::updateLinePropertyProj(_projTable.ProjId, _projLinePropertyId, TableGroupAll::Table, _set);
        #    }
        #
        #    if (allowedAccess >= AccessType::View)
        #    {
        #        projLinePropertyId = (select projLinePropertySetup where projLinePropertySetup.ProjCode          == TableGroupAll::Table   &&
        #                                                                 projLinePropertySetup.ProjRelation      == _projTable.ProjId      &&
        #                                                                 projLinePropertySetup.CategoryCode      == TableGroupAll::All     &&
        #                                                                 projLinePropertySetup.CategoryRelation  == '').LinePropertyId;
        #    }
        #
        #    projLinePropertyId  = ProjLineProperty::find(projLinePropertyId).LinePropertyId;
        #
        #    return projLinePropertyId;
        #}
      ENDSOURCE
      SOURCE #projTypeName
        #// BP Deviation Documented
        #public display Name projTypeName()
        #{
        #    return (this.ProjGroupId && isConfigurationkeyEnabled(configurationKeyNum(Project3))) ? enum2str(ProjGroup::find(this.ProjGroupId,false).ProjType) : '';
        #}
      ENDSOURCE
      SOURCE #psaCalcDirectBillingMST
        #public AmountMST psaCalcDirectBillingMST()
        #{
        #    ProjCostTrans       projCostTrans;
        #    ProjItemTrans       projItemTrans;
        #    ProjCostTransCost   projCostTransCost;
        #    ProjItemTransCost   projItemTransCost;
        #    AmountMST           directBillingAmountMST;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    while select Qty from projCostTrans
        #        where projCostTrans.ProjId       == this.ProjId
        #        join CostPrice from projCostTransCost
        #        where ((projCostTransCost.TransId == projCostTrans.TransId)
        #                    && (projCostTransCost.TransStatus == ProjTransStatus::Invoiced
        #                    ||  projCostTransCost.TransStatus == ProjTransStatus::MarkedCreditnote))
        #    {
        #        directBillingAmountMST += projCostTrans.Qty*projCostTransCost.CostPrice;
        #    }
        #
        #    while select projItemTrans
        #        where projItemTrans.ProjId       == this.ProjId
        #        join InventTransId from projItemTransCost
        #        where ((projItemTransCost.InventTransId == projItemTrans.InventTransId)
        #                && (projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId) &&
        #               (projItemTransCost.TransStatus == ProjTransStatus::Invoiced
        #            || projItemTransCost.TransStatus == ProjTransStatus::MarkedCreditnote))
        #
        #    {
        #        directBillingAmountMST += projItemTrans.costAmountTotal();
        #    }
        #    }
        #
        #    return directBillingAmountMST;
        #}
        #
      ENDSOURCE
      SOURCE #psaContractValue
        #// Description    : Calculate contract value from OnAccTrans for selected project
        #// Parameters     : _bIncludeChild: Calculate from child projects as well
        #// Return value   : The calculated value
        #
        #public Amount psaContractValue(boolean _bIncludeChild, boolean _bUseWIPid = false)
        #{
        #    ProjOnAccTrans tProjOnAccTrans;
        #    ProjOnAccTransSale  tProjOnAccTransSale;
        #    ProjTable      tProjTable;
        #    Amount         rAmount;
        #    #define.star('*')
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    if (_bUseWIPid)
        #    {
        #        while select TransDate from tProjOnAccTrans
        #                join Amount from tProjOnAccTransSale
        #                where tProjOnAccTransSale.TransId == tProjOnAccTrans.TransId
        #                join ProjId from tProjTable where tProjOnAccTrans.ProjID == tProjTable.ProjId
        #                            &&  tProjTable.wipProject == this.wipProject
        #                            &&  tProjTable.Type != ProjType::TimeMaterial
        #        {
        #            rAmount +=  tProjOnAccTransSale.Amount;
        #        }
        #    }
        #    else
        #    {
        #        if (_bIncludeChild)
        #        {
        #            while select * from tProjTable
        #                index ProjectIdx
        #                where tProjTable.ProjId like this.ProjId + #star
        #                &&    tProjTable.Type != ProjType::TimeMaterial
        #            {
        #                // Description: Calculate the rAmount taking in account the exchange rate also.
        #                while select TransId, CurrencyId, TransDate from tProjOnAccTrans
        #                        index ProjDateIdx
        #                        where tProjOnAccTrans.ProjID == tProjTable.ProjId
        #                        join Amount from tProjOnAccTransSale
        #                        where tProjOnAccTransSale.TransId == tProjOnAccTrans.TransId
        #                        {
        #                             rAmount +=  tProjOnAccTransSale.Amount;
        #                        }
        #            }
        #        }
        #        else
        #        {
        #            if (this.Type == ProjType::TimeMaterial)
        #            {
        #                rAmount = 0;
        #            }
        #            else
        #            {
        #                // Description: Calculate the rAmount taking in account the exchange rate also.
        #                while select TransId, CurrencyId, TransDate from tProjOnAccTrans
        #                        index hint ProjDateIdx
        #                        where tProjOnAccTrans.ProjID == this.ProjId
        #                        join Amount from tProjOnAccTransSale
        #                        where tProjOnAccTransSale.TransId == tProjOnAccTrans.TransId
        #                        {
        #                             rAmount +=  tProjOnAccTransSale.Amount;
        #                        }
        #            }
        #        }
        #    }
        #    }
        #
        #    return rAmount;
        #}
      ENDSOURCE
      SOURCE #psaCopyAdrFromInvoice
        #// Description    : Get project delivery address from contract as PSA required.
        #public void psaCopyAdrFromInvoice(ProjInvoiceTable _projInvoiceTable)
        #{
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        this.DlvName                = _projInvoiceTable.Name;
        #        this.DeliveryLocation       = _projInvoiceTable.InvoiceLocation;
        #    }
        #}
      ENDSOURCE
      SOURCE #psaCreateProjValProjCategorySetUp
        #// Description:     Copy category validation from invoice project or parent
        #// Parameters:
        #// Return value:
        #// Exceptions:
        #
        #public void psaCreateProjValProjCategorySetUp()
        #{
        #    ProjValProjCategorySetUp tProjValProjCategorySetUp, tProjValProjCategorySetUpCreate, tProjValProjCategorySetUpGroup;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return;
        #    }
        #
        #    if (this.ParentId)
        #    {
        #        while select * from tProjValProjCategorySetUp
        #            where tProjValProjCategorySetUp.ProjId == this.ParentId
        #        {
        #            if (!tProjValProjCategorySetUp.GroupId)
        #            {
        #                tProjValProjCategorySetUpCreate = null;
        #                tProjValProjCategorySetUpCreate.data(tProjValProjCategorySetUp);
        #                tProjValProjCategorySetUpCreate.psaProjInvoiceProjId = "";
        #                tProjValProjCategorySetUpCreate.ProjId = this.ProjId;
        #                if (!ProjValProjCategorySetUp::existDirect(tProjValProjCategorySetUpCreate.CategoryId, tProjValProjCategorySetUpCreate.ProjId))
        #                {
        #                    tProjValProjCategorySetUpCreate.insert();
        #                }
        #            }
        #            else
        #            {
        #                while select * from tProjValProjCategorySetUpGroup
        #                    where tProjValProjCategorySetUpGroup.GroupId == tProjValProjCategorySetUp.GroupId
        #                    &&    tProjValProjCategorySetUpGroup.ProjId == ""
        #                    &&    tProjValProjCategorySetUpGroup.psaProjInvoiceProjId == ""
        #                {
        #                    tProjValProjCategorySetUpCreate = null;
        #                    tProjValProjCategorySetUpCreate.data(tProjValProjCategorySetUpGroup);
        #                    tProjValProjCategorySetUpCreate.psaProjInvoiceProjId = "";
        #                    tProjValProjCategorySetUpCreate.ProjId = this.ProjId;
        #                    tProjValProjCategorySetUpCreate.GroupId = "";
        #                    if (!ProjValProjCategorySetUp::existDirect(tProjValProjCategorySetUpCreate.CategoryId, tProjValProjCategorySetUpCreate.ProjId))
        #                    {
        #                        tProjValProjCategorySetUpCreate.insert();
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    else if (this.ProjInvoiceProjId)
        #    {
        #        while select * from tProjValProjCategorySetUp
        #            where tProjValProjCategorySetUp.psaProjInvoiceProjId == this.ProjInvoiceProjId
        #        {
        #            if (!tProjValProjCategorySetUp.GroupId)
        #            {
        #                tProjValProjCategorySetUpCreate = null;
        #                tProjValProjCategorySetUpCreate.data(tProjValProjCategorySetUp);
        #                tProjValProjCategorySetUpCreate.psaProjInvoiceProjId = "";
        #                tProjValProjCategorySetUpCreate.ProjId = this.ProjId;
        #                if (!ProjValProjCategorySetUp::existDirect(tProjValProjCategorySetUpCreate.CategoryId, tProjValProjCategorySetUpCreate.ProjId))
        #                {
        #                    tProjValProjCategorySetUpCreate.insert();
        #                }
        #            }
        #            else
        #            {
        #                while select * from tProjValProjCategorySetUpGroup
        #                    where tProjValProjCategorySetUpGroup.GroupId == tProjValProjCategorySetUp.GroupId
        #                    &&    tProjValProjCategorySetUpGroup.ProjId == ""
        #                    &&    tProjValProjCategorySetUpGroup.psaProjInvoiceProjId == ""
        #                {
        #                    tProjValProjCategorySetUpCreate = null;
        #                    tProjValProjCategorySetUpCreate.data(tProjValProjCategorySetUpGroup);
        #                    tProjValProjCategorySetUpCreate.psaProjInvoiceProjId = "";
        #                    tProjValProjCategorySetUpCreate.ProjId = this.ProjId;
        #                    tProjValProjCategorySetUpCreate.GroupId = "";
        #                    if (!ProjValProjCategorySetUp::existDirect(tProjValProjCategorySetUpCreate.CategoryId, tProjValProjCategorySetUpCreate.ProjId))
        #                    {
        #                        tProjValProjCategorySetUpCreate.insert();
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #psaCurrency
        #// BP Deviation Documented
        #public display CurrencyCode psaCurrency()
        #{
        #    return this.projInvoice().CurrencyId;
        #}
      ENDSOURCE
      SOURCE #psaEstimate
        #// Description    : Calculate estimated cost for a project
        #// Parameters     : _sForecastModelId: Forecast model to include in calc.
        #//                  _bIncludeChild: Calculate from child projects as well
        #
        #public PSAProjProposalProj psaEstimate(ForecastModelId _forecastModelId, boolean _bIncludeChild, PSAProjProposalProj _tpsaProjProposalProj )
        #{
        #    ProjForecastCost    tProjForecastCost;
        #    ProjForecastEmpl    tProjForecastEmpl;
        #    ProjForecastRevenue tProjForecastRevenue;
        #    #define.star("*")
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    if (_bIncludeChild)
        #    {
        #        while select * from tProjForecastCost
        #            index hint projModelIdx
        #            where tProjForecastCost.ProjId like this.ProjId + #star
        #            &&    tProjForecastCost.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedCost     += tProjForecastCost.CostPrice * tProjForecastCost.Qty;
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastCost.SalesPrice * tProjForecastCost.Qty;
        #
        #        }
        #
        #        while select * from tProjForecastEmpl
        #            index hint projModelIdx
        #            where tProjForecastEmpl.ProjId like this.ProjId + #star
        #            &&    tProjForecastEmpl.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedCost     += tProjForecastEmpl.CostPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastEmpl.SalesPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.EstimatedHourQty       += tProjForecastEmpl.CostPrice * tProjForecastEmpl.Qty;
        #        }
        #        while select * from tProjForecastRevenue
        #            index hint ProjModelIdx
        #            where tProjForecastRevenue.ProjId like this.ProjId + #star
        #            &&    tProjForecastRevenue.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedCost     += tProjForecastEmpl.CostPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastEmpl.SalesPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.EstimatedHourQty       += tProjForecastEmpl.CostPrice * tProjForecastEmpl.Qty;
        #        }
        #
        #    }
        #    else
        #    {
        #        while select * from tProjForecastCost
        #            index hint projModelIdx
        #            where tProjForecastCost.ProjId == this.ProjId
        #            &&    tProjForecastCost.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedCost     += tProjForecastCost.CostPrice * tProjForecastCost.Qty;
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastCost.SalesPrice * tProjForecastCost.Qty;
        #        }
        #
        #        while select * from tProjForecastEmpl
        #            index hint projModelIdx
        #            where tProjForecastEmpl.ProjId == this.ProjId
        #            &&    tProjForecastEmpl.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedCost     += tProjForecastEmpl.CostPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastEmpl.SalesPrice * tProjForecastEmpl.Qty;
        #            _tpsaProjProposalProj.EstimatedHourQty       += tProjForecastEmpl.Qty;
        #        }
        #
        #        while select * from tProjForecastRevenue
        #            index hint ProjModelIdx
        #            where tProjForecastRevenue.ProjId == this.ProjId
        #            &&    tProjForecastRevenue.ModelId == _forecastModelId
        #        {
        #            _tpsaProjProposalProj.TotalEstimatedRevenue  += tProjForecastRevenue.SalesPrice * tProjForecastRevenue.Qty;
        #        }
        #    }
        #    }
        #
        #    return _tpsaProjProposalProj;
        #}
      ENDSOURCE
      SOURCE #psaEstimateHours
        #// Description    : Calculate estimated hours for a project
        #// Parameters     : _sForecastModelId: Forecast model to include in calc.
        #//                  _bIncludeChild: Calculate from child projects as well
        #// Return value   : Total estimated hours
        #
        #public ProjQtyEmpl psaEstimateHours(ForecastModelId _forecastModelId, boolean _bIncludeChild)
        #{
        #    ProjForecastEmpl tProjForecastEmpl;
        #    #define.star("*")
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    if (_bIncludeChild)
        #    {
        #        select sum(Qty) from tProjForecastEmpl
        #            index hint projModelIdx
        #            where tProjForecastEmpl.ProjId like this.ProjId + #star
        #            &&    tProjForecastEmpl.ModelId == _forecastModelId;
        #    }
        #    else
        #    {
        #        select sum(Qty) from tProjForecastEmpl
        #            index hint projModelIdx
        #            where tProjForecastEmpl.ProjId == this.ProjId
        #            &&    tProjForecastEmpl.ModelId == _forecastModelId;
        #    }
        #    }
        #
        #    return tProjForecastEmpl.Qty;
        #}
      ENDSOURCE
      SOURCE #psaEstimateItems
        #// Description    : Calculate estimated items turnover for a project
        #// Parameters     : _sForecastModelId: Forecast model to include in calc.
        #//                  _bIncludeChild: Calculate from child projects as well
        #// Return value   : Total estimated items turnover
        #
        #public Amount psaEstimateItems(ForecastModelId _forecastModelId, boolean _bIncludeChild)
        #{
        #    ForecastSales tForecastSales;
        #    #define.star("*")
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    if (_bIncludeChild)
        #    {
        #        select sum(Amount) from tForecastSales
        #            index hint ProjIdx
        #            where tForecastSales.ProjId like this.ProjId + #star
        #            &&    tForecastSales.ModelId == _forecastModelId;
        #
        #    }
        #    else
        #    {
        #        select sum(Amount) from tForecastSales
        #            index hint ProjIdx
        #            where tForecastSales.ProjId == this.ProjId
        #            &&    tForecastSales.ModelId == _forecastModelId;
        #    }
        #    }
        #
        #    return tForecastSales.Amount;
        #}
        #
      ENDSOURCE
      SOURCE #psaFindPrevPDSId
        #public int psaFindPrevPDSId()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #psaFindRootProjId
        #public ProjId psaFindRootProjId(ProjId    _projId)
        #{
        #    ProjTable   projTable;
        #    boolean     found = false;
        #    ProjId      sprojid = _projId;
        #
        #    while (!found)
        #    {
        #        select ProjId, ParentId from projTable
        #            where projTable.ProjId == sprojid;
        #
        #        if(projTable.ParentId)
        #        {
        #            sprojid = projTable.ParentId;
        #        }
        #        else
        #        {
        #            found = true;
        #        }
        #    }
        #    return projTable.ProjId;
        #}
      ENDSOURCE
      SOURCE #psaGetRetainConsolicationLevel
        #// Description    : Found out whether there is a project with 'Include lower levels' checked
        #//                  on higher levels, if exists, return that project, else return null.
        #// Parameters     : None
        #// Return value   : Return a parent project with 'Include lower levels' checked if exists,
        #//                  else null returned.
        #
        #public ProjTable psaGetRetainConsolicationLevel()
        #{
        #    ProjTable       tProjTable = ProjTable::find(this.ProjId);
        #    boolean         bFound = false;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    while (!bFound)
        #    {
        #        if (tProjTable.psaRetainIncludeLower == NoYes::Yes)
        #        {
        #            bFound = true;
        #            break;
        #        }
        #
        #        if (tProjTable.ParentId)
        #        {
        #            tProjTable = ProjTable::find(tProjTable.ParentId);
        #        }
        #        else
        #        {
        #            break;
        #        }
        #    }
        #    }
        #
        #    return bFound ? tProjTable : null;
        #
        #}
      ENDSOURCE
      SOURCE #psaInvCap
        #// Description    : Display method to return invoiced cap amount for this project
        #// Parameters     : None
        #// Return value   : AmountCur, invoiced amount for this project
        #// BP Deviation Documented
        #public display AmountCur psaInvCap()
        #{
        #    return 0;
        #}
        #
      ENDSOURCE
      SOURCE #psaLeftToInvoice
        #// Description    : Display method to return left to invoice amount for this project
        #// Return value   : AmountCur, left to invoice amount for this project
        #
        #// BP Deviation Documented
        #public display AmountCur psaLeftToInvoice()
        #{
        #    return 0;
        #}
        #
        #
      ENDSOURCE
      SOURCE #psAlevel
        #// This so the .net connector can call the method. Not able to call methods
        #// that are public from .net connector
        #
        #public Level psAlevel()
        #{
        #    return this.level();
        #}
        #
      ENDSOURCE
      SOURCE #psaModifiedField
        #public void psaModifiedField(FieldId _iFieldId)
        #{
        #
        #    if (!Global::isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return;
        #    }
        #
        #    switch (_iFieldId)
        #    {
        #        case fieldNum(ProjTable, psaSchedDuration):
        #            PSAProjProjSchedule::newSchedule().scheduleProj(this, this.psaSchedStartDate, this.psaSchedEndDate);
        #            break;
        #
        #        case fieldNum(ProjTable, psaSchedStartDate):
        #        case fieldNum(ProjTable, psaSchedEndDate):
        #            if (this.psaSchedStartDate && this.psaSchedEndDate)
        #            {
        #                this.psaSchedDuration = WorkCalendarCalculator::calcDuration(this.psaSchedStartDate, this.psaSchedEndDate, this.psaSchedCalendarId);
        #            }
        #            else
        #            {
        #                this.psaSchedDuration = 0;
        #            }
        #            break;
        #    }
        #
        #
        #}
        #
      ENDSOURCE
      SOURCE #psaPaymTerm
        #// BP Deviation Documented
        #public display PaymTermId psaPaymTerm()
        #{
        #    return this.projInvoice().Payment;
        #}
        #
      ENDSOURCE
      SOURCE #psaPctOfCap
        #// Description    : Display method to return invoiced pct of cap
        #// Return value   : Pct
        #// BP Deviation Documented
        #public display Percent psaPctOfCap()
        #{
        #    return 0;
        #}
        #
      ENDSOURCE
      SOURCE #psaProjProposalIdIdList
        #public str psaProjProposalIdIdList()
        #{
        #    ProjProposalEmpl    projProposalEmpl;
        #    ProjEmplTrans       projEmplTrans;
        #    ProjProposalCost    projProposalCost;
        #    ProjCostTrans       projCostTrans;
        #    ProjProposalItem    projProposalItem;
        #    ProjItemTrans       projItemTrans;
        #    ProjProposalOnAcc   projProposalOnAcc;
        #    ProjOnAccTrans      projOnAccTrans;
        #    ProjProposalRevenue projProposalRevenue;
        #    ProjRevenueTrans    projRevenueTrans;
        #
        #    Set                 set = new Set(Types::String);
        #    SetIterator         setIterator;
        #    str                 projProposalIdList;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return projProposalIdList;
        #    }
        #
        #    while select ProposalId from projProposalEmpl
        #        group by ProposalId
        #        exists join projEmplTrans
        #            where projEmplTrans.TransId == projProposalEmpl.TransId
        #               && projEmplTrans.ProjId  == this.ProjId
        #    {
        #        set.add(projProposalEmpl.ProposalId);
        #    }
        #
        #    while select ProposalId from projProposalCost
        #        group by ProposalId
        #        exists join projCostTrans
        #            where projCostTrans.TransId == projProposalCost.TransId
        #               && projCostTrans.ProjId  == this.ProjId
        #    {
        #        set.add(projProposalCost.ProposalId);
        #    }
        #
        #    while select ProposalId from projProposalItem
        #        group by ProposalId
        #        exists join projItemTrans
        #            where projItemTrans.ProjTransId == projProposalItem.ProjTransId
        #               && projItemTrans.ProjId  == this.ProjId
        #    {
        #        set.add(projProposalItem.ProposalId);
        #    }
        #
        #    while select ProposalId from projProposalOnAcc
        #        group by ProposalId
        #        exists join projOnAccTrans
        #            where projOnAccTrans.TransId == projProposalOnAcc.TransId
        #               && projOnAccTrans.ProjID  == this.ProjId
        #    {
        #        set.add(projProposalOnAcc.ProposalId);
        #    }
        #
        #    while select ProposalId from projProposalRevenue
        #        group by ProposalId
        #        exists join projRevenueTrans
        #            where projRevenueTrans.TransId == projProposalRevenue.TransId
        #               && projRevenueTrans.ProjId  == this.ProjId
        #    {
        #        set.add(projProposalRevenue.ProposalId);
        #    }
        #
        #    setIterator = new SetIterator(set);
        #    while(setIterator.more())
        #    {
        #        projProposalIdList += setIterator.value()+',';
        #        setIterator.next();
        #    }
        #
        #    if (!projProposalIdList)
        #    {
        #        projProposalIdList = 'ABC';
        #    }
        #
        #    return projProposalIdList;
        #}
        #
      ENDSOURCE
      SOURCE #psaRecCost
        #// Description    : Calculate recognized cost for a project in MST currency
        #// Parameters     : _bIncludeChild: Calculate from child projects as well
        #// Return value   : Total recognized cost
        #public Amount psaRecCost(boolean _bIncludeChild)
        #{
        #    ProjTable tProjTable;
        #    PSAIndirectComponentTrans   tIndirectComponentTrans;
        #    ProjControlPeriodTable      tProjControlPeriodTable;
        #    ProjCostTrans               tProjCostTrans;
        #    ProjEmplTrans               tProjEmplTrans;
        #    ProjItemTrans               tProjItemTrans;
        #    ProjRevenueTrans            tProjRevenueTrans;
        #    Amount                      rAmount;
        #    Amount                      rLocalAmount;
        #    ProjTrans                   projTrans;
        #
        #    #define.star("*")
        #
        #    // local method
        #    Amount calcWIP(ProjId sProjId)
        #    {
        #        if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #        {
        #            select sum(wipCost) from tProjControlPeriodTable
        #                where tProjControlPeriodTable.ProjId == sProjId
        #                &&    tProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted;
        #        }
        #
        #        return tProjControlPeriodTable.wipCost;
        #    }
        #
        #    Amount calcTrans(ProjId sProjId)
        #    {
        #        rLocalAmount = 0;
        #
        #        if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #        {
        #            return rLocalAmount;
        #        }
        #        // cost
        #        while select * from tProjCostTrans
        #            where tProjCostTrans.ProjId == sProjId
        #        {
        #            projTrans = ProjTrans::construct(tProjCostTrans);
        #            rLocalAmount += projTrans.transCostMST();
        #        }
        #
        #        // empl
        #        while select * from tProjEmplTrans
        #            where tProjEmplTrans.ProjId == sProjId
        #        {
        #            projTrans = ProjTrans::construct(tProjEmplTrans);
        #            rLocalAmount += projTrans.transCostMST();
        #
        #            // Add indirect amount to total cost
        #            if (isConfigurationkeyEnabled(configurationKeyNum(PSAIndirectCost)))
        #            {
        #                while select tIndirectComponentTrans
        #                    where tIndirectComponentTrans.TransId               == tProjEmplTrans.TransId &&
        #                          tIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost
        #                {
        #                    rLocalAmount += ProjTrans::psaNewProjEmplIndirecTrans(tIndirectComponentTrans).transCostMST();
        #                }
        #            }
        #
        #        }
        #
        #        // item
        #        while select * from tProjItemTrans
        #            where tProjItemTrans.ProjId == sProjId
        #        {
        #            projTrans = ProjTrans::construct(tProjItemTrans);
        #            rLocalAmount += projTrans.transCostMST();
        #        }
        #        // revenue
        #        while select * from tProjRevenueTrans
        #            where tProjRevenueTrans.ProjId == sProjId
        #        {
        #            projTrans = ProjTrans::construct(tProjRevenueTrans);
        #            rLocalAmount += projTrans.transCostMST();
        #        }
        #
        #        return rLocalAmount;
        #    }
        #
        #    if (_bIncludeChild)
        #    {
        #        while select ProjId, Type from tProjTable
        #            where tProjTable.ProjId like this.ProjId + #star
        #        {
        #            rAmount += calcTrans(tProjTable.ProjId);
        #        }
        #    }
        #    else
        #    {
        #        rAmount = calcTrans(this.ProjId);
        #    }
        #
        #    return Currency::amount(rAmount);
        #}
        #
      ENDSOURCE
      SOURCE #psaRecRevenue
        #// Description    : Calculate recognized revenue for a project in MST currency
        #// Parameters     : _bIncludeChild: Calculate from child projects as well
        #// Return value   : Total recognized revenue
        #public Amount psaRecRevenue(boolean _bIncludeChild, boolean _bUseWIPid = false)
        #{
        #    ProjTable tProjTable;
        #    PSAIndirectComponentTrans tIndirectComponentTrans;// Foliodev.PSA.28.Dec.2007.SG
        #    ProjControlPeriodTable tProjControlPeriodTable;
        #    ProjCostTrans   tProjCostTrans;
        #    ProjEmplTrans   tProjEmplTrans;
        #    ProjItemTrans   tProjItemTrans;
        #    ProjRevenueTrans tProjRevenueTrans;
        #
        #    ProjCostTransSale   tProjCostTransSale;
        #    ProjEmplTransSale   tProjEmplTransSale;
        #    ProjItemTransSale   tProjItemTransSale;
        #    ProjRevenueTransSale tProjRevenueTransSale;
        #    Amount rAmount, rLocalAmount;
        #    #define.star("*")
        #
        #    // Add indirect amount to total revenue
        #    void calcIndirectAmount(ProjTransIdBase _transId, PSAIndirectComponentType _indirectType)
        #    {
        #        if (isConfigurationkeyEnabled(configurationKeyNum(PSAIndirectCost)))
        #        {
        #            while select tIndirectComponentTrans
        #                where tIndirectComponentTrans.TransId               == _transId &&
        #                      tIndirectComponentTrans.IndirectComponentType == _indirectType
        #            {
        #                rLocalAmount += ProjTrans::psaNewProjEmplIndirecTrans(tIndirectComponentTrans).transTurnoverMST();
        #            }
        #        }
        #
        #    }
        #    // local method
        #    Amount calcWIP(ProjId sProjId)
        #    {
        #        if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #        {
        #        select sum(wipAccruedTurnover), sum(wipAccruedTurnoverProd), sum(wipAccruedTurnoverProfit) from tProjControlPeriodTable
        #            where tProjControlPeriodTable.ProjId == sProjId
        #            &&   (tProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted
        #            ||    tProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate);
        #
        #        rLocalAmount = tProjControlPeriodTable.wipAccruedTurnover + tProjControlPeriodTable.wipAccruedTurnoverProd + tProjControlPeriodTable.wipAccruedTurnoverProfit;
        #        }
        #        return abs(rLocalAmount);
        #    }
        #
        #    Amount calcTrans(ProjId sProjId)
        #    {
        #        rLocalAmount = 0;
        #
        #        if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #        {
        #            return rLocalAmount;
        #        }
        #        // cost
        #        while select * from tProjCostTrans
        #            where tProjCostTrans.ProjId == sProjId
        #            join LedgerSalesAmount from tProjCostTransSale
        #            where tProjCostTransSale.TransId == tProjCostTrans.TransId
        #
        #        {
        #            if (!tProjCostTrans.invoiced())
        #            {
        #                rLocalAmount += tProjCostTransSale.LedgerSalesAmount;
        #            }
        #            else
        #            {
        #                rLocalAmount += ProjTrans::construct(tProjCostTrans).transTurnoverMST();
        #            }
        #        }
        #
        #        // empl
        #        while select * from tProjEmplTrans
        #            where tProjEmplTrans.ProjId == sProjId
        #            join tProjCostTransSale
        #            where tProjEmplTransSale.TransId == tProjEmplTrans.TransId
        #        {
        #            if (!tProjEmplTrans.invoiced())
        #            {
        #                rLocalAmount += tProjCostTransSale.LedgerSalesAmount;
        #                calcIndirectAmount(tProjEmplTrans.TransId, PSAIndirectComponentType::Revenue);
        #            }
        #            else
        #            {
        #                rLocalAmount += ProjTrans::construct(tProjEmplTrans).transTurnoverMST();
        #                calcIndirectAmount(tProjEmplTrans.TransId, PSAIndirectComponentType::Invoice);
        #            }
        #
        #
        #        }
        #
        #        // item
        #        while select * from tProjItemTrans
        #            where tProjItemTrans.ProjId == sProjId
        #            join LedgerSalesAmount from tProjItemTransSale
        #            where tProjItemTransSale.ProjTransId == tProjItemTrans.ProjTransId
        #
        #        {
        #            if (!tProjItemTrans.invoiced())
        #            {
        #                rLocalAmount += tProjItemTransSale.LedgerSalesAmount;
        #            }
        #            else
        #            {
        #                rLocalAmount += ProjTrans::construct(tProjItemTrans).transTurnoverMST();
        #            }
        #        }
        #
        #        // revenue
        #        while select * from tProjRevenueTrans
        #            where tProjRevenueTrans.ProjId == sProjId
        #            join LedgerSalesAmount from tProjRevenueTransSale
        #            where tProjRevenueTransSale.TransId == tProjRevenueTrans.TransId
        #        {
        #            if (!tProjRevenueTrans.invoiced())
        #            {
        #                rLocalAmount += tProjRevenueTransSale.LedgerSalesAmount;
        #            }
        #            else
        #            {
        #                rLocalAmount += ProjTrans::construct(tProjRevenueTrans).transTurnoverMST();
        #            }
        #        }
        #
        #        return rLocalAmount;
        #    }
        #    ;
        #
        #
        #    if (_bUseWIPid)
        #    {
        #        while select ProjId, Type from tProjTable
        #            where tProjTable.wipProject == this.wipProject
        #        {
        #            if (tProjTable.Type == ProjType::FixedPrice)
        #            {
        #                rAmount += calcWIP(tProjTable.ProjId);
        #            }
        #            else
        #            {
        #                rAmount += calcTrans(tProjTable.ProjId);
        #            }
        #
        #        }
        #
        #    }
        #    else
        #    {
        #        if (_bIncludeChild)
        #        {
        #            while select ProjId, Type from tProjTable
        #                where tProjTable.ProjId like this.ProjId + #star
        #            {
        #                if (tProjTable.Type == ProjType::FixedPrice)
        #                {
        #                    rAmount += calcWIP(tProjTable.ProjId);
        #                }
        #                else
        #                {
        #                    rAmount += calcTrans(tProjTable.ProjId);
        #                }
        #
        #            }
        #        }
        #        else
        #        {
        #            if (this.Type == ProjType::FixedPrice)
        #            {
        #                rAmount = calcWIP(this.ProjId);
        #            }
        #            else
        #            {
        #                rAmount = calcTrans(this.ProjId);
        #            }
        #        }
        #    }
        #
        #    return Currency::amount(rAmount);
        #
        #}
        #
      ENDSOURCE
      SOURCE #psaRetainageBillingDesc
        #public TransTxt psaRetainageBillingDesc()
        #{
        #    return strFmt("%1 %2", this.ProjId, this.Name);
        #}
        #
      ENDSOURCE
      SOURCE #psaUsePDS
        #// Description    : Is the project connected to MS Project server
        #// Return value   : Yes, if a connection exists, else no
        #// BP Deviation Documented
        #public display NoYes psaUsePDS()
        #{
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #psaValidateSchedule
        #public boolean psaValidateSchedule()
        #{
        #    boolean ret = true;
        #    ProjTable tProjChild;
        #    boolean   bWrongDate;
        #    RealBase oldDuration;
        #
        #    if (!Global::isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return ret;
        #    }
        #
        #    if (!this.psaSchedCalendarId)
        #    {
        #        ret=checkFailed(strFmt("@PSA3435",this.ProjId));
        #        return false;
        #    }
        #
        #
        #// Description: validate the scheduling date for parent record
        #
        #    oldDuration     = this.orig().psaSchedDuration;
        #
        #    if (this.psaSchedStartDate > this.orig().psaSchedStartDate)
        #    {
        #
        #        while select psaSchedStartDate from tProjChild where tProjChild.ProjId like this.ProjId + '*' && tProjChild.ProjId != this.ProjId
        #        {
        #
        #            if (tProjChild.psaSchedStartDate<this.psaSchedStartDate)
        #            {
        #                bWrongDate = true;
        #                break;
        #            }
        #        }
        #        if (bWrongDate)
        #        {
        #            ret=checkFailed(strFmt('Scheduling start date is wrong. There is a children task with scheduling start date less than calculate start date (%1)!', this.psaSchedStartDate));
        #
        #            this.psaSchedStartDate = this.orig().psaSchedStartDate;
        #            this.psaSchedEndDate = this.orig().psaSchedEndDate;
        #            if (this.psaSchedDuration < this.orig().psaSchedDuration)
        #            {
        #                this.psaSchedDuration    = this.updateProjectDuration(this.psaSchedCalendarId, this.psaSchedStartDate, this.psaSchedEndDate);
        #            }
        #        }
        #        else
        #        {
        #            this.psaSchedDuration = oldDuration;
        #        }
        #
        #    }
        #
        #    if (this.psaSchedEndDate < this.orig().psaSchedEndDate)
        #    {
        #        while select psaSchedEndDate from tProjChild where tProjChild.ProjId like this.ProjId + '*' && tProjChild.ProjId != this.ProjId
        #        {
        #            if (tProjChild.psaSchedEndDate>this.psaSchedEndDate)
        #            {
        #                bWrongDate = true;
        #                break;
        #            }
        #
        #        }
        #        if (bWrongDate)
        #        {
        #            ret=checkFailed(strFmt('Scheduling end date is wrong! There is a children task with scheduling end date more than calculate end date (%1)',this.psaSchedEndDate));
        #
        #            this.psaSchedStartDate = this.orig().psaSchedStartDate;
        #            this.psaSchedEndDate = this.orig().psaSchedEndDate;
        #            if (this.psaSchedDuration < this.orig().psaSchedDuration)
        #            {
        #                this.psaSchedDuration    = this.updateProjectDuration(this.psaSchedCalendarId, this.psaSchedStartDate, this.psaSchedEndDate);
        #            }
        #        }
        #        else
        #        {
        #            this.psaSchedDuration = oldDuration;
        #        }
        #
        #    }
        #
        #    this.doUpdate();
        #
        #    return ret;
        #
        #}
        #
      ENDSOURCE
      SOURCE #remainingHours
        #/// <summary>
        #///    Returns the number of hours that need to be hard-booked.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The number of hours that need to be hard-booked.
        #/// </returns>
        #display Hours remainingHours()
        #{
        #    PSASchedEmplReservation emplReservation;
        #    Hours                   wbsAssignedHours;
        #    Hours                   projRemaining;
        #
        #    if (ProjTable::activityExists(this.ProjId))
        #    {
        #        select sum(EndTime) from emplReservation
        #        where emplReservation.ProjId == this.ProjId
        #            && emplReservation.CommitType == PSASchedCommit::Hard
        #            && emplReservation.ActivityNumber != "";
        #
        #        wbsAssignedHours = emplReservation ? emplReservation.EndTime/3600 : 0;
        #        projRemaining = round(this.psaSchedEffort - wbsAssignedHours, 0.01);
        #    }
        #
        #    return projRemaining;
        #}
        #
        #
      ENDSOURCE
      SOURCE #renamePrimaryKey
        #/// <summary>
        #///    Renames the primary key of the table.
        #/// </summary>
        #/// <param name="psaIncluedeSubProjects">
        #///    Specify if the rename of the key should affect subprojects also.
        #/// </param>
        #/// <remarks>
        #///    This method also renames all the subprojects that roll up to this current parent project record.
        #/// </remarks>
        #server void renamePrimaryKey(boolean psaIncluedeSubProjects = true)
        #{
        #    NumberSequenceFormat    subFormat;
        #    ProjTable               projTable;
        #    DictType                projIdType;
        #    ProjId                  projId;
        #    ProjTable               originalRecord;
        #
        #    ttsbegin;
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) ? psaIncluedeSubProjects : true)
        #    {
        #        if (this.ParentId && ! this.validateProjId(this.ProjId))
        #        {
        #            throw error(strFmt("@SYS62416", this.ParentId, ProjTable::find(this.ParentId).Format));
        #        }
        #        else
        #        {
        #            if (!strLen(strLTrim(strRTrim(this.ProjId))))
        #            {
        #                throw error("@SYS62427");
        #            }
        #        }
        #    }
        #
        #    originalRecord = this.orig();
        #    projId = this.orig().ProjId;
        #    while select forupdate projTable where projTable.wipProject == projId
        #    {
        #        projTable.wipProject = this.ProjId;
        #        projTable.doUpdate();
        #    }
        #
        #    super();
        #
        #    DimensionStorage::syncRenamedValue(this, originalRecord);
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) ? psaIncluedeSubProjects : true)
        #    {
        #        while select forupdate projTable where projTable.ParentId == this.ProjId
        #        {
        #            subFormat = subStr(projTable.ProjId, strLen(projTable.ProjId), -(strLen(this.Format)));
        #
        #            projIdType = new DictType(extendedTypeNum(ProjId));
        #
        #            if (strLen((projTable.ParentId + subFormat)) > projIdType.stringLen())
        #            {
        #                throw error(strFmt("@SYS62419", projTable.ProjId, (projTable.ParentId + subFormat),
        #                                                strLen(projTable.ParentId + subFormat), projIdType.stringLen()));
        #            }
        #
        #            projTable.ProjId = (projTable.ParentId + subFormat);
        #
        #            projTable.renamePrimaryKey();
        #        }
        #    }
        #
        #    this.updateHierarchy();
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #returnForecastDate
        #public TransDate returnForecastDate()
        #{
        #    TransDate   forecastDate;
        #
        #    if (((this.Status == ProjStatus::Created) || (this.Status == ProjStatus::Scheduled)) && this.ProjectedStartDate)
        #    {
        #        forecastDate = this.ProjectedStartDate;
        #    }
        #
        #    return forecastDate? forecastDate : systemDateGet();
        #}
      ENDSOURCE
      SOURCE #salesTable_ItemReq
        #/// <summary>
        #///    Retrieves the sales order record that is associated with the current project record.
        #/// </summary>
        #/// <param name="_currencyCode">
        #///    The currency that the <c>SalesTable</c> record should have.
        #/// </param>
        #/// <param name="_update">
        #///    A Boolean value that indicates whether the sales order record should be selected for update;
        #///    optional.
        #/// </param>
        #/// <returns>
        #///    The sales order record.
        #/// </returns>
        #public SalesTable salesTable_ItemReq(CustCurrencyCode _currencyCode, boolean _update = false)
        #{
        #    SalesTable  salesTable = null;
        #
        #    if (this.ProjId && this.CustAccount)
        #    {
        #        salesTable.selectForUpdate(_update);
        #
        #        select firstonly salesTable
        #            where salesTable.ProjId         == this.ProjId                          &&
        #                  salesTable.CustAccount    == this.type().custAccount()            &&
        #                  salesTable.InvoiceAccount == this.type().invoiceAccount()         &&
        #                  salesTable.CurrencyCode   == _currencyCode                        &&
        #                  salesTable.SalesType      == SalesType::ItemReq;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #salesTable_SalesOrder
        #public SalesTable salesTable_SalesOrder(CustCurrencyCode _currencyCode, boolean _update = false)
        #{
        #    SalesTable  salesTable = null;
        #
        #    if (this.ProjId && this.CustAccount)
        #    {
        #        salesTable.selectForUpdate(_update);
        #
        #        select firstonly salesTable
        #            where salesTable.ProjId         == this.ProjId                          &&
        #                  salesTable.CustAccount    == this.type().custAccount()            &&
        #                  salesTable.InvoiceAccount == this.type().invoiceAccount()         &&
        #                  salesTable.CurrencyCode   == _currencyCode                        &&
        #                  salesTable.SalesStatus    <= SalesStatus::Backorder               &&
        #                  salesTable.SalesType      == SalesType::Sales;
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #startDateTime
        #TransDateTime startDateTime()
        #{
        #    return DateTimeUtil::newDateTime(this.StartDate, 0 , DateTimeUtil::getCompanyTimeZone());
        #}
      ENDSOURCE
      SOURCE #status
        #/// <summary>
        #///    Retrieves the corresponding <c>ProjStatusType</c> object based on the status of the current project record.
        #/// </summary>
        #/// <returns>
        #///    An instance of the <c>ProjStatusType</c> class.
        #/// </returns>
        #public ProjStatusType status()
        #{
        #    return ProjStatusType::construct(this);
        #}
      ENDSOURCE
      SOURCE #sumAssignedHours
        #/// <summary>
        #///    Returns the total number of hours for which a project has been assigned.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a project has been assigned.
        #/// </returns>
        #display Hours sumAssignedHours()
        #{
        #    return PSASchedEmplReservation::sumAssignedHrsPerProj(this.ProjId, true);
        #}
      ENDSOURCE
      SOURCE #sumBookedHours
        #/// <summary>
        #///    Returns the total number of hours for which a project has been booked.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a project has been booked.
        #/// </returns>
        #display Hours sumBookedHours()
        #{
        #    return this.sumHardHours() + this.sumSoftHours();
        #}
        #
      ENDSOURCE
      SOURCE #sumHardAssignedHours
        #/// <summary>
        #///    Returns the total number of hours for which a project has been hard-assigned.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a project has been hard-assigned.
        #/// </returns>
        #display Hours sumHardAssignedHours()
        #{
        #    return PSASchedEmplReservation::sumAssignedHrsPerProj(this.ProjId, false);
        #}
      ENDSOURCE
      SOURCE #sumHardHours
        #/// <summary>
        #///    Returns the total number of hours for which a resource has been hard-booked.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a resource has been hard-booked.
        #/// </returns>
        #display Hours sumHardHours()
        #{
        #    PSASchedEmplReservation emplReservation;
        #    Hours hardHrs = 0.00;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        while select emplReservation
        #            where emplReservation.ProjId == this.ProjId && emplReservation.CommitType == PSASchedCommit::Hard
        #        {
        #            hardHrs += emplReservation.hours();
        #        }
        #    }
        #
        #    return hardHrs;
        #}
        #
      ENDSOURCE
      SOURCE #sumSoftAssignedHours
        #/// <summary>
        #///    Returns the total number of hours for which a project has been soft-assigned.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a project has been soft-assigned.
        #/// </returns>
        #display Hours sumSoftAssignedHours()
        #{
        #    return PSASchedEmplReservation::sumAssignedHrsPerProj(this.ProjId, true) - PSASchedEmplReservation::sumAssignedHrsPerProj(this.ProjId, false);
        #}
      ENDSOURCE
      SOURCE #sumSoftHours
        #/// <summary>
        #///    Returns the total number of hours for which a resource has been soft-booked.
        #///    project.
        #/// </summary>
        #/// <returns>
        #///    The total number of hours for which a resource has been soft-booked.
        #/// </returns>
        #display Hours sumSoftHours()
        #{
        #    PSASchedEmplReservation emplReservation;
        #    Hours softHrs = 0.00;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        while select emplReservation
        #              where emplReservation.ProjId == this.ProjId && emplReservation.CommitType == PSASchedCommit::Soft
        #        {
        #            softHrs += emplReservation.hours();
        #        }
        #    }
        #
        #    return softHrs;
        #}
        #
        #
      ENDSOURCE
      SOURCE #supportsBudgeting
        #/// <summary>
        #///    Indicates whether the selected project or the child project has Use Budgeting option selected
        #/// </summary>
        #/// <returns>
        #///    true if budgeting is used in the project hierarchy that the project belongs to; otherwise, false.
        #/// </returns>
        #public boolean supportsBudgeting()
        #{
        #    boolean     hasUseBudgeting = false;
        #    ProjId      projId;
        #    ProjTable   tmpProjTable;
        #    ProjBudget  projBudget;
        #
        #    projId = ProjTable::getRootProjId(this.ProjId);
        #
        #    select firstonly RecId from tmpProjTable
        #        where tmpProjTable.ProjId like projId + '*' && tmpProjTable.UseBudgeting;
        #
        #    hasUseBudgeting = tmpProjTable.RecId ? true : false;
        #
        #    if (!hasUseBudgeting)
        #    {
        #        select firstonly RecId from projBudget
        #            where projBudget.RootProjId like projId + '*'
        #                && (projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Submitted
        #                    || projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved);
        #        hasUseBudgeting = projBudget.RecId != 0;
        #    }
        #
        #    return hasUseBudgeting;
        #}
      ENDSOURCE
      SOURCE #totalCost
        #// Total cost
        #AmountMST totalCost()
        #{
        #    projStatement   projStatement;
        #
        #    projStatement = projStatement::newProjTable(this);
        #
        #    return projStatement.a300_Total_Cost();
        #
        #}
      ENDSOURCE
      SOURCE #totalRevenue
        #// Total revenue
        #AmountMST totalRevenue()
        #{
        #    projStatement   projStatement;
        #
        #    projStatement = projStatement::newProjTable(this);
        #
        #    return projStatement.a100_Total_Revenue();
        #
        #}
      ENDSOURCE
      SOURCE #transferCustAccount
        #/// <summary>
        #///    Initializes fields for the current project record.
        #/// </summary>
        #/// <remarks>
        #///    This method initializes the fields by using values from the customer record. The user is prompted with the option to transfer the customer information if the setup parameter is turned on in project
        #///    setup.
        #/// </remarks>
        #void transferCustAccount()
        #{
        #    if (this.CustAccount)
        #    {
        #        if (ProjParameters::find().PromptTransferCustOnProject)
        #        {
        #            if (Box::yesNo("@SYS418" + '\n\n'+CustTable::promptAddress(this.CustAccount), DialogButton::Yes) == DialogButton::Yes)
        #            {
        #                this.initFromCustTable(CustTable::find(this.CustAccount, false));
        #            }
        #        }
        #        else
        #        {
        #            this.initFromCustTable(CustTable::find(this.CustAccount, false));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #trxExists
        #public server boolean trxExists()
        #{
        #    ProjId                  projId = this.ProjId;
        #    boolean                 ret = true;
        #
        #    ProjJournalTrans        projJournalTrans;
        #    InventJournalTrans      inventJournalTrans;
        #    ProjTransPosting        projTransPosting;
        #    SalesLine               salesLine;
        #    PurchLine               purchLine;
        #    SMAAgreementTable       smaAgreementTable;
        #    SMASubscriptionTable    smaSubscriptionTable;
        #    ProjRevenueTrans        projRevenueTrans;
        #    ProjOnAccTrans          projOnAccTrans;
        #    SMAServiceOrderLine     smaServiceOrderLine;
        #    PurchReqTable           purchReqTable;
        #    PurchRFQCaseTable       purchRFQCaseTable;
        #
        #    if (this.Header == NoYes::No)
        #    {
        #        if(((select firstonly projJournalTrans              where projJournalTrans.ProjId        == projId).RecId == 0) &&
        #           ((select firstonly ledgerJournalTrans_project    where ledgerJournalTrans_project.ProjId      == projId).RecId == 0) &&
        #           ((select firstonly inventJournalTrans            where inventJournalTrans.ProjId      == projId).RecId == 0) &&
        #           ((select firstonly projTransPosting              where projTransPosting.ProjId        == projId).RecId == 0) &&
        #           ((select firstonly salesLine                     where salesLine.ProjId               == projId).RecId == 0) &&
        #           ((select firstonly purchLine                     where purchLine.ProjId               == projId
        #                                                                && !purchLine.IsDeleted                    ).RecId == 0) &&
        #           ((select firstonly smaAgreementTable             where smaAgreementTable.ProjId       == projId).RecId == 0) &&
        #           ((select firstonly smaSubscriptionTable          where smaSubscriptionTable.ProjId    == projId).RecId == 0) &&
        #           ((select firstonly projRevenueTrans              where projRevenueTrans.ProjId        == projId).RecId == 0) &&
        #           ((select firstonly projOnAccTrans                where projOnAccTrans.ProjID          == projId).RecId == 0) &&
        #           ((select firstonly smaServiceOrderLine           where smaServiceOrderLine.ProjId     == projId).RecId == 0) &&
        #           ((select firstonly purchReqTable                 where purchReqTable.ProjId           == projId).RecId == 0) &&
        #           ((select firstonly purchRFQCaseTable             where purchRFQCaseTable.ProjId       == projId).RecId == 0) &&
        #           (!this.AssetId))
        #        {
        #            ret = false;
        #        }
        #    }
        #    else
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #type
        #/// <summary>
        #///    Creates the corresponding instance of the <c>ProjTableType</c> class based on the value of the type
        #///    field in the current project record.
        #/// </summary>
        #/// <returns>
        #///    A <c>ProjtableType</c> object.
        #/// </returns>
        #// AOSRunMode::Called
        #public ProjTableType type()
        #{
        #    return ProjTableType::construct(this);
        #}
      ENDSOURCE
      SOURCE #update
        #/// <summary>
        #/// Overridden method to perform custom logic.
        #/// </summary>
        #/// <param name="_skipSyncTrigger">
        #/// When set to true, it will not send updated transactions to the synchronization store.
        #/// </param>
        #/// <param name="_skipReservationUpdate">
        #/// Determines whether related Reservation records will be updated along with the Task update.
        #/// </param>
        #/// <remarks>
        #/// Passing TRUE to the _skipReservationUpdate argument may cause the Reservation data to be misaligned
        #/// with the Task data because reactive update of Reservation data will be skipped.
        #/// </remarks>
        #public void update(boolean _skipSyncTrigger = false, boolean _skipReservationUpdate = false)
        #{
        #    RecVersion          rv;
        #    ProjTable           projTable;
        #    boolean             isIntegrated;
        #    SyncProjTable       syncProjTable;
        #    SyncApp syncApp;
        #    SyncStoreManager    objSyncStore         = new SyncStoreManager();
        #    ProjTable           thisOrig             = this.orig();
        #    boolean             calendarChanged      = (this.psaSchedCalendarId != thisOrig.psaSchedCalendarId);
        #    boolean             projectNameChanged   = (this.Name != thisOrig.Name);
        #    boolean             plannedDatesChanged  = (this.psaSchedStartDate != thisOrig.psaSchedStartDate)
        #                                                || (this.psaSchedEndDate != thisOrig.psaSchedEndDate);
        #    boolean             effortChanged        = (this.psaSchedEffort != thisOrig.psaSchedEffort);
        #    boolean             durationChanged      = (this.psaSchedDuration != thisOrig.psaSchedDuration);
        #
        #    // Get the old version of the record before the update
        #    rv = thisOrig.RecVersion;
        #
        #    // Check if project is an integrated project
        #    if (SyncProjTable::checkIsIntegrated(this.ProjId))
        #    {
        #        isIntegrated = true;
        #    }
        #
        #    this.status().update();
        #
        #    ttsbegin;
        #
        #    // If the project has changed and the project is integrated with Project server
        #    // send the update transaction that occured to the synchronization store
        #    if (!_skipSyncTrigger && isIntegrated && this.RecVersion != rv)
        #    {
        #        projTable = ProjTable::find(this.ProjId, true);
        #        projTable.SyncVersion = projTable.SyncVersion + 1;
        #        projTable.doUpdate();
        #
        #        // Get all the enabled applications integrated with this project
        #        while select forupdate syncProjTable where syncProjTable.ProjId == this.ProjId
        #        join syncApp
        #            where syncApp.AppId == syncProjTable.AppId
        #            && syncApp.Enabled == NoYes::Yes
        #        {
        #            syncProjTable.update();
        #            // Send the update transaction for this project to the sync store
        #            objSyncStore.sendProjectTransToSyncStore(projTable, syncProjTable.AppId, SyncAction::Update, SyncAction::Update, this.Name, strFmt("@SYS114836",this.ProjId), false, false);
        #        }
        #    }
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) &&
        #        this.ProjInvoiceProjId != thisOrig.ProjInvoiceProjId &&
        #        (this.Type == ProjType::FixedPrice
        #        || this.Type == ProjType::TimeMaterial))
        #    {
        #        PSAProjFundingSourceRetain::deleteFromProjFundingSourceRetain(this.ProjId);
        #        PSAProjFundingSourceRetain::initFromProjFundingSource(this.ProjInvoiceProjId,this.ProjId);
        #    }
        #
        #    if (calendarChanged)
        #    {
        #        this.updateTaskCalendars();
        #    }
        #
        #    if (plannedDatesChanged || effortChanged || durationChanged)
        #    {
        #        HierarchyTreeTable::projSetRootTaskScheduleAttributes(this.RecId,
        #                                                              tableNum(ProjTable),
        #                                                              this.psaSchedEffort,
        #                                                              this.psaSchedStartDate,
        #                                                              this.psaSchedEndDate,
        #                                                              this.psaSchedDuration,
        #                                                              _skipReservationUpdate);
        #    }
        #
        #    if (projectNameChanged)
        #    {
        #        HierarchyTreeTable::projSetHierarchyRootTaskName(this.RecId, this.Name, tableNum(ProjTable));
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateBudgetControls
        #public void updateBudgetControls(ProjId _alternateBudgetProject)
        #{
        #    ProjTable                 projTabletemp;
        #    ProjBudgetUserGroupOption projBudgetUserGroupOption;
        #
        #    delete_from projBudgetUserGroupOption where projBudgetUserGroupOption.ProjOrProjGroup == this.ProjId && this.UseAlternateProject == NoYes::Yes;
        #
        #    if (_alternateBudgetProject)
        #    {
        #        projTabletemp = ProjTable::find(_alternateBudgetProject, true);
        #
        #        ttsbegin;
        #            this.ProjBudgetaryControlOn = projTabletemp.ProjBudgetaryControlOn;
        #            this.ProjBudgetOverrunOption = projTabletemp.ProjBudgetOverrunOption;
        #            this.ProjBudgetInterval = projTabletemp.ProjBudgetInterval;
        #            this.update();
        #        ttscommit;
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #updateBySyncService
        #boolean updateBySyncService(SyncAppId _sourceAppId, SyncProjUID _projUID, RecVersion _recVersion)
        #{
        #    SyncApp syncApp;
        #    ProjTable projTable;
        #    SyncProjTable syncProjTable;
        #
        #    // Perform concurrency checks here to make sure the project has not been updated by someone else
        #    if(_recVersion != -1)
        #    {
        #        projTable = ProjTable::find(this.ProjId);
        #        if(projTable.RecVersion != _recVersion)
        #            return false;
        #    }
        #
        #    // Allow update if the project is integrated to an enabled application
        #    ttsbegin;
        #    syncApp = SyncApp::find(_sourceAppId);
        #    syncProjTable = SyncProjTable::find(this.ProjId, _sourceAppId, true);
        #    if(syncProjTable && syncApp && syncApp.Enabled)
        #    {
        #        this.update(true);
        #
        #        // update the SyncProjTable record
        #        syncProjTable.Proj_UID = _projUID;
        #        syncProjTable.update();
        #    }
        #    ttscommit;
        #
        #    return true;
        #
        #}
        #
        #
      ENDSOURCE
      SOURCE #updateHierarchy
        #void updateHierarchy()
        #{
        #    Hierarchy           hierarchy = null;
        #    HierarchyLinkTable  hierarchyLinkTable = null;
        #    HierarchyTreeTable  hierarchyTreeTable = null;
        #    str name;
        #
        #    ttsbegin;
        #
        #    hierarchyLinkTable = HierarchyLinkTable::findRefTableRecId(tableNum(ProjTable), this.RecId, true);
        #    name = strLTrim(strRTrim(this.ProjId));
        #
        #    if (hierarchyLinkTable)
        #    {
        #       //update HierarchyLinkTable
        #        hierarchy = Hierarchy::find(hierarchyLinkTable.HierarchyId, true);
        #
        #        if (hierarchy)
        #        {
        #            hierarchy.Name= name;
        #            hierarchy.doUpdate();
        #        }
        #
        #        //update HierarchyTreeTable
        #        hierarchyTreeTable.selectForUpdate(true);
        #
        #        select firstonly hierarchyTreeTable
        #            where   hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId &&
        #                    hierarchyTreeTable.ParentElementNumber == '';
        #
        #        if (hierarchyTreeTable)
        #        {
        #            hierarchyTreeTable.Name = name;
        #            hierarchyTreeTable.doUpdate();
        #        }
        #    }
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #updateProjectDuration
        #// Description    :<update the duration when date is changed >
        #// Parameters     :< Description of parameters >
        #// Return value   :< Description of return value >
        #// Exceptions     :< Exeptions the method could throw >
        #
        #public RealBase updateProjectDuration(CalendarId _calendarId,TransDate _startDate,TransDate _endDate)
        #{
        #    TransDate         tCalDate = _startDate;
        #    RealBase          rDuration;
        #
        #    while(tCalDate<=_endDate)
        #    {
        #        if(WorkCalendarDate::isDateOpen(_calendarId,tCalDate))
        #            rDuration++;
        #        tCalDate++;
        #    }
        #
        #    if(rDuration == 0)
        #    {
        #          rDuration++;
        #    }
        #    return rDuration;
        #}
      ENDSOURCE
      SOURCE #updateSchedulingStatus
        #/// <summary>
        #/// Updates project scheduling status
        #/// </summary>
        #/// <param name="_hasWBS">
        #/// Whether this project has WBS
        #/// </param>
        #public void updateSchedulingStatus(boolean _hasWBS = false)
        #{
        #    if (this.ProjId)
        #    {
        #        this.selectForUpdate(true);
        #
        #        ttsbegin;
        #        //---if this project has WBS
        #        if (_hasWBS)
        #        {
        #            this.psaSchedScheduled = ProjReserveResource::combineStatus(
        #                ProjReserveResource::getProjStatus(this.ProjId),
        #                PSAResourceSchedulingBL::GetPSAScheduleStatus(this.psaSchedEffort,
        #                                                              PSASchedEmplReservation::sumAssignedHrsPerProj(this.ProjId)));
        #        }
        #        else
        #        {
        #            this.psaSchedScheduled = ProjReserveResource::getProjStatus(this.ProjId);
        #            this.psaSchedEffort    = PSASchedEmplReservation::reservedProj(this.ProjId, "", "");
        #        }
        #        this.update();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateSubProjectCalendar
        #/// <summary>
        #/// Update the PSASchedCalendarId for all the subprojects
        #/// </summary>
        #
        #public void updateSubProjectCalendar()
        #{
        #    ProjTable  locProjTable;
        #
        #    if (ProjTable::child(this.ProjId))
        #    {
        #        ttsbegin;
        #
        #        update_recordset locProjTable
        #            setting psaSchedCalendarId  = this.psaSchedCalendarId
        #            where locProjTable.ParentId == this.ProjId;
        #
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateTaskCalendars
        #private void updateTaskCalendars()
        #{
        #    PSAActivitySetup   psaActivitySetup;
        #    smmActivities      smmActivities;
        #    HierarchyTreeTable hierarchyTreeTable;
        #    HierarchyIdBase    localHierarchyid;
        #    CalendarId         calendarId          = this.psaSchedCalendarId;
        #
        #    localHierarchyid = HierarchyLinkTable::findRefTableRecId(tableNum(ProjTable), this.RecId).HierarchyId;
        #
        #    update_recordset psaActivitySetup
        #       setting CalendarId = calendarId
        #    join smmActivities
        #        where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
        #        join hierarchyTreeTable
        #            where smmActivities.RecId == hierarchyTreeTable.RefRecId
        #                  && hierarchyTreeTable.HierarchyId == localHierarchyid;
        #
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #/// <summary>
        #/// Determines whether the current record is valid and ready to be deleted from the database.
        #/// </summary>
        #/// <param name="calledFromStatus">
        #/// A Boolean value that indicates whether the method will also validate based on project status and
        #/// type; optional.
        #/// </param>
        #/// <returns>
        #/// true if the record is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method does not delete a project that still has subscription with fee transactions associated
        #/// with it, or projects with sub-projects.
        #/// </remarks>
        #public boolean validateDelete(boolean calledFromStatus = false)
        #{
        #    if (!SMASubscriptionTable::projectCanbeDeleted(this.ProjId))
        #    {
        #        // Subscriptions with fee transactions exist on project %1
        #        return checkFailed(strFmt("@SYS84369", this.ProjId));
        #    }
        #
        #
        #    if (! calledFromStatus)
        #    {
        #        return this.status().validateDelete();
        #    }
        #
        #    return super();
        #}
      ENDSOURCE
      SOURCE #validateField
        #/// <summary>
        #///    Determines whether the field specified by the <paramref name="fielded" /> parameter is valid.
        #/// </summary>
        #/// <param name="fieldId">
        #///    The field ID of the field to validate.
        #/// </param>
        #/// <returns>
        #///    true if the field is valid; otherwise, false.
        #/// </returns>
        #boolean validateField(FieldId fieldId)
        #{
        #    boolean                 ret;
        #    DictField               dictField;
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    CustTable               custTable;
        #    int                     integerValue;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) && !this.LogisticsPostalAddressMap::validatePostalCode(fieldId))
        #    {
        #        return false;
        #    }
        #
        #    dictField = new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId));
        #
        #    ret       = super(fieldId);
        #
        #    switch (fieldId)
        #    {
        #        case fieldNum(ProjTable, Format) :
        #            if ((strLen(this.ProjId) + strLen(this.Format)) > dictField.stringLen())
        #            {
        #                ret = ret && checkFailed("@SYS50459");
        #            }
        #
        #            if (ProjTable::projIdLastSon(this.ProjId))
        #            {
        #                if (this.orig().Format != this.Format)
        #                {
        #                    ret = ret && checkFailed("@SYS50787");
        #                }
        #            }
        #
        #            if (ret && this.Format && !NumberSeq::formatCountSymbols(this.Format))
        #            {
        #                // Incorrect format, the character # must be included in the format
        #                ret = ret && checkFailed("@SYS67825");
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, wipProject) :
        #            if ((this.wipProject) && (ProjControlPeriodTable::eliminated(this.wipProject, ProjWIPTable::find(this.wipProject).PeriodId)))
        #            {
        #                ret = ret && checkFailed("@SYS107846");
        #            }
        #
        #            if (this.wipProject && this.ProjGroupId && (ProjTable::find(this.wipProject).ProjGroupId != this.ProjGroupId))
        #            {
        #                ret = ret && checkFailed("@SYS55596");
        #            }
        #
        #            if (this.wipProject && this.ProjGroupId && (!ProjGroup::find(this.ProjGroupId).ProjType == ProjType::FixedPrice))
        #            {
        #                ret = ret && checkFailed("@SYS55606");
        #            }
        #
        #            if (this.orig().wipProject && (this.orig().wipProject != this.wipProject && this.orig().wipProject == this.orig().ProjId))
        #            {
        #                if (ProjTable::existWIPProject(this.orig().wipProject))
        #                {
        #                    ret = ret && checkFailed(strFmt("@SYS91836",tableNum(ProjTable)));
        #                }
        #
        #                select projControlPeriodTable
        #                    where projControlPeriodTable.ProjId == this.orig().wipProject;
        #                if (projControlPeriodTable)
        #                {
        #                    ret = ret && checkFailed(strFmt("@SYS91835",tableId2pname(tableNum(ProjControlPeriodTable))));
        #                }
        #            }
        #
        #            if (ret && this.orig().wipProject != this.wipProject)
        #            {
        #                ret = ProjWIPTable::checkRemoveProject(this.ProjId);
        #            }
        #
        #            break;
        #
        #        case fieldNum(ProjTable, ProjGroupId) :
        #            if (this.ProjGroupId && (ProjGroup::find(this.ProjGroupId).ProjType != this.Type))
        #            {
        #                // Check RecId so ProjGroup can be changed on create
        #                if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)) || this.RecId)
        #                {
        #                    ret = checkFailed("@SYS55607");
        #                }
        #            }
        #
        #            if (this.wipProject && this.ProjGroupId && (this.wipProject != this.ProjId) && ProjTable::find(this.wipProject).ProjGroupId != this.ProjGroupId)
        #            {
        #                ret = checkFailed("@SYS55596");
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, Template) :
        #            if (this.Template && this.wipProject)
        #            {
        #                if (this.wipProject != this.ProjId)
        #                {
        #                    return checkFailed("@SYS58804");
        #                }
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, CustAccount) :
        #            if(this.RecId != 0)
        #            {
        #                ret = ret & this.checkAccount();
        #            }
        #
        #            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        #            {
        #                custTable = CustTable::find(this.CustAccount);
        #                if (custTable.mcrMergedParent)
        #                {
        #                    ret = checkFailed(strFmt("@MCR12337",this.CustAccount,custTable.mcrMergedParent));
        #                }
        #            }
        #            break;
        #        case fieldNum(ProjTable,AssetId) :
        #            if (this.AssetId)
        #            {
        #                if(!AssetTable::find(this.AssetId).hasOpenAssetBook())
        #                {
        #                //This should not fail validation, simply warn the user
        #                    info("@SYS116149");
        #                    ret = true;
        #                }
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, AlternateBudgetProject) :
        #            if(this.AlternateBudgetProject)
        #            {
        #                ret = this.checkAlternateProject();
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, BankDocumentType):
        #            if (this.orig().BankDocumentType != this.BankDocumentType)
        #            {
        #                if (this.orig().isBankDocumentCreated())
        #                {
        #                    // Bank document type could not be changed.
        #                    ret = checkFailed("@SYS316266");
        #                }
        #                else
        #                {
        #                    if (this.BankDocumentType == BankLGDocumentType::LetterOfGuarantee)
        #                    {
        #                        if (BankLGFeatureChecker::checkBankLGEnabled())
        #                        {
        #                            if (!this.orig().type().ctrlBankDocumentType(this.BankDocumentType))
        #                            {
        #                                // It is not allowed to set to this type at the current status.
        #                                ret = checkFailed("@SYS318015");
        #                            }
        #                        }
        #                        else
        #                        {
        #                            // Letter of Guarantee feature is not enabled.
        #                            ret = checkFailed(
        #                                "@SYS318007",
        #                                '',
        #                                SysInfoAction_Formrun::newFormnameControlnameDesc(
        #                                    formStr(BankParameters),
        #                                    formControlStr(BankParameters, BankLG_BankLGEnable),
        #                                    "@SYS24215"));
        #                        }
        #                    }
        #                }
        #            }
        #            break;
        #
        #        case fieldNum(ProjTable, WorkerResponsible) :
        #            ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsible);
        #            break;
        #
        #        case fieldNum(ProjTable, WorkerResponsibleFinancial) :
        #            ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsibleFinancial);
        #            break;
        #
        #        case fieldNum(ProjTable, WorkerResponsibleSales) :
        #            ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsibleSales);
        #            break;
        #
        #        case fieldNum(ProjTable, MinTimeIncrement):
        #            integerValue = real2int(this.MinTimeIncrement);
        #
        #            if (integerValue != 0)
        #            {
        #                return checkFailed(strFmt("@SYS345061"));
        #            }
        #            break;
        #        // validate PurchReq validation fields
        #        case fieldNum(ProjTable,psapReqControl):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3))
        #                && !PSAParameters::find().ReqControlProjectOverride
        #                && (this.psapReqControl != PSAParameters::find().ReqControl))
        #            {
        #                ret = checkFailed("@PSA2233");
        #            }
        #
        #            break;
        #
        #        case fieldNum(ProjTable,psapReqItemValidate):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3))
        #               && !PSAParameters::find().ReqItemProjectOverride
        #               && (this.psapReqItemValidate != PSAParameters::find().ReqItemValidate))
        #            {
        #                ret = checkFailed("@PSA2234");
        #            }
        #
        #            break;
        #
        #        case fieldNum(ProjTable,psapReqHourValidate):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3))
        #                && !PSAParameters::find().ReqHourProjectOverride
        #                && (this.psapReqHourValidate != PSAParameters::find().ReqHourValidate))
        #            {
        #                ret = checkFailed("@PSA2235");
        #            }
        #
        #            break;
        #
        #        // Retained percent must ragne from 1% to 100%
        #        // At most one project can be set 'Include lower levels' checked
        #        // on the chain from root project to leaf project >
        #
        #        case fieldNum(ProjTable, psaRetainPercent):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3))
        #                && this.psaRetainPercent != 0
        #                && (this.psaRetainPercent < 1 || this.psaRetainPercent > 100))
        #            {
        #                    ret = checkFailed("@PSA2738");
        #            }
        #
        #            break;
        #
        #        case fieldNum(ProjTable,psaSchedStartDate):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                if((this.psaSchedStartDate && this.psaSchedEndDate) && this.psaSchedStartDate > this.psaSchedEndDate)
        #                {
        #                    ret = checkFailed("@PSA11100");
        #                }
        #                if(!WorkCalendarDate::isDateOpen(this.psaSchedCalendarId,this.psaSchedStartDate))
        #                {
        #                    ret = checkFailed("@PSA11116");
        #                }
        #            }
        #            break;
        #        case fieldNum(ProjTable,psaSchedEndDate):
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #            {
        #                if((this.psaSchedStartDate && this.psaSchedEndDate) && this.psaSchedEndDate < this.psaSchedStartDate)
        #                {
        #                    ret = checkFailed("@SYS30562");
        #                }
        #                if(!WorkCalendarDate::isDateOpen(this.psaSchedCalendarId,this.psaSchedEndDate))
        #                {
        #                    ret = checkFailed("@PSA11116");
        #                }
        #            }
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateProjId
        #/// <summary>
        #///    Validates the format of the project ID.
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID to validate.
        #/// </param>
        #/// <returns>
        #///    true if the project ID is valid; otherwise, false.
        #/// </returns>
        #public boolean validateProjId(ProjId _projId)
        #{
        #    NumberSequenceFormat    subFormat;
        #    Counter                 idx;
        #    boolean                 validate = true;
        #
        #    #define.SymbolNumerals('#')
        #    #define.SymbolAlphabets('&')
        #
        #    if (this.ParentId)
        #    {
        #        if (this.ParentId != subStr(_projId, 1, strLen(this.ParentId)))
        #        {
        #            validate = false;
        #        }
        #        else
        #        {
        #            subFormat = ProjTable::find(this.ParentId).Format;
        #
        #            for (idx = 1; idx <= strLen(subFormat); idx++)
        #            {
        #                if (subStr(subFormat, idx, 1) != #SymbolNumerals && subStr(subFormat, idx, 1) != #SymbolAlphabets)
        #                {
        #                    if (subStr(subFormat, idx, 1) != subStr(_projId, (strLen(this.ParentId) + idx), 1))
        #                    {
        #                        validate = false;
        #                    }
        #                }
        #            }
        #
        #            if (strLen(subFormat) != (strLen(_projId) - strLen(this.ParentId)))
        #            {
        #                validate = false;
        #            }
        #        }
        #    }
        #
        #    if (validate)
        #    {
        #        this.ProjId = _projId;
        #    }
        #
        #    return validate;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #/// <summary>
        #///    Determines whether the current record is valid and ready to be written to the database.
        #/// </summary>
        #/// <param name="_calledFromStatus">
        #///    A Boolean value that indicates whether the method will also validate based on project status and
        #///    type; optional.
        #/// </param>
        #/// <returns>
        #///    true if the record is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the current project is a subproject, this method makes sure that a valid value is in the format
        #///    field for the parent project. It also makes sure that the project end date is not earlier than the
        #///    project start date. It also performs some other validations based on the status and type of the
        #///    current project.
        #/// </remarks>
        #public boolean validateWrite(boolean _calledFromStatus = false)
        #{
        #    boolean ret;
        #    DictField               dictField;
        #    ProjForecastEmpl        projForecastEmpl;
        #
        #    dictField = new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId));
        #    ret = super();
        #
        #    if (ret)
        #    {
        #        ret = this.validateWriteServer(_calledFromStatus);
        #
        #        if (ret && !this.isTmp() && this.ParentId && !ProjTable::find(this.ParentId).Format)
        #        {
        #            // Project cannot be created, as parent project '%1' does not contain a format.
        #            ret = checkFailed(strFmt("@SYS67673", this.ParentId));
        #        }
        #
        #        if (ret && this.Format && !NumberSeq::formatCountSymbols(this.Format))
        #        {
        #            // Incorrect format, the character  must be included in the format
        #            ret = checkFailed("@SYS67825");
        #        }
        #
        #        if (ret && this.Format && (strLen(this.ProjId) + strLen(this.Format)) > dictField.stringLen())
        #        {
        #            ret = ret && checkFailed("@SYS50459");
        #        }
        #
        #        if (ret && this.StartDate && this.EndDate)
        #        {
        #            if (this.EndDate < this.StartDate)
        #            {
        #                // End date must come after start date.
        #                ret = checkFailed("@SYS21592");
        #            }
        #        }
        #        if (ret && this.StartDate)
        #        {
        #            select firstOnly RecId from  projForecastEmpl
        #                where projForecastEmpl.ProjId == this.ProjId
        #                      && projForecastEmpl.ProjForecastBudgetType == ProjForecastBudgetType::None
        #                      && (projForecastEmpl.SchedFromDate < this.StartDate
        #                      || ((projForecastEmpl.SchedToDate != dateNull())
        #                      &&   projForecastEmpl.SchedToDate < this.StartDate));
        #
        #            if(projForecastEmpl.RecId)
        #            {
        #                ret=checkFailed(strFmt("@SYS107211",this.ProjId));
        #            }
        #        }
        #
        #        //check this on creation only
        #        if(this.RecId == 0)
        #        {
        #            ret = ret && this.checkAccount();
        #        }
        #
        #        // Validation of Projected end date shouldn't be before Projected start date and actual start date
        #        if(ret && (this.ProjectedEndDate && !this.StartDate && this.ProjectedStartDate))
        #        {
        #            if(this.ProjectedEndDate < this.ProjectedStartDate)
        #                ret = checkFailed("@SYS130588");
        #        }
        #
        #        if(ret && (this.ProjectedEndDate && !this.ProjectedStartDate && this.StartDate))
        #        {
        #            if(this.ProjectedEndDate < this.StartDate)
        #                ret = checkFailed("@SYS130589");
        #        }
        #
        #        if(ret && this.ProjectedEndDate && this.StartDate && this.ProjectedStartDate)
        #        {
        #            if(this.ProjectedEndDate < this.ProjectedStartDate)
        #                ret = checkFailed("@SYS130588");
        #            if(this.ProjectedEndDate < this.StartDate)
        #                ret = checkFailed("@SYS130589");
        #        }
        #
        #        if (ret && this.psaSchedIgnoreCalendar && !this.psaSchedCalendarId)
        #        {
        #            ret = checkFailed(strFmt("@PSA3435", strFmt("%1 %2", "@SYS4534", this.ProjId)));
        #        }
        #
        #        // Validation of Extension date shouldn't be before Actual start date or Projected start date
        #        if(ret && ((this.ExtensionDate && this.StartDate) || (this.ExtensionDate && this.ProjectedStartDate)))
        #            if(this.ExtensionDate < this.StartDate || this.ExtensionDate < this.ProjectedStartDate)
        #                ret = checkFailed("@SYS130590");
        #
        #        // Validation of Extension date shouldn't be before Projected end date
        #        if(ret && this.ExtensionDate && this.ProjectedEndDate && this.ExtensionDate < this.ProjectedEndDate)
        #            ret = checkFailed("@SYS130591");
        #
        #        if(ret && this.UseAlternateProject && this.AlternateBudgetProject == '')
        #            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(ProjTable), fieldNum(ProjTable, AlternateBudgetProject))));
        #
        #        //  prevent task be at the top level
        #        // and parent can not be a summary
        #        if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) && this.psaProjTask == PSAProjTask::Task)
        #        {
        #            if (!this.ParentId)
        #            {
        #                return checkFailed("@PSA24");
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateWriteServer
        #private server boolean validateWriteServer(boolean _calledFromStatus)
        #{
        #    boolean ret = true;
        #
        #    if (!_calledFromStatus)
        #    {
        #        ret = this.status().validateWrite();
        #    }
        #
        #    if (ret && this.ProjInvoiceProjId && !ProjInvoiceTable::exist(this.ProjInvoiceProjId))
        #    {
        #        // Project cannot be created, as the associated invoice project '%1' no longer exists.
        #        ret = checkFailed(strFmt("@SYS96342", this.ProjInvoiceProjId));
        #    }
        #
        #    if (ret && this.ProjGroupId && !ProjGroup::exist(this.ProjGroupId))
        #    {
        #        // Project cannot be created, as the associated project group '%1' no longer exists.
        #        ret = checkFailed(strFmt("@SYS98161", this.ProjGroupId));
        #    }
        #
        #    // Validate project server properties if the project is integrated with project server
        #    if(ret)
        #    {
        #         ret = ProjTable::validateProjServerProperties(this);
        #    }
        #
        #    ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsible);
        #    ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsibleFinancial);
        #    ret = ret && ProjWorkerValidation::isWorkerInCurrentCompany(this.WorkerResponsibleSales);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #activityExists
        #/// <summary>
        #///    Determines whether a project activity exists for the project passed in as a parameter.
        #/// </summary>
        #/// <param name="projId">
        #///    The ID of the project.
        #/// </param>
        #/// <returns>
        #///    true if a project activity exists; otherwise, false.
        #/// </returns>
        #public static boolean activityExists(ProjId projId)
        #{
        #    return HierarchyTreeTable::associationNonRootExist(ProjTable::find(projId));
        #}
        #
      ENDSOURCE
      SOURCE #ancestors
        #static container ancestors(ProjId _projId)
        #{
        #    container ret;
        #    ProjTable projTable;
        #    ProjId    projId;
        #
        #    //return all the ancestors(parents, grandParants...) of the given projId
        #    projId= _projId;
        #    projTable = ProjTable::find(projId);
        #    while (projTable.ParentId)
        #    {
        #        ret += projTable.ParentId;
        #        projId=projTable.ParentId;
        #        projTable = ProjTable::find(projId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #/// <summary>
        #///    Checks whether the project passed in as a parameter exists.
        #/// </summary>
        #/// <param name="projId">
        #///    The project ID.
        #/// </param>
        #/// <returns>
        #///    true if the project exists; otherwise, false.
        #/// </returns>
        #static boolean checkExist(ProjId projId)
        #{
        #    if (projId && !ProjTable::exist(projId))
        #    {
        #        return checkFailed(strFmt(ProjTable::txtNotExist(), projId));
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkRequireActivity
        #static RequireActivity checkRequireActivity(ProjId _projId, TableId _tableId, ProjCategoryId _categoryId ='')
        #{
        #    ProjCategory    projCategory;
        #    boolean ret = false;
        #
        #    if (_projId)
        #    {
        #        switch (_tableId)
        #        {
        #            case tableNum(ProjForecastEmpl) :  // Hour 579
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityHourForecast;
        #                break;
        #
        #            case tableNum(ProjForecastCost) :  // Expense 578
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityExpenseForecast;
        #                break;
        #
        #            case tableNum(ForecastSales) :  // Item 144
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityItemForecast;
        #                break;
        #
        #            case tableNum(ProjEmplTrans) :  // Hour 587
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityHourTrx;
        #                break;
        #
        #            case tableNum(ProjCostTrans) :  // Expense journal - 586
        #            case tableNum(TrvExpTrans):     // Expense transaction - 487
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityExpenseTrx;
        #                break;
        #
        #            case tableNum(ProjItemTrans) :  // Item 1286
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityItemTrx;
        #                break;
        #
        #            case tableNum(TSTimesheetLine) :  // Hour 4624
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityHourTrx;
        #                break;
        #
        #            case tableNum(TSTimesheetFavorites) :  // Hour 4622
        #                ret = (select projTable where projTable.ProjId == _projId).RequireActivityHourTrx;
        #                break;
        #
        #            case tableNum(VendInvoiceInfoLine_Project) :
        #                if (_categoryId != '')
        #                {
        #                    projCategory = ProjCategory::Find(_categoryId);
        #                    Switch (projCategory.CategoryType)
        #                    {
        #                        case ProjCategoryType::Hour :
        #                            ret = (select projTable where projTable.ProjId == _projId).RequireActivityHourTrx;
        #                            break;
        #                        case ProjCategoryType::Cost :
        #                            ret = (select projTable where projTable.ProjId == _projId).RequireActivityExpenseTrx;
        #                            break;
        #                        case ProjCategoryType::Item :
        #                            ret = (select projTable where projTable.ProjId == _projId).RequireActivityItemTrx;
        #                            break;
        #                    }
        #                }
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #child
        #/// <summary>
        #///    Checks whether the specified project is a subproject.
        #/// </summary>
        #/// <param name="_projId">
        #///    The ID of the project.
        #/// </param>
        #/// <returns>
        #///    true if the project is a subproject; otherwise, false.
        #/// </returns>
        #static boolean child(ProjId _projId)
        #{
        #    return (select projTable where projTable.ParentId == _projId).RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #createCategoryConnection
        #public static boolean createCategoryConnection()
        #{
        #    ProjParameters      projParameters  = ProjParameters::find();
        #
        #    if (projParameters.ValidationProjCategory == ProjValParameter::None)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #createWorkerConnection
        #/// <summary>
        #/// Determines whether to validate the association of a worker with a project.
        #/// </summary>
        #/// <param name="_workerRecId">
        #/// The record ID of the worker record.
        #/// </param>
        #/// <param name="_isIntercompany">
        #/// True if transaction is an intercompany transaction.
        #/// </param>
        #/// <returns>
        #/// true if the association should be validated; otherwise, false.
        #/// </returns>
        #public static boolean createWorkerConnection(ProjWorkerRecId _workerRecId
        #                                             ,boolean _isIntercompany = false)
        #{
        #    ProjParameters      projParameters  = ProjParameters::find();
        #
        #    if (projParameters.ValidationEmplProj == ProjValParameter::None)
        #    {
        #        return false;
        #    }
        #
        #    if (!_workerRecId)
        #    {
        #        return false;
        #    }
        #
        #    // If validation is from an intercompany trx, ignore the worker setup
        #    if(_isIntercompany)
        #    {
        #        return true;
        #    }
        #
        #    if (ProjWorkerSetup::findByWorker(_workerRecId,CompanyInfo::findDataArea(curext()).RecId).ValidateProjEmpl == NoYes::No)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #editSubProjects
        #/// <summary>
        #///    Updates a field in subprojects that are children of the current project record.
        #/// </summary>
        #/// <param name="_parentProject">
        #///    The ID of the parent project.
        #/// </param>
        #/// <param name="_fieldId">
        #///    The ID for the field in the <c>ProjTable</c> table to update.
        #/// </param>
        #/// <param name="_newValue">
        #///    The new value to update the field ID in the subprojects.
        #/// </param>
        #/// <param name="_editAll">
        #///    A Boolean value that indicates whether all subprojects or only projects that have the same value as
        #///    the original value of the current parent project will be updated.
        #/// </param>
        #/// <param name="_formerValue">
        #///    The original <c>fieldId</c> value for the parent project; optional.
        #/// </param>
        #/// <param name="_arrayIdx">
        #///    The index of the element to update if the <paramref name="_fieldId" /> is an array field; optional.
        #/// </param>
        #/// <remarks>
        #///    This method either updates the field in all the subprojects or only in subprojects that have the
        #///    same original value as the original value in current parent project.
        #/// </remarks>
        #server static void editSubProjects(
        #    ProjId                  _parentProject,
        #    FieldId                 _fieldId,
        #    anytype                 _newValue,
        #    ProjTableEditSubProj    _editAll,            // If false, only projects with the same former value will be changed.
        #    anytype                 _formerValue = null,
        #    ArrayIdx                _arrayIdx = 0        // Used if field is an array (ie. sortingId or Dimension)
        #)
        #{
        #    //
        #    // Update the specified field with the new value, for all subprojects.
        #    // If _formerValue is set the value must match. If not the field is not changed.
        #    // If field is an array (ie. sortingId or Dimension), the index to be changed,
        #    // must also be provided.
        #    //
        #    // Not all field can be changed "tree-wise". See below.
        #    //
        #    ProjTable projTable = null;
        #
        #    // Check if field is "tree-editable"
        #    if (_fieldId == fieldNum(ProjTable, ProjGroupId)       ||
        #        _fieldId == fieldNum(ProjTable, ProjId)            ||
        #        _fieldId == fieldNum(ProjTable, ProjLedgerPosting) ||
        #        _fieldId == fieldNum(ProjTable, Created)           ||
        #        _fieldId == fieldNum(ProjTable, ParentId)          ||
        #        _fieldId == fieldNum(ProjTable, Format)            ||
        #        _fieldId == fieldNum(ProjTable, Status)            ||
        #        _fieldId == fieldNum(ProjTable, wipProject)        ||
        #        _fieldId == fieldNum(ProjTable, Type)              ||
        #        _fieldId == fieldNum(ProjTable, Template)          ||
        #        _fieldId == fieldNum(ProjTable, JobId)             ||
        #        _fieldId == fieldNum(ProjTable, JobPayType)
        #       )
        #    {
        #        throw error("@SYS57892");
        #    }
        #
        #    if (_arrayIdx > 3 || (_arrayIdx &&
        #                          !(_fieldId == fieldNum(ProjTable, SortingId))
        #                         )
        #       )
        #    {
        #        // Must be of type Dimension or sortingId, and have length <= 3
        #        throw error("@SYS57892");
        #    }
        #
        #    ttsbegin;
        #
        #    // Find subprojects
        #    while select forupdate projTable where projTable.ParentId == _parentProject
        #    {
        #
        #        if (_arrayIdx)
        #        {
        #            if (_fieldId == fieldNum(ProjTable,SortingId))
        #            {
        #                if (_editAll == ProjTableEditSubProj::All || ((projTable.SortingId[_arrayIdx] == _formerValue) && _editAll == ProjTableEditSubProj::Same))
        #                {
        #                    projTable.SortingId[_arrayIdx] = _newValue;
        #                    if (projTable.validateWrite())
        #                        projTable.update();
        #                }
        #            }
        #        }
        #        else
        #        {
        #            // Update field if _editAll, or the former value match this value
        #            if (_editAll == ProjTableEditSubProj::All || ((projTable.(_fieldId) == _formerValue) && _editAll == ProjTableEditSubProj::Same))
        #            {
        #                projTable.(_fieldId) = _newValue;
        #                projTable.modifiedField(_fieldId);
        #                if (projTable.validateWrite())
        #                    projTable.update();
        #
        #            }
        #        }
        #
        #        // Edit field for the subproject's subprojects. RECURSIVE!
        #        if ((_editAll == ProjTableEditSubProj::All) || (_editAll == ProjTableEditSubProj::Same))
        #            ProjTable::editSubProjects(projTable.ProjId,_fieldId,_newValue,_editAll,_formerValue,_arrayIdx);
        #    }
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #editSubProjectsAddress
        #server static void editSubProjectsAddress(
        #    ProjId                  _parentProject,
        #    anytype                 _newDeliveryLocation,
        #    ProjTableEditSubProj    _editAll
        #)
        #{
        #    ProjTable projTable = null;
        #    LogisticsPostalAddress  logisticsPostalAddress;
        #    LogisticsLocation       locationRecord;
        #
        #    ttsbegin;
        #
        #    // Find subprojects
        #    while select forupdate projTable where projTable.ParentId == _parentProject
        #    {
        #        // Update field if _editAll
        #        if (_editAll == ProjTableEditSubProj::All)
        #        {
        #            if (!projTable.DeliveryLocation)
        #            {
        #                if (_newDeliveryLocation == 0)
        #                {
        #                    continue;
        #                }
        #                logisticsPostalAddress.clear();
        #                LogisticsPostalAddressMap::initMapFromLocation(logisticsPostalAddress, _newDeliveryLocation);
        #                logisticsPostalAddress.insert();
        #                projTable.DeliveryLocation = logisticsPostalAddress.Location;
        #                if (projTable.validateWrite())
        #                {
        #                    projTable.update();
        #                }
        #            }
        #            else
        #            {
        #                if (_newDeliveryLocation == 0)
        #                {
        #                    locationRecord = LogisticsLocation::find(projTable.DeliveryLocation, true);
        #
        #                    projTable.DeliveryLocation = 0;
        #                    if (projTable.validateWrite())
        #                    {
        #                        projTable.update();
        #                    }
        #
        #                    if (locationRecord.validateDelete())
        #                    {
        #                        locationRecord.delete();
        #                    }
        #                }
        #                else
        #                {
        #                    logisticsPostalAddress = LogisticsPostalAddress::findByLocation(projTable.DeliveryLocation, true);
        #                    LogisticsPostalAddressMap::initMapFromLocation(logisticsPostalAddress, _newDeliveryLocation);
        #                    logisticsPostalAddress.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        #                    logisticsPostalAddress.update();
        #                }
        #            }
        #        }
        #        // Edit field for the subproject's subprojects. RECURSIVE!
        #        if ((_editAll == ProjTableEditSubProj::All) || (_editAll == ProjTableEditSubProj::Same))
        #            ProjTable::editSubProjectsAddress(projTable.ProjId, _newDeliveryLocation, _editAll);
        #    }
        #
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #exist
        #/// <summary>
        #///    Determines whether the specified project exists.
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID.
        #/// </param>
        #/// <returns>
        #///    true if the project exists; otherwise, false.
        #/// </returns>
        #public static boolean exist(ProjId _projId)
        #{
        #    if (_projId)
        #    {
        #        return (select projTable where projTable.ProjId == _projId).RecId != 0;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #existAssetProject
        #/// <summary>
        #///    Checks whether the fixed asset is associated with a project.
        #/// </summary>
        #/// <param name="_assetId">
        #///    The asset ID to check for association with projects.
        #/// </param>
        #/// <returns>
        #///    true if the asset ID is associated with a project; otherwise, false.
        #/// </returns>
        #public static boolean existAssetProject(AssetId _assetId)
        #{
        #    boolean ret = false;
        #
        #    if (_assetId)
        #    {
        #        // Return true if the _assetId is assigned with any project; otherwise, false.
        #        ret =  (select firstonly projTable where projTable.AssetId == _assetId).RecId != 0;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existEarlyForecastHour
        #public static boolean existEarlyForecastHour(ProjId  _projId)
        #{
        #    ProjForecastEmpl  projForecastEmpl;
        #    ProjTable         projTable;
        #
        #    select firstonly projForecastEmpl
        #    where projForecastEmpl.ProjId == _projId
        #        join ProjId, StartDate from projTable
        #        where projTable.ProjId == projForecastEmpl.ProjId
        #            &&    (projForecastEmpl.SchedFromDate < projTable.StartDate ||
        #                  ((projForecastEmpl.SchedToDate!=dateNull())&&projForecastEmpl.SchedToDate < projTable.StartDate));
        #    if(projForecastEmpl)
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #existInvoiceProjFP
        #public static boolean existInvoiceProjFP(ProjInvoiceProjId _projInvoiceId)
        #{
        #    if (_projInvoiceId)
        #    {
        #        return (select projTable where projTable.ProjInvoiceProjId == _projInvoiceId && projTable.Type == ProjType::FixedPrice).RecId != 0;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #existInvoiceProjTM
        #public static boolean existInvoiceProjTM(ProjInvoiceProjId _projInvoiceId)
        #{
        #    if (_projInvoiceId)
        #    {
        #        return (select projTable where projTable.ProjInvoiceProjId == _projInvoiceId && projTable.Type == ProjType::TimeMaterial).RecId != 0;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #existProjOpenOnAcc
        #/// <summary>
        #///    Checks whether on-account transactions that have not been invoiced exist for any project associated
        #///    with the invoice project and currency passed in as parameters.
        #/// </summary>
        #/// <param name="projInvoiceProjId">
        #///    The ID of the invoice project.
        #/// </param>
        #/// <param name="currencyId">
        #///    The currency ID.
        #/// </param>
        #/// <returns>
        #///    true if on-account transactions exist; otherwise, false.
        #/// </returns>
        #public static boolean existProjOpenOnAcc(ProjInvoiceProjId projInvoiceProjId, CurrencyCode currencyId)
        #{
        #    ProjInvoiceOnAcc    projInvoiceOnAcc;
        #    ProjOnAccTrans      projOnAccTrans;
        #    ProjTable           projTable;
        #
        #    select firstonly CurrencyId, ProjID, TransId from projOnAccTrans
        #        where projOnAccTrans.CurrencyId == currencyId
        #        join ProjInvoiceProjId, ProjId from projTable
        #        where projTable.ProjInvoiceProjId   == projInvoiceProjId        &&
        #              projTable.ProjId              == projOnAccTrans.ProjID
        #              notexists join TransId from projInvoiceOnAcc
        #                where projInvoiceOnAcc.TransId  == projOnAccTrans.TransId;
        #
        #    if (projOnAccTrans)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #
        #}
      ENDSOURCE
      SOURCE #existsProjectInContract
        #/// <summary>
        #/// Checks if the project exists for a particular contract id
        #/// </summary>
        #/// <param name="_projId">
        #/// Project id
        #/// </param>
        #/// <param name="_projProposalId">
        #/// Contract Id
        #/// </param>
        #/// <returns>
        #/// true if project exists for the contract id; otherwise, false.
        #/// </returns>
        #public server static boolean existsProjectInContract(ProjId _projId, ProjProposalId _projProposalId)
        #{
        #        ProjTable     projTable;
        #
        #        select firstonly RecId from projTable
        #        where projTable.ProjId            == _projId
        #        &&    projTable.ProjInvoiceProjId == _projProposalId;
        #
        #        if(!projTable)
        #        {
        #            return false;
        #        }
        #
        #        return true;
        #}
        #
        #
      ENDSOURCE
      SOURCE #existsSubProject
        #public static boolean existsSubProject(ProjId _projId)
        #{
        #    return (select count(RecId) from projTable where projTable.ProjId like _projId).RecId > 1 ? true : false;
        #}
      ENDSOURCE
      SOURCE #existWIPProject
        #/// <summary>
        #///    Determines whether the project passed in as a parameter exists as a WIP project.
        #/// </summary>
        #/// <param name="_wiPprojID">
        #///    The ID of the WIP project.
        #/// </param>
        #/// <returns>
        #///    true if a WIP project exists; otherwise, false.
        #/// </returns>
        #static boolean existWIPProject(ProjId _wiPprojID)
        #{
        #    if (_wiPprojID)
        #    {
        #        return (select projTable where projTable.wipProject == _wiPprojID && projTable.ProjId != _wiPprojID).RecId != 0;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #find
        #/// <summary>
        #///    Retrieves the project for a given project ID.
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID of the transaction.
        #/// </param>
        #/// <param name="_forUpdate">
        #///    A Boolean value that determines whether the project should be selected for update; optional.
        #/// </param>
        #/// <returns>
        #///    The project.
        #/// </returns>
        #public static ProjTable find(ProjId _projId, boolean _forUpdate = false)
        #{
        #    ProjTable   projTable = null;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    if (_projId)
        #    {
        #        select firstonly projTable where projTable.ProjId == _projId;
        #    }
        #
        #    return projTable;
        #}
      ENDSOURCE
      SOURCE #findByBankLG
        #/// <summary>
        #///     Finds a record that link to a specified <c>BankLGGuarantee</c> record.
        #/// </summary>
        #/// <param name="_bankLGRefRecId">
        #///     The rec Id of the related <c>BankLGGuarantee</c> record.
        #/// </param>
        #/// <param name="_forUpdate">
        #///     A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #///     If found, returns the record in the <c>ProjTable</c> table; otherwise, returns an empty record.
        #/// </returns>
        #public static ProjTable findByBankLG(
        #    BankLGRefRecId   _bankLGRefRecId,
        #    boolean          _forUpdate = false)
        #{
        #    ProjTable               projTable;
        #    BankLGGuaranteeProject  bankLGGuaranteeProject;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    if (_bankLGRefRecId)
        #    {
        #        select firstonly projTable
        #            exists join bankLGGuaranteeProject
        #            where bankLGGuaranteeProject.Project    == projTable.ProjId
        #                && bankLGGuaranteeProject.Guarantee == _bankLGRefRecId;
        #    }
        #
        #    return projTable;
        #}
        #
      ENDSOURCE
      SOURCE #findByDataArea
        #/// <summary>
        #///    Retrieves the project for a given project ID and data area
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID of the transaction.
        #/// </param>
        #/// <param name="_dataArea">
        #///     The data area to look for the project in.
        #/// </param>
        #/// <param name="_forUpdate">
        #///    A Boolean value that determines whether the project should be selected for update; optional.
        #/// </param>
        #/// <returns>
        #///    The project.
        #/// </returns>
        #public static ProjTable findByDataArea(ProjId _projId, SelectableDataArea _dataArea = curext(), boolean _forUpdate = false)
        #{
        #    ProjTable projTable;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    if (_projId)
        #    {
        #        select firstonly crossCompany projTable
        #            where projTable.ProjId     == _projId &&
        #                  projTable.DataAreaId == _dataArea;
        #    }
        #
        #    return projTable;
        #}
      ENDSOURCE
      SOURCE #findByLedgerDimension
        #public static ProjTable findByLedgerDimension(
        #    LedgerDimensionAccount  _ledgerDimension,
        #    boolean                 _forupdate = false,
        #    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
        #{
        #    ProjTable                           projTable;
        #    DimensionAttributeValueCombination  ledgerDimension;
        #
        #    projTable.selectForUpdate(_forupdate);
        #    if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        #    {
        #        projTable.concurrencyModel(_concurrencyModel);
        #    }
        #
        #    select firstonly projTable
        #        join RecId from ledgerDimension where
        #            ledgerDimension.DisplayValue == projTable.ProjId &&
        #            ledgerDimension.RecId == _ledgerDimension;
        #
        #    return projTable;
        #}
      ENDSOURCE
      SOURCE #findJobId
        #/// <summary>
        #///    Retrieves the project record for the job ID passed in as a parameter.
        #/// </summary>
        #/// <param name="_jobId">
        #///    The ID for the job associated to the project returned.
        #/// </param>
        #/// <param name="_forUpdate">
        #///    A Boolean value that determines whether the project should be selected for update; optional.
        #/// </param>
        #/// <returns>
        #///    The project.
        #/// </returns>
        #public static ProjTable findJobId(JmgJobId _jobId, boolean _forUpdate = false)
        #{
        #    // Shop Floor Control - begin
        #    ProjTable    projTable;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    select firstonly projTable where projTable.JobId == _jobId;
        #
        #    return projTable;
        #    // Shop Floor Control - end
        #}
        #
      ENDSOURCE
      SOURCE #findLike
        #/// <summary>
        #///    Retrieves projects that have project IDs that begin with the project ID passed in as a parameter.
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID on which to base the query.
        #/// </param>
        #/// <param name="_forUpdate">
        #///    A Boolean value that determines whether the project should be selected for update; optional.
        #/// </param>
        #/// <param name="_projIdOrig">
        #///    The original project ID of the project that should not be retrieved; optional.
        #/// </param>
        #/// <returns>
        #///    The projects.
        #/// </returns>
        #// AOSRunMode::Called
        #public static ProjTable findLike(ProjId _projId, boolean _forUpdate  = false, ProjId _projIdOrig = '')
        #{
        #    ProjTable   projTable = null;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    if (_projId)
        #    {
        #        if (_projIdOrig)
        #        {
        #            select projTable
        #                where projTable.ProjId  like _projId        &&
        #                      projTable.ProjId  !=   _projIdOrig    &&
        #                    ! projTable.ParentId;
        #        }
        #        else
        #        {
        #            select projTable where projTable.ProjId like _projId;
        #        }
        #    }
        #
        #    return projTable;
        #}
      ENDSOURCE
      SOURCE #findPriceGroup
        #static ProjPriceGroupID findPriceGroup(ProjId    _projId)
        #{
        #    ProjPriceGroupID    projPriceGroup;
        #
        #    projPriceGroup = ProjTable::priceGroup(_projId);
        #    if (!projPriceGroup)
        #    {
        #        projPriceGroup = ProjInvoiceTable::priceGroup(ProjTable::projInvoiceStatic(_projId).ProjInvoiceProjId);
        #
        #        if (!projPriceGroup)
        #        {
        #            projPriceGroup = CustTable::projPriceGroup(ProjTable::find(_projId).CustAccount);
        #        }
        #    }
        #
        #    return  projPriceGroup;
        #}
        #
      ENDSOURCE
      SOURCE #findRecId
        #/// <summary>
        #///    Retrieves the project record for the record ID passed in as a parameter.
        #/// </summary>
        #/// <param name="_recId">
        #///    The record ID for the project to retrieve.
        #/// </param>
        #/// <param name="_forUpdate">
        #///    Check if the record is being accessed for update.
        #/// </param>
        #/// <returns>
        #///    The project record.
        #/// </returns>
        #public static ProjTable findRecId(RecId _recId, boolean _forUpdate = false)
        #{
        #    ProjTable    projTable;
        #
        #    projTable.selectForUpdate(_forUpdate);
        #
        #    if (_recId != 0)
        #    {
        #        select projTable where projTable.RecId == _recId;
        #    }
        #
        #    return projTable;
        #}
      ENDSOURCE
      SOURCE #generateNextSubProjectId
        #/// <summary>
        #///     Generate the project ID to use for the next sub project being created on a hierarchy
        #/// </summary>
        #/// <param name="_parentProjId">
        #///     The project ID for the parent project in which the sub project will be created under
        #/// </param>
        #/// <returns>
        #///     The generated project ID
        #/// </returns>
        #public static ProjId generateNextSubProjectId(ProjId _parentProjId)
        #{
        #    Integer                 sonNum;
        #    ProjId                  projFormat;
        #    ProjId                  projIdLastSon;
        #    ProjId                  projIdNext;
        #
        #    #DEFINE.SymbolAlpha('&')
        #
        #    projIdLastSon       = ProjTable::projIdLastSon(_parentProjId);
        #
        #    if (projIdLastSon)
        #    {
        #        projFormat          = subStr(projIdLastSon,
        #                                    strLen(_parentProjId)+1,
        #                                    (strLen(projIdLastSon)-strLen(_parentProjId)+1));
        #
        #        sonNum              = NumberSeq::numRemoveFormat(projFormat, ProjTable::find(_parentProjId).Format);
        #    }
        #    else
        #    {
        #        projFormat          = ProjTable::find(_parentProjId).Format;
        #
        #        if (subStr(projFormat, strLen(projFormat), 1) == #SymbolAlpha)
        #        {
        #            sonNum = -1;
        #        }
        #        else
        #        {
        #            sonNum  = 0;
        #        }
        #    }
        #
        #    projIdNext = _parentProjId +
        #                 NumberSeq::numInsertFormat(sonNum+1, ProjTable::find(_parentProjId).Format);
        #    return projIdNext;
        #}
      ENDSOURCE
      SOURCE #getProjTableByStatusTypeRuleQuery
        #/// <summary>
        #/// Builds a query to retrieve a list of <c>ProjTable</c> records.
        #/// </summary>
        #/// <returns>
        #/// A query to retrieve a list of <c>ProjTable</c> records.
        #/// </returns>
        #public static Query getProjTableByStatusTypeRuleQuery()
        #{
        #    Query                   query;
        #    QueryBuildDataSource    projTableQueryBuildDataSource;
        #    QueryBuildDataSource    projStatusTypeRuleQueryBuildDataSource;
        #
        #    query = new Query();
        #
        #    projTableQueryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #
        #    // Adding join with ProjTable table.
        #    projStatusTypeRuleQueryBuildDataSource = projTableQueryBuildDataSource.addDataSource(tableNum(ProjStatusTypeRule));
        #
        #    projStatusTypeRuleQueryBuildDataSource.addLink(fieldNum(ProjTable, Status), fieldNum(ProjStatusTypeRule, ProjStatus));
        #    projStatusTypeRuleQueryBuildDataSource.addLink(fieldNum(ProjTable, Type), fieldNum(ProjStatusTypeRule, ProjType));
        #    projStatusTypeRuleQueryBuildDataSource.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule)).value(SysQuery::value(ProjStatusRule::CreateForecast));
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #getRootProjId
        #/// <summary>
        #/// Find the top most root for a given project id.
        #/// </summary>
        #/// <param name="_projId">
        #/// The project id for which an ancestor needs to be found.
        #/// </param>
        #/// <param name="_dataArea">
        #/// The data area of the project
        #/// </param>
        #/// <returns>
        #/// Returns the top most root of the given project id.
        #/// </returns>
        #/// <remarks>
        #/// Breaks out after depth of 64 to prevent infinite loop.
        #/// </remarks>
        #public static ProjId getRootProjId(ProjId _projId, SelectableDataArea _dataArea = curext())
        #{
        #    #define.MaxHeight(64)
        #
        #    ProjTable projTable;
        #    ProjId    projId;
        #    int       height = #MaxHeight;
        #    //locate top ancestor
        #    projId = _projId;
        #    projTable = ProjTable::findByDataArea(projId, _dataArea);
        #    //break out after 64 depth, probably a cycle
        #    while (projTable.ParentId && height)
        #    {
        #        height -= 1;
        #        projId = projTable.ParentId;
        #        projTable = ProjTable::findByDataArea(projId, _dataArea);
        #    }
        #
        #    return projId;
        #}
      ENDSOURCE
      SOURCE #integrateProjResourceForResource
        #public static void integrateProjResourceForResource(WrkCtrId _wrkCtrId)
        #{
        #    SyncProjResource syncProjResource;
        #    ProjResource projResource;
        #    SyncProjTable syncProjTable;
        #    SyncWrkCtrTable syncWrkCtrTable;
        #
        #    // Integrate all the project resources for an integrated associated to the current resource passed in
        #    while select WrkCtrId, ProjId from projResource
        #        where projResource.WrkCtrId == _wrkCtrId
        #        && projResource.ProjId != ''
        #    join ProjId from syncProjTable where syncProjTable.ProjId == projResource.ProjId
        #    join WrkCtrId from syncWrkCtrTable where syncWrkCtrTable.WrkCtrId == projResource.WrkCtrId
        #    {
        #        if(!SyncProjResource::exist(syncProjTable.ProjId, _wrkCtrId, syncProjTable.AppId))
        #        {
        #            syncProjResource.clear();
        #            syncProjResource.ProjId = syncProjTable.ProjId;
        #            syncProjResource.WrkCtrId = _wrkCtrId;
        #            syncProjResource.AppId = syncProjTable.AppId;
        #            syncProjResource.SyncVersion = 1;
        #            syncProjResource.insert();
        #        }
        #    }
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #isBegBalRuleDefined
        #/// <summary>
        #/// Checks whether the starting balance rule is defined for the project.
        #/// </summary>
        #/// <param name="_projId">
        #/// The project ID for which to check the start balance.
        #/// </param>
        #/// <returns>
        #/// true if the start balance rule is defined; otherwise, false.
        #/// </returns>
        #
        #public static boolean isBegBalRuleDefined(ProjId _projId)
        #{
        #    ProjTable projTable;
        #    boolean ret;
        #
        #    select firstonly Status,Type from projTable where projTable.ProjId == _projId;
        #    ret = ProjStatusTypeRule::exist(projTable.Status, projTable.Type , ProjStatusRule::CreateBeginningBalance);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isModelActive
        #// Description    : Check if forecast model is active for a given project
        #// Parameters     : _projID: Project number
        #//                  _modelID: Forecast model number
        #// Return value   : True if active, else false
        #
        #public static boolean isModelActive(ProjId _projId, ForecastModelId _modelID)
        #{
        #    ProjTable   srch;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    select firstonly firstfast RecId
        #        from srch
        #        where   srch.ProjId                     == _projId &&
        #               (srch.psaForecastModelId         == _modelID ||
        #                srch.psaForecastModelIdExternal == _modelID);
        #    }
        #
        #    return srch.RecId;
        #}
        #
      ENDSOURCE
      SOURCE #isNumberSeqManual
        #/// <summary>
        #///    Determines whether the number sequence used for project IDs is set up to be manual.
        #/// </summary>
        #/// <returns>
        #///    true if the number sequence is set up to be manual; otherwise, false.
        #/// </returns>
        #public client server static boolean isNumberSeqManual()
        #{
        #    return NumberSequenceTable::findByNaturalKey(ProjTable::numberSequenceCode()).Manual;
        #}
      ENDSOURCE
      SOURCE #isPLPostingRequired
        #public static boolean isPLPostingRequired(ProjId  _projId)
        #{
        #    boolean     ret;
        #    ProjTable   projTable;
        #    ProjType    projType;
        #
        #    ret = false;
        #
        #    projTable   = ProjTable::find(_projId);
        #    projType    = ProjGroup::find(projTable.ProjGroupId).ProjType;
        #
        #    //
        #    // Eliminated Fixed Price and Investment projects post to P&l
        #    // Fixed Price and Investement projects not assigned to estimate project post to P&l
        #    //
        #    if ((projType == ProjType::FixedPrice || projType == ProjType::Investment)
        #        && ( (!projTable.wipProject)
        #            || (projTable.wipProject && (ProjControlPeriodTable::eliminated(projTable.wipProject, ProjWIPTable::find(projTable.wipProject).ControlId)
        #                || ProjWIPTable::find(projTable.wipProject).wipEliminated))))
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #like
        #/// <summary>
        #///    Determines whether there are any projects with project IDs that resemble the project ID that is
        #///    passed in as a parameter.
        #/// </summary>
        #/// <param name="_projId">
        #///    The project ID to base the query on.
        #/// </param>
        #/// <param name="_projIdOrig">
        #///    The original project ID of the project that should not be included in the result; optional.
        #/// </param>
        #/// <returns>
        #///    true if the projects exist; otherwise, false.
        #/// </returns>
        #// AOSRunMode::Called
        #public static boolean like(ProjId _projId, ProjId _projIdOrig = '')
        #{
        #    if (_projId)
        #    {
        #        if (_projIdOrig)
        #        {
        #            return (select projTable
        #                    where projTable.ProjId like _projId     &&
        #                          projTable.ProjId !=   _projIdOrig &&
        #                          !projTable.ParentId).RecId != 0;
        #        }
        #
        #        return (select projTable where projTable.ProjId like _projId).RecId != 0;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #lookupProjId
        #/// <summary>
        #///    Performs a lookup on the string control that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The string control on which to perform the lookup.
        #/// </param>
        #/// <param name="_buffer">
        #///    The data to pass to the lookup form.
        #/// </param>
        #/// <remarks>
        #///    The <c>ProjtableLookup</c> form is used to display the lookup list for this string control.
        #/// </remarks>
        #public client static void lookupProjId(FormControl _ctrl, Common _buffer)
        #{
        #    FormSegmentedEntryControl formSegmentedEntryControl;
        #    FormStringControl   formStringControl;
        #    Args                args = new Args();
        #    FormRun             formRun;
        #
        #    args.name(formStr(ProjTableLookup));
        #    args.caller(_ctrl);
        #    args.record(_buffer);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #
        #    if (_ctrl is FormStringControl)
        #    {
        #        formStringControl = _ctrl as FormStringControl;
        #        formStringControl.performFormLookup(formRun);
        #    }
        #    else if (_ctrl is FormSegmentedEntryControl)
        #    {
        #        formSegmentedEntryControl = _ctrl as FormSegmentedEntryControl;
        #        formSegmentedEntryControl.performFormLookup(formRun);
        #    }
        #    else
        #    {
        #        throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #}
      ENDSOURCE
      SOURCE #lookupProjId_SA
        #/// <summary>
        #/// Provides a lookup of projects for the string control that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_formControl">
        #/// The string control on which to perform the lookup.
        #/// </param>
        #/// <remarks>
        #/// The projects in the returned list are fixed price or investment projects and not completed status.
        #/// The list displays the project ID and name fields.
        #/// </remarks>
        #public client static void lookupProjId_SA(FormControl _formControl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _formControl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         queryBuildRange;
        #
        #    queryBuildDataSource    = query.addDataSource(tableNum(ProjTable));
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(ProjTable, Type));
        #    queryBuildRange.value(queryValue(ProjType::TimeMaterial));
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(ProjTable, Type));
        #    queryBuildRange.value(queryValue(ProjType::FixedPrice));
        #    queryBuildRange         = queryBuildDataSource.addRange(fieldNum(ProjTable, Status));
        #    queryBuildRange.value(SysQuery::valueNot(ProjStatus::Completed));
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId), true);
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupProjIdByForecastRule
        #/// <summary>
        #/// Creates a lookup for the <c>ProjId</c> field.
        #/// </summary>
        #/// <param name="_formControl">
        #/// The control to be configured.
        #/// </param>
        #public static void lookupProjIdByForecastRule(FormControl _formControl)
        #{
        #    SysTableLookup sysTableLookup  = SysTableLookup::newParameters(tableNum(ProjTable), _formControl);
        #
        #    sysTableLookup.parmQuery(ProjTable::getProjTableByStatusTypeRuleQuery());
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupProjIdByProjInvoiceProjId
        #/// <summary>
        #///     Project lookup constrained by contract id and project type
        #/// </summary>
        #/// <param name="_oLookupCtrl">
        #///     Handle for the lookup control
        #/// </param>
        #/// <param name="_sProjInvProjId">
        #///     Contract ID
        #/// </param>
        #/// <param name="_filterByProjType">
        #///     true if filter by project type is enabled, false other wise
        #/// </param>
        #/// <param name="_projType">
        #///     Project Type
        #/// </param>
        #/// <param name="_excludeFPProjType">
        #///     Excludes projects of type Fixed Price from the lookup.
        #/// </param>
        #client static void lookupProjIdByProjInvoiceProjId(FormStringControl _oLookupCtrl, ProjInvoiceProjId _sProjInvProjId, boolean _filterByProjType = false, ProjType _projType = ProjType::TimeMaterial, boolean _excludeFPProjType = false)
        #{
        #    SysTableLookup          oSysTableLookup;
        #    Query                   oQuery = new Query();
        #    QueryBuildDataSource    oQueryBuildDataSource;
        #    QueryBuildRange         oQueryBuildRange;
        #    QueryBuildRange         projTypeRange;
        #
        #    oSysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _oLookupCtrl);
        #
        #    oQueryBuildDataSource = oQuery.addDataSource(tableNum(ProjTable));
        #
        #    oQueryBuildRange = oQueryBuildDataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
        #
        #    oQueryBuildRange.value(queryValue(_sProjInvProjId));
        #
        #    if(_excludeFPProjType)
        #    {
        #        projTypeRange = oQueryBuildDataSource.addRange(fieldNum(ProjTable, Type));
        #        projTypeRange.value(strFmt('(Type != %1)', any2int(ProjType::FixedPrice)));
        #    }
        #
        #    if (_filterByProjType)
        #    {
        #        projTypeRange = oQueryBuildDataSource.addRange(fieldNum(ProjTable, Type));
        #        projTypeRange.value(queryValue(enum2str(_projType)));
        #    }
        #
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #
        #    oSysTableLookup.parmQuery(oQuery);
        #    oSysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupProjIdCustAccount
        #/// <summary>
        #///    Builds a query for the <c>ProjTable</c> that only returns business relation accounts of the
        #///    prospect type.
        #/// </summary>
        #/// <param name="_custAccount">
        #///    The string on which to perform the lookup.
        #/// </param>
        #/// <returns>
        #///    A query for a project that is linked with the specified customer.
        #/// </returns>
        #static Query lookupProjIdCustAccount(CustAccount  _custAccount)
        #{
        #    QueryBuildDataSource            queryBuildDataSource;
        #    Query                           query = new Query();
        #    QueryBuildRange                 queryBuildRange;
        #    ;
        #    queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #    queryBuildDataSource.addSortField(fieldNum(ProjTable, ProjId));
        #
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjTable, CustAccount));
        #    queryBuildRange.value(SysQuery::value(_custAccount));
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #lookupProjIdHierarchy
        #public client static void lookupProjIdHierarchy(FormControl _formControl, str _filterStr, ProjId _projId, boolean _isProjBudgetLineTypeRevenue = false)
        #{
        #    Query                   q = new Query();
        #    QueryBuildDataSource    qbr1;
        #
        #    #DEFINE.Star('*')
        #
        #    SysTableLookup  sysTableLookup;
        #
        #    qbr1 = q.addDataSource(tableNum(ProjTable));
        #
        #    qbr1.addRange(fieldNum(ProjTable, ProjId)).value(queryValue(_projId) + #Star);
        #    //For budget of revenue type, project Id lookup should show only project of Type "TimeMaterial" and "FixedPrice".
        #    if (_isProjBudgetLineTypeRevenue)
        #    {
        #        qbr1.addRange(fieldNum(ProjTable, Type)).value(strFmt('((Type == %1) || (Type == %2))',
        #            enum2int(ProjType::TimeMaterial), enum2int(ProjType::FixedPrice)));
        #    }
        #
        #    sysTableLookup  = SysTableLookup::newParameters(tableNum(ProjTable), _formControl);
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId), true);
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name), false);
        #
        #    sysTableLookup.parmQuery(q);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupProjIdTypeActivity
        #// Description    :< //for show projid for task filtered on PSAProjTask::Project >
        #// Parameters     :< Description of parameters >
        #// Return value   :< Description of return value >
        #
        #public client static void lookupProjIdTypeActivity(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup;
        #    Query                   query;
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildRange         rangePSAProjTask;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        sysTableLookup                      = SysTableLookup::newParameters(tableNum(ProjTable), _ctrl);
        #        query                               = new Query();
        #        queryBuildDataSource                = query.addDataSource(tableNum(ProjTable));
        #        rangePSAProjTask                    = queryBuildDataSource.addRange(fieldNum(ProjTable, psaProjTask));
        #
        #        rangePSAProjTask.value(enum2str(PSAProjTask::Project));
        #
        #        sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId), true);
        #        sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #        sysTableLookup.addLookupfield(fieldNum(ProjTable, psaProjTask));
        #
        #        sysTableLookup.parmQuery(query);
        #        sysTableLookup.performFormLookup();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #lookupProjWIP
        #/// <summary>
        #///    Provides a lookup of projects for the string control that is passed in as a parameter.
        #/// </summary>
        #/// <param name="ctrl">
        #///    The string control on which to perform the lookup.
        #/// </param>
        #/// <remarks>
        #///    The projects in the returned list are fixed price or investment projects. The list displays the project ID and name fields.
        #/// </remarks>
        #public client static void lookupProjWIP(FormStringControl ctrl)
        #{
        #    SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), ctrl);
        #    Query                query = new Query();
        #    QueryBuildDataSource queryBuildDataSource;
        #    QueryBuildDataSource qbdsProjGroup;
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Investment));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, wipProject)).value(queryValue(''));
        #
        #    qbdsProjGroup = queryBuildDataSource.addDataSource(tableNum(ProjGroup));
        #    qbdsProjGroup.relations(true);
        #    qbdsProjGroup.addRange(fieldNum(ProjGroup, CompletePrincip)).value(SysQuery::valueNot(ProjCompletePrincip::NoWIP));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupProjWIPProj
        #/// <summary>
        #///    Provides a lookup of projects for the string control that is passed in as a parameter.
        #/// </summary>
        #/// <param name="ctrl">
        #///    The string control on which to perform the lookup.
        #/// </param>
        #/// <param name="_projWipId">
        #///    The ID for the WIP project.
        #/// </param>
        #/// <remarks>
        #///    The list of projects returned are WIP projects that are associated with the WIP project ID that is passed in as a parameter. The list displays the project ID, name and type fields.
        #/// </remarks>
        #public client static void lookupProjWIPProj(FormStringControl ctrl, ProjWipId _projWipId)
        #{
        #    SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), ctrl);
        #    Query                query = new Query();
        #    QueryBuildDataSource queryBuildDataSource;
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Type));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, wipProject)).value(_projWipId);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupSelectedProjId
        #/// <summary>
        #/// Performs a lookup on a project.
        #/// </summary>
        #/// <param name="_formControl">
        #/// The form control.
        #/// </param>
        #/// <param name="_filterStr">
        #/// The filter string.
        #/// </param>
        #/// <param name="_projId">
        #/// The id of the project to lookup.
        #/// </param>
        #/// <remarks>
        #/// The only project in the lookup will the project specified in the parameter.
        #/// </remarks>
        #public client static void lookupSelectedProjId(FormControl _formControl, str _filterStr, ProjId _projId)
        #{
        #    Query                   q = new Query();
        #    QueryBuildDataSource    qbr1;
        #
        #    SysTableLookup  sysTableLookup;
        #
        #    qbr1 = q.addDataSource(tableNum(ProjTable));
        #
        #    qbr1.addRange(fieldNum(ProjTable, ProjId)).value(queryValue(_projId));
        #
        #    sysTableLookup  = SysTableLookup::newParameters(tableNum(ProjTable), _formControl);
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId), true);
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name), false);
        #
        #    sysTableLookup.parmQuery(q);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupTemplate
        #public client static void lookupTemplate(FormStringControl ctrl, boolean _hideTimeProjects = false)
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(ProjTable), ctrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(ProjTable));
        #    QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(ProjTable, Template));
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #
        #    if (_hideTimeProjects)
        #    {
        #        queryBuildDataSource.addRange(fieldNum(ProjTable, Type)).value(SysQuery::valueNot(ProjType::Time));
        #    }
        #
        #    queryBuildRange.value(queryValue(NoYes::Yes));
        #
        #    sysTableLookup.parmQuery(query);
        #
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupValidParentProj
        #public client static void lookupValidParentProj(FormStringControl ctrl)
        #{
        #    SysTableLookup       sysTableLookup =  SysTableLookup::newParameters(tableNum(ProjTable), ctrl);
        #    Query                query          =  new Query();
        #    QueryBuildDataSource queryBuildDataSource;
        #
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Type));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, CustAccount));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Status));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, Format)).value(SysQuery::valueNotEmptyString());
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #modelId
        #/// <summary>
        #///    Retrieves the forecast model ID for the project that is passed in as a parameter.
        #/// </summary>
        #/// <param name="projId">
        #///    The ID of the forecast model.
        #/// </param>
        #/// <returns>
        #///    The ID of the forecast model.
        #/// </returns>
        #public server static ForecastModelId modelId(ProjId projId)
        #{
        #    ForecastModelId         modelId;
        #    ProjControlPeriodTable  projControlPeriodTable;
        #    ProjPeriodId            periodId;
        #
        #    periodId = ProjWIPTable::find(ProjTable::find(projId).wipProject).PeriodId;
        #
        #    if (periodId)
        #    {
        #        select projControlPeriodTable
        #             where projControlPeriodTable.ProjId          == ProjTable::find(projId).wipProject   &&
        #                   projControlPeriodTable.PeriodStatus    == ProjControlPeriodStatus::Created;
        #
        #        if (projControlPeriodTable)
        #        {
        #            modelId = ProjPeriodLine::find(periodId, projControlPeriodTable.PeriodFrom).ModelId;
        #        }
        #        else
        #        {
        #            modelId = ProjPeriodLine::find(periodId, ProjWIPTable::nextControlPeriodFrom(projId)).ModelId;
        #        }
        #    }
        #
        #    if (!modelId)
        #    {
        #        modelId = ProjParameters::find().ModelId;
        #    }
        #
        #    return modelId;
        #}
      ENDSOURCE
      SOURCE #name
        #/// <summary>
        #///    Gets the name of the project that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_projId">
        #///    The ID of the project.
        #/// </param>
        #/// <returns>
        #///    The name of the project.
        #/// </returns>
        #public static Name name(ProjId _projId)
        #{
        #    ProjName    projName = '';
        #
        #    if ( _projId )
        #    {
        #        projName = (select projTable where projTable.ProjId == _projId).Name;
        #    }
        #
        #    return projName;
        #}
      ENDSOURCE
      SOURCE #numberSequenceCode
        #/// <summary>
        #///    Gets the number sequence code used for project ID.
        #/// </summary>
        #/// <returns>
        #///    The number sequence code used for project ID.
        #/// </returns>
        #client server static NumberSequenceCode numberSequenceCode()
        #{
        #    return NumberSequenceTable::find(ProjParameters::numRefProjId().NumberSequenceId).NumberSequence;
        #}
      ENDSOURCE
      SOURCE #numRemTemplate
        #/// <summary>
        #///    Retrieves the mask found in a string that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_num">
        #///    The string to look in for the mask.
        #/// </param>
        #/// <param name="mask">
        #///    The mask string to look for.
        #/// </param>
        #/// <returns>
        #///    The integer value of the mask found.
        #/// </returns>
        #public static Integer numRemTemplate(Num _num, Num mask)
        #{
        #    #define.SymbolNumerals('#')
        #    #define.SymbolLiterals('&')
        #
        #    Integer         x           = 1;
        #    Num             newTxt      = '';
        #    Num             tmpTxt      = mask;
        #    Num             tmpNum      = _num;
        #    int             ascciPos    = 65;
        #
        #    if (!tmpTxt)
        #    {
        #        return str2int(tmpNum);
        #    }
        #
        #    if (strLen(tmpNum) != strLen(tmpTxt))
        #    {
        #        throw error(strFmt("@SYS25062",tmpNum, tmpTxt));
        #    }
        #
        #
        #    while (x)
        #    {
        #        // Check if the format contains '&'.
        #        if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) && strFind(mask, #SymbolLiterals, 999, -999))
        #        {
        #            x = strFind(tmpTxt, #SymbolLiterals, 999, -999);
        #        }
        #        else
        #        {
        #            x = strFind(tmpTxt, #SymbolNumerals, 999, -999);
        #        }
        #        if (!x)
        #        {
        #            //  Return the value for alphabet format.
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Project3)) && strFind(mask, #SymbolLiterals, 999, -999))
        #            {
        #                return ((char2num(newTxt, strLen(newTxt))-ascciPos)+1);
        #            }
        #            else
        #            {
        #                return str2int(newTxt);
        #            }
        #        }
        #
        #        newTxt = subStr(tmpNum, x, 1) + newTxt;
        #        tmpTxt = strDel(tmpTxt, x, 1);
        #    }
        #
        #    return str2int(newTxt);
        #}
      ENDSOURCE
      SOURCE #priceGroup
        #static ProjPriceGroupID priceGroup(ProjId _projId)
        #{
        #    ProjPriceGroupID  projPriceGroupID = '';
        #
        #    if ( _projId )
        #    {
        #        projPriceGroupID = (select firstonly ProjPriceGroup from projTable
        #                where projTable.ProjId == _projId).ProjPriceGroup;
        #    }
        #
        #    return projPriceGroupID;
        #}
        #
      ENDSOURCE
      SOURCE #projectTeamRoleExists
        #/// <summary>
        #///    Determines whether a project team role exists for the project passed in as a parameter.
        #/// </summary>
        #/// <param name="projId">
        #///    The ID of the project.
        #/// </param>
        #/// <returns>
        #///    true if a project team role exists; otherwise, false.
        #/// </returns>
        #public static boolean projectTeamRoleExists(ProjId projId)
        #{
        #    return PSAProjSchedRole::findFirst(projId).RecId && projId;
        #}
        #
      ENDSOURCE
      SOURCE #projIdLastSon
        #/// <summary>
        #///    Gets the last sub project created for the parent project that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_projId">
        #///    The ID of the parent project.
        #/// </param>
        #/// <returns>
        #///    The ID of the last sub project created.
        #/// </returns>
        #public static ProjId projIdLastSon(ProjId _projId)
        #{
        #    ProjId  projId = '';
        #
        #    if ( _projId )
        #    {
        #        projId = (select reverse ProjId from projTable order by ProjId where projTable.ParentId == _projId).ProjId;
        #    }
        #
        #    return projId;
        #}
      ENDSOURCE
      SOURCE #projInvoiceStatic
        #/// <summary>
        #///    Retrieves the invoice project associated with the project that is passed in as a parameter.
        #/// </summary>
        #/// <param name="_projId">
        #///    The ID of the project.
        #/// </param>
        #/// <returns>
        #///    The invoice project record.
        #/// </returns>
        #public static ProjInvoiceTable projInvoiceStatic(ProjId _projId)
        #{
        #    return ProjInvoiceTable::find(ProjTable::find(_projId).ProjInvoiceProjId);
        #}
      ENDSOURCE
      SOURCE #psaExistIncludeLower
        #// Description    : To see if there exists a project with 'Include lower levels' checked
        #//                  on lower or highter levels
        #// Parameters     : _currProjId:    Project Id
        #//                  _down      :    true means to find on all lower levels NOT including self;
        #//                                  false means all higher levels.
        #// Return value   : If exists this kind of project. return true; else false
        #
        #public server static boolean psaExistIncludeLower(ProjId       _currProjId,
        #                                                  boolean      _down)
        #{
        #    ProjTable       tProjTable;
        #    boolean         ret;
        #    #define.start('*')
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #
        #    if (!_down)
        #    {
        #        tProjTable = ProjTable::find(_currProjId);
        #        while(tProjTable.ParentId)
        #        {
        #            tProjTable = ProjTable::find(tProjTable.ParentId);
        #            if(tProjTable.psaRetainIncludeLower == NoYes::Yes)
        #            {
        #                ret = true;
        #                break;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        select count(ProjId) from tProjTable
        #            where tProjTable.ProjId like _currProjId + #start
        #                && tProjTable.ProjId != _currProjId
        #                && tProjTable.Type == ProjType::FixedPrice
        #                && tProjTable.psaRetainIncludeLower == NoYes::Yes;
        #
        #        ret = any2int(tProjTable.ProjId) > 0 ? true : false;
        #    }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #psaExistInvoicedTrans
        #// Description    : To see if invoiced transactions exist on lower levels, or see if invoiced
        #//                  transactions exist on a higher level with 'Include lower levels' checked
        #// Parameters     : _currProjId:    Project Id
        #//                  _down      :    true means to find on all lower levels including self;
        #//                                  false means all higher levels.
        #// Return value   : If exists invoiced trans. return true; else false
        #
        #public server static boolean psaExistInvoicedTrans(ProjId      _currProjId,
        #                                                   boolean     _down)
        #{
        #    ProjInvoiceRevenue      tProjInvoiceRevenue;
        #    ProjInvoiceOnAcc        tProjInvoiceOnAcc;
        #    ProjInvoiceEmpl         tProjInvoiceEmpl;
        #    ProjInvoiceCost         tProjInvoiceCost;
        #    ProjInvoiceItem         tProjInvoiceItem;
        #    ProjTable               tProjTable;
        #    boolean                 ret = false;
        #    #define.star('*')
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return ret;
        #    }
        #
        #    ttsbegin;
        #
        #    if (_down)
        #    {
        #        while select ProjId from tProjTable
        #            where tProjTable.ProjId like _currProjId + #star
        #        {
        #            select count(RecId) from tProjInvoiceRevenue
        #                where tProjInvoiceRevenue.ProjId == tProjTable.ProjId;
        #            if(any2int(tProjInvoiceRevenue.RecId))
        #            {
        #                ret = true;
        #                break;
        #            }
        #
        #            select count(RecId) from tProjInvoiceOnAcc
        #                where tProjInvoiceOnAcc.ProjId == tProjTable.ProjId;
        #            if(any2int(tProjInvoiceOnAcc.RecId))
        #            {
        #                ret = true;
        #                break;
        #            }
        #
        #            select count(RecId) from tProjInvoiceEmpl
        #                where tProjInvoiceEmpl.ProjId == tProjTable.ProjId;
        #            if(any2int(tProjInvoiceEmpl.RecId))
        #            {
        #                ret = true;
        #                break;
        #            }
        #
        #            select count(RecId) from tProjInvoiceCost
        #                where tProjInvoiceCost.ProjId == tProjTable.ProjId;
        #            if(any2int(tProjInvoiceCost.RecId))
        #            {
        #                ret = true;
        #                break;
        #            }
        #
        #            select count(RecId) from tProjInvoiceItem
        #                where tProjInvoiceItem.ProjId == tProjTable.ProjId;
        #            if(any2int(tProjInvoiceItem.RecId))
        #            {
        #                ret = true;
        #                break;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        tProjTable = ProjTable::find(_currProjId);
        #        while(tProjTable.ParentId)
        #        {
        #            tProjTable = ProjTable::find(tProjTable.ParentId);
        #            if(tProjTable.psaRetainIncludeLower == NoYes::Yes)
        #            {
        #                select count(RecId) from tProjInvoiceRevenue
        #                    where tProjInvoiceRevenue.ProjId == tProjTable.ProjId;
        #                if(any2int(tProjInvoiceRevenue.RecId))
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #
        #                select count(RecId) from tProjInvoiceOnAcc
        #                    where tProjInvoiceOnAcc.ProjId == tProjTable.ProjId;
        #                if(any2int(tProjInvoiceOnAcc.RecId))
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #
        #                select count(RecId) from tProjInvoiceEmpl
        #                    where tProjInvoiceEmpl.ProjId == tProjTable.ProjId;
        #                if(any2int(tProjInvoiceEmpl.RecId))
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #
        #                select count(RecId) from tProjInvoiceCost
        #                    where tProjInvoiceCost.ProjId == tProjTable.ProjId;
        #                if(any2int(tProjInvoiceCost.RecId))
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #
        #                select count(RecId) from tProjInvoiceItem
        #                    where tProjInvoiceItem.ProjId == tProjTable.ProjId;
        #                if(any2int(tProjInvoiceItem.RecId))
        #                {
        #                    ret = true;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #psaHasInvoicedTrans
        #// Description    : To see if invoiced transactions exist on current project
        #// Parameters     : _currProjId:    Project Id
        #// Return value   : If exists invoiced trans. return true; else false
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public static boolean psaHasInvoicedTrans(ProjId      _currProjId)
        #{
        #    ProjCostTrans           tProjCostTrans;
        #    ProjEmplTrans           tProjEmplTrans;
        #    ProjRevenueTrans        tProjRevenueTrans;
        #    ProjItemTrans           tprojItemTrans;
        #    ProjOnAccTrans          tProjOnAccTrans;
        #
        #    ProjProposalItem        tprojProposalItem;
        #    ProjProposalEmpl        tprojProposalEmpl;
        #    ProjProposalCost        tprojProposalCost;
        #    ProjProposalRevenue     tprojProposalRevenue;
        #    ProjProposalOnAcc       tprojProposalOnAcc;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return false;
        #    }
        #
        #    select firstonly RecId from tprojProposalItem
        #        join ProjId, ProjTransId from tprojItemTrans
        #        where tprojItemTrans.ProjId        == _currProjId &&
        #              tprojItemTrans.ProjTransId   == tprojProposalItem.ProjTransId;
        #    if (tprojProposalItem.RecId)
        #    {
        #        return true;
        #    }
        #
        #    select firstonly RecId from tprojProposalCost
        #        join ProjId, TransId from tProjCostTrans
        #        where tProjCostTrans.ProjId        == _currProjId &&
        #              tProjCostTrans.TransId       == tprojProposalCost.TransId;
        #    if (tprojProposalCost.RecId)
        #    {
        #        return true;
        #    }
        #
        #    select firstonly RecId from tprojProposalRevenue
        #        join ProjId, TransId from tProjRevenueTrans
        #        where tProjRevenueTrans.ProjId     == _currProjId &&
        #              tProjRevenueTrans.TransId    == tprojProposalRevenue.TransId;
        #    if (tprojProposalRevenue.RecId)
        #    {
        #        return true;
        #    }
        #
        #    select firstonly RecId from tprojProposalEmpl
        #        join ProjId, TransId from tProjEmplTrans
        #        where tProjEmplTrans.ProjId       == _currProjId &&
        #              tProjEmplTrans.TransId       == tprojProposalEmpl.TransId;
        #    if (tprojProposalEmpl.RecId)
        #    {
        #        return true;
        #    }
        #
        #    select firstonly RecId from tprojProposalOnAcc
        #        join ProjID, TransId from tProjOnAccTrans
        #        where tProjOnAccTrans.ProjID        == _currProjId &&
        #              tProjOnAccTrans.TransId       == tprojProposalOnAcc.TransId;
        #    if (tprojProposalOnAcc.RecId)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
        #
      ENDSOURCE
      SOURCE #psaInvoiceable
        #// Description    : Invoiceable amount of the project
        #// Parameters     : _sProjId: Project number
        #// Return value   : Invoicable amount
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #static Amount psaInvoiceable(ProjId _projId)
        #{
        #    ProjInvoiceControl      oProjInvoiceControl = new ProjInvoiceControl();
        #    TmpProjInvoiceControl   tTmpProjInvoiceControl;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    oProjInvoiceControl.parmExpenses(true);
        #    oProjInvoiceControl.parmHour(true);
        #    oProjInvoiceControl.parmRevenue(true);
        #    oProjInvoiceControl.parmSubscription(true);
        #    oProjInvoiceControl.parmItem(true);
        #    oProjInvoiceControl.parmOnAccount(true);
        #    oProjInvoiceControl.parmSalesLine(true);
        #
        #    oProjInvoiceControl.parmProjTransDateFrom(dateNull());
        #    oProjInvoiceControl.parmProjTransDateTo(dateMax());
        #
        #    oProjInvoiceControl.parmProjId(_projId);
        #
        #    oProjInvoiceControl.parmFixedPrice(true);
        #    oProjInvoiceControl.parmTimeMaterial(true);
        #    oProjInvoiceControl.parmInternalCost(true);
        #    oProjInvoiceControl.parmInvestment(true);
        #    oProjInvoiceControl.parmTime(true);
        #
        #    oProjInvoiceControl.run();
        #
        #    tTmpProjInvoiceControl.setTmpData(oProjInvoiceControl.tmpProjInvoiceControlGeneral());
        #
        #    select firstonly * from tTmpProjInvoiceControl
        #        where tTmpProjInvoiceControl.CurrencyCode == ProjTable::find(_projId).currencyId()
        #        &&    tTmpProjInvoiceControl.LineNum == 10.0;
        #    }
        #
        #    return tTmpProjInvoiceControl.ToBeInvoiced;
        #}
        #
      ENDSOURCE
      SOURCE #psAlookupExpRulesProjects
        #// Description    : Lookup for projects for expense rules
        #// Parameters     : _oLookupCtrl: The control performing the lookup
        #//                  _sProjInvProjId: contract to query on
        #// Return value   : None
        #[SysObsoleteAttribute('Method is not called anymore and should not be used.', true)]
        #public client static void psAlookupExpRulesProjects(FormStringControl _oLookupCtrl, ProjInvoiceProjId projInvProjId)
        #{
        #    SysTableLookup          oSysTableLookup;
        #    Query                   oQuery = new Query();
        #    QueryBuildDataSource    oQueryBuildDataSource;
        #    QueryBuildRange         oQueryBuildRange;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    oSysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _oLookupCtrl);
        #
        #    oQueryBuildDataSource = oQuery.addDataSource(tableNum(ProjTable));
        #
        #    oQueryBuildRange = oQueryBuildDataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
        #
        #    oQueryBuildRange.value(queryValue(projInvProjId));
        #
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #
        #    oSysTableLookup.parmQuery(oQuery);
        #    oSysTableLookup.performFormLookup();
        #    }
        #
        #}
        #
      ENDSOURCE
      SOURCE #psaLookupFixedPriceProj
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public client static void psaLookupFixedPriceProj(FormStringControl ctrl)
        #{
        #    SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), ctrl);
        #    Query                query          = new Query();
        #    QueryBuildDataSource queryBuildDataSource;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjInvoiceProjId));
        #    sysTableLookup.addLookupfield(fieldNum(ProjTable, CustAccount));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        #    queryBuildDataSource.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #psaLookupProjIdStd
        #// Description    : Lookup of ProjId, narrowed down to tasks
        #// Parameters     : _ctrl: The control the lookup is performed on
        #//                  _buffer: Record being looked up from
        #//                  _sProjId: ProjId to filter down from
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public client static void psaLookupProjIdStd(FormStringControl   _ctrl,
        #                                      Common              _buffer,
        #                                      Object              _oCaller = null,
        #// Description: Changed the type from ProjId to str so the string lengh would not be restricted to 20.
        #                                      str              _projIdFilter = "")
        #{
        #    Args                args = new Args();
        #    FormRun             formRun;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    args.name(formStr(ProjTableLookup));
        #    args.caller(_ctrl);
        #    args.record(_buffer);
        #    args.caller(_oCaller);
        #    args.parm(_projIdFilter);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    _ctrl.performFormLookup(formRun);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #psaLookupSelectedProjIds
        #// Description    : look up selected projects
        #// Parameters     : _oCtrl: string eidt control
        #//                : _sProjIds: selected project Id
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public client static void psaLookupSelectedProjIds(FormStringControl _oCtrl, str _projIds)
        #{
        #    SysTableLookup       oSysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _oCtrl);
        #    Query                oQuery = new Query();
        #    QueryBuildDataSource oQueryBuildDataSource1;
        #    ;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, Type));
        #    oSysTableLookup.addLookupfield(fieldNum(ProjTable, ProjGroupId));
        #
        #    oQueryBuildDataSource1 = oQuery.addDataSource(tableNum(ProjTable));
        #    oQueryBuildDataSource1.addSortIndex(indexNum(ProjTable, ProjectIdx));
        #    oQueryBuildDataSource1.addRange(fieldNum(ProjTable, ProjId)).value(_projIds);
        #
        #    oSysTableLookup.parmQuery(oQuery);
        #    oSysTableLookup.performFormLookup();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #psaLookupSubProject
        #// Description    : Lookup form for Sub-Projects
        #// Parameters     : _ctrl: The control the lookup is performed on
        #//                  _buffer:
        #//                  _projId: ProjId to filter down from
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public client static void psaLookupSubProject(FormStringControl   _ctrl,
        #                                       Common              _buffer,
        #                                       Object              _oCaller = null,
        #                                       ProjId              _projIdFilter = "")
        #
        #{
        #    Args                args = new Args();
        #    FormRun             formRun;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    args.name(formStr(ProjTableLookup));
        #    args.caller(_ctrl);
        #    args.record(_buffer);
        #    args.parmEnumType(enumNum(PSAProjTask));
        #    args.parmEnum(PSAProjTask::Project);
        #    args.caller(_oCaller);
        #    args.parm(_projIdFilter);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    _ctrl.performFormLookup(formRun);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #psaLookupTask
        #// Description    : Lookup form for Project Tasks
        #// Parameters     : _ctrl: The control the lookup is performed on
        #//                  _buffer:
        #//                  _projId: ProjId to filter down from
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public client static void psaLookupTask(FormStringControl   _ctrl,
        #                                 Common              _buffer,
        #                                 Object              _oCaller = null,
        #                                 ProjId              _projIdFilter = "")
        #
        #{
        #    Args                args = new Args();
        #    FormRun             formRun;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    args.name(formStr(ProjTableLookup));
        #    args.caller(_ctrl);
        #    args.record(_buffer);
        #    args.parmEnumType(enumNum(PSAProjTask));
        #    args.parmEnum(PSAProjTask::Task);
        #    args.caller(_oCaller);
        #    args.parm(_projIdFilter);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    _ctrl.performFormLookup(formRun);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #psaUpdateForecastModel
        #// Description    : Updates the ForecastModel fields for the project
        #//                  and all sub-projects
        #// Parameters     : _modelId: Forecast model value
        #//                  _projId: Project number
        #//                  _bIsExternal: Internal or external budget
        #[SysObsoleteAttribute('Method is not called anymore and should not be used', true)]
        #public static void psaUpdateForecastModel(ForecastModelId _modelId, ProjId _projId, boolean _bIsExternal)
        #{
        #    ProjId      sProjIdRoot;
        #    ProjTable   tProj;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #    // update the whole project tree
        #    sProjIdRoot = tProj.psaFindRootProjId(_projId);
        #    sProjIdRoot += '*';
        #
        #    if (_bIsExternal)
        #    {
        #        update_recordset tProj
        #            setting psaForecastModelIdExternal = _modelId
        #            where tProj.ProjId like sProjIdRoot;
        #    }
        #    else
        #    {
        #        update_recordset tProj
        #            setting psaForecastModelId = _modelId
        #            where tProj.ProjId like sProjIdRoot;
        #    }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #rangeProjId
        #/// <summary>
        #/// Gets a comma-delimited string of project IDs.
        #/// </summary>
        #/// <param name="_fieldId">
        #/// The ID of the field in the <c>ProjTable</c> table.
        #/// </param>
        #/// <param name="_FieldValue">
        #/// The value of the field that the projects that are retrieved must contain.
        #/// </param>
        #/// <returns>
        #/// A string of comma-delimited project IDs.
        #/// </returns>
        #public server static str rangeProjId(FieldId _fieldId, anytype _FieldValue)
        #{
        #    ProjTable   projTable;
        #    str         tmpQueryStr;
        #    DictField   dictField = new DictField(tableNum(ProjTable), _fieldId);
        #
        #    if (dictField)
        #    {
        #        while select ProjId from projTable order by ProjId where projTable.(_fieldId) == _FieldValue
        #        {
        #            tmpQueryStr += projTable.ProjId + ',';
        #        }
        #    }
        #
        #    return tmpQueryStr;
        #}
      ENDSOURCE
      SOURCE #setFieldPwpThresholdPercent
        #public static boolean setFieldPwpThresholdPercent(ProjTable  _projTable)
        #{
        #    boolean     ret;
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        #    {
        #        return ret;
        #    }
        #
        #    if ((_projTable.Type == ProjType::TimeMaterial)
        #         && (ProjFundingSource::numberOfFundingSourcesByFundingType(_projTable.ProjInvoiceProjId, ProjFundingType::Customer) > 0))
        #    {
        #        if (PSAContractLineItems::hasBillingRules(_projTable.ProjInvoiceProjId))
        #        {
        #            if (_projTable.checkTAndMTypeBillingRule())
        #            {
        #                ret = true;
        #            }
        #            else
        #            {
        #                ret = false;
        #            }
        #        }
        #        else
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #txtNotExist
        #/// <summary>
        #///    Retrieves a label string indicating that the project does not exist.
        #/// </summary>
        #/// <returns>
        #///    A label string.
        #/// </returns>
        #static str 80 txtNotExist()
        #{
        #    return "@SYS11217";
        #}
      ENDSOURCE
      SOURCE #updateScheduleInfo
        #[SysObsoleteAttribute('Obsolete method after resource scheduling refactoring', true)]
        #public static server void updateScheduleInfo(ProjId _projId)
        #{
        #    /*
        #    ProjTable   projTable;
        #    TransDate   startDate   = dateNull();
        #    TransDate   endDate     = dateNull();
        #    Hours       totalEffort = 0;
        #
        #    while select ProjId, psaSchedStartDate, psaSchedEndDate, psaSchedEffort from projTable
        #        where projTable.ProjId like _projId + '*'
        #    {
        #        if (!ProjTable::child(projTable.ProjId))
        #        {
        #            if (!startDate)
        #            {
        #                startDate = projTable.psaSchedStartDate;
        #            }
        #            else
        #            {
        #                startDate = (startDate < projTable.psaSchedStartDate) ? startDate : projTable.psaSchedStartDate;
        #            }
        #            endDate = (endDate > projTable.psaSchedEndDate) ? endDate : projTable.psaSchedEndDate;
        #            totalEffort += projTable.psaSchedEffort;
        #        }
        #    }
        #
        #    projTable = ProjTable::find(_projId, true);
        #    if (projTable)
        #    {
        #        ttsbegin;
        #        projTable.psaSchedStartDate  = startDate;
        #        projTable.psaSchedEndDate    = endDate;
        #        projTable.StartDate          = startDate;
        #        projTable.EndDate            = endDate;
        #        projTable.psaSchedEffort     = totalEffort;
        #        projTable.psaSchedDuration   = PSAActivitySetup::calcDuration(startDate, endDate, projTable.psaSchedCalendarId);
        #        projTable.update();
        #        ttscommit;
        #    }
        #    */
        #}
      ENDSOURCE
      SOURCE #validateProjServerProperties
        #public static boolean validateProjServerProperties(ProjTable _projTable, boolean _newSyncProjTable = false, SyncProjTable _syncProjTable = null)
        #{
        #    #ProjServer
        #    SyncProjTable syncProjTable, syncProjTableSameName;
        #    SyncWrkCtrTable syncWrkCtrTable;
        #    HcmWorker  hcmWorker;
        #    SyncApp syncApp;
        #    ProjTable projTableSameName;
        #    UserId        userId;
        #
        #    if(_syncProjTable == null)
        #    {
        #        select * from syncProjTable where syncProjTable.ProjId == _projTable.ProjId
        #            join syncApp where syncApp.AppId == syncProjTable.AppId
        #                && syncApp.AppType == SyncAppType::ProjectServer;
        #    }
        #    else
        #    {
        #        syncProjTable = _syncProjTable;
        #    }
        #
        #    if(syncProjTable || _newSyncProjTable)
        #    {
        #        // Check for a blank project name being integrated to project server
        #        if(_projTable.Name == '')
        #        {
        #            // The name of the project %1 cannot be blank for project server integration
        #            checkFailed(strFmt("@SYS123418", _projTable.ProjId));
        #            return false;
        #        }
        #
        #        // Check for invalid chars in the project name being integrated to project server
        #        if(strFind(_projTable.Name, #ProjServerInvalidChars, 1, 999) > 0)
        #        {
        #            // The name of the project  %1 is invalid for project server integration
        #            checkFailed(strFmt("@SYS110257", _projTable.ProjId, #ProjServerInvalidChars));
        #            return false;
        #        }
        #
        #        // Check that an integrated project with the same name as this integrated project being updated does not exist
        #        select projTableSameName
        #            where projTableSameName.Name == _projTable.Name && projTableSameName.ProjId != _projTable.ProjId
        #        join syncProjTableSameName
        #            where syncProjTableSameName.ProjId == projTableSameName.ProjId
        #        join AppType from syncApp
        #            where syncApp.AppId == syncProjTableSameName.AppId && syncApp.AppType == SyncAppType::ProjectServer;
        #        if(projTableSameName)
        #        {
        #            // Project %1 cannot be updated. A project with the same name has already been integrated to project server.
        #            // Project server does not allow more than one project with the same name.
        #            checkFailed(strFmt("@SYS113506", _projTable.ProjId));
        #            return false;
        #        }
        #
        #        // If the project is being integrated
        #        if(_newSyncProjTable)
        #        {
        #            // Check that a Project manger is entered for the project
        #            if(_projTable.WorkerResponsible == 0)
        #            {
        #                // The project manager for the project %1 must be selected for the project to integrate to project server
        #                checkFailed(strFmt("@SYS126701", _projTable.ProjId));
        #                return false;
        #            }
        #
        #            // Check that the project manager is a valid Ax User
        #            userId = DirPersonUser::worker2UserId(_projTable.WorkerResponsible);
        #            if(!userId)
        #            {
        #                // The project manager for project %1 must be an Ax user in order to integrate the project to project server
        #                checkFailed(strFmt("@SYS126709", _projTable.ProjId));
        #                return false;
        #            }
        #
        #
        #            // Check that the project manager is an integrated resource to the same project server as the project
        #            select syncWrkCtrTable join PersonnelNumber, RecId from hcmWorker
        #                where syncWrkCtrTable.WrkCtrId == hcmWorker.PersonnelNumber &&
        #                    ( syncWrkCtrTable.AppId == _syncProjTable.AppId || syncWrkCtrTable.AppId == syncProjTable.AppId) &&
        #                    hcmWorker.RecId == _projTable.WorkerResponsible;
        #            if(!syncWrkCtrTable)
        #            {
        #                // The project manager for the project %1 must be an integrated employee to the project server %2
        #                checkFailed(strFmt("@SYS126702", _projTable.ProjId, syncProjTable.AppId));
        #                return false;
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: END
